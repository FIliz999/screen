
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08004f3c  08004f3c  00005f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080051ac  080051ac  000061ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b4  080051b4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080051bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08005224  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005224  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c018  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227b  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00015330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a8  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e6  00000000  00000000  00016740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f400  00000000  00000000  0002eb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5c0  00000000  00000000  0003df26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd4e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d8  00000000  00000000  000cd52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d0c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f24 	.word	0x08004f24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004f24 	.word	0x08004f24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <CLOCK_init>:

#include "clock.h"


void CLOCK_init()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8000586:	f000 fc95 	bl	8000eb4 <ILI9341_Init>
	char timerInit[LENGHT_TIMER];
	TIMER_init(timerInit);
 800058a:	463b      	mov	r3, r7
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f8bf 	bl	8001710 <TIMER_init>
	ILI9341_InitDrawString(timerInit);
 8000592:	463b      	mov	r3, r7
 8000594:	4618      	mov	r0, r3
 8000596:	f000 ff0d 	bl	80013b4 <ILI9341_InitDrawString>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <CLOCK_start>:

void CLOCK_start()
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b086      	sub	sp, #24
 80005a6:	af00      	add	r7, sp, #0
	uint8_t lastMinutes = TIMER_getTime().Minutes;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f89c 	bl	80016e8 <TIMER_getTime>
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	70fb      	strb	r3, [r7, #3]
	while(1)
	{
		if (TIMER_updateTime(&lastMinutes))
 80005b4:	1cfb      	adds	r3, r7, #3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f8ca 	bl	8001750 <TIMER_updateTime>
 80005bc:	e7fa      	b.n	80005b4 <CLOCK_start+0x12>

080005be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f001 f919 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f809 	bl	80005dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f873 	bl	80006b4 <MX_GPIO_Init>

  CLOCK_init();
 80005ce:	f7ff ffd7 	bl	8000580 <CLOCK_init>
  /* USER CODE BEGIN WHILE */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  CLOCK_start();
 80005d2:	f7ff ffe6 	bl	80005a2 <CLOCK_start>
 80005d6:	2300      	movs	r3, #0


  /* USER CODE END 3 */
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fccb 	bl	8003f86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a28      	ldr	r2, [pc, #160]	@ (80006ac <SystemClock_Config+0xd0>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <SystemClock_Config+0xd4>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000638:	230a      	movs	r3, #10
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fc0c 	bl	8001e84 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f895 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fe6e 	bl	8002374 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069e:	f000 f87f 	bl	80007a0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <MX_GPIO_Init+0xe0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a30      	ldr	r2, [pc, #192]	@ (8000794 <MX_GPIO_Init+0xe0>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <MX_GPIO_Init+0xe0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <MX_GPIO_Init+0xe0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <MX_GPIO_Init+0xe0>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <MX_GPIO_Init+0xe0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_GPIO_Init+0xe0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_GPIO_Init+0xe0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_GPIO_Init+0xe0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_GPIO_Init+0xe0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_GPIO_Init+0xe0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_GPIO_Init+0xe0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	4816      	ldr	r0, [pc, #88]	@ (8000798 <MX_GPIO_Init+0xe4>)
 8000740:	f001 fb86 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800074a:	4814      	ldr	r0, [pc, #80]	@ (800079c <MX_GPIO_Init+0xe8>)
 800074c:	f001 fb80 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480c      	ldr	r0, [pc, #48]	@ (8000798 <MX_GPIO_Init+0xe4>)
 8000768:	f001 f9ee 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800076c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_GPIO_Init+0xe8>)
 8000786:	f001 f9df 	bl	8001b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020400 	.word	0x40020400

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ea:	2007      	movs	r0, #7
 80007ec:	f001 f96a 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a0c      	ldr	r2, [pc, #48]	@ (800084c <HAL_RTC_MspInit+0x50>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d111      	bne.n	8000844 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000820:	2302      	movs	r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000828:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ffc0 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800083a:	f7ff ffb1 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <HAL_RTC_MspInit+0x54>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40002800 	.word	0x40002800
 8000850:	42470e3c 	.word	0x42470e3c

08000854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a28      	ldr	r2, [pc, #160]	@ (8000914 <HAL_SPI_MspInit+0xc0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d14a      	bne.n	800090c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a26      	ldr	r2, [pc, #152]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 8000880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b20      	ldr	r3, [pc, #128]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a1f      	ldr	r2, [pc, #124]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <HAL_SPI_MspInit+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008dc:	2306      	movs	r3, #6
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <HAL_SPI_MspInit+0xc8>)
 80008e8:	f001 f92e 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008ec:	2320      	movs	r3, #32
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <HAL_SPI_MspInit+0xcc>)
 8000908:	f001 f91e 	bl	8001b48 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40003c00 	.word	0x40003c00
 8000918:	40023800 	.word	0x40023800
 800091c:	40020800 	.word	0x40020800
 8000920:	40020400 	.word	0x40020400

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <HAL_UART_MspInit+0x84>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12b      	bne.n	800099e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a17      	ldr	r2, [pc, #92]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <HAL_UART_MspInit+0x88>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_UART_MspInit+0x88>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <HAL_UART_MspInit+0x8c>)
 800099a:	f001 f8d5 	bl	8001b48 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	@ 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 ff47 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e00a      	b.n	8000a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a24:	f3af 8000 	nop.w
 8000a28:	4601      	mov	r1, r0
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	60ba      	str	r2, [r7, #8]
 8000a30:	b2ca      	uxtb	r2, r1
 8000a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3301      	adds	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dbf0      	blt.n	8000a24 <_read+0x12>
  }

  return len;
 8000a42:	687b      	ldr	r3, [r7, #4]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	e009      	b.n	8000a72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	60ba      	str	r2, [r7, #8]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fe2c 	bl	80016c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbf1      	blt.n	8000a5e <_write+0x12>
  }
  return len;
 8000a7a:	687b      	ldr	r3, [r7, #4]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_close>:

int _close(int file)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aac:	605a      	str	r2, [r3, #4]
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_isatty>:

int _isatty(int file)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f003 fa82 	bl	8004024 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000084 	.word	0x20000084
 8000b54:	200002b0 	.word	0x200002b0

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000b82:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <MX_SPI3_Init+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000b88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000bc8:	220a      	movs	r2, #10
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_SPI3_Init+0x64>)
 8000bce:	f002 f9ed 	bl	8002fac <HAL_SPI_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f7ff fde2 	bl	80007a0 <Error_Handler>
  }

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000088 	.word	0x20000088
 8000be4:	40003c00 	.word	0x40003c00

08000be8 <LCD_WR_REG>:

static void LCD_WR_REG(uint8_t data)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	DC_L();
 8000bf2:	f000 f8ff 	bl	8000df4 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 8000bf6:	1df9      	adds	r1, r7, #7
 8000bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <LCD_WR_REG+0x30>)
 8000c00:	f002 fa5d 	bl	80030be <HAL_SPI_Transmit>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <LCD_WR_REG+0x26>
		Error_Handler();
 8000c0a:	f7ff fdc9 	bl	80007a0 <Error_Handler>
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000088 	.word	0x20000088

08000c1c <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	DC_H();
 8000c26:	f000 f8f1 	bl	8000e0c <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 8000c2a:	1df9      	adds	r1, r7, #7
 8000c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c30:	2201      	movs	r2, #1
 8000c32:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <LCD_WR_DATA+0x30>)
 8000c34:	f002 fa43 	bl	80030be <HAL_SPI_Transmit>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <LCD_WR_DATA+0x26>
		Error_Handler();
 8000c3e:	f7ff fdaf 	bl	80007a0 <Error_Handler>
	}
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000088 	.word	0x20000088

08000c50 <change>:

static void change(int x, uint8_t time, SPI_HandleTypeDef hspi3)
{
 8000c50:	b082      	sub	sp, #8
 8000c52:	b5b0      	push	{r4, r5, r7, lr}
 8000c54:	b098      	sub	sp, #96	@ 0x60
 8000c56:	af14      	add	r7, sp, #80	@ 0x50
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	f107 0020 	add.w	r0, r7, #32
 8000c5e:	e880 000c 	stmia.w	r0, {r2, r3}
 8000c62:	460b      	mov	r3, r1
 8000c64:	70fb      	strb	r3, [r7, #3]
	char caractere = time + '0';  // Conversion en caractère
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	3330      	adds	r3, #48	@ 0x30
 8000c6a:	73fb      	strb	r3, [r7, #15]
	ILI9341_DrawChar(x, caractere, hspi3);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	b29c      	uxth	r4, r3
 8000c70:	7bfd      	ldrb	r5, [r7, #15]
 8000c72:	4668      	mov	r0, sp
 8000c74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c78:	2250      	movs	r2, #80	@ 0x50
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f003 f9ff 	bl	800407e <memcpy>
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	cb0c      	ldmia	r3, {r2, r3}
 8000c86:	4629      	mov	r1, r5
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f000 fafd 	bl	8001288 <ILI9341_DrawChar>
}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000c98:	b002      	add	sp, #8
 8000c9a:	4770      	bx	lr

08000c9c <ILI9341_WritePixelsFullHeight>:


static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	b09d      	sub	sp, #116	@ 0x74
 8000ca0:	af16      	add	r7, sp, #88	@ 0x58
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	81fb      	strh	r3, [r7, #14]
 8000caa:	460b      	mov	r3, r1
 8000cac:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e034      	b.n	8000d1e <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	e02a      	b.n	8000d10 <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000cc0:	fb12 f303 	smulbb	r3, r2, r3
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	b29c      	uxth	r4, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000cda:	fb12 f303 	smulbb	r3, r2, r3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	89bb      	ldrh	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b29d      	uxth	r5, r3
 8000cee:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 8000cf0:	4668      	mov	r0, sp
 8000cf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cf6:	2254      	movs	r2, #84	@ 0x54
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f003 f9c0 	bl	800407e <memcpy>
 8000cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d00:	4632      	mov	r2, r6
 8000d02:	4629      	mov	r1, r5
 8000d04:	4620      	mov	r0, r4
 8000d06:	f000 fa4c 	bl	80011a2 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbd0      	blt.n	8000cba <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbc6      	blt.n	8000cb4 <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d30 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8000d30:	b084      	sub	sp, #16
 8000d32:	b590      	push	{r4, r7, lr}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4604      	mov	r4, r0
 8000d3a:	f107 001c 	add.w	r0, r7, #28
 8000d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d42:	4623      	mov	r3, r4
 8000d44:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d827      	bhi.n	8000d9c <LCD_direction+0x6c>
 8000d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d54 <LCD_direction+0x24>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d73 	.word	0x08000d73
 8000d5c:	08000d81 	.word	0x08000d81
 8000d60:	08000d8f 	.word	0x08000d8f
	case ROTATE_0:
		LCD_WR_REG(0x36);
 8000d64:	2036      	movs	r0, #54	@ 0x36
 8000d66:	f7ff ff3f 	bl	8000be8 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8000d6a:	2048      	movs	r0, #72	@ 0x48
 8000d6c:	f7ff ff56 	bl	8000c1c <LCD_WR_DATA>
		break;
 8000d70:	e014      	b.n	8000d9c <LCD_direction+0x6c>
	case ROTATE_90:
		LCD_WR_REG(0x36);
 8000d72:	2036      	movs	r0, #54	@ 0x36
 8000d74:	f7ff ff38 	bl	8000be8 <LCD_WR_REG>
		LCD_WR_DATA(0x28);
 8000d78:	2028      	movs	r0, #40	@ 0x28
 8000d7a:	f7ff ff4f 	bl	8000c1c <LCD_WR_DATA>
		break;
 8000d7e:	e00d      	b.n	8000d9c <LCD_direction+0x6c>
	case ROTATE_180:
		LCD_WR_REG(0x36);
 8000d80:	2036      	movs	r0, #54	@ 0x36
 8000d82:	f7ff ff31 	bl	8000be8 <LCD_WR_REG>
		LCD_WR_DATA(0x88);
 8000d86:	2088      	movs	r0, #136	@ 0x88
 8000d88:	f7ff ff48 	bl	8000c1c <LCD_WR_DATA>
		break;
 8000d8c:	e006      	b.n	8000d9c <LCD_direction+0x6c>
	case ROTATE_270:
		LCD_WR_REG(0x36);
 8000d8e:	2036      	movs	r0, #54	@ 0x36
 8000d90:	f7ff ff2a 	bl	8000be8 <LCD_WR_REG>
		LCD_WR_DATA(0xE8);
 8000d94:	20e8      	movs	r0, #232	@ 0xe8
 8000d96:	f7ff ff41 	bl	8000c1c <LCD_WR_DATA>
		break;
 8000d9a:	bf00      	nop
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000da6:	b004      	add	sp, #16
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <RESET_L>:

static void RESET_L(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2180      	movs	r1, #128	@ 0x80
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <RESET_L+0x14>)
 8000db6:	f001 f84b 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <RESET_H>:

static void RESET_H(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <RESET_H+0x14>)
 8000dce:	f001 f83f 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40020400 	.word	0x40020400

08000ddc <CS_L>:

static void CS_L(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <CS_L+0x14>)
 8000de6:	f001 f833 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40020400 	.word	0x40020400

08000df4 <DC_L>:

static void DC_L(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dfe:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <DC_L+0x14>)
 8000e00:	f001 f826 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40020400 	.word	0x40020400

08000e0c <DC_H>:

static void DC_H(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e16:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DC_H+0x14>)
 8000e18:	f001 f81a 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400

08000e24 <LED_H>:

static void LED_H(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <blackFond>:

static void blackFond(SPI_HandleTypeDef hspi3){
 8000e32:	b084      	sub	sp, #16
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b098      	sub	sp, #96	@ 0x60
 8000e38:	af16      	add	r7, sp, #88	@ 0x58
 8000e3a:	f107 0418 	add.w	r4, r7, #24
 8000e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 8000e42:	466b      	mov	r3, sp
 8000e44:	f107 0118 	add.w	r1, r7, #24
 8000e48:	2258      	movs	r2, #88	@ 0x58
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 f917 	bl	800407e <memcpy>
 8000e50:	f240 133f 	movw	r3, #319	@ 0x13f
 8000e54:	22ef      	movs	r2, #239	@ 0xef
 8000e56:	2100      	movs	r1, #0
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 f959 	bl	8001110 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	e01a      	b.n	8000e9a <blackFond+0x68>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	80bb      	strh	r3, [r7, #4]
 8000e68:	e011      	b.n	8000e8e <blackFond+0x5c>
			ILI9341_WritePixel(x, y, 0x0000, hspi3);
 8000e6a:	88bd      	ldrh	r5, [r7, #4]
 8000e6c:	88fc      	ldrh	r4, [r7, #6]
 8000e6e:	4668      	mov	r0, sp
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2254      	movs	r2, #84	@ 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	f003 f901 	bl	800407e <memcpy>
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4629      	mov	r1, r5
 8000e82:	4620      	mov	r0, r4
 8000e84:	f000 f98d 	bl	80011a2 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8000e88:	88bb      	ldrh	r3, [r7, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	2bef      	cmp	r3, #239	@ 0xef
 8000e92:	d9ea      	bls.n	8000e6a <blackFond+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	3301      	adds	r3, #1
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ea0:	d3e0      	bcc.n	8000e64 <blackFond+0x32>
		}
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000eae:	b004      	add	sp, #16
 8000eb0:	4770      	bx	lr
	...

08000eb4 <ILI9341_Init>:

// Initialization
void ILI9341_Init()
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b095      	sub	sp, #84	@ 0x54
 8000eb8:	af14      	add	r7, sp, #80	@ 0x50
	MX_SPI3_Init();
 8000eba:	f7ff fe5f 	bl	8000b7c <MX_SPI3_Init>
	ILI9341_Reset();
 8000ebe:	f000 f9b0 	bl	8001222 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000ec2:	4c92      	ldr	r4, [pc, #584]	@ (800110c <ILI9341_Init+0x258>)
 8000ec4:	4668      	mov	r0, sp
 8000ec6:	f104 0310 	add.w	r3, r4, #16
 8000eca:	2248      	movs	r2, #72	@ 0x48
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f003 f8d6 	bl	800407e <memcpy>
 8000ed2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ed6:	f000 f9b6 	bl	8001246 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB);
 8000eda:	20cb      	movs	r0, #203	@ 0xcb
 8000edc:	f7ff fe84 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000ee0:	2039      	movs	r0, #57	@ 0x39
 8000ee2:	f7ff fe9b 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000ee6:	202c      	movs	r0, #44	@ 0x2c
 8000ee8:	f7ff fe98 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fe95 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000ef2:	2034      	movs	r0, #52	@ 0x34
 8000ef4:	f7ff fe92 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f7ff fe8f 	bl	8000c1c <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF);
 8000efe:	20cf      	movs	r0, #207	@ 0xcf
 8000f00:	f7ff fe72 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fe89 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f0a:	20c1      	movs	r0, #193	@ 0xc1
 8000f0c:	f7ff fe86 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 8000f10:	2030      	movs	r0, #48	@ 0x30
 8000f12:	f7ff fe83 	bl	8000c1c <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8);
 8000f16:	20e8      	movs	r0, #232	@ 0xe8
 8000f18:	f7ff fe66 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000f1c:	2085      	movs	r0, #133	@ 0x85
 8000f1e:	f7ff fe7d 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff fe7a 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x78);
 8000f28:	2078      	movs	r0, #120	@ 0x78
 8000f2a:	f7ff fe77 	bl	8000c1c <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA);
 8000f2e:	20ea      	movs	r0, #234	@ 0xea
 8000f30:	f7ff fe5a 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fe71 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fe6e 	bl	8000c1c <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED);
 8000f40:	20ed      	movs	r0, #237	@ 0xed
 8000f42:	f7ff fe51 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f7ff fe68 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f7ff fe65 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8000f52:	2012      	movs	r0, #18
 8000f54:	f7ff fe62 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x81);
 8000f58:	2081      	movs	r0, #129	@ 0x81
 8000f5a:	f7ff fe5f 	bl	8000c1c <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7);
 8000f5e:	20f7      	movs	r0, #247	@ 0xf7
 8000f60:	f7ff fe42 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000f64:	2020      	movs	r0, #32
 8000f66:	f7ff fe59 	bl	8000c1c <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0);
 8000f6a:	20c0      	movs	r0, #192	@ 0xc0
 8000f6c:	f7ff fe3c 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f7ff fe53 	bl	8000c1c <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1);
 8000f76:	20c1      	movs	r0, #193	@ 0xc1
 8000f78:	f7ff fe36 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f7ff fe4d 	bl	8000c1c <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5);
 8000f82:	20c5      	movs	r0, #197	@ 0xc5
 8000f84:	f7ff fe30 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x3E);
 8000f88:	203e      	movs	r0, #62	@ 0x3e
 8000f8a:	f7ff fe47 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000f8e:	2028      	movs	r0, #40	@ 0x28
 8000f90:	f7ff fe44 	bl	8000c1c <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7);
 8000f94:	20c7      	movs	r0, #199	@ 0xc7
 8000f96:	f7ff fe27 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x86);
 8000f9a:	2086      	movs	r0, #134	@ 0x86
 8000f9c:	f7ff fe3e 	bl	8000c1c <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36);
 8000fa0:	2036      	movs	r0, #54	@ 0x36
 8000fa2:	f7ff fe21 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8000fa6:	2048      	movs	r0, #72	@ 0x48
 8000fa8:	f7ff fe38 	bl	8000c1c <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A);
 8000fac:	203a      	movs	r0, #58	@ 0x3a
 8000fae:	f7ff fe1b 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 8000fb2:	2055      	movs	r0, #85	@ 0x55
 8000fb4:	f7ff fe32 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000fb8:	20b1      	movs	r0, #177	@ 0xb1
 8000fba:	f7ff fe15 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fe2c 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 8000fc4:	2018      	movs	r0, #24
 8000fc6:	f7ff fe29 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x20); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6);
 8000fca:	20b6      	movs	r0, #182	@ 0xb6
 8000fcc:	f7ff fe0c 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 8000fd0:	2008      	movs	r0, #8
 8000fd2:	f7ff fe23 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 8000fd6:	2082      	movs	r0, #130	@ 0x82
 8000fd8:	f7ff fe20 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 8000fdc:	2027      	movs	r0, #39	@ 0x27
 8000fde:	f7ff fe1d 	bl	8000c1c <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2);
 8000fe2:	20f2      	movs	r0, #242	@ 0xf2
 8000fe4:	f7ff fe00 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fe17 	bl	8000c1c <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26); //Gamma set
 8000fee:	2026      	movs	r0, #38	@ 0x26
 8000ff0:	f7ff fdfa 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 	//Gamma Curve (G2.2)
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fe11 	bl	8000c1c <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0);
 8000ffa:	20e0      	movs	r0, #224	@ 0xe0
 8000ffc:	f7ff fdf4 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001000:	200f      	movs	r0, #15
 8001002:	f7ff fe0b 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001006:	2031      	movs	r0, #49	@ 0x31
 8001008:	f7ff fe08 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800100c:	202b      	movs	r0, #43	@ 0x2b
 800100e:	f7ff fe05 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8001012:	200c      	movs	r0, #12
 8001014:	f7ff fe02 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001018:	200e      	movs	r0, #14
 800101a:	f7ff fdff 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800101e:	2008      	movs	r0, #8
 8001020:	f7ff fdfc 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x4E);
 8001024:	204e      	movs	r0, #78	@ 0x4e
 8001026:	f7ff fdf9 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xF1);
 800102a:	20f1      	movs	r0, #241	@ 0xf1
 800102c:	f7ff fdf6 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8001030:	2037      	movs	r0, #55	@ 0x37
 8001032:	f7ff fdf3 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001036:	2007      	movs	r0, #7
 8001038:	f7ff fdf0 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800103c:	2010      	movs	r0, #16
 800103e:	f7ff fded 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001042:	2003      	movs	r0, #3
 8001044:	f7ff fdea 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001048:	200e      	movs	r0, #14
 800104a:	f7ff fde7 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 800104e:	2009      	movs	r0, #9
 8001050:	f7ff fde4 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fde1 	bl	8000c1c <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1);
 800105a:	20e1      	movs	r0, #225	@ 0xe1
 800105c:	f7ff fdc4 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fddb 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001066:	200e      	movs	r0, #14
 8001068:	f7ff fdd8 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 800106c:	2014      	movs	r0, #20
 800106e:	f7ff fdd5 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001072:	2003      	movs	r0, #3
 8001074:	f7ff fdd2 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001078:	2011      	movs	r0, #17
 800107a:	f7ff fdcf 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fdcc 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001084:	2031      	movs	r0, #49	@ 0x31
 8001086:	f7ff fdc9 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800108a:	20c1      	movs	r0, #193	@ 0xc1
 800108c:	f7ff fdc6 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 8001090:	2048      	movs	r0, #72	@ 0x48
 8001092:	f7ff fdc3 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001096:	2008      	movs	r0, #8
 8001098:	f7ff fdc0 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800109c:	200f      	movs	r0, #15
 800109e:	f7ff fdbd 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 80010a2:	200c      	movs	r0, #12
 80010a4:	f7ff fdba 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80010a8:	2031      	movs	r0, #49	@ 0x31
 80010aa:	f7ff fdb7 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 80010ae:	2036      	movs	r0, #54	@ 0x36
 80010b0:	f7ff fdb4 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010b4:	200f      	movs	r0, #15
 80010b6:	f7ff fdb1 	bl	8000c1c <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11);
 80010ba:	2011      	movs	r0, #17
 80010bc:	f7ff fd94 	bl	8000be8 <LCD_WR_REG>

	HAL_Delay(120);
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f000 fc0b 	bl	80018dc <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29);
 80010c6:	2029      	movs	r0, #41	@ 0x29
 80010c8:	f7ff fd8e 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(0x2C);
 80010cc:	202c      	movs	r0, #44	@ 0x2c
 80010ce:	f7ff fda5 	bl	8000c1c <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 80010d2:	4c0e      	ldr	r4, [pc, #56]	@ (800110c <ILI9341_Init+0x258>)
 80010d4:	4668      	mov	r0, sp
 80010d6:	f104 030c 	add.w	r3, r4, #12
 80010da:	224c      	movs	r2, #76	@ 0x4c
 80010dc:	4619      	mov	r1, r3
 80010de:	f002 ffce 	bl	800407e <memcpy>
 80010e2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80010e6:	2003      	movs	r0, #3
 80010e8:	f7ff fe22 	bl	8000d30 <LCD_direction>

	blackFond(hspi3);
 80010ec:	4c07      	ldr	r4, [pc, #28]	@ (800110c <ILI9341_Init+0x258>)
 80010ee:	4668      	mov	r0, sp
 80010f0:	f104 0310 	add.w	r3, r4, #16
 80010f4:	2248      	movs	r2, #72	@ 0x48
 80010f6:	4619      	mov	r1, r3
 80010f8:	f002 ffc1 	bl	800407e <memcpy>
 80010fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001100:	f7ff fe97 	bl	8000e32 <blackFond>

}
 8001104:	bf00      	nop
 8001106:	3704      	adds	r7, #4
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	20000088 	.word	0x20000088

08001110 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4604      	mov	r4, r0
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4623      	mov	r3, r4
 8001120:	80fb      	strh	r3, [r7, #6]
 8001122:	4603      	mov	r3, r0
 8001124:	80bb      	strh	r3, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	807b      	strh	r3, [r7, #2]
 800112a:	4613      	mov	r3, r2
 800112c:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a);
 800112e:	202a      	movs	r0, #42	@ 0x2a
 8001130:	f7ff fd5a 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fd6d 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd68 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8);
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fd61 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x);
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fd5c 	bl	8000c1c <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 8001164:	202b      	movs	r0, #43	@ 0x2b
 8001166:	f7ff fd3f 	bl	8000be8 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8);
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fd52 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y);
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd4d 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8);
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	b29b      	uxth	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd46 	bl	8000c1c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y);
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd41 	bl	8000c1c <LCD_WR_DATA>

}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}

080011a2 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 80011a2:	b082      	sub	sp, #8
 80011a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a8:	b09a      	sub	sp, #104	@ 0x68
 80011aa:	af16      	add	r7, sp, #88	@ 0x58
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 80011ca:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80011ce:	88fe      	ldrh	r6, [r7, #6]
 80011d0:	88bd      	ldrh	r5, [r7, #4]
 80011d2:	88fc      	ldrh	r4, [r7, #6]
 80011d4:	4668      	mov	r0, sp
 80011d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011da:	2258      	movs	r2, #88	@ 0x58
 80011dc:	4619      	mov	r1, r3
 80011de:	f002 ff4e 	bl	800407e <memcpy>
 80011e2:	4643      	mov	r3, r8
 80011e4:	4632      	mov	r2, r6
 80011e6:	4629      	mov	r1, r5
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ff91 	bl	8001110 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c);
 80011ee:	202c      	movs	r0, #44	@ 0x2c
 80011f0:	f7ff fcfa 	bl	8000be8 <LCD_WR_REG>
	DC_H();
 80011f4:	f7ff fe0a 	bl	8000e0c <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 80011f8:	f107 010c 	add.w	r1, r7, #12
 80011fc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001204:	2202      	movs	r2, #2
 8001206:	f001 ff5a 	bl	80030be <HAL_SPI_Transmit>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <ILI9341_WritePixel+0x72>
		Error_Handler();
 8001210:	f7ff fac6 	bl	80007a0 <Error_Handler>
	}
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800121e:	b002      	add	sp, #8
 8001220:	4770      	bx	lr

08001222 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
	RESET_L();
 8001226:	f7ff fdc1 	bl	8000dac <RESET_L>
	HAL_Delay(100);
 800122a:	2064      	movs	r0, #100	@ 0x64
 800122c:	f000 fb56 	bl	80018dc <HAL_Delay>
	RESET_H();
 8001230:	f7ff fdc8 	bl	8000dc4 <RESET_H>
	HAL_Delay(100);
 8001234:	2064      	movs	r0, #100	@ 0x64
 8001236:	f000 fb51 	bl	80018dc <HAL_Delay>
	CS_L();
 800123a:	f7ff fdcf 	bl	8000ddc <CS_L>
	LED_H();
 800123e:	f7ff fdf1 	bl	8000e24 <LED_H>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 8001246:	b084      	sub	sp, #16
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	f107 0c10 	add.w	ip, r7, #16
 8001252:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800125a:	f7ff fdcb 	bl	8000df4 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 800125e:	1df9      	adds	r1, r7, #7
 8001260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001264:	2201      	movs	r2, #1
 8001266:	f107 0010 	add.w	r0, r7, #16
 800126a:	f001 ff28 	bl	80030be <HAL_SPI_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ILI9341_SoftReset+0x32>
		Error_Handler();
 8001274:	f7ff fa94 	bl	80007a0 <Error_Handler>
	}
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001282:	b004      	add	sp, #16
 8001284:	4770      	bx	lr
	...

08001288 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, char c, SPI_HandleTypeDef hspi3) {
 8001288:	b082      	sub	sp, #8
 800128a:	b5b0      	push	{r4, r5, r7, lr}
 800128c:	b0a2      	sub	sp, #136	@ 0x88
 800128e:	af1a      	add	r7, sp, #104	@ 0x68
 8001290:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001294:	e884 000c 	stmia.w	r4, {r2, r3}
 8001298:	4603      	mov	r3, r0
 800129a:	80fb      	strh	r3, [r7, #6]
 800129c:	460b      	mov	r3, r1
 800129e:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) {
 80012a0:	797b      	ldrb	r3, [r7, #5]
 80012a2:	2b1f      	cmp	r3, #31
 80012a4:	d902      	bls.n	80012ac <ILI9341_DrawChar+0x24>
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80012aa:	d901      	bls.n	80012b0 <ILI9341_DrawChar+0x28>
	        c = '?'; // Si le caractère n'est pas supporté
 80012ac:	233f      	movs	r3, #63	@ 0x3f
 80012ae:	717b      	strb	r3, [r7, #5]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	f1a3 0220 	sub.w	r2, r3, #32
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	4a3c      	ldr	r2, [pc, #240]	@ (80013b0 <ILI9341_DrawChar+0x128>)
 80012be:	4413      	add	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 80012c2:	2307      	movs	r3, #7
 80012c4:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 80012c6:	231e      	movs	r3, #30
 80012c8:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e041      	b.n	8001354 <ILI9341_DrawChar+0xcc>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	e038      	b.n	8001348 <ILI9341_DrawChar+0xc0>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	fa42 f303 	asr.w	r3, r2, r3
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <ILI9341_DrawChar+0x92>
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0xFFFF, hspi3);
 80012ee:	88fc      	ldrh	r4, [r7, #6]
 80012f0:	ab03      	add	r3, sp, #12
 80012f2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80012f6:	2258      	movs	r2, #88	@ 0x58
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fec0 	bl	800407e <memcpy>
 80012fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	89bb      	ldrh	r3, [r7, #12]
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	2114      	movs	r1, #20
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fcc2 	bl	8000c9c <ILI9341_WritePixelsFullHeight>
 8001318:	e013      	b.n	8001342 <ILI9341_DrawChar+0xba>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0x0000, hspi3);
 800131a:	88fc      	ldrh	r4, [r7, #6]
 800131c:	ab03      	add	r3, sp, #12
 800131e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001322:	2258      	movs	r2, #88	@ 0x58
 8001324:	4618      	mov	r0, r3
 8001326:	f002 feaa 	bl	800407e <memcpy>
 800132a:	2300      	movs	r3, #0
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	89fb      	ldrh	r3, [r7, #14]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	2114      	movs	r1, #20
 800133c:	4620      	mov	r0, r4
 800133e:	f7ff fcad 	bl	8000c9c <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3301      	adds	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b04      	cmp	r3, #4
 800134c:	ddc3      	ble.n	80012d6 <ILI9341_DrawChar+0x4e>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b07      	cmp	r3, #7
 8001358:	ddba      	ble.n	80012d0 <ILI9341_DrawChar+0x48>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	e01a      	b.n	8001396 <ILI9341_DrawChar+0x10e>
        ILI9341_WritePixel(x + 5, Y_CHAR + j, 0x0000, hspi3);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	3305      	adds	r3, #5
 8001364:	b29c      	uxth	r4, r3
 8001366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136a:	b29b      	uxth	r3, r3
 800136c:	3314      	adds	r3, #20
 800136e:	b29d      	uxth	r5, r3
 8001370:	4668      	mov	r0, sp
 8001372:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001376:	2254      	movs	r2, #84	@ 0x54
 8001378:	4619      	mov	r1, r3
 800137a:	f002 fe80 	bl	800407e <memcpy>
 800137e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001380:	2200      	movs	r2, #0
 8001382:	4629      	mov	r1, r5
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff ff0c 	bl	80011a2 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 800138a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	75fb      	strb	r3, [r7, #23]
 8001396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800139a:	2b06      	cmp	r3, #6
 800139c:	dde0      	ble.n	8001360 <ILI9341_DrawChar+0xd8>
    }
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013aa:	b002      	add	sp, #8
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	08004f98 	.word	0x08004f98

080013b4 <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str) {
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	b099      	sub	sp, #100	@ 0x64
 80013b8:	af14      	add	r7, sp, #80	@ 0x50
 80013ba:	6078      	str	r0, [r7, #4]
	int cmpt = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
	uint16_t x = MARGE_NUMBERS_X;
 80013c0:	2305      	movs	r3, #5
 80013c2:	817b      	strh	r3, [r7, #10]
	if (strlen(str) == 5)
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7fe ff0b 	bl	80001e0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d127      	bne.n	8001420 <ILI9341_InitDrawString+0x6c>
	{
		while (*str)
 80013d0:	e021      	b.n	8001416 <ILI9341_InitDrawString+0x62>
		{
			if (cmpt != 0){
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <ILI9341_InitDrawString+0x34>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	0192      	lsls	r2, r2, #6
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3305      	adds	r3, #5
 80013e6:	817b      	strh	r3, [r7, #10]
			}
			ILI9341_DrawChar(x, *str, hspi3);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	781e      	ldrb	r6, [r3, #0]
 80013ec:	4c10      	ldr	r4, [pc, #64]	@ (8001430 <ILI9341_InitDrawString+0x7c>)
 80013ee:	897d      	ldrh	r5, [r7, #10]
 80013f0:	4668      	mov	r0, sp
 80013f2:	f104 0308 	add.w	r3, r4, #8
 80013f6:	2250      	movs	r2, #80	@ 0x50
 80013f8:	4619      	mov	r1, r3
 80013fa:	f002 fe40 	bl	800407e <memcpy>
 80013fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001402:	4631      	mov	r1, r6
 8001404:	4628      	mov	r0, r5
 8001406:	f7ff ff3f 	bl	8001288 <ILI9341_DrawChar>
			str++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1d9      	bne.n	80013d2 <ILI9341_InitDrawString+0x1e>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 800141e:	e002      	b.n	8001426 <ILI9341_InitDrawString+0x72>
		printf("Erreur le string est composé de plus de 5 éléments");
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <ILI9341_InitDrawString+0x80>)
 8001422:	f002 fd3b 	bl	8003e9c <iprintf>
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142e:	bf00      	nop
 8001430:	20000088 	.word	0x20000088
 8001434:	08004f3c 	.word	0x08004f3c

08001438 <ILI9341_ChangeTime>:
/*
 * Methode de changement de temps
 * Il y a deux parties, une pour les heures et l'autre pour les minutes.
 */
void ILI9341_ChangeTime(RTC_TimeTypeDef Time)
{
 8001438:	b084      	sub	sp, #16
 800143a:	b5b0      	push	{r4, r5, r7, lr}
 800143c:	b096      	sub	sp, #88	@ 0x58
 800143e:	af14      	add	r7, sp, #80	@ 0x50
 8001440:	f107 0418 	add.w	r4, r7, #24
 8001444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Time.Minutes == 00)
 8001448:	7e7b      	ldrb	r3, [r7, #25]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d15f      	bne.n	800150e <ILI9341_ChangeTime+0xd6>
	{
		uint8_t diz = Time.Hours / 10; // Get the dizaines
 800144e:	7e3b      	ldrb	r3, [r7, #24]
 8001450:	4a54      	ldr	r2, [pc, #336]	@ (80015a4 <ILI9341_ChangeTime+0x16c>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	717b      	strb	r3, [r7, #5]
		uint8_t unite = Time.Hours % 10; // get unités
 800145a:	7e3a      	ldrb	r2, [r7, #24]
 800145c:	4b51      	ldr	r3, [pc, #324]	@ (80015a4 <ILI9341_ChangeTime+0x16c>)
 800145e:	fba3 1302 	umull	r1, r3, r3, r2
 8001462:	08d9      	lsrs	r1, r3, #3
 8001464:	460b      	mov	r3, r1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	713b      	strb	r3, [r7, #4]
		if (unite != 0)
 8001470:	793b      	ldrb	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00f      	beq.n	8001496 <ILI9341_ChangeTime+0x5e>
		{
			change(X_UNIT_HOUR, unite, hspi3);
 8001476:	4c4c      	ldr	r4, [pc, #304]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 8001478:	793d      	ldrb	r5, [r7, #4]
 800147a:	4668      	mov	r0, sp
 800147c:	f104 0308 	add.w	r3, r4, #8
 8001480:	2250      	movs	r2, #80	@ 0x50
 8001482:	4619      	mov	r1, r3
 8001484:	f002 fdfb 	bl	800407e <memcpy>
 8001488:	e894 000c 	ldmia.w	r4, {r2, r3}
 800148c:	4629      	mov	r1, r5
 800148e:	2044      	movs	r0, #68	@ 0x44
 8001490:	f7ff fbde 	bl	8000c50 <change>
 8001494:	e01d      	b.n	80014d2 <ILI9341_ChangeTime+0x9a>
		}
		else
		{
			change(X_DIX_HOUR, diz, hspi3);
 8001496:	4c44      	ldr	r4, [pc, #272]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 8001498:	797d      	ldrb	r5, [r7, #5]
 800149a:	4668      	mov	r0, sp
 800149c:	f104 0308 	add.w	r3, r4, #8
 80014a0:	2250      	movs	r2, #80	@ 0x50
 80014a2:	4619      	mov	r1, r3
 80014a4:	f002 fdeb 	bl	800407e <memcpy>
 80014a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014ac:	4629      	mov	r1, r5
 80014ae:	2005      	movs	r0, #5
 80014b0:	f7ff fbce 	bl	8000c50 <change>
			change(X_UNIT_HOUR, unite, hspi3);
 80014b4:	4c3c      	ldr	r4, [pc, #240]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 80014b6:	793d      	ldrb	r5, [r7, #4]
 80014b8:	4668      	mov	r0, sp
 80014ba:	f104 0308 	add.w	r3, r4, #8
 80014be:	2250      	movs	r2, #80	@ 0x50
 80014c0:	4619      	mov	r1, r3
 80014c2:	f002 fddc 	bl	800407e <memcpy>
 80014c6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014ca:	4629      	mov	r1, r5
 80014cc:	2044      	movs	r0, #68	@ 0x44
 80014ce:	f7ff fbbf 	bl	8000c50 <change>
		}
		// Il faut modifier l'unité et la dizaine des minutes
		change(X_DIX_MIN, 0, hspi3);
 80014d2:	4c35      	ldr	r4, [pc, #212]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 80014d4:	4668      	mov	r0, sp
 80014d6:	f104 0308 	add.w	r3, r4, #8
 80014da:	2250      	movs	r2, #80	@ 0x50
 80014dc:	4619      	mov	r1, r3
 80014de:	f002 fdce 	bl	800407e <memcpy>
 80014e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014e6:	2100      	movs	r1, #0
 80014e8:	20c2      	movs	r0, #194	@ 0xc2
 80014ea:	f7ff fbb1 	bl	8000c50 <change>
		change(X_UNIT_MIN, 0, hspi3);
 80014ee:	4c2e      	ldr	r4, [pc, #184]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 80014f0:	4668      	mov	r0, sp
 80014f2:	f104 0308 	add.w	r3, r4, #8
 80014f6:	2250      	movs	r2, #80	@ 0x50
 80014f8:	4619      	mov	r1, r3
 80014fa:	f002 fdc0 	bl	800407e <memcpy>
 80014fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001502:	2100      	movs	r1, #0
 8001504:	f240 1001 	movw	r0, #257	@ 0x101
 8001508:	f7ff fba2 	bl	8000c50 <change>
			change(X_DIX_MIN, diz, hspi3);
			change(X_UNIT_MIN, unite, hspi3);
		}

	}
}
 800150c:	e043      	b.n	8001596 <ILI9341_ChangeTime+0x15e>
		uint8_t diz = Time.Minutes / 10; // Get the dizaines
 800150e:	7e7b      	ldrb	r3, [r7, #25]
 8001510:	4a24      	ldr	r2, [pc, #144]	@ (80015a4 <ILI9341_ChangeTime+0x16c>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	71fb      	strb	r3, [r7, #7]
		uint8_t unite = Time.Minutes % 10; // get unités
 800151a:	7e7a      	ldrb	r2, [r7, #25]
 800151c:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <ILI9341_ChangeTime+0x16c>)
 800151e:	fba3 1302 	umull	r1, r3, r3, r2
 8001522:	08d9      	lsrs	r1, r3, #3
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	71bb      	strb	r3, [r7, #6]
		if (unite != 0)
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d010      	beq.n	8001558 <ILI9341_ChangeTime+0x120>
			change(X_UNIT_MIN, unite, hspi3);
 8001536:	4c1c      	ldr	r4, [pc, #112]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 8001538:	79bd      	ldrb	r5, [r7, #6]
 800153a:	4668      	mov	r0, sp
 800153c:	f104 0308 	add.w	r3, r4, #8
 8001540:	2250      	movs	r2, #80	@ 0x50
 8001542:	4619      	mov	r1, r3
 8001544:	f002 fd9b 	bl	800407e <memcpy>
 8001548:	e894 000c 	ldmia.w	r4, {r2, r3}
 800154c:	4629      	mov	r1, r5
 800154e:	f240 1001 	movw	r0, #257	@ 0x101
 8001552:	f7ff fb7d 	bl	8000c50 <change>
}
 8001556:	e01e      	b.n	8001596 <ILI9341_ChangeTime+0x15e>
			change(X_DIX_MIN, diz, hspi3);
 8001558:	4c13      	ldr	r4, [pc, #76]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 800155a:	79fd      	ldrb	r5, [r7, #7]
 800155c:	4668      	mov	r0, sp
 800155e:	f104 0308 	add.w	r3, r4, #8
 8001562:	2250      	movs	r2, #80	@ 0x50
 8001564:	4619      	mov	r1, r3
 8001566:	f002 fd8a 	bl	800407e <memcpy>
 800156a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800156e:	4629      	mov	r1, r5
 8001570:	20c2      	movs	r0, #194	@ 0xc2
 8001572:	f7ff fb6d 	bl	8000c50 <change>
			change(X_UNIT_MIN, unite, hspi3);
 8001576:	4c0c      	ldr	r4, [pc, #48]	@ (80015a8 <ILI9341_ChangeTime+0x170>)
 8001578:	79bd      	ldrb	r5, [r7, #6]
 800157a:	4668      	mov	r0, sp
 800157c:	f104 0308 	add.w	r3, r4, #8
 8001580:	2250      	movs	r2, #80	@ 0x50
 8001582:	4619      	mov	r1, r3
 8001584:	f002 fd7b 	bl	800407e <memcpy>
 8001588:	e894 000c 	ldmia.w	r4, {r2, r3}
 800158c:	4629      	mov	r1, r5
 800158e:	f240 1001 	movw	r0, #257	@ 0x101
 8001592:	f7ff fb5d 	bl	8000c50 <change>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015a0:	b004      	add	sp, #16
 80015a2:	4770      	bx	lr
 80015a4:	cccccccd 	.word	0xcccccccd
 80015a8:	20000088 	.word	0x20000088

080015ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015c6:	4a29      	ldr	r2, [pc, #164]	@ (800166c <MX_RTC_Init+0xc0>)
 80015c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015d2:	227f      	movs	r2, #127	@ 0x7f
 80015d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015d6:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015d8:	22ff      	movs	r2, #255	@ 0xff
 80015da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015ee:	481e      	ldr	r0, [pc, #120]	@ (8001668 <MX_RTC_Init+0xbc>)
 80015f0:	f001 f9d0 	bl	8002994 <HAL_RTC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80015fa:	f7ff f8d1 	bl	80007a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 80015fe:	2313      	movs	r3, #19
 8001600:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8001602:	233b      	movs	r3, #59	@ 0x3b
 8001604:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 8001606:	232d      	movs	r3, #45	@ 0x2d
 8001608:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	4813      	ldr	r0, [pc, #76]	@ (8001668 <MX_RTC_Init+0xbc>)
 800161a:	f001 fa3e 	bl	8002a9a <HAL_RTC_SetTime>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001624:	f7ff f8bc 	bl	80007a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001628:	2301      	movs	r3, #1
 800162a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800162c:	2301      	movs	r3, #1
 800162e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	480a      	ldr	r0, [pc, #40]	@ (8001668 <MX_RTC_Init+0xbc>)
 8001640:	f001 fb23 	bl	8002c8a <HAL_RTC_SetDate>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800164a:	f7ff f8a9 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2029      	movs	r0, #41	@ 0x29
 8001654:	f000 fa41 	bl	8001ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001658:	2029      	movs	r0, #41	@ 0x29
 800165a:	f000 fa5a 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000e0 	.word	0x200000e0
 800166c:	40002800 	.word	0x40002800

08001670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <MX_USART2_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_USART2_UART_Init+0x4c>)
 80016a8:	f001 ff2a 	bl	8003500 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f7ff f875 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000118 	.word	0x20000118
 80016c0:	40004400 	.word	0x40004400

080016c4 <__io_putchar>:

int __io_putchar(int ch)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80016cc:	1d39      	adds	r1, r7, #4
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	2201      	movs	r2, #1
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <__io_putchar+0x20>)
 80016d6:	f001 ff63 	bl	80035a0 <HAL_UART_Transmit>
	return ch;
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000118 	.word	0x20000118

080016e8 <TIMER_getTime>:

RTC_TimeTypeDef TIMER_getTime()
{
 80016e8:	b4b0      	push	{r4, r5, r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	return Time;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a06      	ldr	r2, [pc, #24]	@ (800170c <TIMER_getTime+0x24>)
 80016f4:	461c      	mov	r4, r3
 80016f6:	4615      	mov	r5, r2
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	6023      	str	r3, [r4, #0]
}
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bcb0      	pop	{r4, r5, r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000104 	.word	0x20000104

08001710 <TIMER_init>:

void TIMER_init(char timeChar[])
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	MX_USART2_UART_Init();
 8001718:	f7ff ffaa 	bl	8001670 <MX_USART2_UART_Init>
	MX_RTC_Init();
 800171c:	f7ff ff46 	bl	80015ac <MX_RTC_Init>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001720:	2200      	movs	r2, #0
 8001722:	4908      	ldr	r1, [pc, #32]	@ (8001744 <TIMER_init+0x34>)
 8001724:	4808      	ldr	r0, [pc, #32]	@ (8001748 <TIMER_init+0x38>)
 8001726:	f001 fa52 	bl	8002bce <HAL_RTC_GetTime>
	sprintf(timeChar, "%02d:%02d", (char)Time.Hours, (char)Time.Minutes);
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <TIMER_init+0x34>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <TIMER_init+0x34>)
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	4905      	ldr	r1, [pc, #20]	@ (800174c <TIMER_init+0x3c>)
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f002 fbc2 	bl	8003ec0 <siprintf>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000104 	.word	0x20000104
 8001748:	200000e0 	.word	0x200000e0
 800174c:	08004f74 	.word	0x08004f74

08001750 <TIMER_updateTime>:

bool TIMER_updateTime(uint8_t *lastMinutes)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001758:	2200      	movs	r2, #0
 800175a:	490e      	ldr	r1, [pc, #56]	@ (8001794 <TIMER_updateTime+0x44>)
 800175c:	480e      	ldr	r0, [pc, #56]	@ (8001798 <TIMER_updateTime+0x48>)
 800175e:	f001 fa36 	bl	8002bce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001762:	2200      	movs	r2, #0
 8001764:	490d      	ldr	r1, [pc, #52]	@ (800179c <TIMER_updateTime+0x4c>)
 8001766:	480c      	ldr	r0, [pc, #48]	@ (8001798 <TIMER_updateTime+0x48>)
 8001768:	f001 fb13 	bl	8002d92 <HAL_RTC_GetDate>
	if (lastMinutes != &Time.Minutes)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <TIMER_updateTime+0x50>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <TIMER_updateTime+0x38>
	{
		ILI9341_ChangeTime(Time);
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <TIMER_updateTime+0x44>)
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177c:	f7ff fe5c 	bl	8001438 <ILI9341_ChangeTime>
		lastMinutes = &Time.Minutes;
 8001780:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <TIMER_updateTime+0x50>)
 8001782:	607b      	str	r3, [r7, #4]
		return true;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <TIMER_updateTime+0x3a>
	}
	else {
		return false;
 8001788:	2300      	movs	r3, #0
	}
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000104 	.word	0x20000104
 8001798:	200000e0 	.word	0x200000e0
 800179c:	20000100 	.word	0x20000100
 80017a0:	20000105 	.word	0x20000105

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a8:	f7ff f9d6 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f002 fc2d 	bl	8004030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7fe fef2 	bl	80005be <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017e8:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 80017ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017f0:	200002b0 	.word	0x200002b0

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f94f 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7fe ffbe 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f967 	bl	8001b2e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f92f 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000160 	.word	0x20000160

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000160 	.word	0x20000160

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4907      	ldr	r1, [pc, #28]	@ (80019c0 <__NVIC_EnableIRQ+0x38>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	@ (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	@ (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	@ 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff29 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff3e 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff31 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e159      	b.n	8001e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8148 	bne.w	8001e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d005      	beq.n	8001b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d130      	bne.n	8001bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d017      	beq.n	8001c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d123      	bne.n	8001c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a2 	beq.w	8001e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	4a56      	ldr	r2, [pc, #344]	@ (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cde:	4b54      	ldr	r3, [pc, #336]	@ (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cea:	4a52      	ldr	r2, [pc, #328]	@ (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a49      	ldr	r2, [pc, #292]	@ (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x202>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a48      	ldr	r2, [pc, #288]	@ (8001e3c <HAL_GPIO_Init+0x2f4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x1fe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a47      	ldr	r2, [pc, #284]	@ (8001e40 <HAL_GPIO_Init+0x2f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x1fa>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_GPIO_Init+0x2fc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x1f6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a45      	ldr	r2, [pc, #276]	@ (8001e48 <HAL_GPIO_Init+0x300>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x1f2>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	@ (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f aea2 	bls.w	8001b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e6c:	e003      	b.n	8001e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	041a      	lsls	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e267      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ea2:	4b88      	ldr	r3, [pc, #544]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d00c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b85      	ldr	r3, [pc, #532]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d112      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b82      	ldr	r3, [pc, #520]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d157      	bne.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e242      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x74>
 8001eea:	4b76      	ldr	r3, [pc, #472]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a75      	ldr	r2, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b70      	ldr	r3, [pc, #448]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6f      	ldr	r2, [pc, #444]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6c      	ldr	r2, [pc, #432]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	4b69      	ldr	r3, [pc, #420]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a68      	ldr	r2, [pc, #416]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b66      	ldr	r3, [pc, #408]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a65      	ldr	r2, [pc, #404]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fcc2 	bl	80018c4 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fcbe 	bl	80018c4 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e207      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fcae 	bl	80018c4 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fcaa 	bl	80018c4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1f3      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b51      	ldr	r3, [pc, #324]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b41      	ldr	r3, [pc, #260]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c7      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4937      	ldr	r1, [pc, #220]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_RCC_OscConfig+0x244>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fc63 	bl	80018c4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fc5f 	bl	80018c4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a8      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b28      	ldr	r3, [pc, #160]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4925      	ldr	r1, [pc, #148]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCC_OscConfig+0x244>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fc42 	bl	80018c4 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7ff fc3e 	bl	80018c4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e187      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d036      	beq.n	80020dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_RCC_OscConfig+0x248>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fc22 	bl	80018c4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fc1e 	bl	80018c4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e167      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_RCC_OscConfig+0x240>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x200>
 80020a2:	e01b      	b.n	80020dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_RCC_OscConfig+0x248>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fc0b 	bl	80018c4 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	e00e      	b.n	80020d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff fc07 	bl	80018c4 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d907      	bls.n	80020d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e150      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470000 	.word	0x42470000
 80020cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b88      	ldr	r3, [pc, #544]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ea      	bne.n	80020b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8097 	beq.w	8002218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b81      	ldr	r3, [pc, #516]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10f      	bne.n	800211a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b7d      	ldr	r3, [pc, #500]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	4a7c      	ldr	r2, [pc, #496]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	@ 0x40
 800210a:	4b7a      	ldr	r3, [pc, #488]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b77      	ldr	r3, [pc, #476]	@ (80022f8 <HAL_RCC_OscConfig+0x474>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002126:	4b74      	ldr	r3, [pc, #464]	@ (80022f8 <HAL_RCC_OscConfig+0x474>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a73      	ldr	r2, [pc, #460]	@ (80022f8 <HAL_RCC_OscConfig+0x474>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7ff fbc7 	bl	80018c4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7ff fbc3 	bl	80018c4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e10c      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b6a      	ldr	r3, [pc, #424]	@ (80022f8 <HAL_RCC_OscConfig+0x474>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x2ea>
 8002160:	4b64      	ldr	r3, [pc, #400]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002164:	4a63      	ldr	r2, [pc, #396]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	@ 0x70
 800216c:	e01c      	b.n	80021a8 <HAL_RCC_OscConfig+0x324>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x30c>
 8002176:	4b5f      	ldr	r3, [pc, #380]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	4a5e      	ldr	r2, [pc, #376]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	@ 0x70
 8002182:	4b5c      	ldr	r3, [pc, #368]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	4a5b      	ldr	r2, [pc, #364]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	@ 0x70
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0x324>
 8002190:	4b58      	ldr	r3, [pc, #352]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002194:	4a57      	ldr	r2, [pc, #348]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	@ 0x70
 800219c:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	4a54      	ldr	r2, [pc, #336]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff fb88 	bl	80018c4 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7ff fb84 	bl	80018c4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0cb      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	4b49      	ldr	r3, [pc, #292]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ee      	beq.n	80021b8 <HAL_RCC_OscConfig+0x334>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7ff fb72 	bl	80018c4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7ff fb6e 	bl	80018c4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0b5      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	4b3e      	ldr	r3, [pc, #248]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ee      	bne.n	80021e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	4a38      	ldr	r2, [pc, #224]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002216:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a1 	beq.w	8002364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002222:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d05c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d141      	bne.n	80022ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <HAL_RCC_OscConfig+0x478>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fb42 	bl	80018c4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff fb3e 	bl	80018c4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e087      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	019b      	lsls	r3, r3, #6
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	491b      	ldr	r1, [pc, #108]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x478>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fb17 	bl	80018c4 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff fb13 	bl	80018c4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e05c      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x416>
 80022b8:	e054      	b.n	8002364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <HAL_RCC_OscConfig+0x478>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fb00 	bl	80018c4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff fafc 	bl	80018c4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e045      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x444>
 80022e6:	e03d      	b.n	8002364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e038      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002300:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_RCC_OscConfig+0x4ec>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d028      	beq.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d121      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d11a      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	4293      	cmp	r3, r2
 800233a:	d111      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0cc      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b68      	ldr	r3, [pc, #416]	@ (800252c <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d90c      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	@ (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a58      	ldr	r2, [pc, #352]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a52      	ldr	r2, [pc, #328]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d044      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b3f      	ldr	r3, [pc, #252]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3b      	ldr	r3, [pc, #236]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e067      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b37      	ldr	r3, [pc, #220]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4934      	ldr	r1, [pc, #208]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff fa2e 	bl	80018c4 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff fa2a 	bl	80018c4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b25      	ldr	r3, [pc, #148]	@ (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d20c      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b22      	ldr	r3, [pc, #136]	@ (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f821 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	@ (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f98e 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00
 8002530:	40023800 	.word	0x40023800
 8002534:	08004f80 	.word	0x08004f80
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b094      	sub	sp, #80	@ 0x50
 8002546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002558:	4b79      	ldr	r3, [pc, #484]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d00d      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x40>
 8002564:	2b08      	cmp	r3, #8
 8002566:	f200 80e1 	bhi.w	800272c <HAL_RCC_GetSysClockFreq+0x1ec>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
 800256e:	2b04      	cmp	r3, #4
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3a>
 8002572:	e0db      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x204>)
 8002576:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002578:	e0db      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257a:	4b73      	ldr	r3, [pc, #460]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x208>)
 800257c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257e:	e0d8      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002580:	4b6f      	ldr	r3, [pc, #444]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002588:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258a:	4b6d      	ldr	r3, [pc, #436]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	2200      	movs	r2, #0
 800259e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025b2:	4622      	mov	r2, r4
 80025b4:	462b      	mov	r3, r5
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4621      	mov	r1, r4
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	6139      	str	r1, [r7, #16]
 80025d0:	4629      	mov	r1, r5
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e4:	4659      	mov	r1, fp
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4651      	mov	r1, sl
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4651      	mov	r1, sl
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4651      	mov	r1, sl
 80025f4:	ebb2 0801 	subs.w	r8, r2, r1
 80025f8:	4659      	mov	r1, fp
 80025fa:	eb63 0901 	sbc.w	r9, r3, r1
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002612:	4690      	mov	r8, r2
 8002614:	4699      	mov	r9, r3
 8002616:	4623      	mov	r3, r4
 8002618:	eb18 0303 	adds.w	r3, r8, r3
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	462b      	mov	r3, r5
 8002620:	eb49 0303 	adc.w	r3, r9, r3
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002632:	4629      	mov	r1, r5
 8002634:	024b      	lsls	r3, r1, #9
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800263c:	4621      	mov	r1, r4
 800263e:	024a      	lsls	r2, r1, #9
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002646:	2200      	movs	r2, #0
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800264a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800264c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002650:	f7fd fe1e 	bl	8000290 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800265c:	e058      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265e:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	2200      	movs	r2, #0
 8002666:	4618      	mov	r0, r3
 8002668:	4611      	mov	r1, r2
 800266a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002678:	4642      	mov	r2, r8
 800267a:	464b      	mov	r3, r9
 800267c:	f04f 0000 	mov.w	r0, #0
 8002680:	f04f 0100 	mov.w	r1, #0
 8002684:	0159      	lsls	r1, r3, #5
 8002686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268a:	0150      	lsls	r0, r2, #5
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4641      	mov	r1, r8
 8002692:	ebb2 0a01 	subs.w	sl, r2, r1
 8002696:	4649      	mov	r1, r9
 8002698:	eb63 0b01 	sbc.w	fp, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026b0:	ebb2 040a 	subs.w	r4, r2, sl
 80026b4:	eb63 050b 	sbc.w	r5, r3, fp
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	00eb      	lsls	r3, r5, #3
 80026c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c6:	00e2      	lsls	r2, r4, #3
 80026c8:	4614      	mov	r4, r2
 80026ca:	461d      	mov	r5, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	18e3      	adds	r3, r4, r3
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	464b      	mov	r3, r9
 80026d4:	eb45 0303 	adc.w	r3, r5, r3
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e6:	4629      	mov	r1, r5
 80026e8:	028b      	lsls	r3, r1, #10
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f0:	4621      	mov	r1, r4
 80026f2:	028a      	lsls	r2, r1, #10
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026fa:	2200      	movs	r2, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	61fa      	str	r2, [r7, #28]
 8002700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002704:	f7fd fdc4 	bl	8000290 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	3301      	adds	r3, #1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272a:	e002      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x204>)
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002734:	4618      	mov	r0, r3
 8002736:	3750      	adds	r7, #80	@ 0x50
 8002738:	46bd      	mov	sp, r7
 800273a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	00f42400 	.word	0x00f42400
 8002748:	007a1200 	.word	0x007a1200

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000

08002764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002768:	f7ff fff0 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0a9b      	lsrs	r3, r3, #10
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	@ (8002788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	08004f90 	.word	0x08004f90

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002790:	f7ff ffdc 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0b5b      	lsrs	r3, r3, #13
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	@ (80027b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004f90 	.word	0x08004f90

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d038      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027dc:	4b68      	ldr	r3, [pc, #416]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027e2:	f7ff f86f 	bl	80018c4 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ea:	f7ff f86b 	bl	80018c4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0bd      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027fc:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	495a      	ldr	r1, [pc, #360]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002828:	f7ff f84c 	bl	80018c4 <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002830:	f7ff f848 	bl	80018c4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e09a      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002842:	4b50      	ldr	r3, [pc, #320]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8083 	beq.w	8002962 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	4a47      	ldr	r2, [pc, #284]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	@ 0x40
 800286c:	4b45      	ldr	r3, [pc, #276]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002878:	4b43      	ldr	r3, [pc, #268]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a42      	ldr	r2, [pc, #264]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002884:	f7ff f81e 	bl	80018c4 <HAL_GetTick>
 8002888:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7ff f81a 	bl	80018c4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e06c      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800289e:	4b3a      	ldr	r3, [pc, #232]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028aa:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02f      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d028      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d2:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d8:	4b2c      	ldr	r3, [pc, #176]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028de:	4a29      	ldr	r2, [pc, #164]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d114      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe ffe8 	bl	80018c4 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe ffe4 	bl	80018c4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e034      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002926:	d10d      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002928:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293c:	4911      	ldr	r1, [pc, #68]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
 8002942:	e005      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002944:	4b0f      	ldr	r3, [pc, #60]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a0e      	ldr	r2, [pc, #56]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800294e:	6093      	str	r3, [r2, #8]
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	4909      	ldr	r1, [pc, #36]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7d1a      	ldrb	r2, [r3, #20]
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002974:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	42470068 	.word	0x42470068
 8002984:	40023800 	.word	0x40023800
 8002988:	40007000 	.word	0x40007000
 800298c:	42470e40 	.word	0x42470e40
 8002990:	424711e0 	.word	0x424711e0

08002994 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e073      	b.n	8002a92 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7f5b      	ldrb	r3, [r3, #29]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd ff1e 	bl	80007fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d055      	beq.n	8002a80 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ca      	movs	r2, #202	@ 0xca
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2253      	movs	r2, #83	@ 0x53
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa49 	bl	8002e7c <RTC_EnterInitMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d12c      	bne.n	8002a4e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a06:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68d2      	ldr	r2, [r2, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	041a      	lsls	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa50 	bl	8002eea <RTC_ExitInitMode>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d110      	bne.n	8002a76 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a7e:	e001      	b.n	8002a84 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a9a:	b590      	push	{r4, r7, lr}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RTC_SetTime+0x1c>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e087      	b.n	8002bc6 <HAL_RTC_SetTime+0x12c>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d126      	bne.n	8002b16 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fa27 	bl	8002f34 <RTC_ByteToBcd2>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa20 	bl	8002f34 <RTC_ByteToBcd2>
 8002af4:	4603      	mov	r3, r0
 8002af6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002af8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	789b      	ldrb	r3, [r3, #2]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fa18 	bl	8002f34 <RTC_ByteToBcd2>
 8002b04:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	78db      	ldrb	r3, [r3, #3]
 8002b0e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e018      	b.n	8002b48 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b36:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002b3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	22ca      	movs	r2, #202	@ 0xca
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2253      	movs	r2, #83	@ 0x53
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f98f 	bl	8002e7c <RTC_EnterInitMode>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d120      	bne.n	8002baa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002b72:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b76:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f9a2 	bl	8002eea <RTC_ExitInitMode>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	22ff      	movs	r2, #255	@ 0xff
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]

  return status;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}

08002bce <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002c00:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002c04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	0d9b      	lsrs	r3, r3, #22
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d11a      	bne.n	8002c80 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f98e 	bl	8002f70 <RTC_Bcd2ToByte>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f985 	bl	8002f70 <RTC_Bcd2ToByte>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	789b      	ldrb	r3, [r3, #2]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f97c 	bl	8002f70 <RTC_Bcd2ToByte>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c8a:	b590      	push	{r4, r7, lr}
 8002c8c:	b087      	sub	sp, #28
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	7f1b      	ldrb	r3, [r3, #28]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RTC_SetDate+0x1c>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e071      	b.n	8002d8a <HAL_RTC_SetDate+0x100>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10e      	bne.n	8002cd6 <HAL_RTC_SetDate+0x4c>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	f023 0310 	bic.w	r3, r3, #16
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	330a      	adds	r3, #10
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11c      	bne.n	8002d16 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	78db      	ldrb	r3, [r3, #3]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f927 	bl	8002f34 <RTC_ByteToBcd2>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f920 	bl	8002f34 <RTC_ByteToBcd2>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cf8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f918 	bl	8002f34 <RTC_ByteToBcd2>
 8002d04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e00e      	b.n	8002d34 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	78db      	ldrb	r3, [r3, #3]
 8002d1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d22:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002d28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ca      	movs	r2, #202	@ 0xca
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2253      	movs	r2, #83	@ 0x53
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f899 	bl	8002e7c <RTC_EnterInitMode>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10c      	bne.n	8002d6e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d62:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8c0 	bl	8002eea <RTC_ExitInitMode>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	22ff      	movs	r2, #255	@ 0xff
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]

  return status;
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002db0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	0b5b      	lsrs	r3, r3, #13
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11a      	bne.n	8002e26 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	78db      	ldrb	r3, [r3, #3]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f8bb 	bl	8002f70 <RTC_Bcd2ToByte>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f8b2 	bl	8002f70 <RTC_Bcd2ToByte>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f8a9 	bl	8002f70 <RTC_Bcd2ToByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <HAL_RTC_WaitForSynchro+0x48>)
 8002e42:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e44:	f7fe fd3e 	bl	80018c4 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e4a:	e009      	b.n	8002e60 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e4c:	f7fe fd3a 	bl	80018c4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e5a:	d901      	bls.n	8002e60 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e007      	b.n	8002e70 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ee      	beq.n	8002e4c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	00013f5f 	.word	0x00013f5f

08002e7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d122      	bne.n	8002ee0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ea8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fd0b 	bl	80018c4 <HAL_GetTick>
 8002eae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002eb0:	e00c      	b.n	8002ecc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eb2:	f7fe fd07 	bl	80018c4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ec0:	d904      	bls.n	8002ecc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <RTC_EnterInitMode+0x64>
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1e8      	bne.n	8002eb2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f04:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff8b 	bl	8002e30 <HAL_RTC_WaitForSynchro>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002f42:	e005      	b.n	8002f50 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	3b0a      	subs	r3, #10
 8002f4e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d8f6      	bhi.n	8002f44 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b2db      	uxtb	r3, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07b      	b.n	80030b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d108      	bne.n	8002fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fce:	d009      	beq.n	8002fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
 8002fd6:	e005      	b.n	8002fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fc28 	bl	8000854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800301a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003068:	ea42 0103 	orr.w	r1, r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0104 	and.w	r1, r3, #4
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	f003 0210 	and.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ce:	f7fe fbf9 	bl	80018c4 <HAL_GetTick>
 80030d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
 80030e6:	e12a      	b.n	800333e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_SPI_Transmit+0x36>
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e122      	b.n	800333e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_SPI_Transmit+0x48>
 8003102:	2302      	movs	r3, #2
 8003104:	e11b      	b.n	800333e <HAL_SPI_Transmit+0x280>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003154:	d10f      	bne.n	8003176 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b40      	cmp	r3, #64	@ 0x40
 8003182:	d007      	beq.n	8003194 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319c:	d152      	bne.n	8003244 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Transmit+0xee>
 80031a6:	8b7b      	ldrh	r3, [r7, #26]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d145      	bne.n	8003238 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031d0:	e032      	b.n	8003238 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d112      	bne.n	8003206 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003204:	e018      	b.n	8003238 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003206:	f7fe fb5d 	bl	80018c4 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d803      	bhi.n	800321e <HAL_SPI_Transmit+0x160>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d102      	bne.n	8003224 <HAL_SPI_Transmit+0x166>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e082      	b.n	800333e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1c7      	bne.n	80031d2 <HAL_SPI_Transmit+0x114>
 8003242:	e053      	b.n	80032ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_SPI_Transmit+0x194>
 800324c:	8b7b      	ldrh	r3, [r7, #26]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d147      	bne.n	80032e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003278:	e033      	b.n	80032e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d113      	bne.n	80032b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032ae:	e018      	b.n	80032e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b0:	f7fe fb08 	bl	80018c4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d803      	bhi.n	80032c8 <HAL_SPI_Transmit+0x20a>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d102      	bne.n	80032ce <HAL_SPI_Transmit+0x210>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e02d      	b.n	800333e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1c6      	bne.n	800327a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f8b1 	bl	8003458 <SPI_EndRxTxTransaction>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800333c:	2300      	movs	r3, #0
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003358:	f7fe fab4 	bl	80018c4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003368:	f7fe faac 	bl	80018c4 <HAL_GetTick>
 800336c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800336e:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	015b      	lsls	r3, r3, #5
 8003374:	0d1b      	lsrs	r3, r3, #20
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337e:	e054      	b.n	800342a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d050      	beq.n	800342a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003388:	f7fe fa9c 	bl	80018c4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	429a      	cmp	r2, r3
 8003396:	d902      	bls.n	800339e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d13d      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033b6:	d111      	bne.n	80033dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033c0:	d004      	beq.n	80033cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ca:	d107      	bne.n	80033dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e4:	d10f      	bne.n	8003406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e017      	b.n	800344a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3b01      	subs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	429a      	cmp	r2, r3
 8003446:	d19b      	bne.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000

08003458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2201      	movs	r2, #1
 800346c:	2102      	movs	r1, #2
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff ff6a 	bl	8003348 <SPI_WaitFlagStateUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e032      	b.n	80034f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800348a:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <SPI_EndRxTxTransaction+0xa0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <SPI_EndRxTxTransaction+0xa4>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0d5b      	lsrs	r3, r3, #21
 8003496:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a8:	d112      	bne.n	80034d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	@ 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ff47 	bl	8003348 <SPI_WaitFlagStateUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e00f      	b.n	80034f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3b01      	subs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e6:	2b80      	cmp	r3, #128	@ 0x80
 80034e8:	d0f2      	beq.n	80034d0 <SPI_EndRxTxTransaction+0x78>
 80034ea:	e000      	b.n	80034ee <SPI_EndRxTxTransaction+0x96>
        break;
 80034ec:	bf00      	nop
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000000 	.word	0x20000000
 80034fc:	165e9f81 	.word	0x165e9f81

08003500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e042      	b.n	8003598 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd f9fc 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	@ 0x24
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f973 	bl	8003830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	@ 0x28
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d175      	bne.n	80036ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_UART_Transmit+0x2c>
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e06e      	b.n	80036ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2221      	movs	r2, #33	@ 0x21
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035de:	f7fe f971 	bl	80018c4 <HAL_GetTick>
 80035e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f8:	d108      	bne.n	800360c <HAL_UART_Transmit+0x6c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003614:	e02e      	b.n	8003674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2180      	movs	r1, #128	@ 0x80
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f848 	bl	80036b6 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e03a      	b.n	80036ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3302      	adds	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e007      	b.n	8003666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3301      	adds	r3, #1
 8003664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1cb      	bne.n	8003616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2140      	movs	r1, #64	@ 0x40
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f814 	bl	80036b6 <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e006      	b.n	80036ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	4613      	mov	r3, r2
 80036c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c6:	e03b      	b.n	8003740 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d037      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d0:	f7fe f8f8 	bl	80018c4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e03a      	b.n	8003760 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d023      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b80      	cmp	r3, #128	@ 0x80
 80036fc:	d020      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d01d      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d116      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f81d 	bl	8003768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2208      	movs	r2, #8
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e00f      	b.n	8003760 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	429a      	cmp	r2, r3
 800375c:	d0b4      	beq.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b095      	sub	sp, #84	@ 0x54
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003790:	643a      	str	r2, [r7, #64]	@ 0x40
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d119      	bne.n	8003814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003800:	61ba      	str	r2, [r7, #24]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003822:	bf00      	nop
 8003824:	3754      	adds	r7, #84	@ 0x54
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003834:	b0c0      	sub	sp, #256	@ 0x100
 8003836:	af00      	add	r7, sp, #0
 8003838:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	68d9      	ldr	r1, [r3, #12]
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	ea40 0301 	orr.w	r3, r0, r1
 8003858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003888:	f021 010c 	bic.w	r1, r1, #12
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003896:	430b      	orrs	r3, r1
 8003898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038aa:	6999      	ldr	r1, [r3, #24]
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	ea40 0301 	orr.w	r3, r0, r1
 80038b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b8f      	ldr	r3, [pc, #572]	@ (8003afc <UART_SetConfig+0x2cc>)
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d005      	beq.n	80038d0 <UART_SetConfig+0xa0>
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003b00 <UART_SetConfig+0x2d0>)
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d104      	bne.n	80038da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d0:	f7fe ff5c 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 80038d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038d8:	e003      	b.n	80038e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038da:	f7fe ff43 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
 80038de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ec:	f040 810c 	bne.w	8003b08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003902:	4622      	mov	r2, r4
 8003904:	462b      	mov	r3, r5
 8003906:	1891      	adds	r1, r2, r2
 8003908:	65b9      	str	r1, [r7, #88]	@ 0x58
 800390a:	415b      	adcs	r3, r3
 800390c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800390e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003912:	4621      	mov	r1, r4
 8003914:	eb12 0801 	adds.w	r8, r2, r1
 8003918:	4629      	mov	r1, r5
 800391a:	eb43 0901 	adc.w	r9, r3, r1
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800392a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003932:	4690      	mov	r8, r2
 8003934:	4699      	mov	r9, r3
 8003936:	4623      	mov	r3, r4
 8003938:	eb18 0303 	adds.w	r3, r8, r3
 800393c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003940:	462b      	mov	r3, r5
 8003942:	eb49 0303 	adc.w	r3, r9, r3
 8003946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003956:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800395a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800395e:	460b      	mov	r3, r1
 8003960:	18db      	adds	r3, r3, r3
 8003962:	653b      	str	r3, [r7, #80]	@ 0x50
 8003964:	4613      	mov	r3, r2
 8003966:	eb42 0303 	adc.w	r3, r2, r3
 800396a:	657b      	str	r3, [r7, #84]	@ 0x54
 800396c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003974:	f7fc fc8c 	bl	8000290 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4b61      	ldr	r3, [pc, #388]	@ (8003b04 <UART_SetConfig+0x2d4>)
 800397e:	fba3 2302 	umull	r2, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	011c      	lsls	r4, r3, #4
 8003986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003990:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	1891      	adds	r1, r2, r2
 800399e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039a0:	415b      	adcs	r3, r3
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039a8:	4641      	mov	r1, r8
 80039aa:	eb12 0a01 	adds.w	sl, r2, r1
 80039ae:	4649      	mov	r1, r9
 80039b0:	eb43 0b01 	adc.w	fp, r3, r1
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c8:	4692      	mov	sl, r2
 80039ca:	469b      	mov	fp, r3
 80039cc:	4643      	mov	r3, r8
 80039ce:	eb1a 0303 	adds.w	r3, sl, r3
 80039d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d6:	464b      	mov	r3, r9
 80039d8:	eb4b 0303 	adc.w	r3, fp, r3
 80039dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039f4:	460b      	mov	r3, r1
 80039f6:	18db      	adds	r3, r3, r3
 80039f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039fa:	4613      	mov	r3, r2
 80039fc:	eb42 0303 	adc.w	r3, r2, r3
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a0a:	f7fc fc41 	bl	8000290 <__aeabi_uldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <UART_SetConfig+0x2d4>)
 8003a16:	fba3 2301 	umull	r2, r3, r3, r1
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2264      	movs	r2, #100	@ 0x64
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	1acb      	subs	r3, r1, r3
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a2a:	4b36      	ldr	r3, [pc, #216]	@ (8003b04 <UART_SetConfig+0x2d4>)
 8003a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a38:	441c      	add	r4, r3
 8003a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	1891      	adds	r1, r2, r2
 8003a52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a54:	415b      	adcs	r3, r3
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	1851      	adds	r1, r2, r1
 8003a60:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a62:	4649      	mov	r1, r9
 8003a64:	414b      	adcs	r3, r1
 8003a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a74:	4659      	mov	r1, fp
 8003a76:	00cb      	lsls	r3, r1, #3
 8003a78:	4651      	mov	r1, sl
 8003a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7e:	4651      	mov	r1, sl
 8003a80:	00ca      	lsls	r2, r1, #3
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	4642      	mov	r2, r8
 8003a8a:	189b      	adds	r3, r3, r2
 8003a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a90:	464b      	mov	r3, r9
 8003a92:	460a      	mov	r2, r1
 8003a94:	eb42 0303 	adc.w	r3, r2, r3
 8003a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003aa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	18db      	adds	r3, r3, r3
 8003ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	eb42 0303 	adc.w	r3, r2, r3
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ac6:	f7fc fbe3 	bl	8000290 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	2164      	movs	r1, #100	@ 0x64
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	3332      	adds	r3, #50	@ 0x32
 8003ae2:	4a08      	ldr	r2, [pc, #32]	@ (8003b04 <UART_SetConfig+0x2d4>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	f003 0207 	and.w	r2, r3, #7
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4422      	add	r2, r4
 8003af6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003af8:	e106      	b.n	8003d08 <UART_SetConfig+0x4d8>
 8003afa:	bf00      	nop
 8003afc:	40011000 	.word	0x40011000
 8003b00:	40011400 	.word	0x40011400
 8003b04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b1a:	4642      	mov	r2, r8
 8003b1c:	464b      	mov	r3, r9
 8003b1e:	1891      	adds	r1, r2, r2
 8003b20:	6239      	str	r1, [r7, #32]
 8003b22:	415b      	adcs	r3, r3
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	1854      	adds	r4, r2, r1
 8003b2e:	4649      	mov	r1, r9
 8003b30:	eb43 0501 	adc.w	r5, r3, r1
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	00eb      	lsls	r3, r5, #3
 8003b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b42:	00e2      	lsls	r2, r4, #3
 8003b44:	4614      	mov	r4, r2
 8003b46:	461d      	mov	r5, r3
 8003b48:	4643      	mov	r3, r8
 8003b4a:	18e3      	adds	r3, r4, r3
 8003b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b50:	464b      	mov	r3, r9
 8003b52:	eb45 0303 	adc.w	r3, r5, r3
 8003b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b76:	4629      	mov	r1, r5
 8003b78:	008b      	lsls	r3, r1, #2
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b80:	4621      	mov	r1, r4
 8003b82:	008a      	lsls	r2, r1, #2
 8003b84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b88:	f7fc fb82 	bl	8000290 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4b60      	ldr	r3, [pc, #384]	@ (8003d14 <UART_SetConfig+0x4e4>)
 8003b92:	fba3 2302 	umull	r2, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	011c      	lsls	r4, r3, #4
 8003b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ba4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	1891      	adds	r1, r2, r2
 8003bb2:	61b9      	str	r1, [r7, #24]
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	1851      	adds	r1, r2, r1
 8003bc0:	6139      	str	r1, [r7, #16]
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	414b      	adcs	r3, r1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	00cb      	lsls	r3, r1, #3
 8003bd8:	4651      	mov	r1, sl
 8003bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bde:	4651      	mov	r1, sl
 8003be0:	00ca      	lsls	r2, r1, #3
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	4642      	mov	r2, r8
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bf0:	464b      	mov	r3, r9
 8003bf2:	460a      	mov	r2, r1
 8003bf4:	eb42 0303 	adc.w	r3, r2, r3
 8003bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c14:	4649      	mov	r1, r9
 8003c16:	008b      	lsls	r3, r1, #2
 8003c18:	4641      	mov	r1, r8
 8003c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1e:	4641      	mov	r1, r8
 8003c20:	008a      	lsls	r2, r1, #2
 8003c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c26:	f7fc fb33 	bl	8000290 <__aeabi_uldivmod>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4b38      	ldr	r3, [pc, #224]	@ (8003d14 <UART_SetConfig+0x4e4>)
 8003c32:	fba3 2301 	umull	r2, r3, r3, r1
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2264      	movs	r2, #100	@ 0x64
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	1acb      	subs	r3, r1, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	3332      	adds	r3, #50	@ 0x32
 8003c44:	4a33      	ldr	r2, [pc, #204]	@ (8003d14 <UART_SetConfig+0x4e4>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c50:	441c      	add	r4, r3
 8003c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c56:	2200      	movs	r2, #0
 8003c58:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c70:	4641      	mov	r1, r8
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	4649      	mov	r1, r9
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4651      	mov	r1, sl
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	eb42 0303 	adc.w	r3, r2, r3
 8003caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	008b      	lsls	r3, r1, #2
 8003cc8:	4641      	mov	r1, r8
 8003cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cce:	4641      	mov	r1, r8
 8003cd0:	008a      	lsls	r2, r1, #2
 8003cd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cd6:	f7fc fadb 	bl	8000290 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <UART_SetConfig+0x4e4>)
 8003ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	2164      	movs	r1, #100	@ 0x64
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	3332      	adds	r3, #50	@ 0x32
 8003cf2:	4a08      	ldr	r2, [pc, #32]	@ (8003d14 <UART_SetConfig+0x4e4>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4422      	add	r2, r4
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d14:	51eb851f 	.word	0x51eb851f

08003d18 <std>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d26:	6083      	str	r3, [r0, #8]
 8003d28:	8181      	strh	r1, [r0, #12]
 8003d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d2c:	81c2      	strh	r2, [r0, #14]
 8003d2e:	6183      	str	r3, [r0, #24]
 8003d30:	4619      	mov	r1, r3
 8003d32:	2208      	movs	r2, #8
 8003d34:	305c      	adds	r0, #92	@ 0x5c
 8003d36:	f000 f926 	bl	8003f86 <memset>
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <std+0x58>)
 8003d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <std+0x5c>)
 8003d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <std+0x60>)
 8003d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <std+0x64>)
 8003d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <std+0x68>)
 8003d4c:	6224      	str	r4, [r4, #32]
 8003d4e:	429c      	cmp	r4, r3
 8003d50:	d006      	beq.n	8003d60 <std+0x48>
 8003d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d56:	4294      	cmp	r4, r2
 8003d58:	d002      	beq.n	8003d60 <std+0x48>
 8003d5a:	33d0      	adds	r3, #208	@ 0xd0
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	d105      	bne.n	8003d6c <std+0x54>
 8003d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d68:	f000 b986 	b.w	8004078 <__retarget_lock_init_recursive>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	bf00      	nop
 8003d70:	08003f01 	.word	0x08003f01
 8003d74:	08003f23 	.word	0x08003f23
 8003d78:	08003f5b 	.word	0x08003f5b
 8003d7c:	08003f7f 	.word	0x08003f7f
 8003d80:	20000164 	.word	0x20000164

08003d84 <stdio_exit_handler>:
 8003d84:	4a02      	ldr	r2, [pc, #8]	@ (8003d90 <stdio_exit_handler+0xc>)
 8003d86:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <stdio_exit_handler+0x10>)
 8003d88:	4803      	ldr	r0, [pc, #12]	@ (8003d98 <stdio_exit_handler+0x14>)
 8003d8a:	f000 b869 	b.w	8003e60 <_fwalk_sglue>
 8003d8e:	bf00      	nop
 8003d90:	2000000c 	.word	0x2000000c
 8003d94:	08004be5 	.word	0x08004be5
 8003d98:	2000001c 	.word	0x2000001c

08003d9c <cleanup_stdio>:
 8003d9c:	6841      	ldr	r1, [r0, #4]
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <cleanup_stdio+0x34>)
 8003da0:	4299      	cmp	r1, r3
 8003da2:	b510      	push	{r4, lr}
 8003da4:	4604      	mov	r4, r0
 8003da6:	d001      	beq.n	8003dac <cleanup_stdio+0x10>
 8003da8:	f000 ff1c 	bl	8004be4 <_fflush_r>
 8003dac:	68a1      	ldr	r1, [r4, #8]
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <cleanup_stdio+0x38>)
 8003db0:	4299      	cmp	r1, r3
 8003db2:	d002      	beq.n	8003dba <cleanup_stdio+0x1e>
 8003db4:	4620      	mov	r0, r4
 8003db6:	f000 ff15 	bl	8004be4 <_fflush_r>
 8003dba:	68e1      	ldr	r1, [r4, #12]
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <cleanup_stdio+0x3c>)
 8003dbe:	4299      	cmp	r1, r3
 8003dc0:	d004      	beq.n	8003dcc <cleanup_stdio+0x30>
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc8:	f000 bf0c 	b.w	8004be4 <_fflush_r>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000164 	.word	0x20000164
 8003dd4:	200001cc 	.word	0x200001cc
 8003dd8:	20000234 	.word	0x20000234

08003ddc <global_stdio_init.part.0>:
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <global_stdio_init.part.0+0x30>)
 8003de0:	4c0b      	ldr	r4, [pc, #44]	@ (8003e10 <global_stdio_init.part.0+0x34>)
 8003de2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e14 <global_stdio_init.part.0+0x38>)
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	4620      	mov	r0, r4
 8003de8:	2200      	movs	r2, #0
 8003dea:	2104      	movs	r1, #4
 8003dec:	f7ff ff94 	bl	8003d18 <std>
 8003df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003df4:	2201      	movs	r2, #1
 8003df6:	2109      	movs	r1, #9
 8003df8:	f7ff ff8e 	bl	8003d18 <std>
 8003dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e00:	2202      	movs	r2, #2
 8003e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e06:	2112      	movs	r1, #18
 8003e08:	f7ff bf86 	b.w	8003d18 <std>
 8003e0c:	2000029c 	.word	0x2000029c
 8003e10:	20000164 	.word	0x20000164
 8003e14:	08003d85 	.word	0x08003d85

08003e18 <__sfp_lock_acquire>:
 8003e18:	4801      	ldr	r0, [pc, #4]	@ (8003e20 <__sfp_lock_acquire+0x8>)
 8003e1a:	f000 b92e 	b.w	800407a <__retarget_lock_acquire_recursive>
 8003e1e:	bf00      	nop
 8003e20:	200002a5 	.word	0x200002a5

08003e24 <__sfp_lock_release>:
 8003e24:	4801      	ldr	r0, [pc, #4]	@ (8003e2c <__sfp_lock_release+0x8>)
 8003e26:	f000 b929 	b.w	800407c <__retarget_lock_release_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	200002a5 	.word	0x200002a5

08003e30 <__sinit>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	4604      	mov	r4, r0
 8003e34:	f7ff fff0 	bl	8003e18 <__sfp_lock_acquire>
 8003e38:	6a23      	ldr	r3, [r4, #32]
 8003e3a:	b11b      	cbz	r3, 8003e44 <__sinit+0x14>
 8003e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e40:	f7ff bff0 	b.w	8003e24 <__sfp_lock_release>
 8003e44:	4b04      	ldr	r3, [pc, #16]	@ (8003e58 <__sinit+0x28>)
 8003e46:	6223      	str	r3, [r4, #32]
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <__sinit+0x2c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f5      	bne.n	8003e3c <__sinit+0xc>
 8003e50:	f7ff ffc4 	bl	8003ddc <global_stdio_init.part.0>
 8003e54:	e7f2      	b.n	8003e3c <__sinit+0xc>
 8003e56:	bf00      	nop
 8003e58:	08003d9d 	.word	0x08003d9d
 8003e5c:	2000029c 	.word	0x2000029c

08003e60 <_fwalk_sglue>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4607      	mov	r7, r0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e70:	f1b9 0901 	subs.w	r9, r9, #1
 8003e74:	d505      	bpl.n	8003e82 <_fwalk_sglue+0x22>
 8003e76:	6824      	ldr	r4, [r4, #0]
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	d1f7      	bne.n	8003e6c <_fwalk_sglue+0xc>
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e82:	89ab      	ldrh	r3, [r5, #12]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d907      	bls.n	8003e98 <_fwalk_sglue+0x38>
 8003e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	d003      	beq.n	8003e98 <_fwalk_sglue+0x38>
 8003e90:	4629      	mov	r1, r5
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c0      	blx	r8
 8003e96:	4306      	orrs	r6, r0
 8003e98:	3568      	adds	r5, #104	@ 0x68
 8003e9a:	e7e9      	b.n	8003e70 <_fwalk_sglue+0x10>

08003e9c <iprintf>:
 8003e9c:	b40f      	push	{r0, r1, r2, r3}
 8003e9e:	b507      	push	{r0, r1, r2, lr}
 8003ea0:	4906      	ldr	r1, [pc, #24]	@ (8003ebc <iprintf+0x20>)
 8003ea2:	ab04      	add	r3, sp, #16
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eaa:	6881      	ldr	r1, [r0, #8]
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	f000 fb6f 	bl	8004590 <_vfiprintf_r>
 8003eb2:	b003      	add	sp, #12
 8003eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eb8:	b004      	add	sp, #16
 8003eba:	4770      	bx	lr
 8003ebc:	20000018 	.word	0x20000018

08003ec0 <siprintf>:
 8003ec0:	b40e      	push	{r1, r2, r3}
 8003ec2:	b500      	push	{lr}
 8003ec4:	b09c      	sub	sp, #112	@ 0x70
 8003ec6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ec8:	9002      	str	r0, [sp, #8]
 8003eca:	9006      	str	r0, [sp, #24]
 8003ecc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ed0:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <siprintf+0x38>)
 8003ed2:	9107      	str	r1, [sp, #28]
 8003ed4:	9104      	str	r1, [sp, #16]
 8003ed6:	4909      	ldr	r1, [pc, #36]	@ (8003efc <siprintf+0x3c>)
 8003ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003edc:	9105      	str	r1, [sp, #20]
 8003ede:	6800      	ldr	r0, [r0, #0]
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	a902      	add	r1, sp, #8
 8003ee4:	f000 fa2e 	bl	8004344 <_svfiprintf_r>
 8003ee8:	9b02      	ldr	r3, [sp, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	b01c      	add	sp, #112	@ 0x70
 8003ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef4:	b003      	add	sp, #12
 8003ef6:	4770      	bx	lr
 8003ef8:	20000018 	.word	0x20000018
 8003efc:	ffff0208 	.word	0xffff0208

08003f00 <__sread>:
 8003f00:	b510      	push	{r4, lr}
 8003f02:	460c      	mov	r4, r1
 8003f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f08:	f000 f868 	bl	8003fdc <_read_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	bfab      	itete	ge
 8003f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f12:	89a3      	ldrhlt	r3, [r4, #12]
 8003f14:	181b      	addge	r3, r3, r0
 8003f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f1a:	bfac      	ite	ge
 8003f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f1e:	81a3      	strhlt	r3, [r4, #12]
 8003f20:	bd10      	pop	{r4, pc}

08003f22 <__swrite>:
 8003f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	461f      	mov	r7, r3
 8003f28:	898b      	ldrh	r3, [r1, #12]
 8003f2a:	05db      	lsls	r3, r3, #23
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	4616      	mov	r6, r2
 8003f32:	d505      	bpl.n	8003f40 <__swrite+0x1e>
 8003f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f38:	2302      	movs	r3, #2
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f000 f83c 	bl	8003fb8 <_lseek_r>
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f4a:	81a3      	strh	r3, [r4, #12]
 8003f4c:	4632      	mov	r2, r6
 8003f4e:	463b      	mov	r3, r7
 8003f50:	4628      	mov	r0, r5
 8003f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f56:	f000 b853 	b.w	8004000 <_write_r>

08003f5a <__sseek>:
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f62:	f000 f829 	bl	8003fb8 <_lseek_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	bf15      	itete	ne
 8003f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f76:	81a3      	strheq	r3, [r4, #12]
 8003f78:	bf18      	it	ne
 8003f7a:	81a3      	strhne	r3, [r4, #12]
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <__sclose>:
 8003f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f82:	f000 b809 	b.w	8003f98 <_close_r>

08003f86 <memset>:
 8003f86:	4402      	add	r2, r0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d100      	bne.n	8003f90 <memset+0xa>
 8003f8e:	4770      	bx	lr
 8003f90:	f803 1b01 	strb.w	r1, [r3], #1
 8003f94:	e7f9      	b.n	8003f8a <memset+0x4>
	...

08003f98 <_close_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4d06      	ldr	r5, [pc, #24]	@ (8003fb4 <_close_r+0x1c>)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	f7fc fd6e 	bl	8000a84 <_close>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_close_r+0x1a>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_close_r+0x1a>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	200002a0 	.word	0x200002a0

08003fb8 <_lseek_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4d07      	ldr	r5, [pc, #28]	@ (8003fd8 <_lseek_r+0x20>)
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	4608      	mov	r0, r1
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	602a      	str	r2, [r5, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f7fc fd83 	bl	8000ad2 <_lseek>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_lseek_r+0x1e>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_lseek_r+0x1e>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	200002a0 	.word	0x200002a0

08003fdc <_read_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4d07      	ldr	r5, [pc, #28]	@ (8003ffc <_read_r+0x20>)
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	4608      	mov	r0, r1
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	602a      	str	r2, [r5, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7fc fd11 	bl	8000a12 <_read>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_read_r+0x1e>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_read_r+0x1e>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	200002a0 	.word	0x200002a0

08004000 <_write_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4d07      	ldr	r5, [pc, #28]	@ (8004020 <_write_r+0x20>)
 8004004:	4604      	mov	r4, r0
 8004006:	4608      	mov	r0, r1
 8004008:	4611      	mov	r1, r2
 800400a:	2200      	movs	r2, #0
 800400c:	602a      	str	r2, [r5, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f7fc fd1c 	bl	8000a4c <_write>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_write_r+0x1e>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_write_r+0x1e>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	200002a0 	.word	0x200002a0

08004024 <__errno>:
 8004024:	4b01      	ldr	r3, [pc, #4]	@ (800402c <__errno+0x8>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000018 	.word	0x20000018

08004030 <__libc_init_array>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	4d0d      	ldr	r5, [pc, #52]	@ (8004068 <__libc_init_array+0x38>)
 8004034:	4c0d      	ldr	r4, [pc, #52]	@ (800406c <__libc_init_array+0x3c>)
 8004036:	1b64      	subs	r4, r4, r5
 8004038:	10a4      	asrs	r4, r4, #2
 800403a:	2600      	movs	r6, #0
 800403c:	42a6      	cmp	r6, r4
 800403e:	d109      	bne.n	8004054 <__libc_init_array+0x24>
 8004040:	4d0b      	ldr	r5, [pc, #44]	@ (8004070 <__libc_init_array+0x40>)
 8004042:	4c0c      	ldr	r4, [pc, #48]	@ (8004074 <__libc_init_array+0x44>)
 8004044:	f000 ff6e 	bl	8004f24 <_init>
 8004048:	1b64      	subs	r4, r4, r5
 800404a:	10a4      	asrs	r4, r4, #2
 800404c:	2600      	movs	r6, #0
 800404e:	42a6      	cmp	r6, r4
 8004050:	d105      	bne.n	800405e <__libc_init_array+0x2e>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	f855 3b04 	ldr.w	r3, [r5], #4
 8004058:	4798      	blx	r3
 800405a:	3601      	adds	r6, #1
 800405c:	e7ee      	b.n	800403c <__libc_init_array+0xc>
 800405e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004062:	4798      	blx	r3
 8004064:	3601      	adds	r6, #1
 8004066:	e7f2      	b.n	800404e <__libc_init_array+0x1e>
 8004068:	080051b4 	.word	0x080051b4
 800406c:	080051b4 	.word	0x080051b4
 8004070:	080051b4 	.word	0x080051b4
 8004074:	080051b8 	.word	0x080051b8

08004078 <__retarget_lock_init_recursive>:
 8004078:	4770      	bx	lr

0800407a <__retarget_lock_acquire_recursive>:
 800407a:	4770      	bx	lr

0800407c <__retarget_lock_release_recursive>:
 800407c:	4770      	bx	lr

0800407e <memcpy>:
 800407e:	440a      	add	r2, r1
 8004080:	4291      	cmp	r1, r2
 8004082:	f100 33ff 	add.w	r3, r0, #4294967295
 8004086:	d100      	bne.n	800408a <memcpy+0xc>
 8004088:	4770      	bx	lr
 800408a:	b510      	push	{r4, lr}
 800408c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004094:	4291      	cmp	r1, r2
 8004096:	d1f9      	bne.n	800408c <memcpy+0xe>
 8004098:	bd10      	pop	{r4, pc}
	...

0800409c <_free_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4605      	mov	r5, r0
 80040a0:	2900      	cmp	r1, #0
 80040a2:	d041      	beq.n	8004128 <_free_r+0x8c>
 80040a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a8:	1f0c      	subs	r4, r1, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfb8      	it	lt
 80040ae:	18e4      	addlt	r4, r4, r3
 80040b0:	f000 f8e0 	bl	8004274 <__malloc_lock>
 80040b4:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <_free_r+0x90>)
 80040b6:	6813      	ldr	r3, [r2, #0]
 80040b8:	b933      	cbnz	r3, 80040c8 <_free_r+0x2c>
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	6014      	str	r4, [r2, #0]
 80040be:	4628      	mov	r0, r5
 80040c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c4:	f000 b8dc 	b.w	8004280 <__malloc_unlock>
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	d908      	bls.n	80040de <_free_r+0x42>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	1821      	adds	r1, r4, r0
 80040d0:	428b      	cmp	r3, r1
 80040d2:	bf01      	itttt	eq
 80040d4:	6819      	ldreq	r1, [r3, #0]
 80040d6:	685b      	ldreq	r3, [r3, #4]
 80040d8:	1809      	addeq	r1, r1, r0
 80040da:	6021      	streq	r1, [r4, #0]
 80040dc:	e7ed      	b.n	80040ba <_free_r+0x1e>
 80040de:	461a      	mov	r2, r3
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	b10b      	cbz	r3, 80040e8 <_free_r+0x4c>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d9fa      	bls.n	80040de <_free_r+0x42>
 80040e8:	6811      	ldr	r1, [r2, #0]
 80040ea:	1850      	adds	r0, r2, r1
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d10b      	bne.n	8004108 <_free_r+0x6c>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	4401      	add	r1, r0
 80040f4:	1850      	adds	r0, r2, r1
 80040f6:	4283      	cmp	r3, r0
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	d1e0      	bne.n	80040be <_free_r+0x22>
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	6053      	str	r3, [r2, #4]
 8004102:	4408      	add	r0, r1
 8004104:	6010      	str	r0, [r2, #0]
 8004106:	e7da      	b.n	80040be <_free_r+0x22>
 8004108:	d902      	bls.n	8004110 <_free_r+0x74>
 800410a:	230c      	movs	r3, #12
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	e7d6      	b.n	80040be <_free_r+0x22>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	1821      	adds	r1, r4, r0
 8004114:	428b      	cmp	r3, r1
 8004116:	bf04      	itt	eq
 8004118:	6819      	ldreq	r1, [r3, #0]
 800411a:	685b      	ldreq	r3, [r3, #4]
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	bf04      	itt	eq
 8004120:	1809      	addeq	r1, r1, r0
 8004122:	6021      	streq	r1, [r4, #0]
 8004124:	6054      	str	r4, [r2, #4]
 8004126:	e7ca      	b.n	80040be <_free_r+0x22>
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	bf00      	nop
 800412c:	200002ac 	.word	0x200002ac

08004130 <sbrk_aligned>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4e0f      	ldr	r6, [pc, #60]	@ (8004170 <sbrk_aligned+0x40>)
 8004134:	460c      	mov	r4, r1
 8004136:	6831      	ldr	r1, [r6, #0]
 8004138:	4605      	mov	r5, r0
 800413a:	b911      	cbnz	r1, 8004142 <sbrk_aligned+0x12>
 800413c:	f000 fe28 	bl	8004d90 <_sbrk_r>
 8004140:	6030      	str	r0, [r6, #0]
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 fe23 	bl	8004d90 <_sbrk_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	d103      	bne.n	8004156 <sbrk_aligned+0x26>
 800414e:	f04f 34ff 	mov.w	r4, #4294967295
 8004152:	4620      	mov	r0, r4
 8004154:	bd70      	pop	{r4, r5, r6, pc}
 8004156:	1cc4      	adds	r4, r0, #3
 8004158:	f024 0403 	bic.w	r4, r4, #3
 800415c:	42a0      	cmp	r0, r4
 800415e:	d0f8      	beq.n	8004152 <sbrk_aligned+0x22>
 8004160:	1a21      	subs	r1, r4, r0
 8004162:	4628      	mov	r0, r5
 8004164:	f000 fe14 	bl	8004d90 <_sbrk_r>
 8004168:	3001      	adds	r0, #1
 800416a:	d1f2      	bne.n	8004152 <sbrk_aligned+0x22>
 800416c:	e7ef      	b.n	800414e <sbrk_aligned+0x1e>
 800416e:	bf00      	nop
 8004170:	200002a8 	.word	0x200002a8

08004174 <_malloc_r>:
 8004174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004178:	1ccd      	adds	r5, r1, #3
 800417a:	f025 0503 	bic.w	r5, r5, #3
 800417e:	3508      	adds	r5, #8
 8004180:	2d0c      	cmp	r5, #12
 8004182:	bf38      	it	cc
 8004184:	250c      	movcc	r5, #12
 8004186:	2d00      	cmp	r5, #0
 8004188:	4606      	mov	r6, r0
 800418a:	db01      	blt.n	8004190 <_malloc_r+0x1c>
 800418c:	42a9      	cmp	r1, r5
 800418e:	d904      	bls.n	800419a <_malloc_r+0x26>
 8004190:	230c      	movs	r3, #12
 8004192:	6033      	str	r3, [r6, #0]
 8004194:	2000      	movs	r0, #0
 8004196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800419a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004270 <_malloc_r+0xfc>
 800419e:	f000 f869 	bl	8004274 <__malloc_lock>
 80041a2:	f8d8 3000 	ldr.w	r3, [r8]
 80041a6:	461c      	mov	r4, r3
 80041a8:	bb44      	cbnz	r4, 80041fc <_malloc_r+0x88>
 80041aa:	4629      	mov	r1, r5
 80041ac:	4630      	mov	r0, r6
 80041ae:	f7ff ffbf 	bl	8004130 <sbrk_aligned>
 80041b2:	1c43      	adds	r3, r0, #1
 80041b4:	4604      	mov	r4, r0
 80041b6:	d158      	bne.n	800426a <_malloc_r+0xf6>
 80041b8:	f8d8 4000 	ldr.w	r4, [r8]
 80041bc:	4627      	mov	r7, r4
 80041be:	2f00      	cmp	r7, #0
 80041c0:	d143      	bne.n	800424a <_malloc_r+0xd6>
 80041c2:	2c00      	cmp	r4, #0
 80041c4:	d04b      	beq.n	800425e <_malloc_r+0xea>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	4639      	mov	r1, r7
 80041ca:	4630      	mov	r0, r6
 80041cc:	eb04 0903 	add.w	r9, r4, r3
 80041d0:	f000 fdde 	bl	8004d90 <_sbrk_r>
 80041d4:	4581      	cmp	r9, r0
 80041d6:	d142      	bne.n	800425e <_malloc_r+0xea>
 80041d8:	6821      	ldr	r1, [r4, #0]
 80041da:	1a6d      	subs	r5, r5, r1
 80041dc:	4629      	mov	r1, r5
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff ffa6 	bl	8004130 <sbrk_aligned>
 80041e4:	3001      	adds	r0, #1
 80041e6:	d03a      	beq.n	800425e <_malloc_r+0xea>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	442b      	add	r3, r5
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	f8d8 3000 	ldr.w	r3, [r8]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	bb62      	cbnz	r2, 8004250 <_malloc_r+0xdc>
 80041f6:	f8c8 7000 	str.w	r7, [r8]
 80041fa:	e00f      	b.n	800421c <_malloc_r+0xa8>
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	1b52      	subs	r2, r2, r5
 8004200:	d420      	bmi.n	8004244 <_malloc_r+0xd0>
 8004202:	2a0b      	cmp	r2, #11
 8004204:	d917      	bls.n	8004236 <_malloc_r+0xc2>
 8004206:	1961      	adds	r1, r4, r5
 8004208:	42a3      	cmp	r3, r4
 800420a:	6025      	str	r5, [r4, #0]
 800420c:	bf18      	it	ne
 800420e:	6059      	strne	r1, [r3, #4]
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	bf08      	it	eq
 8004214:	f8c8 1000 	streq.w	r1, [r8]
 8004218:	5162      	str	r2, [r4, r5]
 800421a:	604b      	str	r3, [r1, #4]
 800421c:	4630      	mov	r0, r6
 800421e:	f000 f82f 	bl	8004280 <__malloc_unlock>
 8004222:	f104 000b 	add.w	r0, r4, #11
 8004226:	1d23      	adds	r3, r4, #4
 8004228:	f020 0007 	bic.w	r0, r0, #7
 800422c:	1ac2      	subs	r2, r0, r3
 800422e:	bf1c      	itt	ne
 8004230:	1a1b      	subne	r3, r3, r0
 8004232:	50a3      	strne	r3, [r4, r2]
 8004234:	e7af      	b.n	8004196 <_malloc_r+0x22>
 8004236:	6862      	ldr	r2, [r4, #4]
 8004238:	42a3      	cmp	r3, r4
 800423a:	bf0c      	ite	eq
 800423c:	f8c8 2000 	streq.w	r2, [r8]
 8004240:	605a      	strne	r2, [r3, #4]
 8004242:	e7eb      	b.n	800421c <_malloc_r+0xa8>
 8004244:	4623      	mov	r3, r4
 8004246:	6864      	ldr	r4, [r4, #4]
 8004248:	e7ae      	b.n	80041a8 <_malloc_r+0x34>
 800424a:	463c      	mov	r4, r7
 800424c:	687f      	ldr	r7, [r7, #4]
 800424e:	e7b6      	b.n	80041be <_malloc_r+0x4a>
 8004250:	461a      	mov	r2, r3
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	42a3      	cmp	r3, r4
 8004256:	d1fb      	bne.n	8004250 <_malloc_r+0xdc>
 8004258:	2300      	movs	r3, #0
 800425a:	6053      	str	r3, [r2, #4]
 800425c:	e7de      	b.n	800421c <_malloc_r+0xa8>
 800425e:	230c      	movs	r3, #12
 8004260:	6033      	str	r3, [r6, #0]
 8004262:	4630      	mov	r0, r6
 8004264:	f000 f80c 	bl	8004280 <__malloc_unlock>
 8004268:	e794      	b.n	8004194 <_malloc_r+0x20>
 800426a:	6005      	str	r5, [r0, #0]
 800426c:	e7d6      	b.n	800421c <_malloc_r+0xa8>
 800426e:	bf00      	nop
 8004270:	200002ac 	.word	0x200002ac

08004274 <__malloc_lock>:
 8004274:	4801      	ldr	r0, [pc, #4]	@ (800427c <__malloc_lock+0x8>)
 8004276:	f7ff bf00 	b.w	800407a <__retarget_lock_acquire_recursive>
 800427a:	bf00      	nop
 800427c:	200002a4 	.word	0x200002a4

08004280 <__malloc_unlock>:
 8004280:	4801      	ldr	r0, [pc, #4]	@ (8004288 <__malloc_unlock+0x8>)
 8004282:	f7ff befb 	b.w	800407c <__retarget_lock_release_recursive>
 8004286:	bf00      	nop
 8004288:	200002a4 	.word	0x200002a4

0800428c <__ssputs_r>:
 800428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004290:	688e      	ldr	r6, [r1, #8]
 8004292:	461f      	mov	r7, r3
 8004294:	42be      	cmp	r6, r7
 8004296:	680b      	ldr	r3, [r1, #0]
 8004298:	4682      	mov	sl, r0
 800429a:	460c      	mov	r4, r1
 800429c:	4690      	mov	r8, r2
 800429e:	d82d      	bhi.n	80042fc <__ssputs_r+0x70>
 80042a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042a8:	d026      	beq.n	80042f8 <__ssputs_r+0x6c>
 80042aa:	6965      	ldr	r5, [r4, #20]
 80042ac:	6909      	ldr	r1, [r1, #16]
 80042ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042b2:	eba3 0901 	sub.w	r9, r3, r1
 80042b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042ba:	1c7b      	adds	r3, r7, #1
 80042bc:	444b      	add	r3, r9
 80042be:	106d      	asrs	r5, r5, #1
 80042c0:	429d      	cmp	r5, r3
 80042c2:	bf38      	it	cc
 80042c4:	461d      	movcc	r5, r3
 80042c6:	0553      	lsls	r3, r2, #21
 80042c8:	d527      	bpl.n	800431a <__ssputs_r+0x8e>
 80042ca:	4629      	mov	r1, r5
 80042cc:	f7ff ff52 	bl	8004174 <_malloc_r>
 80042d0:	4606      	mov	r6, r0
 80042d2:	b360      	cbz	r0, 800432e <__ssputs_r+0xa2>
 80042d4:	6921      	ldr	r1, [r4, #16]
 80042d6:	464a      	mov	r2, r9
 80042d8:	f7ff fed1 	bl	800407e <memcpy>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	6126      	str	r6, [r4, #16]
 80042ea:	6165      	str	r5, [r4, #20]
 80042ec:	444e      	add	r6, r9
 80042ee:	eba5 0509 	sub.w	r5, r5, r9
 80042f2:	6026      	str	r6, [r4, #0]
 80042f4:	60a5      	str	r5, [r4, #8]
 80042f6:	463e      	mov	r6, r7
 80042f8:	42be      	cmp	r6, r7
 80042fa:	d900      	bls.n	80042fe <__ssputs_r+0x72>
 80042fc:	463e      	mov	r6, r7
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	4632      	mov	r2, r6
 8004302:	4641      	mov	r1, r8
 8004304:	f000 fd2a 	bl	8004d5c <memmove>
 8004308:	68a3      	ldr	r3, [r4, #8]
 800430a:	1b9b      	subs	r3, r3, r6
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	4433      	add	r3, r6
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	2000      	movs	r0, #0
 8004316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431a:	462a      	mov	r2, r5
 800431c:	f000 fd48 	bl	8004db0 <_realloc_r>
 8004320:	4606      	mov	r6, r0
 8004322:	2800      	cmp	r0, #0
 8004324:	d1e0      	bne.n	80042e8 <__ssputs_r+0x5c>
 8004326:	6921      	ldr	r1, [r4, #16]
 8004328:	4650      	mov	r0, sl
 800432a:	f7ff feb7 	bl	800409c <_free_r>
 800432e:	230c      	movs	r3, #12
 8004330:	f8ca 3000 	str.w	r3, [sl]
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	e7e9      	b.n	8004316 <__ssputs_r+0x8a>
	...

08004344 <_svfiprintf_r>:
 8004344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004348:	4698      	mov	r8, r3
 800434a:	898b      	ldrh	r3, [r1, #12]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	b09d      	sub	sp, #116	@ 0x74
 8004350:	4607      	mov	r7, r0
 8004352:	460d      	mov	r5, r1
 8004354:	4614      	mov	r4, r2
 8004356:	d510      	bpl.n	800437a <_svfiprintf_r+0x36>
 8004358:	690b      	ldr	r3, [r1, #16]
 800435a:	b973      	cbnz	r3, 800437a <_svfiprintf_r+0x36>
 800435c:	2140      	movs	r1, #64	@ 0x40
 800435e:	f7ff ff09 	bl	8004174 <_malloc_r>
 8004362:	6028      	str	r0, [r5, #0]
 8004364:	6128      	str	r0, [r5, #16]
 8004366:	b930      	cbnz	r0, 8004376 <_svfiprintf_r+0x32>
 8004368:	230c      	movs	r3, #12
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	b01d      	add	sp, #116	@ 0x74
 8004372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004376:	2340      	movs	r3, #64	@ 0x40
 8004378:	616b      	str	r3, [r5, #20]
 800437a:	2300      	movs	r3, #0
 800437c:	9309      	str	r3, [sp, #36]	@ 0x24
 800437e:	2320      	movs	r3, #32
 8004380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004384:	f8cd 800c 	str.w	r8, [sp, #12]
 8004388:	2330      	movs	r3, #48	@ 0x30
 800438a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004528 <_svfiprintf_r+0x1e4>
 800438e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004392:	f04f 0901 	mov.w	r9, #1
 8004396:	4623      	mov	r3, r4
 8004398:	469a      	mov	sl, r3
 800439a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800439e:	b10a      	cbz	r2, 80043a4 <_svfiprintf_r+0x60>
 80043a0:	2a25      	cmp	r2, #37	@ 0x25
 80043a2:	d1f9      	bne.n	8004398 <_svfiprintf_r+0x54>
 80043a4:	ebba 0b04 	subs.w	fp, sl, r4
 80043a8:	d00b      	beq.n	80043c2 <_svfiprintf_r+0x7e>
 80043aa:	465b      	mov	r3, fp
 80043ac:	4622      	mov	r2, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	4638      	mov	r0, r7
 80043b2:	f7ff ff6b 	bl	800428c <__ssputs_r>
 80043b6:	3001      	adds	r0, #1
 80043b8:	f000 80a7 	beq.w	800450a <_svfiprintf_r+0x1c6>
 80043bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043be:	445a      	add	r2, fp
 80043c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043c2:	f89a 3000 	ldrb.w	r3, [sl]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 809f 	beq.w	800450a <_svfiprintf_r+0x1c6>
 80043cc:	2300      	movs	r3, #0
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295
 80043d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d6:	f10a 0a01 	add.w	sl, sl, #1
 80043da:	9304      	str	r3, [sp, #16]
 80043dc:	9307      	str	r3, [sp, #28]
 80043de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80043e4:	4654      	mov	r4, sl
 80043e6:	2205      	movs	r2, #5
 80043e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ec:	484e      	ldr	r0, [pc, #312]	@ (8004528 <_svfiprintf_r+0x1e4>)
 80043ee:	f7fb feff 	bl	80001f0 <memchr>
 80043f2:	9a04      	ldr	r2, [sp, #16]
 80043f4:	b9d8      	cbnz	r0, 800442e <_svfiprintf_r+0xea>
 80043f6:	06d0      	lsls	r0, r2, #27
 80043f8:	bf44      	itt	mi
 80043fa:	2320      	movmi	r3, #32
 80043fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004400:	0711      	lsls	r1, r2, #28
 8004402:	bf44      	itt	mi
 8004404:	232b      	movmi	r3, #43	@ 0x2b
 8004406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800440a:	f89a 3000 	ldrb.w	r3, [sl]
 800440e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004410:	d015      	beq.n	800443e <_svfiprintf_r+0xfa>
 8004412:	9a07      	ldr	r2, [sp, #28]
 8004414:	4654      	mov	r4, sl
 8004416:	2000      	movs	r0, #0
 8004418:	f04f 0c0a 	mov.w	ip, #10
 800441c:	4621      	mov	r1, r4
 800441e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004422:	3b30      	subs	r3, #48	@ 0x30
 8004424:	2b09      	cmp	r3, #9
 8004426:	d94b      	bls.n	80044c0 <_svfiprintf_r+0x17c>
 8004428:	b1b0      	cbz	r0, 8004458 <_svfiprintf_r+0x114>
 800442a:	9207      	str	r2, [sp, #28]
 800442c:	e014      	b.n	8004458 <_svfiprintf_r+0x114>
 800442e:	eba0 0308 	sub.w	r3, r0, r8
 8004432:	fa09 f303 	lsl.w	r3, r9, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	46a2      	mov	sl, r4
 800443c:	e7d2      	b.n	80043e4 <_svfiprintf_r+0xa0>
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	1d19      	adds	r1, r3, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	9103      	str	r1, [sp, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	bfbb      	ittet	lt
 800444a:	425b      	neglt	r3, r3
 800444c:	f042 0202 	orrlt.w	r2, r2, #2
 8004450:	9307      	strge	r3, [sp, #28]
 8004452:	9307      	strlt	r3, [sp, #28]
 8004454:	bfb8      	it	lt
 8004456:	9204      	strlt	r2, [sp, #16]
 8004458:	7823      	ldrb	r3, [r4, #0]
 800445a:	2b2e      	cmp	r3, #46	@ 0x2e
 800445c:	d10a      	bne.n	8004474 <_svfiprintf_r+0x130>
 800445e:	7863      	ldrb	r3, [r4, #1]
 8004460:	2b2a      	cmp	r3, #42	@ 0x2a
 8004462:	d132      	bne.n	80044ca <_svfiprintf_r+0x186>
 8004464:	9b03      	ldr	r3, [sp, #12]
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	9203      	str	r2, [sp, #12]
 800446c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004470:	3402      	adds	r4, #2
 8004472:	9305      	str	r3, [sp, #20]
 8004474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004538 <_svfiprintf_r+0x1f4>
 8004478:	7821      	ldrb	r1, [r4, #0]
 800447a:	2203      	movs	r2, #3
 800447c:	4650      	mov	r0, sl
 800447e:	f7fb feb7 	bl	80001f0 <memchr>
 8004482:	b138      	cbz	r0, 8004494 <_svfiprintf_r+0x150>
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	eba0 000a 	sub.w	r0, r0, sl
 800448a:	2240      	movs	r2, #64	@ 0x40
 800448c:	4082      	lsls	r2, r0
 800448e:	4313      	orrs	r3, r2
 8004490:	3401      	adds	r4, #1
 8004492:	9304      	str	r3, [sp, #16]
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	4824      	ldr	r0, [pc, #144]	@ (800452c <_svfiprintf_r+0x1e8>)
 800449a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800449e:	2206      	movs	r2, #6
 80044a0:	f7fb fea6 	bl	80001f0 <memchr>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d036      	beq.n	8004516 <_svfiprintf_r+0x1d2>
 80044a8:	4b21      	ldr	r3, [pc, #132]	@ (8004530 <_svfiprintf_r+0x1ec>)
 80044aa:	bb1b      	cbnz	r3, 80044f4 <_svfiprintf_r+0x1b0>
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	3307      	adds	r3, #7
 80044b0:	f023 0307 	bic.w	r3, r3, #7
 80044b4:	3308      	adds	r3, #8
 80044b6:	9303      	str	r3, [sp, #12]
 80044b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044ba:	4433      	add	r3, r6
 80044bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044be:	e76a      	b.n	8004396 <_svfiprintf_r+0x52>
 80044c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c4:	460c      	mov	r4, r1
 80044c6:	2001      	movs	r0, #1
 80044c8:	e7a8      	b.n	800441c <_svfiprintf_r+0xd8>
 80044ca:	2300      	movs	r3, #0
 80044cc:	3401      	adds	r4, #1
 80044ce:	9305      	str	r3, [sp, #20]
 80044d0:	4619      	mov	r1, r3
 80044d2:	f04f 0c0a 	mov.w	ip, #10
 80044d6:	4620      	mov	r0, r4
 80044d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044dc:	3a30      	subs	r2, #48	@ 0x30
 80044de:	2a09      	cmp	r2, #9
 80044e0:	d903      	bls.n	80044ea <_svfiprintf_r+0x1a6>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0c6      	beq.n	8004474 <_svfiprintf_r+0x130>
 80044e6:	9105      	str	r1, [sp, #20]
 80044e8:	e7c4      	b.n	8004474 <_svfiprintf_r+0x130>
 80044ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ee:	4604      	mov	r4, r0
 80044f0:	2301      	movs	r3, #1
 80044f2:	e7f0      	b.n	80044d6 <_svfiprintf_r+0x192>
 80044f4:	ab03      	add	r3, sp, #12
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	462a      	mov	r2, r5
 80044fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <_svfiprintf_r+0x1f0>)
 80044fc:	a904      	add	r1, sp, #16
 80044fe:	4638      	mov	r0, r7
 8004500:	f3af 8000 	nop.w
 8004504:	1c42      	adds	r2, r0, #1
 8004506:	4606      	mov	r6, r0
 8004508:	d1d6      	bne.n	80044b8 <_svfiprintf_r+0x174>
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	065b      	lsls	r3, r3, #25
 800450e:	f53f af2d 	bmi.w	800436c <_svfiprintf_r+0x28>
 8004512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004514:	e72c      	b.n	8004370 <_svfiprintf_r+0x2c>
 8004516:	ab03      	add	r3, sp, #12
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	462a      	mov	r2, r5
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <_svfiprintf_r+0x1f0>)
 800451e:	a904      	add	r1, sp, #16
 8004520:	4638      	mov	r0, r7
 8004522:	f000 f9bb 	bl	800489c <_printf_i>
 8004526:	e7ed      	b.n	8004504 <_svfiprintf_r+0x1c0>
 8004528:	08005178 	.word	0x08005178
 800452c:	08005182 	.word	0x08005182
 8004530:	00000000 	.word	0x00000000
 8004534:	0800428d 	.word	0x0800428d
 8004538:	0800517e 	.word	0x0800517e

0800453c <__sfputc_r>:
 800453c:	6893      	ldr	r3, [r2, #8]
 800453e:	3b01      	subs	r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	b410      	push	{r4}
 8004544:	6093      	str	r3, [r2, #8]
 8004546:	da08      	bge.n	800455a <__sfputc_r+0x1e>
 8004548:	6994      	ldr	r4, [r2, #24]
 800454a:	42a3      	cmp	r3, r4
 800454c:	db01      	blt.n	8004552 <__sfputc_r+0x16>
 800454e:	290a      	cmp	r1, #10
 8004550:	d103      	bne.n	800455a <__sfputc_r+0x1e>
 8004552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004556:	f000 bb6d 	b.w	8004c34 <__swbuf_r>
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	1c58      	adds	r0, r3, #1
 800455e:	6010      	str	r0, [r2, #0]
 8004560:	7019      	strb	r1, [r3, #0]
 8004562:	4608      	mov	r0, r1
 8004564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004568:	4770      	bx	lr

0800456a <__sfputs_r>:
 800456a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456c:	4606      	mov	r6, r0
 800456e:	460f      	mov	r7, r1
 8004570:	4614      	mov	r4, r2
 8004572:	18d5      	adds	r5, r2, r3
 8004574:	42ac      	cmp	r4, r5
 8004576:	d101      	bne.n	800457c <__sfputs_r+0x12>
 8004578:	2000      	movs	r0, #0
 800457a:	e007      	b.n	800458c <__sfputs_r+0x22>
 800457c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004580:	463a      	mov	r2, r7
 8004582:	4630      	mov	r0, r6
 8004584:	f7ff ffda 	bl	800453c <__sfputc_r>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d1f3      	bne.n	8004574 <__sfputs_r+0xa>
 800458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004590 <_vfiprintf_r>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	460d      	mov	r5, r1
 8004596:	b09d      	sub	sp, #116	@ 0x74
 8004598:	4614      	mov	r4, r2
 800459a:	4698      	mov	r8, r3
 800459c:	4606      	mov	r6, r0
 800459e:	b118      	cbz	r0, 80045a8 <_vfiprintf_r+0x18>
 80045a0:	6a03      	ldr	r3, [r0, #32]
 80045a2:	b90b      	cbnz	r3, 80045a8 <_vfiprintf_r+0x18>
 80045a4:	f7ff fc44 	bl	8003e30 <__sinit>
 80045a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045aa:	07d9      	lsls	r1, r3, #31
 80045ac:	d405      	bmi.n	80045ba <_vfiprintf_r+0x2a>
 80045ae:	89ab      	ldrh	r3, [r5, #12]
 80045b0:	059a      	lsls	r2, r3, #22
 80045b2:	d402      	bmi.n	80045ba <_vfiprintf_r+0x2a>
 80045b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045b6:	f7ff fd60 	bl	800407a <__retarget_lock_acquire_recursive>
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	071b      	lsls	r3, r3, #28
 80045be:	d501      	bpl.n	80045c4 <_vfiprintf_r+0x34>
 80045c0:	692b      	ldr	r3, [r5, #16]
 80045c2:	b99b      	cbnz	r3, 80045ec <_vfiprintf_r+0x5c>
 80045c4:	4629      	mov	r1, r5
 80045c6:	4630      	mov	r0, r6
 80045c8:	f000 fb72 	bl	8004cb0 <__swsetup_r>
 80045cc:	b170      	cbz	r0, 80045ec <_vfiprintf_r+0x5c>
 80045ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045d0:	07dc      	lsls	r4, r3, #31
 80045d2:	d504      	bpl.n	80045de <_vfiprintf_r+0x4e>
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	b01d      	add	sp, #116	@ 0x74
 80045da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045de:	89ab      	ldrh	r3, [r5, #12]
 80045e0:	0598      	lsls	r0, r3, #22
 80045e2:	d4f7      	bmi.n	80045d4 <_vfiprintf_r+0x44>
 80045e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045e6:	f7ff fd49 	bl	800407c <__retarget_lock_release_recursive>
 80045ea:	e7f3      	b.n	80045d4 <_vfiprintf_r+0x44>
 80045ec:	2300      	movs	r3, #0
 80045ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80045f0:	2320      	movs	r3, #32
 80045f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80045fa:	2330      	movs	r3, #48	@ 0x30
 80045fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80047ac <_vfiprintf_r+0x21c>
 8004600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004604:	f04f 0901 	mov.w	r9, #1
 8004608:	4623      	mov	r3, r4
 800460a:	469a      	mov	sl, r3
 800460c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004610:	b10a      	cbz	r2, 8004616 <_vfiprintf_r+0x86>
 8004612:	2a25      	cmp	r2, #37	@ 0x25
 8004614:	d1f9      	bne.n	800460a <_vfiprintf_r+0x7a>
 8004616:	ebba 0b04 	subs.w	fp, sl, r4
 800461a:	d00b      	beq.n	8004634 <_vfiprintf_r+0xa4>
 800461c:	465b      	mov	r3, fp
 800461e:	4622      	mov	r2, r4
 8004620:	4629      	mov	r1, r5
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ffa1 	bl	800456a <__sfputs_r>
 8004628:	3001      	adds	r0, #1
 800462a:	f000 80a7 	beq.w	800477c <_vfiprintf_r+0x1ec>
 800462e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004630:	445a      	add	r2, fp
 8004632:	9209      	str	r2, [sp, #36]	@ 0x24
 8004634:	f89a 3000 	ldrb.w	r3, [sl]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 809f 	beq.w	800477c <_vfiprintf_r+0x1ec>
 800463e:	2300      	movs	r3, #0
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004648:	f10a 0a01 	add.w	sl, sl, #1
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	9307      	str	r3, [sp, #28]
 8004650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004654:	931a      	str	r3, [sp, #104]	@ 0x68
 8004656:	4654      	mov	r4, sl
 8004658:	2205      	movs	r2, #5
 800465a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465e:	4853      	ldr	r0, [pc, #332]	@ (80047ac <_vfiprintf_r+0x21c>)
 8004660:	f7fb fdc6 	bl	80001f0 <memchr>
 8004664:	9a04      	ldr	r2, [sp, #16]
 8004666:	b9d8      	cbnz	r0, 80046a0 <_vfiprintf_r+0x110>
 8004668:	06d1      	lsls	r1, r2, #27
 800466a:	bf44      	itt	mi
 800466c:	2320      	movmi	r3, #32
 800466e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004672:	0713      	lsls	r3, r2, #28
 8004674:	bf44      	itt	mi
 8004676:	232b      	movmi	r3, #43	@ 0x2b
 8004678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800467c:	f89a 3000 	ldrb.w	r3, [sl]
 8004680:	2b2a      	cmp	r3, #42	@ 0x2a
 8004682:	d015      	beq.n	80046b0 <_vfiprintf_r+0x120>
 8004684:	9a07      	ldr	r2, [sp, #28]
 8004686:	4654      	mov	r4, sl
 8004688:	2000      	movs	r0, #0
 800468a:	f04f 0c0a 	mov.w	ip, #10
 800468e:	4621      	mov	r1, r4
 8004690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004694:	3b30      	subs	r3, #48	@ 0x30
 8004696:	2b09      	cmp	r3, #9
 8004698:	d94b      	bls.n	8004732 <_vfiprintf_r+0x1a2>
 800469a:	b1b0      	cbz	r0, 80046ca <_vfiprintf_r+0x13a>
 800469c:	9207      	str	r2, [sp, #28]
 800469e:	e014      	b.n	80046ca <_vfiprintf_r+0x13a>
 80046a0:	eba0 0308 	sub.w	r3, r0, r8
 80046a4:	fa09 f303 	lsl.w	r3, r9, r3
 80046a8:	4313      	orrs	r3, r2
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	46a2      	mov	sl, r4
 80046ae:	e7d2      	b.n	8004656 <_vfiprintf_r+0xc6>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	1d19      	adds	r1, r3, #4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	9103      	str	r1, [sp, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfbb      	ittet	lt
 80046bc:	425b      	neglt	r3, r3
 80046be:	f042 0202 	orrlt.w	r2, r2, #2
 80046c2:	9307      	strge	r3, [sp, #28]
 80046c4:	9307      	strlt	r3, [sp, #28]
 80046c6:	bfb8      	it	lt
 80046c8:	9204      	strlt	r2, [sp, #16]
 80046ca:	7823      	ldrb	r3, [r4, #0]
 80046cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ce:	d10a      	bne.n	80046e6 <_vfiprintf_r+0x156>
 80046d0:	7863      	ldrb	r3, [r4, #1]
 80046d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d4:	d132      	bne.n	800473c <_vfiprintf_r+0x1ac>
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	9203      	str	r2, [sp, #12]
 80046de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046e2:	3402      	adds	r4, #2
 80046e4:	9305      	str	r3, [sp, #20]
 80046e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80047bc <_vfiprintf_r+0x22c>
 80046ea:	7821      	ldrb	r1, [r4, #0]
 80046ec:	2203      	movs	r2, #3
 80046ee:	4650      	mov	r0, sl
 80046f0:	f7fb fd7e 	bl	80001f0 <memchr>
 80046f4:	b138      	cbz	r0, 8004706 <_vfiprintf_r+0x176>
 80046f6:	9b04      	ldr	r3, [sp, #16]
 80046f8:	eba0 000a 	sub.w	r0, r0, sl
 80046fc:	2240      	movs	r2, #64	@ 0x40
 80046fe:	4082      	lsls	r2, r0
 8004700:	4313      	orrs	r3, r2
 8004702:	3401      	adds	r4, #1
 8004704:	9304      	str	r3, [sp, #16]
 8004706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800470a:	4829      	ldr	r0, [pc, #164]	@ (80047b0 <_vfiprintf_r+0x220>)
 800470c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004710:	2206      	movs	r2, #6
 8004712:	f7fb fd6d 	bl	80001f0 <memchr>
 8004716:	2800      	cmp	r0, #0
 8004718:	d03f      	beq.n	800479a <_vfiprintf_r+0x20a>
 800471a:	4b26      	ldr	r3, [pc, #152]	@ (80047b4 <_vfiprintf_r+0x224>)
 800471c:	bb1b      	cbnz	r3, 8004766 <_vfiprintf_r+0x1d6>
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	3307      	adds	r3, #7
 8004722:	f023 0307 	bic.w	r3, r3, #7
 8004726:	3308      	adds	r3, #8
 8004728:	9303      	str	r3, [sp, #12]
 800472a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800472c:	443b      	add	r3, r7
 800472e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004730:	e76a      	b.n	8004608 <_vfiprintf_r+0x78>
 8004732:	fb0c 3202 	mla	r2, ip, r2, r3
 8004736:	460c      	mov	r4, r1
 8004738:	2001      	movs	r0, #1
 800473a:	e7a8      	b.n	800468e <_vfiprintf_r+0xfe>
 800473c:	2300      	movs	r3, #0
 800473e:	3401      	adds	r4, #1
 8004740:	9305      	str	r3, [sp, #20]
 8004742:	4619      	mov	r1, r3
 8004744:	f04f 0c0a 	mov.w	ip, #10
 8004748:	4620      	mov	r0, r4
 800474a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800474e:	3a30      	subs	r2, #48	@ 0x30
 8004750:	2a09      	cmp	r2, #9
 8004752:	d903      	bls.n	800475c <_vfiprintf_r+0x1cc>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0c6      	beq.n	80046e6 <_vfiprintf_r+0x156>
 8004758:	9105      	str	r1, [sp, #20]
 800475a:	e7c4      	b.n	80046e6 <_vfiprintf_r+0x156>
 800475c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004760:	4604      	mov	r4, r0
 8004762:	2301      	movs	r3, #1
 8004764:	e7f0      	b.n	8004748 <_vfiprintf_r+0x1b8>
 8004766:	ab03      	add	r3, sp, #12
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	462a      	mov	r2, r5
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <_vfiprintf_r+0x228>)
 800476e:	a904      	add	r1, sp, #16
 8004770:	4630      	mov	r0, r6
 8004772:	f3af 8000 	nop.w
 8004776:	4607      	mov	r7, r0
 8004778:	1c78      	adds	r0, r7, #1
 800477a:	d1d6      	bne.n	800472a <_vfiprintf_r+0x19a>
 800477c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800477e:	07d9      	lsls	r1, r3, #31
 8004780:	d405      	bmi.n	800478e <_vfiprintf_r+0x1fe>
 8004782:	89ab      	ldrh	r3, [r5, #12]
 8004784:	059a      	lsls	r2, r3, #22
 8004786:	d402      	bmi.n	800478e <_vfiprintf_r+0x1fe>
 8004788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800478a:	f7ff fc77 	bl	800407c <__retarget_lock_release_recursive>
 800478e:	89ab      	ldrh	r3, [r5, #12]
 8004790:	065b      	lsls	r3, r3, #25
 8004792:	f53f af1f 	bmi.w	80045d4 <_vfiprintf_r+0x44>
 8004796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004798:	e71e      	b.n	80045d8 <_vfiprintf_r+0x48>
 800479a:	ab03      	add	r3, sp, #12
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	462a      	mov	r2, r5
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <_vfiprintf_r+0x228>)
 80047a2:	a904      	add	r1, sp, #16
 80047a4:	4630      	mov	r0, r6
 80047a6:	f000 f879 	bl	800489c <_printf_i>
 80047aa:	e7e4      	b.n	8004776 <_vfiprintf_r+0x1e6>
 80047ac:	08005178 	.word	0x08005178
 80047b0:	08005182 	.word	0x08005182
 80047b4:	00000000 	.word	0x00000000
 80047b8:	0800456b 	.word	0x0800456b
 80047bc:	0800517e 	.word	0x0800517e

080047c0 <_printf_common>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	4616      	mov	r6, r2
 80047c6:	4698      	mov	r8, r3
 80047c8:	688a      	ldr	r2, [r1, #8]
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bfb8      	it	lt
 80047d4:	4613      	movlt	r3, r2
 80047d6:	6033      	str	r3, [r6, #0]
 80047d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047dc:	4607      	mov	r7, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	b10a      	cbz	r2, 80047e6 <_printf_common+0x26>
 80047e2:	3301      	adds	r3, #1
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	0699      	lsls	r1, r3, #26
 80047ea:	bf42      	ittt	mi
 80047ec:	6833      	ldrmi	r3, [r6, #0]
 80047ee:	3302      	addmi	r3, #2
 80047f0:	6033      	strmi	r3, [r6, #0]
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	f015 0506 	ands.w	r5, r5, #6
 80047f8:	d106      	bne.n	8004808 <_printf_common+0x48>
 80047fa:	f104 0a19 	add.w	sl, r4, #25
 80047fe:	68e3      	ldr	r3, [r4, #12]
 8004800:	6832      	ldr	r2, [r6, #0]
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	42ab      	cmp	r3, r5
 8004806:	dc26      	bgt.n	8004856 <_printf_common+0x96>
 8004808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	3b00      	subs	r3, #0
 8004810:	bf18      	it	ne
 8004812:	2301      	movne	r3, #1
 8004814:	0692      	lsls	r2, r2, #26
 8004816:	d42b      	bmi.n	8004870 <_printf_common+0xb0>
 8004818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800481c:	4641      	mov	r1, r8
 800481e:	4638      	mov	r0, r7
 8004820:	47c8      	blx	r9
 8004822:	3001      	adds	r0, #1
 8004824:	d01e      	beq.n	8004864 <_printf_common+0xa4>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	f003 0306 	and.w	r3, r3, #6
 800482e:	2b04      	cmp	r3, #4
 8004830:	bf02      	ittt	eq
 8004832:	68e5      	ldreq	r5, [r4, #12]
 8004834:	6833      	ldreq	r3, [r6, #0]
 8004836:	1aed      	subeq	r5, r5, r3
 8004838:	68a3      	ldr	r3, [r4, #8]
 800483a:	bf0c      	ite	eq
 800483c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004840:	2500      	movne	r5, #0
 8004842:	4293      	cmp	r3, r2
 8004844:	bfc4      	itt	gt
 8004846:	1a9b      	subgt	r3, r3, r2
 8004848:	18ed      	addgt	r5, r5, r3
 800484a:	2600      	movs	r6, #0
 800484c:	341a      	adds	r4, #26
 800484e:	42b5      	cmp	r5, r6
 8004850:	d11a      	bne.n	8004888 <_printf_common+0xc8>
 8004852:	2000      	movs	r0, #0
 8004854:	e008      	b.n	8004868 <_printf_common+0xa8>
 8004856:	2301      	movs	r3, #1
 8004858:	4652      	mov	r2, sl
 800485a:	4641      	mov	r1, r8
 800485c:	4638      	mov	r0, r7
 800485e:	47c8      	blx	r9
 8004860:	3001      	adds	r0, #1
 8004862:	d103      	bne.n	800486c <_printf_common+0xac>
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	3501      	adds	r5, #1
 800486e:	e7c6      	b.n	80047fe <_printf_common+0x3e>
 8004870:	18e1      	adds	r1, r4, r3
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	2030      	movs	r0, #48	@ 0x30
 8004876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800487a:	4422      	add	r2, r4
 800487c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004884:	3302      	adds	r3, #2
 8004886:	e7c7      	b.n	8004818 <_printf_common+0x58>
 8004888:	2301      	movs	r3, #1
 800488a:	4622      	mov	r2, r4
 800488c:	4641      	mov	r1, r8
 800488e:	4638      	mov	r0, r7
 8004890:	47c8      	blx	r9
 8004892:	3001      	adds	r0, #1
 8004894:	d0e6      	beq.n	8004864 <_printf_common+0xa4>
 8004896:	3601      	adds	r6, #1
 8004898:	e7d9      	b.n	800484e <_printf_common+0x8e>
	...

0800489c <_printf_i>:
 800489c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	7e0f      	ldrb	r7, [r1, #24]
 80048a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048a4:	2f78      	cmp	r7, #120	@ 0x78
 80048a6:	4691      	mov	r9, r2
 80048a8:	4680      	mov	r8, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	469a      	mov	sl, r3
 80048ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048b2:	d807      	bhi.n	80048c4 <_printf_i+0x28>
 80048b4:	2f62      	cmp	r7, #98	@ 0x62
 80048b6:	d80a      	bhi.n	80048ce <_printf_i+0x32>
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f000 80d2 	beq.w	8004a62 <_printf_i+0x1c6>
 80048be:	2f58      	cmp	r7, #88	@ 0x58
 80048c0:	f000 80b9 	beq.w	8004a36 <_printf_i+0x19a>
 80048c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048cc:	e03a      	b.n	8004944 <_printf_i+0xa8>
 80048ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048d2:	2b15      	cmp	r3, #21
 80048d4:	d8f6      	bhi.n	80048c4 <_printf_i+0x28>
 80048d6:	a101      	add	r1, pc, #4	@ (adr r1, 80048dc <_printf_i+0x40>)
 80048d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004949 	.word	0x08004949
 80048e4:	080048c5 	.word	0x080048c5
 80048e8:	080048c5 	.word	0x080048c5
 80048ec:	080048c5 	.word	0x080048c5
 80048f0:	080048c5 	.word	0x080048c5
 80048f4:	08004949 	.word	0x08004949
 80048f8:	080048c5 	.word	0x080048c5
 80048fc:	080048c5 	.word	0x080048c5
 8004900:	080048c5 	.word	0x080048c5
 8004904:	080048c5 	.word	0x080048c5
 8004908:	08004a49 	.word	0x08004a49
 800490c:	08004973 	.word	0x08004973
 8004910:	08004a03 	.word	0x08004a03
 8004914:	080048c5 	.word	0x080048c5
 8004918:	080048c5 	.word	0x080048c5
 800491c:	08004a6b 	.word	0x08004a6b
 8004920:	080048c5 	.word	0x080048c5
 8004924:	08004973 	.word	0x08004973
 8004928:	080048c5 	.word	0x080048c5
 800492c:	080048c5 	.word	0x080048c5
 8004930:	08004a0b 	.word	0x08004a0b
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6032      	str	r2, [r6, #0]
 800493c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004944:	2301      	movs	r3, #1
 8004946:	e09d      	b.n	8004a84 <_printf_i+0x1e8>
 8004948:	6833      	ldr	r3, [r6, #0]
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	6031      	str	r1, [r6, #0]
 8004950:	0606      	lsls	r6, r0, #24
 8004952:	d501      	bpl.n	8004958 <_printf_i+0xbc>
 8004954:	681d      	ldr	r5, [r3, #0]
 8004956:	e003      	b.n	8004960 <_printf_i+0xc4>
 8004958:	0645      	lsls	r5, r0, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0xb8>
 800495c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004960:	2d00      	cmp	r5, #0
 8004962:	da03      	bge.n	800496c <_printf_i+0xd0>
 8004964:	232d      	movs	r3, #45	@ 0x2d
 8004966:	426d      	negs	r5, r5
 8004968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800496c:	4859      	ldr	r0, [pc, #356]	@ (8004ad4 <_printf_i+0x238>)
 800496e:	230a      	movs	r3, #10
 8004970:	e011      	b.n	8004996 <_printf_i+0xfa>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	6833      	ldr	r3, [r6, #0]
 8004976:	0608      	lsls	r0, r1, #24
 8004978:	f853 5b04 	ldr.w	r5, [r3], #4
 800497c:	d402      	bmi.n	8004984 <_printf_i+0xe8>
 800497e:	0649      	lsls	r1, r1, #25
 8004980:	bf48      	it	mi
 8004982:	b2ad      	uxthmi	r5, r5
 8004984:	2f6f      	cmp	r7, #111	@ 0x6f
 8004986:	4853      	ldr	r0, [pc, #332]	@ (8004ad4 <_printf_i+0x238>)
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	bf14      	ite	ne
 800498c:	230a      	movne	r3, #10
 800498e:	2308      	moveq	r3, #8
 8004990:	2100      	movs	r1, #0
 8004992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004996:	6866      	ldr	r6, [r4, #4]
 8004998:	60a6      	str	r6, [r4, #8]
 800499a:	2e00      	cmp	r6, #0
 800499c:	bfa2      	ittt	ge
 800499e:	6821      	ldrge	r1, [r4, #0]
 80049a0:	f021 0104 	bicge.w	r1, r1, #4
 80049a4:	6021      	strge	r1, [r4, #0]
 80049a6:	b90d      	cbnz	r5, 80049ac <_printf_i+0x110>
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d04b      	beq.n	8004a44 <_printf_i+0x1a8>
 80049ac:	4616      	mov	r6, r2
 80049ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80049b2:	fb03 5711 	mls	r7, r3, r1, r5
 80049b6:	5dc7      	ldrb	r7, [r0, r7]
 80049b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049bc:	462f      	mov	r7, r5
 80049be:	42bb      	cmp	r3, r7
 80049c0:	460d      	mov	r5, r1
 80049c2:	d9f4      	bls.n	80049ae <_printf_i+0x112>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d10b      	bne.n	80049e0 <_printf_i+0x144>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	07df      	lsls	r7, r3, #31
 80049cc:	d508      	bpl.n	80049e0 <_printf_i+0x144>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	6861      	ldr	r1, [r4, #4]
 80049d2:	4299      	cmp	r1, r3
 80049d4:	bfde      	ittt	le
 80049d6:	2330      	movle	r3, #48	@ 0x30
 80049d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049e0:	1b92      	subs	r2, r2, r6
 80049e2:	6122      	str	r2, [r4, #16]
 80049e4:	f8cd a000 	str.w	sl, [sp]
 80049e8:	464b      	mov	r3, r9
 80049ea:	aa03      	add	r2, sp, #12
 80049ec:	4621      	mov	r1, r4
 80049ee:	4640      	mov	r0, r8
 80049f0:	f7ff fee6 	bl	80047c0 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d14a      	bne.n	8004a8e <_printf_i+0x1f2>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	b004      	add	sp, #16
 80049fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	4833      	ldr	r0, [pc, #204]	@ (8004ad8 <_printf_i+0x23c>)
 8004a0c:	2778      	movs	r7, #120	@ 0x78
 8004a0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	6831      	ldr	r1, [r6, #0]
 8004a16:	061f      	lsls	r7, r3, #24
 8004a18:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a1c:	d402      	bmi.n	8004a24 <_printf_i+0x188>
 8004a1e:	065f      	lsls	r7, r3, #25
 8004a20:	bf48      	it	mi
 8004a22:	b2ad      	uxthmi	r5, r5
 8004a24:	6031      	str	r1, [r6, #0]
 8004a26:	07d9      	lsls	r1, r3, #31
 8004a28:	bf44      	itt	mi
 8004a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a2e:	6023      	strmi	r3, [r4, #0]
 8004a30:	b11d      	cbz	r5, 8004a3a <_printf_i+0x19e>
 8004a32:	2310      	movs	r3, #16
 8004a34:	e7ac      	b.n	8004990 <_printf_i+0xf4>
 8004a36:	4827      	ldr	r0, [pc, #156]	@ (8004ad4 <_printf_i+0x238>)
 8004a38:	e7e9      	b.n	8004a0e <_printf_i+0x172>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	f023 0320 	bic.w	r3, r3, #32
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	e7f6      	b.n	8004a32 <_printf_i+0x196>
 8004a44:	4616      	mov	r6, r2
 8004a46:	e7bd      	b.n	80049c4 <_printf_i+0x128>
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	6961      	ldr	r1, [r4, #20]
 8004a4e:	1d18      	adds	r0, r3, #4
 8004a50:	6030      	str	r0, [r6, #0]
 8004a52:	062e      	lsls	r6, r5, #24
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	d501      	bpl.n	8004a5c <_printf_i+0x1c0>
 8004a58:	6019      	str	r1, [r3, #0]
 8004a5a:	e002      	b.n	8004a62 <_printf_i+0x1c6>
 8004a5c:	0668      	lsls	r0, r5, #25
 8004a5e:	d5fb      	bpl.n	8004a58 <_printf_i+0x1bc>
 8004a60:	8019      	strh	r1, [r3, #0]
 8004a62:	2300      	movs	r3, #0
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	4616      	mov	r6, r2
 8004a68:	e7bc      	b.n	80049e4 <_printf_i+0x148>
 8004a6a:	6833      	ldr	r3, [r6, #0]
 8004a6c:	1d1a      	adds	r2, r3, #4
 8004a6e:	6032      	str	r2, [r6, #0]
 8004a70:	681e      	ldr	r6, [r3, #0]
 8004a72:	6862      	ldr	r2, [r4, #4]
 8004a74:	2100      	movs	r1, #0
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7fb fbba 	bl	80001f0 <memchr>
 8004a7c:	b108      	cbz	r0, 8004a82 <_printf_i+0x1e6>
 8004a7e:	1b80      	subs	r0, r0, r6
 8004a80:	6060      	str	r0, [r4, #4]
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	2300      	movs	r3, #0
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a8c:	e7aa      	b.n	80049e4 <_printf_i+0x148>
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	4632      	mov	r2, r6
 8004a92:	4649      	mov	r1, r9
 8004a94:	4640      	mov	r0, r8
 8004a96:	47d0      	blx	sl
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d0ad      	beq.n	80049f8 <_printf_i+0x15c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	079b      	lsls	r3, r3, #30
 8004aa0:	d413      	bmi.n	8004aca <_printf_i+0x22e>
 8004aa2:	68e0      	ldr	r0, [r4, #12]
 8004aa4:	9b03      	ldr	r3, [sp, #12]
 8004aa6:	4298      	cmp	r0, r3
 8004aa8:	bfb8      	it	lt
 8004aaa:	4618      	movlt	r0, r3
 8004aac:	e7a6      	b.n	80049fc <_printf_i+0x160>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	47d0      	blx	sl
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d09d      	beq.n	80049f8 <_printf_i+0x15c>
 8004abc:	3501      	adds	r5, #1
 8004abe:	68e3      	ldr	r3, [r4, #12]
 8004ac0:	9903      	ldr	r1, [sp, #12]
 8004ac2:	1a5b      	subs	r3, r3, r1
 8004ac4:	42ab      	cmp	r3, r5
 8004ac6:	dcf2      	bgt.n	8004aae <_printf_i+0x212>
 8004ac8:	e7eb      	b.n	8004aa2 <_printf_i+0x206>
 8004aca:	2500      	movs	r5, #0
 8004acc:	f104 0619 	add.w	r6, r4, #25
 8004ad0:	e7f5      	b.n	8004abe <_printf_i+0x222>
 8004ad2:	bf00      	nop
 8004ad4:	08005189 	.word	0x08005189
 8004ad8:	0800519a 	.word	0x0800519a

08004adc <__sflush_r>:
 8004adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	0716      	lsls	r6, r2, #28
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	d454      	bmi.n	8004b96 <__sflush_r+0xba>
 8004aec:	684b      	ldr	r3, [r1, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	dc02      	bgt.n	8004af8 <__sflush_r+0x1c>
 8004af2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dd48      	ble.n	8004b8a <__sflush_r+0xae>
 8004af8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	d045      	beq.n	8004b8a <__sflush_r+0xae>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b04:	682f      	ldr	r7, [r5, #0]
 8004b06:	6a21      	ldr	r1, [r4, #32]
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	d030      	beq.n	8004b6e <__sflush_r+0x92>
 8004b0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	0759      	lsls	r1, r3, #29
 8004b12:	d505      	bpl.n	8004b20 <__sflush_r+0x44>
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b1a:	b10b      	cbz	r3, 8004b20 <__sflush_r+0x44>
 8004b1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	2300      	movs	r3, #0
 8004b22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b24:	6a21      	ldr	r1, [r4, #32]
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b0      	blx	r6
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	d106      	bne.n	8004b3e <__sflush_r+0x62>
 8004b30:	6829      	ldr	r1, [r5, #0]
 8004b32:	291d      	cmp	r1, #29
 8004b34:	d82b      	bhi.n	8004b8e <__sflush_r+0xb2>
 8004b36:	4a2a      	ldr	r2, [pc, #168]	@ (8004be0 <__sflush_r+0x104>)
 8004b38:	410a      	asrs	r2, r1
 8004b3a:	07d6      	lsls	r6, r2, #31
 8004b3c:	d427      	bmi.n	8004b8e <__sflush_r+0xb2>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	6062      	str	r2, [r4, #4]
 8004b42:	04d9      	lsls	r1, r3, #19
 8004b44:	6922      	ldr	r2, [r4, #16]
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	d504      	bpl.n	8004b54 <__sflush_r+0x78>
 8004b4a:	1c42      	adds	r2, r0, #1
 8004b4c:	d101      	bne.n	8004b52 <__sflush_r+0x76>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	b903      	cbnz	r3, 8004b54 <__sflush_r+0x78>
 8004b52:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b56:	602f      	str	r7, [r5, #0]
 8004b58:	b1b9      	cbz	r1, 8004b8a <__sflush_r+0xae>
 8004b5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d002      	beq.n	8004b68 <__sflush_r+0x8c>
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7ff fa9a 	bl	800409c <_free_r>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b6c:	e00d      	b.n	8004b8a <__sflush_r+0xae>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4628      	mov	r0, r5
 8004b72:	47b0      	blx	r6
 8004b74:	4602      	mov	r2, r0
 8004b76:	1c50      	adds	r0, r2, #1
 8004b78:	d1c9      	bne.n	8004b0e <__sflush_r+0x32>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0c6      	beq.n	8004b0e <__sflush_r+0x32>
 8004b80:	2b1d      	cmp	r3, #29
 8004b82:	d001      	beq.n	8004b88 <__sflush_r+0xac>
 8004b84:	2b16      	cmp	r3, #22
 8004b86:	d11e      	bne.n	8004bc6 <__sflush_r+0xea>
 8004b88:	602f      	str	r7, [r5, #0]
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e022      	b.n	8004bd4 <__sflush_r+0xf8>
 8004b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	e01b      	b.n	8004bce <__sflush_r+0xf2>
 8004b96:	690f      	ldr	r7, [r1, #16]
 8004b98:	2f00      	cmp	r7, #0
 8004b9a:	d0f6      	beq.n	8004b8a <__sflush_r+0xae>
 8004b9c:	0793      	lsls	r3, r2, #30
 8004b9e:	680e      	ldr	r6, [r1, #0]
 8004ba0:	bf08      	it	eq
 8004ba2:	694b      	ldreq	r3, [r1, #20]
 8004ba4:	600f      	str	r7, [r1, #0]
 8004ba6:	bf18      	it	ne
 8004ba8:	2300      	movne	r3, #0
 8004baa:	eba6 0807 	sub.w	r8, r6, r7
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	f1b8 0f00 	cmp.w	r8, #0
 8004bb4:	dde9      	ble.n	8004b8a <__sflush_r+0xae>
 8004bb6:	6a21      	ldr	r1, [r4, #32]
 8004bb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004bba:	4643      	mov	r3, r8
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b0      	blx	r6
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	dc08      	bgt.n	8004bd8 <__sflush_r+0xfc>
 8004bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bce:	81a3      	strh	r3, [r4, #12]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd8:	4407      	add	r7, r0
 8004bda:	eba8 0800 	sub.w	r8, r8, r0
 8004bde:	e7e7      	b.n	8004bb0 <__sflush_r+0xd4>
 8004be0:	dfbffffe 	.word	0xdfbffffe

08004be4 <_fflush_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	690b      	ldr	r3, [r1, #16]
 8004be8:	4605      	mov	r5, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	b913      	cbnz	r3, 8004bf4 <_fflush_r+0x10>
 8004bee:	2500      	movs	r5, #0
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	b118      	cbz	r0, 8004bfe <_fflush_r+0x1a>
 8004bf6:	6a03      	ldr	r3, [r0, #32]
 8004bf8:	b90b      	cbnz	r3, 8004bfe <_fflush_r+0x1a>
 8004bfa:	f7ff f919 	bl	8003e30 <__sinit>
 8004bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f3      	beq.n	8004bee <_fflush_r+0xa>
 8004c06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c08:	07d0      	lsls	r0, r2, #31
 8004c0a:	d404      	bmi.n	8004c16 <_fflush_r+0x32>
 8004c0c:	0599      	lsls	r1, r3, #22
 8004c0e:	d402      	bmi.n	8004c16 <_fflush_r+0x32>
 8004c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c12:	f7ff fa32 	bl	800407a <__retarget_lock_acquire_recursive>
 8004c16:	4628      	mov	r0, r5
 8004c18:	4621      	mov	r1, r4
 8004c1a:	f7ff ff5f 	bl	8004adc <__sflush_r>
 8004c1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c20:	07da      	lsls	r2, r3, #31
 8004c22:	4605      	mov	r5, r0
 8004c24:	d4e4      	bmi.n	8004bf0 <_fflush_r+0xc>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	059b      	lsls	r3, r3, #22
 8004c2a:	d4e1      	bmi.n	8004bf0 <_fflush_r+0xc>
 8004c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c2e:	f7ff fa25 	bl	800407c <__retarget_lock_release_recursive>
 8004c32:	e7dd      	b.n	8004bf0 <_fflush_r+0xc>

08004c34 <__swbuf_r>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	460e      	mov	r6, r1
 8004c38:	4614      	mov	r4, r2
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	b118      	cbz	r0, 8004c46 <__swbuf_r+0x12>
 8004c3e:	6a03      	ldr	r3, [r0, #32]
 8004c40:	b90b      	cbnz	r3, 8004c46 <__swbuf_r+0x12>
 8004c42:	f7ff f8f5 	bl	8003e30 <__sinit>
 8004c46:	69a3      	ldr	r3, [r4, #24]
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	071a      	lsls	r2, r3, #28
 8004c4e:	d501      	bpl.n	8004c54 <__swbuf_r+0x20>
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	b943      	cbnz	r3, 8004c66 <__swbuf_r+0x32>
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f82a 	bl	8004cb0 <__swsetup_r>
 8004c5c:	b118      	cbz	r0, 8004c66 <__swbuf_r+0x32>
 8004c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c62:	4638      	mov	r0, r7
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	6922      	ldr	r2, [r4, #16]
 8004c6a:	1a98      	subs	r0, r3, r2
 8004c6c:	6963      	ldr	r3, [r4, #20]
 8004c6e:	b2f6      	uxtb	r6, r6
 8004c70:	4283      	cmp	r3, r0
 8004c72:	4637      	mov	r7, r6
 8004c74:	dc05      	bgt.n	8004c82 <__swbuf_r+0x4e>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f7ff ffb3 	bl	8004be4 <_fflush_r>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1ed      	bne.n	8004c5e <__swbuf_r+0x2a>
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60a3      	str	r3, [r4, #8]
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	6022      	str	r2, [r4, #0]
 8004c8e:	701e      	strb	r6, [r3, #0]
 8004c90:	6962      	ldr	r2, [r4, #20]
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d004      	beq.n	8004ca2 <__swbuf_r+0x6e>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	07db      	lsls	r3, r3, #31
 8004c9c:	d5e1      	bpl.n	8004c62 <__swbuf_r+0x2e>
 8004c9e:	2e0a      	cmp	r6, #10
 8004ca0:	d1df      	bne.n	8004c62 <__swbuf_r+0x2e>
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7ff ff9d 	bl	8004be4 <_fflush_r>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d0d9      	beq.n	8004c62 <__swbuf_r+0x2e>
 8004cae:	e7d6      	b.n	8004c5e <__swbuf_r+0x2a>

08004cb0 <__swsetup_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <__swsetup_r+0xa8>)
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	460c      	mov	r4, r1
 8004cba:	b118      	cbz	r0, 8004cc4 <__swsetup_r+0x14>
 8004cbc:	6a03      	ldr	r3, [r0, #32]
 8004cbe:	b90b      	cbnz	r3, 8004cc4 <__swsetup_r+0x14>
 8004cc0:	f7ff f8b6 	bl	8003e30 <__sinit>
 8004cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d422      	bmi.n	8004d12 <__swsetup_r+0x62>
 8004ccc:	06da      	lsls	r2, r3, #27
 8004cce:	d407      	bmi.n	8004ce0 <__swsetup_r+0x30>
 8004cd0:	2209      	movs	r2, #9
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e033      	b.n	8004d48 <__swsetup_r+0x98>
 8004ce0:	0758      	lsls	r0, r3, #29
 8004ce2:	d512      	bpl.n	8004d0a <__swsetup_r+0x5a>
 8004ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ce6:	b141      	cbz	r1, 8004cfa <__swsetup_r+0x4a>
 8004ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cec:	4299      	cmp	r1, r3
 8004cee:	d002      	beq.n	8004cf6 <__swsetup_r+0x46>
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7ff f9d3 	bl	800409c <_free_r>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	2300      	movs	r3, #0
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	f043 0308 	orr.w	r3, r3, #8
 8004d10:	81a3      	strh	r3, [r4, #12]
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	b94b      	cbnz	r3, 8004d2a <__swsetup_r+0x7a>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d20:	d003      	beq.n	8004d2a <__swsetup_r+0x7a>
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f897 	bl	8004e58 <__smakebuf_r>
 8004d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2e:	f013 0201 	ands.w	r2, r3, #1
 8004d32:	d00a      	beq.n	8004d4a <__swsetup_r+0x9a>
 8004d34:	2200      	movs	r2, #0
 8004d36:	60a2      	str	r2, [r4, #8]
 8004d38:	6962      	ldr	r2, [r4, #20]
 8004d3a:	4252      	negs	r2, r2
 8004d3c:	61a2      	str	r2, [r4, #24]
 8004d3e:	6922      	ldr	r2, [r4, #16]
 8004d40:	b942      	cbnz	r2, 8004d54 <__swsetup_r+0xa4>
 8004d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d46:	d1c5      	bne.n	8004cd4 <__swsetup_r+0x24>
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	0799      	lsls	r1, r3, #30
 8004d4c:	bf58      	it	pl
 8004d4e:	6962      	ldrpl	r2, [r4, #20]
 8004d50:	60a2      	str	r2, [r4, #8]
 8004d52:	e7f4      	b.n	8004d3e <__swsetup_r+0x8e>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e7f7      	b.n	8004d48 <__swsetup_r+0x98>
 8004d58:	20000018 	.word	0x20000018

08004d5c <memmove>:
 8004d5c:	4288      	cmp	r0, r1
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	eb01 0402 	add.w	r4, r1, r2
 8004d64:	d902      	bls.n	8004d6c <memmove+0x10>
 8004d66:	4284      	cmp	r4, r0
 8004d68:	4623      	mov	r3, r4
 8004d6a:	d807      	bhi.n	8004d7c <memmove+0x20>
 8004d6c:	1e43      	subs	r3, r0, #1
 8004d6e:	42a1      	cmp	r1, r4
 8004d70:	d008      	beq.n	8004d84 <memmove+0x28>
 8004d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d7a:	e7f8      	b.n	8004d6e <memmove+0x12>
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4601      	mov	r1, r0
 8004d80:	428a      	cmp	r2, r1
 8004d82:	d100      	bne.n	8004d86 <memmove+0x2a>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d8e:	e7f7      	b.n	8004d80 <memmove+0x24>

08004d90 <_sbrk_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d06      	ldr	r5, [pc, #24]	@ (8004dac <_sbrk_r+0x1c>)
 8004d94:	2300      	movs	r3, #0
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fb fea6 	bl	8000aec <_sbrk>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_sbrk_r+0x1a>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_sbrk_r+0x1a>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	200002a0 	.word	0x200002a0

08004db0 <_realloc_r>:
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	4680      	mov	r8, r0
 8004db6:	4615      	mov	r5, r2
 8004db8:	460c      	mov	r4, r1
 8004dba:	b921      	cbnz	r1, 8004dc6 <_realloc_r+0x16>
 8004dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	f7ff b9d7 	b.w	8004174 <_malloc_r>
 8004dc6:	b92a      	cbnz	r2, 8004dd4 <_realloc_r+0x24>
 8004dc8:	f7ff f968 	bl	800409c <_free_r>
 8004dcc:	2400      	movs	r4, #0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd4:	f000 f89e 	bl	8004f14 <_malloc_usable_size_r>
 8004dd8:	4285      	cmp	r5, r0
 8004dda:	4606      	mov	r6, r0
 8004ddc:	d802      	bhi.n	8004de4 <_realloc_r+0x34>
 8004dde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004de2:	d8f4      	bhi.n	8004dce <_realloc_r+0x1e>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4640      	mov	r0, r8
 8004de8:	f7ff f9c4 	bl	8004174 <_malloc_r>
 8004dec:	4607      	mov	r7, r0
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d0ec      	beq.n	8004dcc <_realloc_r+0x1c>
 8004df2:	42b5      	cmp	r5, r6
 8004df4:	462a      	mov	r2, r5
 8004df6:	4621      	mov	r1, r4
 8004df8:	bf28      	it	cs
 8004dfa:	4632      	movcs	r2, r6
 8004dfc:	f7ff f93f 	bl	800407e <memcpy>
 8004e00:	4621      	mov	r1, r4
 8004e02:	4640      	mov	r0, r8
 8004e04:	f7ff f94a 	bl	800409c <_free_r>
 8004e08:	463c      	mov	r4, r7
 8004e0a:	e7e0      	b.n	8004dce <_realloc_r+0x1e>

08004e0c <__swhatbuf_r>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	2900      	cmp	r1, #0
 8004e16:	b096      	sub	sp, #88	@ 0x58
 8004e18:	4615      	mov	r5, r2
 8004e1a:	461e      	mov	r6, r3
 8004e1c:	da0d      	bge.n	8004e3a <__swhatbuf_r+0x2e>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2340      	movne	r3, #64	@ 0x40
 8004e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e30:	2000      	movs	r0, #0
 8004e32:	6031      	str	r1, [r6, #0]
 8004e34:	602b      	str	r3, [r5, #0]
 8004e36:	b016      	add	sp, #88	@ 0x58
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
 8004e3a:	466a      	mov	r2, sp
 8004e3c:	f000 f848 	bl	8004ed0 <_fstat_r>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	dbec      	blt.n	8004e1e <__swhatbuf_r+0x12>
 8004e44:	9901      	ldr	r1, [sp, #4]
 8004e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e4e:	4259      	negs	r1, r3
 8004e50:	4159      	adcs	r1, r3
 8004e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e56:	e7eb      	b.n	8004e30 <__swhatbuf_r+0x24>

08004e58 <__smakebuf_r>:
 8004e58:	898b      	ldrh	r3, [r1, #12]
 8004e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e5c:	079d      	lsls	r5, r3, #30
 8004e5e:	4606      	mov	r6, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	d507      	bpl.n	8004e74 <__smakebuf_r+0x1c>
 8004e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	6163      	str	r3, [r4, #20]
 8004e70:	b003      	add	sp, #12
 8004e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e74:	ab01      	add	r3, sp, #4
 8004e76:	466a      	mov	r2, sp
 8004e78:	f7ff ffc8 	bl	8004e0c <__swhatbuf_r>
 8004e7c:	9f00      	ldr	r7, [sp, #0]
 8004e7e:	4605      	mov	r5, r0
 8004e80:	4639      	mov	r1, r7
 8004e82:	4630      	mov	r0, r6
 8004e84:	f7ff f976 	bl	8004174 <_malloc_r>
 8004e88:	b948      	cbnz	r0, 8004e9e <__smakebuf_r+0x46>
 8004e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8e:	059a      	lsls	r2, r3, #22
 8004e90:	d4ee      	bmi.n	8004e70 <__smakebuf_r+0x18>
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	f043 0302 	orr.w	r3, r3, #2
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	e7e2      	b.n	8004e64 <__smakebuf_r+0xc>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	6020      	str	r0, [r4, #0]
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004eae:	b15b      	cbz	r3, 8004ec8 <__smakebuf_r+0x70>
 8004eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	f000 f81d 	bl	8004ef4 <_isatty_r>
 8004eba:	b128      	cbz	r0, 8004ec8 <__smakebuf_r+0x70>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	431d      	orrs	r5, r3
 8004ecc:	81a5      	strh	r5, [r4, #12]
 8004ece:	e7cf      	b.n	8004e70 <__smakebuf_r+0x18>

08004ed0 <_fstat_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d07      	ldr	r5, [pc, #28]	@ (8004ef0 <_fstat_r+0x20>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	f7fb fddd 	bl	8000a9c <_fstat>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d102      	bne.n	8004eec <_fstat_r+0x1c>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	b103      	cbz	r3, 8004eec <_fstat_r+0x1c>
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	bd38      	pop	{r3, r4, r5, pc}
 8004eee:	bf00      	nop
 8004ef0:	200002a0 	.word	0x200002a0

08004ef4 <_isatty_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d06      	ldr	r5, [pc, #24]	@ (8004f10 <_isatty_r+0x1c>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	f7fb fddc 	bl	8000abc <_isatty>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_isatty_r+0x1a>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_isatty_r+0x1a>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	200002a0 	.word	0x200002a0

08004f14 <_malloc_usable_size_r>:
 8004f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f18:	1f18      	subs	r0, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bfbc      	itt	lt
 8004f1e:	580b      	ldrlt	r3, [r1, r0]
 8004f20:	18c0      	addlt	r0, r0, r3
 8004f22:	4770      	bx	lr

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
