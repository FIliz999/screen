
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005848  08005848  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005848  08005848  00006848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005850  08005850  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005854  08005854  00006854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005858  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000068  080058c0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080058c0  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3e8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023cd  00000000  00000000  00014480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00016850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017eba  00000000  00000000  000174b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f7a7  00000000  00000000  0002f372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f98f  00000000  00000000  0003eb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ce4a8  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000096a  00000000  00000000  000ce4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bd4  00000000  00000000  000cee58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d2a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005584 	.word	0x08005584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005584 	.word	0x08005584

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ILI9341_Init>:
static void DC_H(void);
static void LED_H(void);

// Initialization
void ILI9341_Init(SPI_HandleTypeDef hspi3)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b094      	sub	sp, #80	@ 0x50
 8000586:	af14      	add	r7, sp, #80	@ 0x50
 8000588:	f107 0c08 	add.w	ip, r7, #8
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Reset();
 8000590:	f000 fd50 	bl	8001034 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000594:	4668      	mov	r0, sp
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2248      	movs	r2, #72	@ 0x48
 800059c:	4619      	mov	r1, r3
 800059e:	f004 f89e 	bl	80046de <memcpy>
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a8:	f000 fd56 	bl	8001058 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB, hspi3);
 80005ac:	4668      	mov	r0, sp
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	224c      	movs	r2, #76	@ 0x4c
 80005b4:	4619      	mov	r1, r3
 80005b6:	f004 f892 	bl	80046de <memcpy>
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005c0:	20cb      	movs	r0, #203	@ 0xcb
 80005c2:	f000 fd69 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x39, hspi3);
 80005c6:	4668      	mov	r0, sp
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	224c      	movs	r2, #76	@ 0x4c
 80005ce:	4619      	mov	r1, r3
 80005d0:	f004 f885 	bl	80046de <memcpy>
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005da:	2039      	movs	r0, #57	@ 0x39
 80005dc:	f000 fd7d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2C, hspi3);
 80005e0:	4668      	mov	r0, sp
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	224c      	movs	r2, #76	@ 0x4c
 80005e8:	4619      	mov	r1, r3
 80005ea:	f004 f878 	bl	80046de <memcpy>
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f4:	202c      	movs	r0, #44	@ 0x2c
 80005f6:	f000 fd70 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80005fa:	4668      	mov	r0, sp
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	224c      	movs	r2, #76	@ 0x4c
 8000602:	4619      	mov	r1, r3
 8000604:	f004 f86b 	bl	80046de <memcpy>
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fd63 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x34, hspi3);
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	224c      	movs	r2, #76	@ 0x4c
 800061c:	4619      	mov	r1, r3
 800061e:	f004 f85e 	bl	80046de <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000628:	2034      	movs	r0, #52	@ 0x34
 800062a:	f000 fd56 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x02, hspi3);
 800062e:	4668      	mov	r0, sp
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	224c      	movs	r2, #76	@ 0x4c
 8000636:	4619      	mov	r1, r3
 8000638:	f004 f851 	bl	80046de <memcpy>
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fd49 	bl	80010da <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF, hspi3);
 8000648:	4668      	mov	r0, sp
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	f004 f844 	bl	80046de <memcpy>
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	20cf      	movs	r0, #207	@ 0xcf
 800065e:	f000 fd1b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	224c      	movs	r2, #76	@ 0x4c
 800066a:	4619      	mov	r1, r3
 800066c:	f004 f837 	bl	80046de <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fd2f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 800067c:	4668      	mov	r0, sp
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	f004 f82a 	bl	80046de <memcpy>
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000690:	20c1      	movs	r0, #193	@ 0xc1
 8000692:	f000 fd22 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x30, hspi3);
 8000696:	4668      	mov	r0, sp
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	224c      	movs	r2, #76	@ 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	f004 f81d 	bl	80046de <memcpy>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006aa:	2030      	movs	r0, #48	@ 0x30
 80006ac:	f000 fd15 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8, hspi3);
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 f810 	bl	80046de <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c4:	20e8      	movs	r0, #232	@ 0xe8
 80006c6:	f000 fce7 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x85, hspi3);
 80006ca:	4668      	mov	r0, sp
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	224c      	movs	r2, #76	@ 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	f004 f803 	bl	80046de <memcpy>
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	2085      	movs	r0, #133	@ 0x85
 80006e0:	f000 fcfb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	4619      	mov	r1, r3
 80006ee:	f003 fff6 	bl	80046de <memcpy>
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fcee 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x78, hspi3);
 80006fe:	4668      	mov	r0, sp
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	224c      	movs	r2, #76	@ 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	f003 ffe9 	bl	80046de <memcpy>
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fce1 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA, hspi3);
 8000718:	4668      	mov	r0, sp
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	224c      	movs	r2, #76	@ 0x4c
 8000720:	4619      	mov	r1, r3
 8000722:	f003 ffdc 	bl	80046de <memcpy>
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072c:	20ea      	movs	r0, #234	@ 0xea
 800072e:	f000 fcb3 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000732:	4668      	mov	r0, sp
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	224c      	movs	r2, #76	@ 0x4c
 800073a:	4619      	mov	r1, r3
 800073c:	f003 ffcf 	bl	80046de <memcpy>
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fcc7 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	4619      	mov	r1, r3
 8000756:	f003 ffc2 	bl	80046de <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fcba 	bl	80010da <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED, hspi3);
 8000766:	4668      	mov	r0, sp
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	224c      	movs	r2, #76	@ 0x4c
 800076e:	4619      	mov	r1, r3
 8000770:	f003 ffb5 	bl	80046de <memcpy>
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800077a:	20ed      	movs	r0, #237	@ 0xed
 800077c:	f000 fc8c 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x64, hspi3);
 8000780:	4668      	mov	r0, sp
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	f003 ffa8 	bl	80046de <memcpy>
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000794:	2064      	movs	r0, #100	@ 0x64
 8000796:	f000 fca0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 800079a:	4668      	mov	r0, sp
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	224c      	movs	r2, #76	@ 0x4c
 80007a2:	4619      	mov	r1, r3
 80007a4:	f003 ff9b 	bl	80046de <memcpy>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 fc93 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x12, hspi3);
 80007b4:	4668      	mov	r0, sp
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	4619      	mov	r1, r3
 80007be:	f003 ff8e 	bl	80046de <memcpy>
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c8:	2012      	movs	r0, #18
 80007ca:	f000 fc86 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x81, hspi3);
 80007ce:	4668      	mov	r0, sp
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	224c      	movs	r2, #76	@ 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f003 ff81 	bl	80046de <memcpy>
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	2081      	movs	r0, #129	@ 0x81
 80007e4:	f000 fc79 	bl	80010da <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7, hspi3);
 80007e8:	4668      	mov	r0, sp
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	4619      	mov	r1, r3
 80007f2:	f003 ff74 	bl	80046de <memcpy>
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fc:	20f7      	movs	r0, #247	@ 0xf7
 80007fe:	f000 fc4b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x20, hspi3);
 8000802:	4668      	mov	r0, sp
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	224c      	movs	r2, #76	@ 0x4c
 800080a:	4619      	mov	r1, r3
 800080c:	f003 ff67 	bl	80046de <memcpy>
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000816:	2020      	movs	r0, #32
 8000818:	f000 fc5f 	bl	80010da <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0, hspi3);
 800081c:	4668      	mov	r0, sp
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	4619      	mov	r1, r3
 8000826:	f003 ff5a 	bl	80046de <memcpy>
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000830:	20c0      	movs	r0, #192	@ 0xc0
 8000832:	f000 fc31 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8000836:	4668      	mov	r0, sp
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	224c      	movs	r2, #76	@ 0x4c
 800083e:	4619      	mov	r1, r3
 8000840:	f003 ff4d 	bl	80046de <memcpy>
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fc45 	bl	80010da <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1, hspi3);
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	f003 ff40 	bl	80046de <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc17 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 800086a:	4668      	mov	r0, sp
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	224c      	movs	r2, #76	@ 0x4c
 8000872:	4619      	mov	r1, r3
 8000874:	f003 ff33 	bl	80046de <memcpy>
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fc2b 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5, hspi3);
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	224c      	movs	r2, #76	@ 0x4c
 800088c:	4619      	mov	r1, r3
 800088e:	f003 ff26 	bl	80046de <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000898:	20c5      	movs	r0, #197	@ 0xc5
 800089a:	f000 fbfd 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x3E, hspi3);
 800089e:	4668      	mov	r0, sp
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	224c      	movs	r2, #76	@ 0x4c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f003 ff19 	bl	80046de <memcpy>
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b2:	203e      	movs	r0, #62	@ 0x3e
 80008b4:	f000 fc11 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x28, hspi3);
 80008b8:	4668      	mov	r0, sp
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f003 ff0c 	bl	80046de <memcpy>
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008cc:	2028      	movs	r0, #40	@ 0x28
 80008ce:	f000 fc04 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7, hspi3);
 80008d2:	4668      	mov	r0, sp
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	224c      	movs	r2, #76	@ 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	f003 feff 	bl	80046de <memcpy>
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e6:	20c7      	movs	r0, #199	@ 0xc7
 80008e8:	f000 fbd6 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x86, hspi3);
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	224c      	movs	r2, #76	@ 0x4c
 80008f4:	4619      	mov	r1, r3
 80008f6:	f003 fef2 	bl	80046de <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000900:	2086      	movs	r0, #134	@ 0x86
 8000902:	f000 fbea 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36, hspi3);
 8000906:	4668      	mov	r0, sp
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	224c      	movs	r2, #76	@ 0x4c
 800090e:	4619      	mov	r1, r3
 8000910:	f003 fee5 	bl	80046de <memcpy>
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091a:	2036      	movs	r0, #54	@ 0x36
 800091c:	f000 fbbc 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x48, hspi3);
 8000920:	4668      	mov	r0, sp
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	f003 fed8 	bl	80046de <memcpy>
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000934:	2048      	movs	r0, #72	@ 0x48
 8000936:	f000 fbd0 	bl	80010da <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A, hspi3);
 800093a:	4668      	mov	r0, sp
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	224c      	movs	r2, #76	@ 0x4c
 8000942:	4619      	mov	r1, r3
 8000944:	f003 fecb 	bl	80046de <memcpy>
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f000 fba2 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x55, hspi3);    //16bit
 8000954:	4668      	mov	r0, sp
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	224c      	movs	r2, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	f003 febe 	bl	80046de <memcpy>
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000968:	2055      	movs	r0, #85	@ 0x55
 800096a:	f000 fbb6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_REG(0xB1, hspi3);
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	224c      	movs	r2, #76	@ 0x4c
 8000976:	4619      	mov	r1, r3
 8000978:	f003 feb1 	bl	80046de <memcpy>
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000982:	20b1      	movs	r0, #177	@ 0xb1
 8000984:	f000 fb88 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	f003 fea4 	bl	80046de <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb9c 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x18, hspi3);
 80009a2:	4668      	mov	r0, sp
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	224c      	movs	r2, #76	@ 0x4c
 80009aa:	4619      	mov	r1, r3
 80009ac:	f003 fe97 	bl	80046de <memcpy>
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b6:	2018      	movs	r0, #24
 80009b8:	f000 fb8f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x01, hspi3);
	LCD_WR_DATA(0x00, hspi3);
	LCD_WR_DATA(0x20, hspi3); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6, hspi3);
 80009bc:	4668      	mov	r0, sp
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f003 fe8a 	bl	80046de <memcpy>
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	20b6      	movs	r0, #182	@ 0xb6
 80009d2:	f000 fb61 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x08, hspi3);
 80009d6:	4668      	mov	r0, sp
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	224c      	movs	r2, #76	@ 0x4c
 80009de:	4619      	mov	r1, r3
 80009e0:	f003 fe7d 	bl	80046de <memcpy>
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ea:	2008      	movs	r0, #8
 80009ec:	f000 fb75 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x82, hspi3);
 80009f0:	4668      	mov	r0, sp
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	224c      	movs	r2, #76	@ 0x4c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f003 fe70 	bl	80046de <memcpy>
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a04:	2082      	movs	r0, #130	@ 0x82
 8000a06:	f000 fb68 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x27, hspi3);
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	224c      	movs	r2, #76	@ 0x4c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f003 fe63 	bl	80046de <memcpy>
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1e:	2027      	movs	r0, #39	@ 0x27
 8000a20:	f000 fb5b 	bl	80010da <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2, hspi3);
 8000a24:	4668      	mov	r0, sp
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f003 fe56 	bl	80046de <memcpy>
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a38:	20f2      	movs	r0, #242	@ 0xf2
 8000a3a:	f000 fb2d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000a3e:	4668      	mov	r0, sp
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f003 fe49 	bl	80046de <memcpy>
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fb41 	bl	80010da <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26, hspi3); //Gamma set
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	4619      	mov	r1, r3
 8000a62:	f003 fe3c 	bl	80046de <memcpy>
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a6c:	2026      	movs	r0, #38	@ 0x26
 8000a6e:	f000 fb13 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x01, hspi3); 	//Gamma Curve (G2.2)
 8000a72:	4668      	mov	r0, sp
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	224c      	movs	r2, #76	@ 0x4c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f003 fe2f 	bl	80046de <memcpy>
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb27 	bl	80010da <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0, hspi3);
 8000a8c:	4668      	mov	r0, sp
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	224c      	movs	r2, #76	@ 0x4c
 8000a94:	4619      	mov	r1, r3
 8000a96:	f003 fe22 	bl	80046de <memcpy>
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa0:	20e0      	movs	r0, #224	@ 0xe0
 8000aa2:	f000 faf9 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x0F, hspi3);
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	224c      	movs	r2, #76	@ 0x4c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f003 fe15 	bl	80046de <memcpy>
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 fb0d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	224c      	movs	r2, #76	@ 0x4c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f003 fe08 	bl	80046de <memcpy>
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad4:	2031      	movs	r0, #49	@ 0x31
 8000ad6:	f000 fb00 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2B, hspi3);
 8000ada:	4668      	mov	r0, sp
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	224c      	movs	r2, #76	@ 0x4c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f003 fdfb 	bl	80046de <memcpy>
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aee:	202b      	movs	r0, #43	@ 0x2b
 8000af0:	f000 faf3 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000af4:	4668      	mov	r0, sp
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	224c      	movs	r2, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	f003 fdee 	bl	80046de <memcpy>
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f000 fae6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000b0e:	4668      	mov	r0, sp
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	224c      	movs	r2, #76	@ 0x4c
 8000b16:	4619      	mov	r1, r3
 8000b18:	f003 fde1 	bl	80046de <memcpy>
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b22:	200e      	movs	r0, #14
 8000b24:	f000 fad9 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000b28:	4668      	mov	r0, sp
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	224c      	movs	r2, #76	@ 0x4c
 8000b30:	4619      	mov	r1, r3
 8000b32:	f003 fdd4 	bl	80046de <memcpy>
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 facc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x4E, hspi3);
 8000b42:	4668      	mov	r0, sp
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	224c      	movs	r2, #76	@ 0x4c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f003 fdc7 	bl	80046de <memcpy>
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b56:	204e      	movs	r0, #78	@ 0x4e
 8000b58:	f000 fabf 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xF1, hspi3);
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	f003 fdba 	bl	80046de <memcpy>
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b70:	20f1      	movs	r0, #241	@ 0xf1
 8000b72:	f000 fab2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x37, hspi3);
 8000b76:	4668      	mov	r0, sp
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	224c      	movs	r2, #76	@ 0x4c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f003 fdad 	bl	80046de <memcpy>
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	2037      	movs	r0, #55	@ 0x37
 8000b8c:	f000 faa5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000b90:	4668      	mov	r0, sp
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	224c      	movs	r2, #76	@ 0x4c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f003 fda0 	bl	80046de <memcpy>
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f000 fa98 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x10, hspi3);
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	224c      	movs	r2, #76	@ 0x4c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f003 fd93 	bl	80046de <memcpy>
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 fa8b 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	224c      	movs	r2, #76	@ 0x4c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f003 fd86 	bl	80046de <memcpy>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fa7e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000bde:	4668      	mov	r0, sp
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	224c      	movs	r2, #76	@ 0x4c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f003 fd79 	bl	80046de <memcpy>
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f000 fa71 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x09, hspi3);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	224c      	movs	r2, #76	@ 0x4c
 8000c00:	4619      	mov	r1, r3
 8000c02:	f003 fd6c 	bl	80046de <memcpy>
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 fa64 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000c12:	4668      	mov	r0, sp
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	224c      	movs	r2, #76	@ 0x4c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f003 fd5f 	bl	80046de <memcpy>
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fa57 	bl	80010da <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1, hspi3);
 8000c2c:	4668      	mov	r0, sp
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	4619      	mov	r1, r3
 8000c36:	f003 fd52 	bl	80046de <memcpy>
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	20e1      	movs	r0, #225	@ 0xe1
 8000c42:	f000 fa29 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000c46:	4668      	mov	r0, sp
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	224c      	movs	r2, #76	@ 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 fd45 	bl	80046de <memcpy>
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fa3d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000c60:	4668      	mov	r0, sp
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f003 fd38 	bl	80046de <memcpy>
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	200e      	movs	r0, #14
 8000c76:	f000 fa30 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x14, hspi3);
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	224c      	movs	r2, #76	@ 0x4c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f003 fd2b 	bl	80046de <memcpy>
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f000 fa23 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000c94:	4668      	mov	r0, sp
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f003 fd1e 	bl	80046de <memcpy>
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fa16 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x11, hspi3);
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	224c      	movs	r2, #76	@ 0x4c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f003 fd11 	bl	80046de <memcpy>
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc2:	2011      	movs	r0, #17
 8000cc4:	f000 fa09 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	224c      	movs	r2, #76	@ 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f003 fd04 	bl	80046de <memcpy>
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f000 f9fc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	224c      	movs	r2, #76	@ 0x4c
 8000cea:	4619      	mov	r1, r3
 8000cec:	f003 fcf7 	bl	80046de <memcpy>
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	2031      	movs	r0, #49	@ 0x31
 8000cf8:	f000 f9ef 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8000cfc:	4668      	mov	r0, sp
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	224c      	movs	r2, #76	@ 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f003 fcea 	bl	80046de <memcpy>
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d10:	20c1      	movs	r0, #193	@ 0xc1
 8000d12:	f000 f9e2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x48, hspi3);
 8000d16:	4668      	mov	r0, sp
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	224c      	movs	r2, #76	@ 0x4c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f003 fcdd 	bl	80046de <memcpy>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2a:	2048      	movs	r0, #72	@ 0x48
 8000d2c:	f000 f9d5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000d30:	4668      	mov	r0, sp
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	224c      	movs	r2, #76	@ 0x4c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fcd0 	bl	80046de <memcpy>
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 f9c8 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	224c      	movs	r2, #76	@ 0x4c
 8000d52:	4619      	mov	r1, r3
 8000d54:	f003 fcc3 	bl	80046de <memcpy>
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f9bb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000d64:	4668      	mov	r0, sp
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	224c      	movs	r2, #76	@ 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f003 fcb6 	bl	80046de <memcpy>
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f9ae 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	224c      	movs	r2, #76	@ 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f003 fca9 	bl	80046de <memcpy>
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	2031      	movs	r0, #49	@ 0x31
 8000d94:	f000 f9a1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x36, hspi3);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	f003 fc9c 	bl	80046de <memcpy>
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	2036      	movs	r0, #54	@ 0x36
 8000dae:	f000 f994 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	224c      	movs	r2, #76	@ 0x4c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f003 fc8f 	bl	80046de <memcpy>
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f987 	bl	80010da <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11, hspi3);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f003 fc82 	bl	80046de <memcpy>
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de0:	2011      	movs	r0, #17
 8000de2:	f000 f959 	bl	8001098 <LCD_WR_REG>

	HAL_Delay(120);
 8000de6:	2078      	movs	r0, #120	@ 0x78
 8000de8:	f001 f92e 	bl	8002048 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29, hspi3);
 8000dec:	4668      	mov	r0, sp
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	224c      	movs	r2, #76	@ 0x4c
 8000df4:	4619      	mov	r1, r3
 8000df6:	f003 fc72 	bl	80046de <memcpy>
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	2029      	movs	r0, #41	@ 0x29
 8000e02:	f000 f949 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x2C, hspi3);
 8000e06:	4668      	mov	r0, sp
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	224c      	movs	r2, #76	@ 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f003 fc65 	bl	80046de <memcpy>
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1a:	202c      	movs	r0, #44	@ 0x2c
 8000e1c:	f000 f95d 	bl	80010da <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 8000e20:	4668      	mov	r0, sp
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f003 fc58 	bl	80046de <memcpy>
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fae7 	bl	8001408 <LCD_direction>

}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr

08000e46 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b097      	sub	sp, #92	@ 0x5c
 8000e4a:	af14      	add	r7, sp, #80	@ 0x50
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4623      	mov	r3, r4
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a, hspi3);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	224c      	movs	r2, #76	@ 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f003 fc36 	bl	80046de <memcpy>
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	202a      	movs	r0, #42	@ 0x2a
 8000e7a:	f000 f90d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8, hspi3);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2dc      	uxtb	r4, r3
 8000e86:	4668      	mov	r0, sp
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	224c      	movs	r2, #76	@ 0x4c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f003 fc25 	bl	80046de <memcpy>
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 f91d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x, hspi3);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2dc      	uxtb	r4, r3
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	224c      	movs	r2, #76	@ 0x4c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f003 fc16 	bl	80046de <memcpy>
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f000 f90e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8, hspi3);
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2dc      	uxtb	r4, r3
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	224c      	movs	r2, #76	@ 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f003 fc05 	bl	80046de <memcpy>
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f8fd 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x, hspi3);
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	b2dc      	uxtb	r4, r3
 8000ee4:	4668      	mov	r0, sp
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	224c      	movs	r2, #76	@ 0x4c
 8000eec:	4619      	mov	r1, r3
 8000eee:	f003 fbf6 	bl	80046de <memcpy>
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 f8ee 	bl	80010da <LCD_WR_DATA>

	LCD_WR_REG(0x2b, hspi3);
 8000efe:	4668      	mov	r0, sp
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	224c      	movs	r2, #76	@ 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f003 fbe9 	bl	80046de <memcpy>
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f12:	202b      	movs	r0, #43	@ 0x2b
 8000f14:	f000 f8c0 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8, hspi3);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	4668      	mov	r0, sp
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	224c      	movs	r2, #76	@ 0x4c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f003 fbd8 	bl	80046de <memcpy>
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 f8d0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y, hspi3);
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	b2dc      	uxtb	r4, r3
 8000f3e:	4668      	mov	r0, sp
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	224c      	movs	r2, #76	@ 0x4c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f003 fbc9 	bl	80046de <memcpy>
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f8c1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8, hspi3);
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2dc      	uxtb	r4, r3
 8000f60:	4668      	mov	r0, sp
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f003 fbb8 	bl	80046de <memcpy>
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 f8b0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y, hspi3);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2dc      	uxtb	r4, r3
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	224c      	movs	r2, #76	@ 0x4c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f003 fba9 	bl	80046de <memcpy>
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f8a1 	bl	80010da <LCD_WR_DATA>

}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	b09a      	sub	sp, #104	@ 0x68
 8000fa8:	af16      	add	r7, sp, #88	@ 0x58
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fac:	4603      	mov	r3, r0
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	80bb      	strh	r3, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 8000fc8:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8000fcc:	88fe      	ldrh	r6, [r7, #6]
 8000fce:	88bd      	ldrh	r5, [r7, #4]
 8000fd0:	88fc      	ldrh	r4, [r7, #6]
 8000fd2:	4668      	mov	r0, sp
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	2258      	movs	r2, #88	@ 0x58
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f003 fb7f 	bl	80046de <memcpy>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4632      	mov	r2, r6
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff2d 	bl	8000e46 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c, hspi3);
 8000fec:	4668      	mov	r0, sp
 8000fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f003 fb72 	bl	80046de <memcpy>
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	202c      	movs	r0, #44	@ 0x2c
 8001002:	f000 f849 	bl	8001098 <LCD_WR_REG>
	DC_H();
 8001006:	f000 fabd 	bl	8001584 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	2202      	movs	r2, #2
 8001018:	f002 fcc9 	bl	80039ae <HAL_SPI_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <ILI9341_WritePixel+0x86>
		Error_Handler();
 8001022:	f000 fccb 	bl	80019bc <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr

08001034 <ILI9341_Reset>:
	__HAL_SPI_ENABLE(&hspi3);
#endif
}

void ILI9341_Reset(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	RESET_L();
 8001038:	f000 fa74 	bl	8001524 <RESET_L>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 f803 	bl	8002048 <HAL_Delay>
	RESET_H();
 8001042:	f000 fa7b 	bl	800153c <RESET_H>
	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f000 fffe 	bl	8002048 <HAL_Delay>
	CS_L();
 800104c:	f000 fa82 	bl	8001554 <CS_L>
	LED_H();
 8001050:	f000 faa4 	bl	800159c <LED_H>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 8001058:	b084      	sub	sp, #16
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	f107 0c10 	add.w	ip, r7, #16
 8001064:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800106c:	f000 fa7e 	bl	800156c <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 8001070:	1df9      	adds	r1, r7, #7
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	2201      	movs	r2, #1
 8001078:	f107 0010 	add.w	r0, r7, #16
 800107c:	f002 fc97 	bl	80039ae <HAL_SPI_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <ILI9341_SoftReset+0x32>
		Error_Handler();
 8001086:	f000 fc99 	bl	80019bc <Error_Handler>
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data, SPI_HandleTypeDef hspi3)
{
 8001098:	b084      	sub	sp, #16
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4604      	mov	r4, r0
 80010a2:	f107 001c 	add.w	r0, r7, #28
 80010a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010aa:	4623      	mov	r3, r4
 80010ac:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80010ae:	f000 fa5d 	bl	800156c <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f107 001c 	add.w	r0, r7, #28
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f002 fc76 	bl	80039ae <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <LCD_WR_REG+0x34>
		Error_Handler();
 80010c8:	f000 fc78 	bl	80019bc <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr

080010da <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data, SPI_HandleTypeDef hspi3)
{
 80010da:	b084      	sub	sp, #16
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	f107 001c 	add.w	r0, r7, #28
 80010e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010ec:	4623      	mov	r3, r4
 80010ee:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80010f0:	f000 fa48 	bl	8001584 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	f107 001c 	add.w	r0, r7, #28
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	2201      	movs	r2, #1
 8001100:	f002 fc55 	bl	80039ae <HAL_SPI_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <LCD_WR_DATA+0x34>
		Error_Handler();
 800110a:	f000 fc57 	bl	80019bc <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <ILI9341_InitWindowsWithFont>:
{
	spiDmaTransferComplete = 1;
}
*/

void ILI9341_InitWindowsWithFont(SPI_HandleTypeDef hspi3, uint16_t color){
 800111c:	b084      	sub	sp, #16
 800111e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001120:	b099      	sub	sp, #100	@ 0x64
 8001122:	af16      	add	r7, sp, #88	@ 0x58
 8001124:	f107 0420 	add.w	r4, r7, #32
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 800112c:	466b      	mov	r3, sp
 800112e:	f107 0120 	add.w	r1, r7, #32
 8001132:	2258      	movs	r2, #88	@ 0x58
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fad2 	bl	80046de <memcpy>
 800113a:	f240 133f 	movw	r3, #319	@ 0x13f
 800113e:	22ef      	movs	r2, #239	@ 0xef
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fe7f 	bl	8000e46 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001148:	2300      	movs	r3, #0
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	e01c      	b.n	8001188 <ILI9341_InitWindowsWithFont+0x6c>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	e013      	b.n	800117c <ILI9341_InitWindowsWithFont+0x60>
			ILI9341_WritePixel(x, y, color, hspi3);
 8001154:	f8b7 6078 	ldrh.w	r6, [r7, #120]	@ 0x78
 8001158:	88bd      	ldrh	r5, [r7, #4]
 800115a:	88fc      	ldrh	r4, [r7, #6]
 800115c:	4668      	mov	r0, sp
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2254      	movs	r2, #84	@ 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	f003 faba 	bl	80046de <memcpy>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	4632      	mov	r2, r6
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff15 	bl	8000fa0 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	80bb      	strh	r3, [r7, #4]
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2bef      	cmp	r3, #239	@ 0xef
 8001180:	d9e8      	bls.n	8001154 <ILI9341_InitWindowsWithFont+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800118e:	d3de      	bcc.n	800114e <ILI9341_InitWindowsWithFont+0x32>
		}
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bgcolor, SPI_HandleTypeDef hspi3) {
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b0a3      	sub	sp, #140	@ 0x8c
 80011a4:	af1a      	add	r7, sp, #104	@ 0x68
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	4603      	mov	r3, r0
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	4613      	mov	r3, r2
 80011bc:	803b      	strh	r3, [r7, #0]
	if (c < 32 || c > 126) {
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	d902      	bls.n	80011ca <ILI9341_DrawChar+0x2a>
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80011c8:	d901      	bls.n	80011ce <ILI9341_DrawChar+0x2e>
	        c = '?'; // Si le caractère n'est pas supporté
 80011ca:	233f      	movs	r3, #63	@ 0x3f
 80011cc:	70fb      	strb	r3, [r7, #3]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f1a3 0220 	sub.w	r2, r3, #32
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	4a3c      	ldr	r2, [pc, #240]	@ (80012cc <ILI9341_DrawChar+0x12c>)
 80011dc:	4413      	add	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 80011e0:	2307      	movs	r3, #7
 80011e2:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 80011e4:	231e      	movs	r3, #30
 80011e6:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e042      	b.n	8001274 <ILI9341_DrawChar+0xd4>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	e039      	b.n	8001268 <ILI9341_DrawChar+0xc8>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa42 f303 	asr.w	r3, r2, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <ILI9341_DrawChar+0x98>
				ILI9341_WritePixelsFullHeight(x, y, i, j, scaleX, scaleY, color, hspi3);
 800120c:	88bd      	ldrh	r5, [r7, #4]
 800120e:	88fc      	ldrh	r4, [r7, #6]
 8001210:	a803      	add	r0, sp, #12
 8001212:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001216:	2258      	movs	r2, #88	@ 0x58
 8001218:	4619      	mov	r1, r3
 800121a:	f003 fa60 	bl	80046de <memcpy>
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4629      	mov	r1, r5
 8001230:	4620      	mov	r0, r4
 8001232:	f000 f89f 	bl	8001374 <ILI9341_WritePixelsFullHeight>
 8001236:	e014      	b.n	8001262 <ILI9341_DrawChar+0xc2>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, y, i, j, scaleX, scaleY, bgcolor, hspi3);
 8001238:	88bd      	ldrh	r5, [r7, #4]
 800123a:	88fc      	ldrh	r4, [r7, #6]
 800123c:	a803      	add	r0, sp, #12
 800123e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001242:	2258      	movs	r2, #88	@ 0x58
 8001244:	4619      	mov	r1, r3
 8001246:	f003 fa4a 	bl	80046de <memcpy>
 800124a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	4629      	mov	r1, r5
 800125c:	4620      	mov	r0, r4
 800125e:	f000 f889 	bl	8001374 <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	3301      	adds	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b04      	cmp	r3, #4
 800126c:	ddc2      	ble.n	80011f4 <ILI9341_DrawChar+0x54>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b07      	cmp	r3, #7
 8001278:	ddb9      	ble.n	80011ee <ILI9341_DrawChar+0x4e>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e01c      	b.n	80012ba <ILI9341_DrawChar+0x11a>
        ILI9341_WritePixel(x + 5, y + j, bgcolor, hspi3);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	3305      	adds	r3, #5
 8001284:	b29c      	uxth	r4, r3
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800128a:	b29a      	uxth	r2, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	b29d      	uxth	r5, r3
 8001292:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 8001294:	4668      	mov	r0, sp
 8001296:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129a:	2254      	movs	r2, #84	@ 0x54
 800129c:	4619      	mov	r1, r3
 800129e:	f003 fa1e 	bl	80046de <memcpy>
 80012a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a4:	4632      	mov	r2, r6
 80012a6:	4629      	mov	r1, r5
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fe79 	bl	8000fa0 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 80012ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	75fb      	strb	r3, [r7, #23]
 80012ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	ddde      	ble.n	8001280 <ILI9341_DrawChar+0xe0>
    }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	@ 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	0800561c 	.word	0x0800561c

080012d0 <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str, uint16_t color, uint16_t bgcolor, SPI_HandleTypeDef hspi3) {
 80012d0:	b082      	sub	sp, #8
 80012d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d6:	b09c      	sub	sp, #112	@ 0x70
 80012d8:	af18      	add	r7, sp, #96	@ 0x60
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	803b      	strh	r3, [r7, #0]
	int cmpt = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
	uint16_t y = 20;
 80012ea:	2314      	movs	r3, #20
 80012ec:	813b      	strh	r3, [r7, #8]
	if (strlen(str) == 5)
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7fe ff76 	bl	80001e0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d130      	bne.n	800135c <ILI9341_InitDrawString+0x8c>
	{
		while (*str)
 80012fa:	e02a      	b.n	8001352 <ILI9341_InitDrawString+0x82>
		{
			uint16_t x = MARGE_NUMBERS_X;
 80012fc:	2305      	movs	r3, #5
 80012fe:	817b      	strh	r3, [r7, #10]
			if (cmpt != 0){
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <ILI9341_InitDrawString+0x46>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	b29b      	uxth	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	0192      	lsls	r2, r2, #6
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	3305      	adds	r3, #5
 8001314:	817b      	strh	r3, [r7, #10]
			}

			ILI9341_DrawChar(x, y, *str, color, bgcolor, hspi3);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	781e      	ldrb	r6, [r3, #0]
 800131a:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 800131e:	893d      	ldrh	r5, [r7, #8]
 8001320:	897c      	ldrh	r4, [r7, #10]
 8001322:	a801      	add	r0, sp, #4
 8001324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001328:	2258      	movs	r2, #88	@ 0x58
 800132a:	4619      	mov	r1, r3
 800132c:	f003 f9d7 	bl	80046de <memcpy>
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4643      	mov	r3, r8
 8001336:	4632      	mov	r2, r6
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff ff30 	bl	80011a0 <ILI9341_DrawChar>
			x += 6; // Largeur d'un caractère (8 pixels + 1 pixel de marge)
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	3306      	adds	r3, #6
 8001344:	817b      	strh	r3, [r7, #10]
			str++;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1d0      	bne.n	80012fc <ILI9341_InitDrawString+0x2c>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 800135a:	e002      	b.n	8001362 <ILI9341_InitDrawString+0x92>
		printf("Erreur le string est composé de plus de 5 éléments");
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <ILI9341_InitDrawString+0xa0>)
 800135e:	f003 f8cd 	bl	80044fc <iprintf>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800136c:	b002      	add	sp, #8
 800136e:	4770      	bx	lr
 8001370:	0800559c 	.word	0x0800559c

08001374 <ILI9341_WritePixelsFullHeight>:

static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	b09d      	sub	sp, #116	@ 0x74
 8001378:	af16      	add	r7, sp, #88	@ 0x58
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4603      	mov	r3, r0
 8001380:	81fb      	strh	r3, [r7, #14]
 8001382:	460b      	mov	r3, r1
 8001384:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e034      	b.n	80013f6 <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	e02a      	b.n	80013e8 <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b29b      	uxth	r3, r3
 8001396:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001398:	fb12 f303 	smulbb	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29c      	uxth	r4, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013b2:	fb12 f303 	smulbb	r3, r2, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	89bb      	ldrh	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29d      	uxth	r5, r3
 80013c6:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 80013c8:	4668      	mov	r0, sp
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	2254      	movs	r2, #84	@ 0x54
 80013d0:	4619      	mov	r1, r3
 80013d2:	f003 f984 	bl	80046de <memcpy>
 80013d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013d8:	4632      	mov	r2, r6
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fddf 	bl	8000fa0 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3301      	adds	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbd0      	blt.n	8001392 <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbc6      	blt.n	800138c <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001408 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8001408:	b084      	sub	sp, #16
 800140a:	b590      	push	{r4, r7, lr}
 800140c:	b097      	sub	sp, #92	@ 0x5c
 800140e:	af14      	add	r7, sp, #80	@ 0x50
 8001410:	4604      	mov	r4, r0
 8001412:	f107 001c 	add.w	r0, r7, #28
 8001416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800141a:	4623      	mov	r3, r4
 800141c:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d877      	bhi.n	8001514 <LCD_direction+0x10c>
 8001424:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <LCD_direction+0x24>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001473 	.word	0x08001473
 8001434:	080014a9 	.word	0x080014a9
 8001438:	080014df 	.word	0x080014df
	case ROTATE_0:
		LCD_WR_REG(0x36, hspi3);
 800143c:	4668      	mov	r0, sp
 800143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001442:	224c      	movs	r2, #76	@ 0x4c
 8001444:	4619      	mov	r1, r3
 8001446:	f003 f94a 	bl	80046de <memcpy>
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001450:	2036      	movs	r0, #54	@ 0x36
 8001452:	f7ff fe21 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x48, hspi3);
 8001456:	4668      	mov	r0, sp
 8001458:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145c:	224c      	movs	r2, #76	@ 0x4c
 800145e:	4619      	mov	r1, r3
 8001460:	f003 f93d 	bl	80046de <memcpy>
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146a:	2048      	movs	r0, #72	@ 0x48
 800146c:	f7ff fe35 	bl	80010da <LCD_WR_DATA>
		break;
 8001470:	e050      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_90:
		LCD_WR_REG(0x36, hspi3);
 8001472:	4668      	mov	r0, sp
 8001474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001478:	224c      	movs	r2, #76	@ 0x4c
 800147a:	4619      	mov	r1, r3
 800147c:	f003 f92f 	bl	80046de <memcpy>
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001486:	2036      	movs	r0, #54	@ 0x36
 8001488:	f7ff fe06 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x28, hspi3);
 800148c:	4668      	mov	r0, sp
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	224c      	movs	r2, #76	@ 0x4c
 8001494:	4619      	mov	r1, r3
 8001496:	f003 f922 	bl	80046de <memcpy>
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a0:	2028      	movs	r0, #40	@ 0x28
 80014a2:	f7ff fe1a 	bl	80010da <LCD_WR_DATA>
		break;
 80014a6:	e035      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_180:
		LCD_WR_REG(0x36, hspi3);
 80014a8:	4668      	mov	r0, sp
 80014aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ae:	224c      	movs	r2, #76	@ 0x4c
 80014b0:	4619      	mov	r1, r3
 80014b2:	f003 f914 	bl	80046de <memcpy>
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	2036      	movs	r0, #54	@ 0x36
 80014be:	f7ff fdeb 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x88, hspi3);
 80014c2:	4668      	mov	r0, sp
 80014c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c8:	224c      	movs	r2, #76	@ 0x4c
 80014ca:	4619      	mov	r1, r3
 80014cc:	f003 f907 	bl	80046de <memcpy>
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d6:	2088      	movs	r0, #136	@ 0x88
 80014d8:	f7ff fdff 	bl	80010da <LCD_WR_DATA>
		break;
 80014dc:	e01a      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_270:
		LCD_WR_REG(0x36, hspi3);
 80014de:	4668      	mov	r0, sp
 80014e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e4:	224c      	movs	r2, #76	@ 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	f003 f8f9 	bl	80046de <memcpy>
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f2:	2036      	movs	r0, #54	@ 0x36
 80014f4:	f7ff fdd0 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0xE8, hspi3);
 80014f8:	4668      	mov	r0, sp
 80014fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fe:	224c      	movs	r2, #76	@ 0x4c
 8001500:	4619      	mov	r1, r3
 8001502:	f003 f8ec 	bl	80046de <memcpy>
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	20e8      	movs	r0, #232	@ 0xe8
 800150e:	f7ff fde4 	bl	80010da <LCD_WR_DATA>
		break;
 8001512:	bf00      	nop
	}
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800151e:	b004      	add	sp, #16
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <RESET_L>:

static void RESET_L(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2180      	movs	r1, #128	@ 0x80
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <RESET_L+0x14>)
 800152e:	f001 f845 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020400 	.word	0x40020400

0800153c <RESET_H>:

static void RESET_H(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2180      	movs	r1, #128	@ 0x80
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <RESET_H+0x14>)
 8001546:	f001 f839 	bl	80025bc <HAL_GPIO_WritePin>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400

08001554 <CS_L>:

static void CS_L(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <CS_L+0x14>)
 800155e:	f001 f82d 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020400 	.word	0x40020400

0800156c <DC_L>:

static void DC_L(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001576:	4802      	ldr	r0, [pc, #8]	@ (8001580 <DC_L+0x14>)
 8001578:	f001 f820 	bl	80025bc <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40020400 	.word	0x40020400

08001584 <DC_H>:

static void DC_H(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158e:	4802      	ldr	r0, [pc, #8]	@ (8001598 <DC_H+0x14>)
 8001590:	f001 f814 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020400 	.word	0x40020400

0800159c <LED_H>:

static void LED_H(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	b0a5      	sub	sp, #148	@ 0x94
 80015b0:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b2:	f000 fcd7 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b6:	f000 f881 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ba:	f000 f979 	bl	80018b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015be:	f000 f94d 	bl	800185c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80015c2:	f000 f915 	bl	80017f0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  MX_RTC_Init();
 80015c6:	f000 f8e5 	bl	8001794 <MX_RTC_Init>
  TIME_SetRTCTime(&hrtc);
 80015ca:	4837      	ldr	r0, [pc, #220]	@ (80016a8 <main+0xfc>)
 80015cc:	f000 fbe4 	bl	8001d98 <TIME_SetRTCTime>
  ILI9341_Init(hspi3);  // Initialisation de l'écran ILI9341
 80015d0:	4c36      	ldr	r4, [pc, #216]	@ (80016ac <main+0x100>)
 80015d2:	4668      	mov	r0, sp
 80015d4:	f104 0310 	add.w	r3, r4, #16
 80015d8:	2248      	movs	r2, #72	@ 0x48
 80015da:	4619      	mov	r1, r3
 80015dc:	f003 f87f 	bl	80046de <memcpy>
 80015e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015e4:	f7fe ffcc 	bl	8000580 <ILI9341_Init>
  ILI9341_InitWindowsWithFont(hspi3, 0x0000);
 80015e8:	4c30      	ldr	r4, [pc, #192]	@ (80016ac <main+0x100>)
 80015ea:	2300      	movs	r3, #0
 80015ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80015ee:	4668      	mov	r0, sp
 80015f0:	f104 0310 	add.w	r3, r4, #16
 80015f4:	2248      	movs	r2, #72	@ 0x48
 80015f6:	4619      	mov	r1, r3
 80015f8:	f003 f871 	bl	80046de <memcpy>
 80015fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001600:	f7ff fd8c 	bl	800111c <ILI9341_InitWindowsWithFont>
  uint16_t text_color = 0xFFFF; // Blanc
 8001604:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001608:	86fb      	strh	r3, [r7, #54]	@ 0x36
  char timeChar[6];

  sprintf(timeChar, "%02d:%02d", (char)sTime.Hours, (char)sTime.Minutes);
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <main+0x104>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <main+0x104>)
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	4638      	mov	r0, r7
 8001616:	4927      	ldr	r1, [pc, #156]	@ (80016b4 <main+0x108>)
 8001618:	f002 ff82 	bl	8004520 <siprintf>
  ILI9341_InitDrawString(timeChar, text_color, 0x0000, hspi3);
 800161c:	4c23      	ldr	r4, [pc, #140]	@ (80016ac <main+0x100>)
 800161e:	8efe      	ldrh	r6, [r7, #54]	@ 0x36
 8001620:	463d      	mov	r5, r7
 8001622:	4668      	mov	r0, sp
 8001624:	1d23      	adds	r3, r4, #4
 8001626:	2254      	movs	r2, #84	@ 0x54
 8001628:	4619      	mov	r1, r3
 800162a:	f003 f858 	bl	80046de <memcpy>
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	4631      	mov	r1, r6
 8001634:	4628      	mov	r0, r5
 8001636:	f7ff fe4b 	bl	80012d0 <ILI9341_InitDrawString>


  uint8_t lastMinutes = TIME_GetTime(&hrtc).Minutes;
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	491a      	ldr	r1, [pc, #104]	@ (80016a8 <main+0xfc>)
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fbcd 	bl	8001de0 <TIME_GetTime>
 8001646:	7a7b      	ldrb	r3, [r7, #9]
 8001648:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (lastMinutes != TIME_GetTime(&hrtc).Minutes)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4915      	ldr	r1, [pc, #84]	@ (80016a8 <main+0xfc>)
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fbc4 	bl	8001de0 <TIME_GetTime>
 8001658:	7f7b      	ldrb	r3, [r7, #29]
 800165a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800165e:	429a      	cmp	r2, r3
 8001660:	d01e      	beq.n	80016a0 <main+0xf4>
	{
		ILI9341_InitWindowsWithFont(hspi3, 0x0000);
 8001662:	4c12      	ldr	r4, [pc, #72]	@ (80016ac <main+0x100>)
 8001664:	2300      	movs	r3, #0
 8001666:	9312      	str	r3, [sp, #72]	@ 0x48
 8001668:	4668      	mov	r0, sp
 800166a:	f104 0310 	add.w	r3, r4, #16
 800166e:	2248      	movs	r2, #72	@ 0x48
 8001670:	4619      	mov	r1, r3
 8001672:	f003 f834 	bl	80046de <memcpy>
 8001676:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800167a:	f7ff fd4f 	bl	800111c <ILI9341_InitWindowsWithFont>
		uint16_t text_color = 0xFFFF; // Blanc
 800167e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001682:	867b      	strh	r3, [r7, #50]	@ 0x32
		ILI9341_InitDrawString("00:16", text_color, 0x0000, hspi3);
 8001684:	4c09      	ldr	r4, [pc, #36]	@ (80016ac <main+0x100>)
 8001686:	8e7d      	ldrh	r5, [r7, #50]	@ 0x32
 8001688:	4668      	mov	r0, sp
 800168a:	1d23      	adds	r3, r4, #4
 800168c:	2254      	movs	r2, #84	@ 0x54
 800168e:	4619      	mov	r1, r3
 8001690:	f003 f825 	bl	80046de <memcpy>
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	4629      	mov	r1, r5
 800169a:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <main+0x10c>)
 800169c:	f7ff fe18 	bl	80012d0 <ILI9341_InitDrawString>
	}
    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80016a0:	2064      	movs	r0, #100	@ 0x64
 80016a2:	f000 fcd1 	bl	8002048 <HAL_Delay>
	if (lastMinutes != TIME_GetTime(&hrtc).Minutes)
 80016a6:	e7d1      	b.n	800164c <main+0xa0>
 80016a8:	20000084 	.word	0x20000084
 80016ac:	200000a4 	.word	0x200000a4
 80016b0:	20000170 	.word	0x20000170
 80016b4:	080055d4 	.word	0x080055d4
 80016b8:	080055e0 	.word	0x080055e0

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	@ 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2230      	movs	r2, #48	@ 0x30
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 ff8b 	bl	80045e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	4b29      	ldr	r3, [pc, #164]	@ (800178c <SystemClock_Config+0xd0>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	4a28      	ldr	r2, [pc, #160]	@ (800178c <SystemClock_Config+0xd0>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <SystemClock_Config+0xd0>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <SystemClock_Config+0xd4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a22      	ldr	r2, [pc, #136]	@ (8001790 <SystemClock_Config+0xd4>)
 8001706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <SystemClock_Config+0xd4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001718:	230a      	movs	r3, #10
 800171a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2310      	movs	r3, #16
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001724:	2301      	movs	r3, #1
 8001726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001728:	2302      	movs	r3, #2
 800172a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172c:	2300      	movs	r3, #0
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001730:	2310      	movs	r3, #16
 8001732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001734:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800173a:	2304      	movs	r3, #4
 800173c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800173e:	2304      	movs	r3, #4
 8001740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	4618      	mov	r0, r3
 8001748:	f000 ff52 	bl	80025f0 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001752:	f000 f933 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f9b4 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800177e:	f000 f91d 	bl	80019bc <Error_Handler>
  }
}
 8001782:	bf00      	nop
 8001784:	3750      	adds	r7, #80	@ 0x50
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <MX_RTC_Init+0x54>)
 800179a:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <MX_RTC_Init+0x58>)
 800179c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017a4:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017a6:	227f      	movs	r2, #127	@ 0x7f
 80017a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017ac:	22ff      	movs	r2, #255	@ 0xff
 80017ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017c2:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <MX_RTC_Init+0x54>)
 80017c4:	f001 fc9c 	bl	8003100 <HAL_RTC_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80017ce:	f000 f8f5 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2029      	movs	r0, #41	@ 0x29
 80017d8:	f000 fd35 	bl	8002246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017dc:	2029      	movs	r0, #41	@ 0x29
 80017de:	f000 fd4e 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000084 	.word	0x20000084
 80017ec:	40002800 	.word	0x40002800

080017f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017f4:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <MX_SPI3_Init+0x64>)
 80017f6:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <MX_SPI3_Init+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <MX_SPI3_Init+0x64>)
 80017fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <MX_SPI3_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <MX_SPI3_Init+0x64>)
 800181c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001820:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <MX_SPI3_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001834:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_SPI3_Init+0x64>)
 800183c:	220a      	movs	r2, #10
 800183e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	@ (8001854 <MX_SPI3_Init+0x64>)
 8001842:	f002 f82b 	bl	800389c <HAL_SPI_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800184c:	f000 f8b6 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200000a4 	.word	0x200000a4
 8001858:	40003c00 	.word	0x40003c00

0800185c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <MX_USART2_UART_Init+0x50>)
 8001864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800186c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001882:	220c      	movs	r2, #12
 8001884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001894:	f002 faac 	bl	8003df0 <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800189e:	f000 f88d 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000fc 	.word	0x200000fc
 80018ac:	40004400 	.word	0x40004400

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <MX_GPIO_Init+0xfc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a37      	ldr	r2, [pc, #220]	@ (80019ac <MX_GPIO_Init+0xfc>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <MX_GPIO_Init+0xfc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <MX_GPIO_Init+0xfc>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a30      	ldr	r2, [pc, #192]	@ (80019ac <MX_GPIO_Init+0xfc>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <MX_GPIO_Init+0xfc>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <MX_GPIO_Init+0xfc>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a29      	ldr	r2, [pc, #164]	@ (80019ac <MX_GPIO_Init+0xfc>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <MX_GPIO_Init+0xfc>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <MX_GPIO_Init+0xfc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <MX_GPIO_Init+0xfc>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_GPIO_Init+0xfc>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2120      	movs	r1, #32
 800193a:	481d      	ldr	r0, [pc, #116]	@ (80019b0 <MX_GPIO_Init+0x100>)
 800193c:	f000 fe3e 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001946:	481b      	ldr	r0, [pc, #108]	@ (80019b4 <MX_GPIO_Init+0x104>)
 8001948:	f000 fe38 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001952:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4815      	ldr	r0, [pc, #84]	@ (80019b8 <MX_GPIO_Init+0x108>)
 8001964:	f000 fca6 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001968:	2320      	movs	r3, #32
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <MX_GPIO_Init+0x100>)
 8001980:	f000 fc98 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001984:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_GPIO_Init+0x104>)
 800199e:	f000 fc89 	bl	80022b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <Error_Handler+0x8>

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a06:	2007      	movs	r0, #7
 8001a08:	f000 fc12 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <HAL_RTC_MspInit+0x50>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a44:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f001 fa68 	bl	8002f20 <HAL_RCCEx_PeriphCLKConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a56:	f7ff ffb1 	bl	80019bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a5a:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <HAL_RTC_MspInit+0x54>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40002800 	.word	0x40002800
 8001a6c:	42470e3c 	.word	0x42470e3c

08001a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a28      	ldr	r2, [pc, #160]	@ (8001b30 <HAL_SPI_MspInit+0xc0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d14a      	bne.n	8001b28 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_SPI_MspInit+0xc4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001af8:	2306      	movs	r3, #6
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	480d      	ldr	r0, [pc, #52]	@ (8001b38 <HAL_SPI_MspInit+0xc8>)
 8001b04:	f000 fbd6 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b18:	2306      	movs	r3, #6
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	@ (8001b3c <HAL_SPI_MspInit+0xcc>)
 8001b24:	f000 fbc6 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	@ 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40003c00 	.word	0x40003c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_UART_MspInit+0x84>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12b      	bne.n	8001bba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_UART_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <HAL_UART_MspInit+0x88>)
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_UART_MspInit+0x88>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_UART_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <HAL_UART_MspInit+0x88>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_UART_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001baa:	2307      	movs	r3, #7
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_UART_MspInit+0x8c>)
 8001bb6:	f000 fb7d 	bl	80022b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	@ 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <MemManage_Handler+0x4>

08001be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c26:	f000 f9ef 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e00a      	b.n	8001c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c40:	f3af 8000 	nop.w
 8001c44:	4601      	mov	r1, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbf0      	blt.n	8001c40 <_read+0x12>
  }

  return len;
 8001c5e:	687b      	ldr	r3, [r7, #4]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e009      	b.n	8001c8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	60ba      	str	r2, [r7, #8]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbf1      	blt.n	8001c7a <_write+0x12>
  }
  return len;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_close>:

int _close(int file)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_isatty>:

int _isatty(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f002 fca4 	bl	8004684 <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20020000 	.word	0x20020000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	20000144 	.word	0x20000144
 8001d70:	200002d8 	.word	0x200002d8

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <TIME_SetRTCTime>:

RTC_AlarmTypeDef sAlarm;
RTC_TimeTypeDef sTime = {0};

void TIME_SetRTCTime(RTC_HandleTypeDef *hrtc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    /* Définir l'heure : 14:30:45 */
    sTime.Hours = HOUR;
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <TIME_SetRTCTime+0x44>)
 8001da2:	2217      	movs	r2, #23
 8001da4:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = MIN;        // Minutes
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <TIME_SetRTCTime+0x44>)
 8001da8:	2204      	movs	r2, #4
 8001daa:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 40;        // Secondes
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <TIME_SetRTCTime+0x44>)
 8001dae:	2228      	movs	r2, #40	@ 0x28
 8001db0:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE; // Pas d'ajustement pour l'heure d'été
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <TIME_SetRTCTime+0x44>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET; // Pas de stockage spécial
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <TIME_SetRTCTime+0x44>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]

    /* Appliquer l'heure */
    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4906      	ldr	r1, [pc, #24]	@ (8001ddc <TIME_SetRTCTime+0x44>)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 fa1f 	bl	8003206 <HAL_RTC_SetTime>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <TIME_SetRTCTime+0x3a>
        /* Gestion de l'erreur */
        Error_Handler();
 8001dce:	f7ff fdf5 	bl	80019bc <Error_Handler>
    }
    //MX_RTC_SetAlarm(hrtc);
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000170 	.word	0x20000170

08001de0 <TIME_GetTime>:

RTC_TimeTypeDef TIME_GetTime(RTC_HandleTypeDef *hrtc)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
    /* Lire l'heure actuelle */
    if (HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001dea:	2200      	movs	r2, #0
 8001dec:	490a      	ldr	r1, [pc, #40]	@ (8001e18 <TIME_GetTime+0x38>)
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f001 faa3 	bl	800333a <HAL_RTC_GetTime>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <TIME_GetTime+0x1e>
        /* Gestion d'erreur */
        Error_Handler();
 8001dfa:	f7ff fddf 	bl	80019bc <Error_Handler>
    }
    return sTime;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <TIME_GetTime+0x38>)
 8001e02:	461c      	mov	r4, r3
 8001e04:	4615      	mov	r5, r2
 8001e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0a:	682b      	ldr	r3, [r5, #0]
 8001e0c:	6023      	str	r3, [r4, #0]
}
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdb0      	pop	{r4, r5, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000170 	.word	0x20000170

08001e1c <MX_RTC_SetAlarm>:

void MX_RTC_SetAlarm(RTC_HandleTypeDef *hrtc) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

    // Obtenir l'heure actuelle
    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001e24:	2200      	movs	r2, #0
 8001e26:	4921      	ldr	r1, [pc, #132]	@ (8001eac <MX_RTC_SetAlarm+0x90>)
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f001 fa86 	bl	800333a <HAL_RTC_GetTime>

    // Configurer l'alarme pour la prochaine minute
    sAlarm.AlarmTime.Hours = sTime.Hours;
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <MX_RTC_SetAlarm+0x90>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e34:	701a      	strb	r2, [r3, #0]
    sAlarm.AlarmTime.Minutes = sTime.Minutes + 1;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <MX_RTC_SetAlarm+0x90>)
 8001e38:	785b      	ldrb	r3, [r3, #1]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e40:	705a      	strb	r2, [r3, #1]
    if (sAlarm.AlarmTime.Minutes >= 60) {
 8001e42:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e48:	d913      	bls.n	8001e72 <MX_RTC_SetAlarm+0x56>
        sAlarm.AlarmTime.Minutes = 0;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	705a      	strb	r2, [r3, #1]
        sAlarm.AlarmTime.Hours = (sAlarm.AlarmTime.Hours + 1) % 24;
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <MX_RTC_SetAlarm+0x98>)
 8001e58:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5c:	1099      	asrs	r1, r3, #2
 8001e5e:	17d3      	asrs	r3, r2, #31
 8001e60:	1ac9      	subs	r1, r1, r3
 8001e62:	460b      	mov	r3, r1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1ad1      	subs	r1, r2, r3
 8001e6c:	b2ca      	uxtb	r2, r1
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e70:	701a      	strb	r2, [r3, #0]
    }
    sAlarm.AlarmTime.Seconds = 0;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	709a      	strb	r2, [r3, #2]
    sAlarm.Alarm = RTC_ALARM_A;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
    sAlarm.AlarmDateWeekDay = 1;
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]

    // Définir l'alarme avec l'interruption
    if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4904      	ldr	r1, [pc, #16]	@ (8001eb0 <MX_RTC_SetAlarm+0x94>)
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f001 faaa 	bl	80033f8 <HAL_RTC_SetAlarm_IT>
        // Erreur de configuration de l'alarme
    }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000170 	.word	0x20000170
 8001eb0:	20000148 	.word	0x20000148
 8001eb4:	2aaaaaab 	.word	0x2aaaaaab

08001eb8 <HAL_RTC_AlarmAEventCallback>:

// Cette fonction sera appelée lors du changement de minute (alarme RTC)
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

    // Récupérer l'heure actuelle
    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	490b      	ldr	r1, [pc, #44]	@ (8001ef0 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f001 fa38 	bl	800333a <HAL_RTC_GetTime>

    // Afficher ou gérer l'événement de changement de minute
    printf("Changement de minute détecté : %02d:%02d:%02d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001edc:	f002 fb0e 	bl	80044fc <iprintf>

    // Reconfigurer l'alarme pour la prochaine minute
    MX_RTC_SetAlarm(hrtc);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff9b 	bl	8001e1c <MX_RTC_SetAlarm>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000170 	.word	0x20000170
 8001ef4:	080055e8 	.word	0x080055e8

08001ef8 <RTC_Alarm_IRQHandler>:

/* Interruption RTC Alarm */
void RTC_Alarm_IRQHandler(RTC_HandleTypeDef *hrtc) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    HAL_RTC_AlarmIRQHandler(hrtc);  // Appeler le gestionnaire d'interruption HAL
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f001 fbbd 	bl	8003680 <HAL_RTC_AlarmIRQHandler>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f14:	f7ff ff2e 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	@ (8001f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f002 fba7 	bl	8004690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f42:	f7ff fb33 	bl	80015ac <main>
  bx  lr    
 8001f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f54:	08005858 	.word	0x08005858
  ldr r2, =_sbss
 8001f58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f5c:	200002d4 	.word	0x200002d4

08001f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_Init+0x40>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	@ (8001fa4 <HAL_Init+0x40>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f94f 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff fd16 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f967 	bl	800229a <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f92f 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000008 	.word	0x20000008
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008
 800202c:	20000184 	.word	0x20000184

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000184 	.word	0x20000184

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e159      	b.n	8002584 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8148 	bne.w	800257e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d005      	beq.n	8002306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	2b02      	cmp	r3, #2
 8002304:	d130      	bne.n	8002368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 0201 	and.w	r2, r3, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b03      	cmp	r3, #3
 8002372:	d017      	beq.n	80023a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a2 	beq.w	800257e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b57      	ldr	r3, [pc, #348]	@ (800259c <HAL_GPIO_Init+0x2e8>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	4a56      	ldr	r2, [pc, #344]	@ (800259c <HAL_GPIO_Init+0x2e8>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002448:	6453      	str	r3, [r2, #68]	@ 0x44
 800244a:	4b54      	ldr	r3, [pc, #336]	@ (800259c <HAL_GPIO_Init+0x2e8>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	4a52      	ldr	r2, [pc, #328]	@ (80025a0 <HAL_GPIO_Init+0x2ec>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a49      	ldr	r2, [pc, #292]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d019      	beq.n	80024b6 <HAL_GPIO_Init+0x202>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a48      	ldr	r2, [pc, #288]	@ (80025a8 <HAL_GPIO_Init+0x2f4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_GPIO_Init+0x1fe>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a47      	ldr	r2, [pc, #284]	@ (80025ac <HAL_GPIO_Init+0x2f8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00d      	beq.n	80024ae <HAL_GPIO_Init+0x1fa>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a46      	ldr	r2, [pc, #280]	@ (80025b0 <HAL_GPIO_Init+0x2fc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0x1f6>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a45      	ldr	r2, [pc, #276]	@ (80025b4 <HAL_GPIO_Init+0x300>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_GPIO_Init+0x1f2>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x204>
 80024a6:	2307      	movs	r3, #7
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x204>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x204>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x204>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x204>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	@ (80025a0 <HAL_GPIO_Init+0x2ec>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a2f      	ldr	r2, [pc, #188]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a0f      	ldr	r2, [pc, #60]	@ (80025b8 <HAL_GPIO_Init+0x304>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f aea2 	bls.w	80022d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40013c00 	.word	0x40013c00

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e267      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d075      	beq.n	80026fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260e:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d00c      	beq.n	8002634 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261a:	4b85      	ldr	r3, [pc, #532]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002622:	2b08      	cmp	r3, #8
 8002624:	d112      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b82      	ldr	r3, [pc, #520]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b7e      	ldr	r3, [pc, #504]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d157      	bne.n	80026f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e242      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x74>
 8002656:	4b76      	ldr	r3, [pc, #472]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a75      	ldr	r2, [pc, #468]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x98>
 800266e:	4b70      	ldr	r3, [pc, #448]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6f      	ldr	r2, [pc, #444]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6c      	ldr	r2, [pc, #432]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002688:	4b69      	ldr	r3, [pc, #420]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a68      	ldr	r2, [pc, #416]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fcc2 	bl	8002030 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff fcbe 	bl	8002030 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e207      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xc0>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fcae 	bl	8002030 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff fcaa 	bl	8002030 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1f3      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b51      	ldr	r3, [pc, #324]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0xe8>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002706:	4b4a      	ldr	r3, [pc, #296]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b47      	ldr	r3, [pc, #284]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c7      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4937      	ldr	r1, [pc, #220]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <HAL_RCC_OscConfig+0x244>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff fc63 	bl	8002030 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7ff fc5f 	bl	8002030 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a8      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4925      	ldr	r1, [pc, #148]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCC_OscConfig+0x244>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff fc42 	bl	8002030 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b0:	f7ff fc3e 	bl	8002030 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e187      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d036      	beq.n	8002848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_RCC_OscConfig+0x248>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff fc22 	bl	8002030 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f0:	f7ff fc1e 	bl	8002030 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e167      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_OscConfig+0x240>)
 8002804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x200>
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_OscConfig+0x248>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7ff fc0b 	bl	8002030 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	e00e      	b.n	800283c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281e:	f7ff fc07 	bl	8002030 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d907      	bls.n	800283c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e150      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002830:	40023800 	.word	0x40023800
 8002834:	42470000 	.word	0x42470000
 8002838:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b88      	ldr	r3, [pc, #544]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ea      	bne.n	800281e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8097 	beq.w	8002984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b81      	ldr	r3, [pc, #516]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b7a      	ldr	r3, [pc, #488]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b77      	ldr	r3, [pc, #476]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b74      	ldr	r3, [pc, #464]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a73      	ldr	r2, [pc, #460]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7ff fbc7 	bl	8002030 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7ff fbc3 	bl	8002030 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e10c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a64 <HAL_RCC_OscConfig+0x474>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x2ea>
 80028cc:	4b64      	ldr	r3, [pc, #400]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	4a63      	ldr	r2, [pc, #396]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x30c>
 80028e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028fc:	4b58      	ldr	r3, [pc, #352]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a57      	ldr	r2, [pc, #348]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	4b55      	ldr	r3, [pc, #340]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a54      	ldr	r2, [pc, #336]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff fb88 	bl	8002030 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7ff fb84 	bl	8002030 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0cb      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	4b49      	ldr	r3, [pc, #292]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCC_OscConfig+0x334>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7ff fb72 	bl	8002030 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7ff fb6e 	bl	8002030 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0b5      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	4b3e      	ldr	r3, [pc, #248]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b39      	ldr	r3, [pc, #228]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	4a38      	ldr	r2, [pc, #224]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a1 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d05c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d141      	bne.n	8002a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b31      	ldr	r3, [pc, #196]	@ (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fb42 	bl	8002030 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fb3e 	bl	8002030 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e087      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	491b      	ldr	r1, [pc, #108]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7ff fb17 	bl	8002030 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7ff fb13 	bl	8002030 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e05c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x416>
 8002a24:	e054      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff fb00 	bl	8002030 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff fafc 	bl	8002030 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e045      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x444>
 8002a52:	e03d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e038      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <HAL_RCC_OscConfig+0x4ec>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d028      	beq.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d121      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d11a      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0cc      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b68      	ldr	r3, [pc, #416]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d90c      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b65      	ldr	r3, [pc, #404]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d044      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d119      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e067      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4934      	ldr	r1, [pc, #208]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff fa2e 	bl	8002030 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7ff fa2a 	bl	8002030 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e04f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d20c      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f98e 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080057fc 	.word	0x080057fc
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b094      	sub	sp, #80	@ 0x50
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x40>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	f200 80e1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cde:	e0db      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b73      	ldr	r3, [pc, #460]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ce4:	e0db      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce6:	4b73      	ldr	r3, [pc, #460]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cea:	e0d8      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b6f      	ldr	r3, [pc, #444]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d16:	2300      	movs	r3, #0
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	0159      	lsls	r1, r3, #5
 8002d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d30:	0150      	lsls	r0, r2, #5
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4621      	mov	r1, r4
 8002d38:	1a51      	subs	r1, r2, r1
 8002d3a:	6139      	str	r1, [r7, #16]
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d50:	4659      	mov	r1, fp
 8002d52:	018b      	lsls	r3, r1, #6
 8002d54:	4651      	mov	r1, sl
 8002d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	018a      	lsls	r2, r1, #6
 8002d5e:	4651      	mov	r1, sl
 8002d60:	ebb2 0801 	subs.w	r8, r2, r1
 8002d64:	4659      	mov	r1, fp
 8002d66:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d7e:	4690      	mov	r8, r2
 8002d80:	4699      	mov	r9, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	eb18 0303 	adds.w	r3, r8, r3
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	eb49 0303 	adc.w	r3, r9, r3
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d9e:	4629      	mov	r1, r5
 8002da0:	024b      	lsls	r3, r1, #9
 8002da2:	4621      	mov	r1, r4
 8002da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da8:	4621      	mov	r1, r4
 8002daa:	024a      	lsls	r2, r1, #9
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002db2:	2200      	movs	r2, #0
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dbc:	f7fd fa68 	bl	8000290 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc8:	e058      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b38      	ldr	r3, [pc, #224]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	0159      	lsls	r1, r3, #5
 8002df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df6:	0150      	lsls	r0, r2, #5
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e02:	4649      	mov	r1, r9
 8002e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e20:	eb63 050b 	sbc.w	r5, r3, fp
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	00eb      	lsls	r3, r5, #3
 8002e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e32:	00e2      	lsls	r2, r4, #3
 8002e34:	4614      	mov	r4, r2
 8002e36:	461d      	mov	r5, r3
 8002e38:	4643      	mov	r3, r8
 8002e3a:	18e3      	adds	r3, r4, r3
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	464b      	mov	r3, r9
 8002e40:	eb45 0303 	adc.w	r3, r5, r3
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e66:	2200      	movs	r2, #0
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	61fa      	str	r2, [r7, #28]
 8002e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e70:	f7fd fa0e 	bl	8000290 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3750      	adds	r7, #80	@ 0x50
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	007a1200 	.word	0x007a1200

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	@ (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	0800580c 	.word	0x0800580c

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffdc 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	@ (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	0800580c 	.word	0x0800580c

08002f20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d038      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f48:	4b68      	ldr	r3, [pc, #416]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4e:	f7ff f86f 	bl	8002030 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f56:	f7ff f86b 	bl	8002030 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0bd      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f68:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	019b      	lsls	r3, r3, #6
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	495a      	ldr	r1, [pc, #360]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f8e:	4b57      	ldr	r3, [pc, #348]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f94:	f7ff f84c 	bl	8002030 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f9c:	f7ff f848 	bl	8002030 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e09a      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fae:	4b50      	ldr	r3, [pc, #320]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8083 	beq.w	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	4b48      	ldr	r3, [pc, #288]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	4a47      	ldr	r2, [pc, #284]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd8:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fe4:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff0:	f7ff f81e 	bl	8002030 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff8:	f7ff f81a 	bl	8002030 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e06c      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800300a:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003016:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d02f      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d028      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003034:	4b2e      	ldr	r3, [pc, #184]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800303e:	4b2e      	ldr	r3, [pc, #184]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003044:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800304a:	4a29      	ldr	r2, [pc, #164]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003050:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d114      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe ffe8 	bl	8002030 <HAL_GetTick>
 8003060:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe ffe4 	bl	8002030 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e034      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003092:	d10d      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003094:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80030a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030a8:	4911      	ldr	r1, [pc, #68]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
 80030ae:	e005      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a0e      	ldr	r2, [pc, #56]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	4909      	ldr	r1, [pc, #36]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7d1a      	ldrb	r2, [r3, #20]
 80030de:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80030e0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	42470068 	.word	0x42470068
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470e40 	.word	0x42470e40
 80030fc:	424711e0 	.word	0x424711e0

08003100 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e073      	b.n	80031fe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7f5b      	ldrb	r3, [r3, #29]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fc76 	bl	8001a18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d055      	beq.n	80031ec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	22ca      	movs	r2, #202	@ 0xca
 8003146:	625a      	str	r2, [r3, #36]	@ 0x24
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2253      	movs	r2, #83	@ 0x53
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb01 	bl	8003758 <RTC_EnterInitMode>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d12c      	bne.n	80031ba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800316e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003172:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6919      	ldr	r1, [r3, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	041a      	lsls	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fb08 	bl	80037c6 <RTC_ExitInitMode>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d110      	bne.n	80031e2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80031ea:	e001      	b.n	80031f0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003206:	b590      	push	{r4, r7, lr}
 8003208:	b087      	sub	sp, #28
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	7f1b      	ldrb	r3, [r3, #28]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_RTC_SetTime+0x1c>
 800321e:	2302      	movs	r3, #2
 8003220:	e087      	b.n	8003332 <HAL_RTC_SetTime+0x12c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2202      	movs	r2, #2
 800322c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d126      	bne.n	8003282 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fadf 	bl	8003810 <RTC_ByteToBcd2>
 8003252:	4603      	mov	r3, r0
 8003254:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	785b      	ldrb	r3, [r3, #1]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fad8 	bl	8003810 <RTC_ByteToBcd2>
 8003260:	4603      	mov	r3, r0
 8003262:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003264:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	789b      	ldrb	r3, [r3, #2]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fad0 	bl	8003810 <RTC_ByteToBcd2>
 8003270:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003272:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	78db      	ldrb	r3, [r3, #3]
 800327a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e018      	b.n	80032b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032a2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	78db      	ldrb	r3, [r3, #3]
 80032ae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22ca      	movs	r2, #202	@ 0xca
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2253      	movs	r2, #83	@ 0x53
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fa47 	bl	8003758 <RTC_EnterInitMode>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d120      	bne.n	8003316 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032de:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6899      	ldr	r1, [r3, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fa5a 	bl	80037c6 <RTC_ExitInitMode>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	22ff      	movs	r2, #255	@ 0xff
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]

  return status;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
}
 8003332:	4618      	mov	r0, r3
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}

0800333a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800336c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003370:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	0d9b      	lsrs	r3, r3, #22
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11a      	bne.n	80033ec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fa46 	bl	800384c <RTC_Bcd2ToByte>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa3d 	bl	800384c <RTC_Bcd2ToByte>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	789b      	ldrb	r3, [r3, #2]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa34 	bl	800384c <RTC_Bcd2ToByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b089      	sub	sp, #36	@ 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003404:	4b9b      	ldr	r3, [pc, #620]	@ (8003674 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a9b      	ldr	r2, [pc, #620]	@ (8003678 <HAL_RTC_SetAlarm_IT+0x280>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0adb      	lsrs	r3, r3, #11
 8003410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	7f1b      	ldrb	r3, [r3, #28]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_RTC_SetAlarm_IT+0x36>
 800342a:	2302      	movs	r3, #2
 800342c:	e11e      	b.n	800366c <HAL_RTC_SetAlarm_IT+0x274>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d137      	bne.n	80034b0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f9d9 	bl	8003810 <RTC_ByteToBcd2>
 800345e:	4603      	mov	r3, r0
 8003460:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f9d2 	bl	8003810 <RTC_ByteToBcd2>
 800346c:	4603      	mov	r3, r0
 800346e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003470:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f9ca 	bl	8003810 <RTC_ByteToBcd2>
 800347c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800347e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003488:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9bc 	bl	8003810 <RTC_ByteToBcd2>
 8003498:	4603      	mov	r3, r0
 800349a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800349c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80034a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e023      	b.n	80034f8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80034d0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80034d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	78db      	ldrb	r3, [r3, #3]
 80034dc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80034de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80034e8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80034ee:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	22ca      	movs	r2, #202	@ 0xca
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2253      	movs	r2, #83	@ 0x53
 8003512:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800351c:	d142      	bne.n	80035a4 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800352c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800353e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	3b01      	subs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	22ff      	movs	r2, #255	@ 0xff
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2203      	movs	r2, #3
 8003558:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e083      	b.n	800366c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0e6      	beq.n	8003540 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003590:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	e04c      	b.n	800363e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035b2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80035c4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80035c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <HAL_RTC_SetAlarm_IT+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003678 <HAL_RTC_SetAlarm_IT+0x280>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	0adb      	lsrs	r3, r3, #11
 80035d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3b01      	subs	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	22ff      	movs	r2, #255	@ 0xff
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2203      	movs	r2, #3
 80035f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e035      	b.n	800366c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0e6      	beq.n	80035dc <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800363e:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <HAL_RTC_SetAlarm_IT+0x284>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a0e      	ldr	r2, [pc, #56]	@ (800367c <HAL_RTC_SetAlarm_IT+0x284>)
 8003644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003648:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <HAL_RTC_SetAlarm_IT+0x284>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4a0b      	ldr	r2, [pc, #44]	@ (800367c <HAL_RTC_SetAlarm_IT+0x284>)
 8003650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003654:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	22ff      	movs	r2, #255	@ 0xff
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3724      	adds	r7, #36	@ 0x24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	20000000 	.word	0x20000000
 8003678:	10624dd3 	.word	0x10624dd3
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003688:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <HAL_RTC_AlarmIRQHandler+0x88>)
 800368a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800368e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80036bc:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe fbfa 	bl	8001eb8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80036f0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8c8 	bl	8003888 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	775a      	strb	r2, [r3, #29]
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40013c00 	.word	0x40013c00

0800370c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <HAL_RTC_WaitForSynchro+0x48>)
 800371e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003720:	f7fe fc86 	bl	8002030 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003726:	e009      	b.n	800373c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003728:	f7fe fc82 	bl	8002030 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003736:	d901      	bls.n	800373c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e007      	b.n	800374c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	00013f5f 	.word	0x00013f5f

08003758 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d122      	bne.n	80037bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003784:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003786:	f7fe fc53 	bl	8002030 <HAL_GetTick>
 800378a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800378c:	e00c      	b.n	80037a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800378e:	f7fe fc4f 	bl	8002030 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800379c:	d904      	bls.n	80037a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2204      	movs	r2, #4
 80037a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <RTC_EnterInitMode+0x64>
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1e8      	bne.n	800378e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff8b 	bl	800370c <HAL_RTC_WaitForSynchro>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800381e:	e005      	b.n	800382c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	3b0a      	subs	r3, #10
 800382a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b09      	cmp	r3, #9
 8003830:	d8f6      	bhi.n	8003820 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	b2da      	uxtb	r2, r3
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	4313      	orrs	r3, r2
 800383e:	b2db      	uxtb	r3, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4413      	add	r3, r2
 800387a:	b2db      	uxtb	r3, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e07b      	b.n	80039a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038be:	d009      	beq.n	80038d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	61da      	str	r2, [r3, #28]
 80038c6:	e005      	b.n	80038d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe f8be 	bl	8001a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003958:	ea42 0103 	orr.w	r1, r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0104 	and.w	r1, r3, #4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	f003 0210 	and.w	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003994:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b088      	sub	sp, #32
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039be:	f7fe fb37 	bl	8002030 <HAL_GetTick>
 80039c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
 80039d6:	e12a      	b.n	8003c2e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Transmit+0x36>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e122      	b.n	8003c2e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_SPI_Transmit+0x48>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e11b      	b.n	8003c2e <HAL_SPI_Transmit+0x280>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2203      	movs	r2, #3
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a44:	d10f      	bne.n	8003a66 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a70:	2b40      	cmp	r3, #64	@ 0x40
 8003a72:	d007      	beq.n	8003a84 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8c:	d152      	bne.n	8003b34 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_Transmit+0xee>
 8003a96:	8b7b      	ldrh	r3, [r7, #26]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d145      	bne.n	8003b28 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ac0:	e032      	b.n	8003b28 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d112      	bne.n	8003af6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003af4:	e018      	b.n	8003b28 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003af6:	f7fe fa9b 	bl	8002030 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d803      	bhi.n	8003b0e <HAL_SPI_Transmit+0x160>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d102      	bne.n	8003b14 <HAL_SPI_Transmit+0x166>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e082      	b.n	8003c2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1c7      	bne.n	8003ac2 <HAL_SPI_Transmit+0x114>
 8003b32:	e053      	b.n	8003bdc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_SPI_Transmit+0x194>
 8003b3c:	8b7b      	ldrh	r3, [r7, #26]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d147      	bne.n	8003bd2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b68:	e033      	b.n	8003bd2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d113      	bne.n	8003ba0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b9e:	e018      	b.n	8003bd2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba0:	f7fe fa46 	bl	8002030 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d803      	bhi.n	8003bb8 <HAL_SPI_Transmit+0x20a>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d102      	bne.n	8003bbe <HAL_SPI_Transmit+0x210>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e02d      	b.n	8003c2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1c6      	bne.n	8003b6a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f8b1 	bl	8003d48 <SPI_EndRxTxTransaction>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c48:	f7fe f9f2 	bl	8002030 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c58:	f7fe f9ea 	bl	8002030 <HAL_GetTick>
 8003c5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	015b      	lsls	r3, r3, #5
 8003c64:	0d1b      	lsrs	r3, r3, #20
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c6e:	e054      	b.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d050      	beq.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c78:	f7fe f9da 	bl	8002030 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d902      	bls.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d13d      	bne.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca6:	d111      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb0:	d004      	beq.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cba:	d107      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd4:	d10f      	bne.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e017      	b.n	8003d3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d19b      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff6a 	bl	8003c38 <SPI_WaitFlagStateUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e032      	b.n	8003de0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <SPI_EndRxTxTransaction+0xa0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dec <SPI_EndRxTxTransaction+0xa4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	0d5b      	lsrs	r3, r3, #21
 8003d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d98:	d112      	bne.n	8003dc0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2180      	movs	r1, #128	@ 0x80
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ff47 	bl	8003c38 <SPI_WaitFlagStateUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e00f      	b.n	8003de0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d0f2      	beq.n	8003dc0 <SPI_EndRxTxTransaction+0x78>
 8003dda:	e000      	b.n	8003dde <SPI_EndRxTxTransaction+0x96>
        break;
 8003ddc:	bf00      	nop
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000000 	.word	0x20000000
 8003dec:	165e9f81 	.word	0x165e9f81

08003df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd fe92 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	@ 0x24
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f82b 	bl	8003e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e94:	b0c0      	sub	sp, #256	@ 0x100
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	68d9      	ldr	r1, [r3, #12]
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	ea40 0301 	orr.w	r3, r0, r1
 8003eb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ee8:	f021 010c 	bic.w	r1, r1, #12
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	6999      	ldr	r1, [r3, #24]
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	ea40 0301 	orr.w	r3, r0, r1
 8003f16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b8f      	ldr	r3, [pc, #572]	@ (800415c <UART_SetConfig+0x2cc>)
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d005      	beq.n	8003f30 <UART_SetConfig+0xa0>
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8004160 <UART_SetConfig+0x2d0>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d104      	bne.n	8003f3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7fe ffe2 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8003f34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f38:	e003      	b.n	8003f42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f3a:	f7fe ffc9 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8003f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	f040 810c 	bne.w	8004168 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	1891      	adds	r1, r2, r2
 8003f68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f6a:	415b      	adcs	r3, r3
 8003f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f72:	4621      	mov	r1, r4
 8003f74:	eb12 0801 	adds.w	r8, r2, r1
 8003f78:	4629      	mov	r1, r5
 8003f7a:	eb43 0901 	adc.w	r9, r3, r1
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f92:	4690      	mov	r8, r2
 8003f94:	4699      	mov	r9, r3
 8003f96:	4623      	mov	r3, r4
 8003f98:	eb18 0303 	adds.w	r3, r8, r3
 8003f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	eb49 0303 	adc.w	r3, r9, r3
 8003fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	18db      	adds	r3, r3, r3
 8003fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	eb42 0303 	adc.w	r3, r2, r3
 8003fca:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003fd4:	f7fc f95c 	bl	8000290 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4b61      	ldr	r3, [pc, #388]	@ (8004164 <UART_SetConfig+0x2d4>)
 8003fde:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	011c      	lsls	r4, r3, #4
 8003fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	1891      	adds	r1, r2, r2
 8003ffe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004000:	415b      	adcs	r3, r3
 8004002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004008:	4641      	mov	r1, r8
 800400a:	eb12 0a01 	adds.w	sl, r2, r1
 800400e:	4649      	mov	r1, r9
 8004010:	eb43 0b01 	adc.w	fp, r3, r1
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004028:	4692      	mov	sl, r2
 800402a:	469b      	mov	fp, r3
 800402c:	4643      	mov	r3, r8
 800402e:	eb1a 0303 	adds.w	r3, sl, r3
 8004032:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004036:	464b      	mov	r3, r9
 8004038:	eb4b 0303 	adc.w	r3, fp, r3
 800403c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800404c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004054:	460b      	mov	r3, r1
 8004056:	18db      	adds	r3, r3, r3
 8004058:	643b      	str	r3, [r7, #64]	@ 0x40
 800405a:	4613      	mov	r3, r2
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	647b      	str	r3, [r7, #68]	@ 0x44
 8004062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800406a:	f7fc f911 	bl	8000290 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4611      	mov	r1, r2
 8004074:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <UART_SetConfig+0x2d4>)
 8004076:	fba3 2301 	umull	r2, r3, r3, r1
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2264      	movs	r2, #100	@ 0x64
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	1acb      	subs	r3, r1, r3
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800408a:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <UART_SetConfig+0x2d4>)
 800408c:	fba3 2302 	umull	r2, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004098:	441c      	add	r4, r3
 800409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040b4:	415b      	adcs	r3, r3
 80040b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040bc:	4641      	mov	r1, r8
 80040be:	1851      	adds	r1, r2, r1
 80040c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80040c2:	4649      	mov	r1, r9
 80040c4:	414b      	adcs	r3, r1
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040d4:	4659      	mov	r1, fp
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040de:	4651      	mov	r1, sl
 80040e0:	00ca      	lsls	r2, r1, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	4642      	mov	r2, r8
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040f0:	464b      	mov	r3, r9
 80040f2:	460a      	mov	r2, r1
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004108:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800410c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004110:	460b      	mov	r3, r1
 8004112:	18db      	adds	r3, r3, r3
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004116:	4613      	mov	r3, r2
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004126:	f7fc f8b3 	bl	8000290 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <UART_SetConfig+0x2d4>)
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2164      	movs	r1, #100	@ 0x64
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	3332      	adds	r3, #50	@ 0x32
 8004142:	4a08      	ldr	r2, [pc, #32]	@ (8004164 <UART_SetConfig+0x2d4>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 0207 	and.w	r2, r3, #7
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4422      	add	r2, r4
 8004156:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004158:	e106      	b.n	8004368 <UART_SetConfig+0x4d8>
 800415a:	bf00      	nop
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004172:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800417a:	4642      	mov	r2, r8
 800417c:	464b      	mov	r3, r9
 800417e:	1891      	adds	r1, r2, r2
 8004180:	6239      	str	r1, [r7, #32]
 8004182:	415b      	adcs	r3, r3
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
 8004186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800418a:	4641      	mov	r1, r8
 800418c:	1854      	adds	r4, r2, r1
 800418e:	4649      	mov	r1, r9
 8004190:	eb43 0501 	adc.w	r5, r3, r1
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	18e3      	adds	r3, r4, r3
 80041ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041b0:	464b      	mov	r3, r9
 80041b2:	eb45 0303 	adc.w	r3, r5, r3
 80041b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041d6:	4629      	mov	r1, r5
 80041d8:	008b      	lsls	r3, r1, #2
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e0:	4621      	mov	r1, r4
 80041e2:	008a      	lsls	r2, r1, #2
 80041e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041e8:	f7fc f852 	bl	8000290 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4b60      	ldr	r3, [pc, #384]	@ (8004374 <UART_SetConfig+0x4e4>)
 80041f2:	fba3 2302 	umull	r2, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	011c      	lsls	r4, r3, #4
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004204:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	61b9      	str	r1, [r7, #24]
 8004214:	415b      	adcs	r3, r3
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800421c:	4641      	mov	r1, r8
 800421e:	1851      	adds	r1, r2, r1
 8004220:	6139      	str	r1, [r7, #16]
 8004222:	4649      	mov	r1, r9
 8004224:	414b      	adcs	r3, r1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004234:	4659      	mov	r1, fp
 8004236:	00cb      	lsls	r3, r1, #3
 8004238:	4651      	mov	r1, sl
 800423a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423e:	4651      	mov	r1, sl
 8004240:	00ca      	lsls	r2, r1, #3
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4603      	mov	r3, r0
 8004248:	4642      	mov	r2, r8
 800424a:	189b      	adds	r3, r3, r2
 800424c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004250:	464b      	mov	r3, r9
 8004252:	460a      	mov	r2, r1
 8004254:	eb42 0303 	adc.w	r3, r2, r3
 8004258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004266:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004274:	4649      	mov	r1, r9
 8004276:	008b      	lsls	r3, r1, #2
 8004278:	4641      	mov	r1, r8
 800427a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427e:	4641      	mov	r1, r8
 8004280:	008a      	lsls	r2, r1, #2
 8004282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004286:	f7fc f803 	bl	8000290 <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4611      	mov	r1, r2
 8004290:	4b38      	ldr	r3, [pc, #224]	@ (8004374 <UART_SetConfig+0x4e4>)
 8004292:	fba3 2301 	umull	r2, r3, r3, r1
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2264      	movs	r2, #100	@ 0x64
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	1acb      	subs	r3, r1, r3
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3332      	adds	r3, #50	@ 0x32
 80042a4:	4a33      	ldr	r2, [pc, #204]	@ (8004374 <UART_SetConfig+0x4e4>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b0:	441c      	add	r4, r3
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b6:	2200      	movs	r2, #0
 80042b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80042bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	415b      	adcs	r3, r3
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042d0:	4641      	mov	r1, r8
 80042d2:	1851      	adds	r1, r2, r1
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	4649      	mov	r1, r9
 80042d8:	414b      	adcs	r3, r1
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e8:	4659      	mov	r1, fp
 80042ea:	00cb      	lsls	r3, r1, #3
 80042ec:	4651      	mov	r1, sl
 80042ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f2:	4651      	mov	r1, sl
 80042f4:	00ca      	lsls	r2, r1, #3
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	4642      	mov	r2, r8
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004302:	464b      	mov	r3, r9
 8004304:	460a      	mov	r2, r1
 8004306:	eb42 0303 	adc.w	r3, r2, r3
 800430a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	663b      	str	r3, [r7, #96]	@ 0x60
 8004316:	667a      	str	r2, [r7, #100]	@ 0x64
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004324:	4649      	mov	r1, r9
 8004326:	008b      	lsls	r3, r1, #2
 8004328:	4641      	mov	r1, r8
 800432a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432e:	4641      	mov	r1, r8
 8004330:	008a      	lsls	r2, r1, #2
 8004332:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004336:	f7fb ffab 	bl	8000290 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <UART_SetConfig+0x4e4>)
 8004340:	fba3 1302 	umull	r1, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	2164      	movs	r1, #100	@ 0x64
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	3332      	adds	r3, #50	@ 0x32
 8004352:	4a08      	ldr	r2, [pc, #32]	@ (8004374 <UART_SetConfig+0x4e4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	f003 020f 	and.w	r2, r3, #15
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4422      	add	r2, r4
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800436e:	46bd      	mov	sp, r7
 8004370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004374:	51eb851f 	.word	0x51eb851f

08004378 <std>:
 8004378:	2300      	movs	r3, #0
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	e9c0 3300 	strd	r3, r3, [r0]
 8004382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004386:	6083      	str	r3, [r0, #8]
 8004388:	8181      	strh	r1, [r0, #12]
 800438a:	6643      	str	r3, [r0, #100]	@ 0x64
 800438c:	81c2      	strh	r2, [r0, #14]
 800438e:	6183      	str	r3, [r0, #24]
 8004390:	4619      	mov	r1, r3
 8004392:	2208      	movs	r2, #8
 8004394:	305c      	adds	r0, #92	@ 0x5c
 8004396:	f000 f926 	bl	80045e6 <memset>
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <std+0x58>)
 800439c:	6263      	str	r3, [r4, #36]	@ 0x24
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <std+0x5c>)
 80043a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <std+0x60>)
 80043a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043a6:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <std+0x64>)
 80043a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80043aa:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <std+0x68>)
 80043ac:	6224      	str	r4, [r4, #32]
 80043ae:	429c      	cmp	r4, r3
 80043b0:	d006      	beq.n	80043c0 <std+0x48>
 80043b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043b6:	4294      	cmp	r4, r2
 80043b8:	d002      	beq.n	80043c0 <std+0x48>
 80043ba:	33d0      	adds	r3, #208	@ 0xd0
 80043bc:	429c      	cmp	r4, r3
 80043be:	d105      	bne.n	80043cc <std+0x54>
 80043c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c8:	f000 b986 	b.w	80046d8 <__retarget_lock_init_recursive>
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	bf00      	nop
 80043d0:	08004561 	.word	0x08004561
 80043d4:	08004583 	.word	0x08004583
 80043d8:	080045bb 	.word	0x080045bb
 80043dc:	080045df 	.word	0x080045df
 80043e0:	20000188 	.word	0x20000188

080043e4 <stdio_exit_handler>:
 80043e4:	4a02      	ldr	r2, [pc, #8]	@ (80043f0 <stdio_exit_handler+0xc>)
 80043e6:	4903      	ldr	r1, [pc, #12]	@ (80043f4 <stdio_exit_handler+0x10>)
 80043e8:	4803      	ldr	r0, [pc, #12]	@ (80043f8 <stdio_exit_handler+0x14>)
 80043ea:	f000 b869 	b.w	80044c0 <_fwalk_sglue>
 80043ee:	bf00      	nop
 80043f0:	2000000c 	.word	0x2000000c
 80043f4:	08005245 	.word	0x08005245
 80043f8:	2000001c 	.word	0x2000001c

080043fc <cleanup_stdio>:
 80043fc:	6841      	ldr	r1, [r0, #4]
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <cleanup_stdio+0x34>)
 8004400:	4299      	cmp	r1, r3
 8004402:	b510      	push	{r4, lr}
 8004404:	4604      	mov	r4, r0
 8004406:	d001      	beq.n	800440c <cleanup_stdio+0x10>
 8004408:	f000 ff1c 	bl	8005244 <_fflush_r>
 800440c:	68a1      	ldr	r1, [r4, #8]
 800440e:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <cleanup_stdio+0x38>)
 8004410:	4299      	cmp	r1, r3
 8004412:	d002      	beq.n	800441a <cleanup_stdio+0x1e>
 8004414:	4620      	mov	r0, r4
 8004416:	f000 ff15 	bl	8005244 <_fflush_r>
 800441a:	68e1      	ldr	r1, [r4, #12]
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <cleanup_stdio+0x3c>)
 800441e:	4299      	cmp	r1, r3
 8004420:	d004      	beq.n	800442c <cleanup_stdio+0x30>
 8004422:	4620      	mov	r0, r4
 8004424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004428:	f000 bf0c 	b.w	8005244 <_fflush_r>
 800442c:	bd10      	pop	{r4, pc}
 800442e:	bf00      	nop
 8004430:	20000188 	.word	0x20000188
 8004434:	200001f0 	.word	0x200001f0
 8004438:	20000258 	.word	0x20000258

0800443c <global_stdio_init.part.0>:
 800443c:	b510      	push	{r4, lr}
 800443e:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <global_stdio_init.part.0+0x30>)
 8004440:	4c0b      	ldr	r4, [pc, #44]	@ (8004470 <global_stdio_init.part.0+0x34>)
 8004442:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <global_stdio_init.part.0+0x38>)
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	4620      	mov	r0, r4
 8004448:	2200      	movs	r2, #0
 800444a:	2104      	movs	r1, #4
 800444c:	f7ff ff94 	bl	8004378 <std>
 8004450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004454:	2201      	movs	r2, #1
 8004456:	2109      	movs	r1, #9
 8004458:	f7ff ff8e 	bl	8004378 <std>
 800445c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004460:	2202      	movs	r2, #2
 8004462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004466:	2112      	movs	r1, #18
 8004468:	f7ff bf86 	b.w	8004378 <std>
 800446c:	200002c0 	.word	0x200002c0
 8004470:	20000188 	.word	0x20000188
 8004474:	080043e5 	.word	0x080043e5

08004478 <__sfp_lock_acquire>:
 8004478:	4801      	ldr	r0, [pc, #4]	@ (8004480 <__sfp_lock_acquire+0x8>)
 800447a:	f000 b92e 	b.w	80046da <__retarget_lock_acquire_recursive>
 800447e:	bf00      	nop
 8004480:	200002c9 	.word	0x200002c9

08004484 <__sfp_lock_release>:
 8004484:	4801      	ldr	r0, [pc, #4]	@ (800448c <__sfp_lock_release+0x8>)
 8004486:	f000 b929 	b.w	80046dc <__retarget_lock_release_recursive>
 800448a:	bf00      	nop
 800448c:	200002c9 	.word	0x200002c9

08004490 <__sinit>:
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	f7ff fff0 	bl	8004478 <__sfp_lock_acquire>
 8004498:	6a23      	ldr	r3, [r4, #32]
 800449a:	b11b      	cbz	r3, 80044a4 <__sinit+0x14>
 800449c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a0:	f7ff bff0 	b.w	8004484 <__sfp_lock_release>
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <__sinit+0x28>)
 80044a6:	6223      	str	r3, [r4, #32]
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <__sinit+0x2c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f5      	bne.n	800449c <__sinit+0xc>
 80044b0:	f7ff ffc4 	bl	800443c <global_stdio_init.part.0>
 80044b4:	e7f2      	b.n	800449c <__sinit+0xc>
 80044b6:	bf00      	nop
 80044b8:	080043fd 	.word	0x080043fd
 80044bc:	200002c0 	.word	0x200002c0

080044c0 <_fwalk_sglue>:
 80044c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c4:	4607      	mov	r7, r0
 80044c6:	4688      	mov	r8, r1
 80044c8:	4614      	mov	r4, r2
 80044ca:	2600      	movs	r6, #0
 80044cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044d0:	f1b9 0901 	subs.w	r9, r9, #1
 80044d4:	d505      	bpl.n	80044e2 <_fwalk_sglue+0x22>
 80044d6:	6824      	ldr	r4, [r4, #0]
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d1f7      	bne.n	80044cc <_fwalk_sglue+0xc>
 80044dc:	4630      	mov	r0, r6
 80044de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e2:	89ab      	ldrh	r3, [r5, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d907      	bls.n	80044f8 <_fwalk_sglue+0x38>
 80044e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ec:	3301      	adds	r3, #1
 80044ee:	d003      	beq.n	80044f8 <_fwalk_sglue+0x38>
 80044f0:	4629      	mov	r1, r5
 80044f2:	4638      	mov	r0, r7
 80044f4:	47c0      	blx	r8
 80044f6:	4306      	orrs	r6, r0
 80044f8:	3568      	adds	r5, #104	@ 0x68
 80044fa:	e7e9      	b.n	80044d0 <_fwalk_sglue+0x10>

080044fc <iprintf>:
 80044fc:	b40f      	push	{r0, r1, r2, r3}
 80044fe:	b507      	push	{r0, r1, r2, lr}
 8004500:	4906      	ldr	r1, [pc, #24]	@ (800451c <iprintf+0x20>)
 8004502:	ab04      	add	r3, sp, #16
 8004504:	6808      	ldr	r0, [r1, #0]
 8004506:	f853 2b04 	ldr.w	r2, [r3], #4
 800450a:	6881      	ldr	r1, [r0, #8]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	f000 fb6f 	bl	8004bf0 <_vfiprintf_r>
 8004512:	b003      	add	sp, #12
 8004514:	f85d eb04 	ldr.w	lr, [sp], #4
 8004518:	b004      	add	sp, #16
 800451a:	4770      	bx	lr
 800451c:	20000018 	.word	0x20000018

08004520 <siprintf>:
 8004520:	b40e      	push	{r1, r2, r3}
 8004522:	b500      	push	{lr}
 8004524:	b09c      	sub	sp, #112	@ 0x70
 8004526:	ab1d      	add	r3, sp, #116	@ 0x74
 8004528:	9002      	str	r0, [sp, #8]
 800452a:	9006      	str	r0, [sp, #24]
 800452c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004530:	4809      	ldr	r0, [pc, #36]	@ (8004558 <siprintf+0x38>)
 8004532:	9107      	str	r1, [sp, #28]
 8004534:	9104      	str	r1, [sp, #16]
 8004536:	4909      	ldr	r1, [pc, #36]	@ (800455c <siprintf+0x3c>)
 8004538:	f853 2b04 	ldr.w	r2, [r3], #4
 800453c:	9105      	str	r1, [sp, #20]
 800453e:	6800      	ldr	r0, [r0, #0]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	a902      	add	r1, sp, #8
 8004544:	f000 fa2e 	bl	80049a4 <_svfiprintf_r>
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	b01c      	add	sp, #112	@ 0x70
 8004550:	f85d eb04 	ldr.w	lr, [sp], #4
 8004554:	b003      	add	sp, #12
 8004556:	4770      	bx	lr
 8004558:	20000018 	.word	0x20000018
 800455c:	ffff0208 	.word	0xffff0208

08004560 <__sread>:
 8004560:	b510      	push	{r4, lr}
 8004562:	460c      	mov	r4, r1
 8004564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004568:	f000 f868 	bl	800463c <_read_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	bfab      	itete	ge
 8004570:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004572:	89a3      	ldrhlt	r3, [r4, #12]
 8004574:	181b      	addge	r3, r3, r0
 8004576:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800457a:	bfac      	ite	ge
 800457c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800457e:	81a3      	strhlt	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__swrite>:
 8004582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	461f      	mov	r7, r3
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	05db      	lsls	r3, r3, #23
 800458c:	4605      	mov	r5, r0
 800458e:	460c      	mov	r4, r1
 8004590:	4616      	mov	r6, r2
 8004592:	d505      	bpl.n	80045a0 <__swrite+0x1e>
 8004594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004598:	2302      	movs	r3, #2
 800459a:	2200      	movs	r2, #0
 800459c:	f000 f83c 	bl	8004618 <_lseek_r>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	4632      	mov	r2, r6
 80045ae:	463b      	mov	r3, r7
 80045b0:	4628      	mov	r0, r5
 80045b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b6:	f000 b853 	b.w	8004660 <_write_r>

080045ba <__sseek>:
 80045ba:	b510      	push	{r4, lr}
 80045bc:	460c      	mov	r4, r1
 80045be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c2:	f000 f829 	bl	8004618 <_lseek_r>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	bf15      	itete	ne
 80045cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045d6:	81a3      	strheq	r3, [r4, #12]
 80045d8:	bf18      	it	ne
 80045da:	81a3      	strhne	r3, [r4, #12]
 80045dc:	bd10      	pop	{r4, pc}

080045de <__sclose>:
 80045de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e2:	f000 b809 	b.w	80045f8 <_close_r>

080045e6 <memset>:
 80045e6:	4402      	add	r2, r0
 80045e8:	4603      	mov	r3, r0
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d100      	bne.n	80045f0 <memset+0xa>
 80045ee:	4770      	bx	lr
 80045f0:	f803 1b01 	strb.w	r1, [r3], #1
 80045f4:	e7f9      	b.n	80045ea <memset+0x4>
	...

080045f8 <_close_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d06      	ldr	r5, [pc, #24]	@ (8004614 <_close_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fd fb4c 	bl	8001ca0 <_close>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_close_r+0x1a>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_close_r+0x1a>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	200002c4 	.word	0x200002c4

08004618 <_lseek_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4d07      	ldr	r5, [pc, #28]	@ (8004638 <_lseek_r+0x20>)
 800461c:	4604      	mov	r4, r0
 800461e:	4608      	mov	r0, r1
 8004620:	4611      	mov	r1, r2
 8004622:	2200      	movs	r2, #0
 8004624:	602a      	str	r2, [r5, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	f7fd fb61 	bl	8001cee <_lseek>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_lseek_r+0x1e>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_lseek_r+0x1e>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	200002c4 	.word	0x200002c4

0800463c <_read_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4d07      	ldr	r5, [pc, #28]	@ (800465c <_read_r+0x20>)
 8004640:	4604      	mov	r4, r0
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	2200      	movs	r2, #0
 8004648:	602a      	str	r2, [r5, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f7fd faef 	bl	8001c2e <_read>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_read_r+0x1e>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_read_r+0x1e>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	200002c4 	.word	0x200002c4

08004660 <_write_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d07      	ldr	r5, [pc, #28]	@ (8004680 <_write_r+0x20>)
 8004664:	4604      	mov	r4, r0
 8004666:	4608      	mov	r0, r1
 8004668:	4611      	mov	r1, r2
 800466a:	2200      	movs	r2, #0
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7fd fafa 	bl	8001c68 <_write>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_write_r+0x1e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_write_r+0x1e>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200002c4 	.word	0x200002c4

08004684 <__errno>:
 8004684:	4b01      	ldr	r3, [pc, #4]	@ (800468c <__errno+0x8>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000018 	.word	0x20000018

08004690 <__libc_init_array>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4d0d      	ldr	r5, [pc, #52]	@ (80046c8 <__libc_init_array+0x38>)
 8004694:	4c0d      	ldr	r4, [pc, #52]	@ (80046cc <__libc_init_array+0x3c>)
 8004696:	1b64      	subs	r4, r4, r5
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	2600      	movs	r6, #0
 800469c:	42a6      	cmp	r6, r4
 800469e:	d109      	bne.n	80046b4 <__libc_init_array+0x24>
 80046a0:	4d0b      	ldr	r5, [pc, #44]	@ (80046d0 <__libc_init_array+0x40>)
 80046a2:	4c0c      	ldr	r4, [pc, #48]	@ (80046d4 <__libc_init_array+0x44>)
 80046a4:	f000 ff6e 	bl	8005584 <_init>
 80046a8:	1b64      	subs	r4, r4, r5
 80046aa:	10a4      	asrs	r4, r4, #2
 80046ac:	2600      	movs	r6, #0
 80046ae:	42a6      	cmp	r6, r4
 80046b0:	d105      	bne.n	80046be <__libc_init_array+0x2e>
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b8:	4798      	blx	r3
 80046ba:	3601      	adds	r6, #1
 80046bc:	e7ee      	b.n	800469c <__libc_init_array+0xc>
 80046be:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c2:	4798      	blx	r3
 80046c4:	3601      	adds	r6, #1
 80046c6:	e7f2      	b.n	80046ae <__libc_init_array+0x1e>
 80046c8:	08005850 	.word	0x08005850
 80046cc:	08005850 	.word	0x08005850
 80046d0:	08005850 	.word	0x08005850
 80046d4:	08005854 	.word	0x08005854

080046d8 <__retarget_lock_init_recursive>:
 80046d8:	4770      	bx	lr

080046da <__retarget_lock_acquire_recursive>:
 80046da:	4770      	bx	lr

080046dc <__retarget_lock_release_recursive>:
 80046dc:	4770      	bx	lr

080046de <memcpy>:
 80046de:	440a      	add	r2, r1
 80046e0:	4291      	cmp	r1, r2
 80046e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80046e6:	d100      	bne.n	80046ea <memcpy+0xc>
 80046e8:	4770      	bx	lr
 80046ea:	b510      	push	{r4, lr}
 80046ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f4:	4291      	cmp	r1, r2
 80046f6:	d1f9      	bne.n	80046ec <memcpy+0xe>
 80046f8:	bd10      	pop	{r4, pc}
	...

080046fc <_free_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4605      	mov	r5, r0
 8004700:	2900      	cmp	r1, #0
 8004702:	d041      	beq.n	8004788 <_free_r+0x8c>
 8004704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004708:	1f0c      	subs	r4, r1, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	bfb8      	it	lt
 800470e:	18e4      	addlt	r4, r4, r3
 8004710:	f000 f8e0 	bl	80048d4 <__malloc_lock>
 8004714:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <_free_r+0x90>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	b933      	cbnz	r3, 8004728 <_free_r+0x2c>
 800471a:	6063      	str	r3, [r4, #4]
 800471c:	6014      	str	r4, [r2, #0]
 800471e:	4628      	mov	r0, r5
 8004720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004724:	f000 b8dc 	b.w	80048e0 <__malloc_unlock>
 8004728:	42a3      	cmp	r3, r4
 800472a:	d908      	bls.n	800473e <_free_r+0x42>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	1821      	adds	r1, r4, r0
 8004730:	428b      	cmp	r3, r1
 8004732:	bf01      	itttt	eq
 8004734:	6819      	ldreq	r1, [r3, #0]
 8004736:	685b      	ldreq	r3, [r3, #4]
 8004738:	1809      	addeq	r1, r1, r0
 800473a:	6021      	streq	r1, [r4, #0]
 800473c:	e7ed      	b.n	800471a <_free_r+0x1e>
 800473e:	461a      	mov	r2, r3
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	b10b      	cbz	r3, 8004748 <_free_r+0x4c>
 8004744:	42a3      	cmp	r3, r4
 8004746:	d9fa      	bls.n	800473e <_free_r+0x42>
 8004748:	6811      	ldr	r1, [r2, #0]
 800474a:	1850      	adds	r0, r2, r1
 800474c:	42a0      	cmp	r0, r4
 800474e:	d10b      	bne.n	8004768 <_free_r+0x6c>
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	4401      	add	r1, r0
 8004754:	1850      	adds	r0, r2, r1
 8004756:	4283      	cmp	r3, r0
 8004758:	6011      	str	r1, [r2, #0]
 800475a:	d1e0      	bne.n	800471e <_free_r+0x22>
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	6053      	str	r3, [r2, #4]
 8004762:	4408      	add	r0, r1
 8004764:	6010      	str	r0, [r2, #0]
 8004766:	e7da      	b.n	800471e <_free_r+0x22>
 8004768:	d902      	bls.n	8004770 <_free_r+0x74>
 800476a:	230c      	movs	r3, #12
 800476c:	602b      	str	r3, [r5, #0]
 800476e:	e7d6      	b.n	800471e <_free_r+0x22>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	1821      	adds	r1, r4, r0
 8004774:	428b      	cmp	r3, r1
 8004776:	bf04      	itt	eq
 8004778:	6819      	ldreq	r1, [r3, #0]
 800477a:	685b      	ldreq	r3, [r3, #4]
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	bf04      	itt	eq
 8004780:	1809      	addeq	r1, r1, r0
 8004782:	6021      	streq	r1, [r4, #0]
 8004784:	6054      	str	r4, [r2, #4]
 8004786:	e7ca      	b.n	800471e <_free_r+0x22>
 8004788:	bd38      	pop	{r3, r4, r5, pc}
 800478a:	bf00      	nop
 800478c:	200002d0 	.word	0x200002d0

08004790 <sbrk_aligned>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4e0f      	ldr	r6, [pc, #60]	@ (80047d0 <sbrk_aligned+0x40>)
 8004794:	460c      	mov	r4, r1
 8004796:	6831      	ldr	r1, [r6, #0]
 8004798:	4605      	mov	r5, r0
 800479a:	b911      	cbnz	r1, 80047a2 <sbrk_aligned+0x12>
 800479c:	f000 fe28 	bl	80053f0 <_sbrk_r>
 80047a0:	6030      	str	r0, [r6, #0]
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 fe23 	bl	80053f0 <_sbrk_r>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d103      	bne.n	80047b6 <sbrk_aligned+0x26>
 80047ae:	f04f 34ff 	mov.w	r4, #4294967295
 80047b2:	4620      	mov	r0, r4
 80047b4:	bd70      	pop	{r4, r5, r6, pc}
 80047b6:	1cc4      	adds	r4, r0, #3
 80047b8:	f024 0403 	bic.w	r4, r4, #3
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d0f8      	beq.n	80047b2 <sbrk_aligned+0x22>
 80047c0:	1a21      	subs	r1, r4, r0
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 fe14 	bl	80053f0 <_sbrk_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d1f2      	bne.n	80047b2 <sbrk_aligned+0x22>
 80047cc:	e7ef      	b.n	80047ae <sbrk_aligned+0x1e>
 80047ce:	bf00      	nop
 80047d0:	200002cc 	.word	0x200002cc

080047d4 <_malloc_r>:
 80047d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d8:	1ccd      	adds	r5, r1, #3
 80047da:	f025 0503 	bic.w	r5, r5, #3
 80047de:	3508      	adds	r5, #8
 80047e0:	2d0c      	cmp	r5, #12
 80047e2:	bf38      	it	cc
 80047e4:	250c      	movcc	r5, #12
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	4606      	mov	r6, r0
 80047ea:	db01      	blt.n	80047f0 <_malloc_r+0x1c>
 80047ec:	42a9      	cmp	r1, r5
 80047ee:	d904      	bls.n	80047fa <_malloc_r+0x26>
 80047f0:	230c      	movs	r3, #12
 80047f2:	6033      	str	r3, [r6, #0]
 80047f4:	2000      	movs	r0, #0
 80047f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048d0 <_malloc_r+0xfc>
 80047fe:	f000 f869 	bl	80048d4 <__malloc_lock>
 8004802:	f8d8 3000 	ldr.w	r3, [r8]
 8004806:	461c      	mov	r4, r3
 8004808:	bb44      	cbnz	r4, 800485c <_malloc_r+0x88>
 800480a:	4629      	mov	r1, r5
 800480c:	4630      	mov	r0, r6
 800480e:	f7ff ffbf 	bl	8004790 <sbrk_aligned>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	4604      	mov	r4, r0
 8004816:	d158      	bne.n	80048ca <_malloc_r+0xf6>
 8004818:	f8d8 4000 	ldr.w	r4, [r8]
 800481c:	4627      	mov	r7, r4
 800481e:	2f00      	cmp	r7, #0
 8004820:	d143      	bne.n	80048aa <_malloc_r+0xd6>
 8004822:	2c00      	cmp	r4, #0
 8004824:	d04b      	beq.n	80048be <_malloc_r+0xea>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	4639      	mov	r1, r7
 800482a:	4630      	mov	r0, r6
 800482c:	eb04 0903 	add.w	r9, r4, r3
 8004830:	f000 fdde 	bl	80053f0 <_sbrk_r>
 8004834:	4581      	cmp	r9, r0
 8004836:	d142      	bne.n	80048be <_malloc_r+0xea>
 8004838:	6821      	ldr	r1, [r4, #0]
 800483a:	1a6d      	subs	r5, r5, r1
 800483c:	4629      	mov	r1, r5
 800483e:	4630      	mov	r0, r6
 8004840:	f7ff ffa6 	bl	8004790 <sbrk_aligned>
 8004844:	3001      	adds	r0, #1
 8004846:	d03a      	beq.n	80048be <_malloc_r+0xea>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	442b      	add	r3, r5
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	f8d8 3000 	ldr.w	r3, [r8]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	bb62      	cbnz	r2, 80048b0 <_malloc_r+0xdc>
 8004856:	f8c8 7000 	str.w	r7, [r8]
 800485a:	e00f      	b.n	800487c <_malloc_r+0xa8>
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	1b52      	subs	r2, r2, r5
 8004860:	d420      	bmi.n	80048a4 <_malloc_r+0xd0>
 8004862:	2a0b      	cmp	r2, #11
 8004864:	d917      	bls.n	8004896 <_malloc_r+0xc2>
 8004866:	1961      	adds	r1, r4, r5
 8004868:	42a3      	cmp	r3, r4
 800486a:	6025      	str	r5, [r4, #0]
 800486c:	bf18      	it	ne
 800486e:	6059      	strne	r1, [r3, #4]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	bf08      	it	eq
 8004874:	f8c8 1000 	streq.w	r1, [r8]
 8004878:	5162      	str	r2, [r4, r5]
 800487a:	604b      	str	r3, [r1, #4]
 800487c:	4630      	mov	r0, r6
 800487e:	f000 f82f 	bl	80048e0 <__malloc_unlock>
 8004882:	f104 000b 	add.w	r0, r4, #11
 8004886:	1d23      	adds	r3, r4, #4
 8004888:	f020 0007 	bic.w	r0, r0, #7
 800488c:	1ac2      	subs	r2, r0, r3
 800488e:	bf1c      	itt	ne
 8004890:	1a1b      	subne	r3, r3, r0
 8004892:	50a3      	strne	r3, [r4, r2]
 8004894:	e7af      	b.n	80047f6 <_malloc_r+0x22>
 8004896:	6862      	ldr	r2, [r4, #4]
 8004898:	42a3      	cmp	r3, r4
 800489a:	bf0c      	ite	eq
 800489c:	f8c8 2000 	streq.w	r2, [r8]
 80048a0:	605a      	strne	r2, [r3, #4]
 80048a2:	e7eb      	b.n	800487c <_malloc_r+0xa8>
 80048a4:	4623      	mov	r3, r4
 80048a6:	6864      	ldr	r4, [r4, #4]
 80048a8:	e7ae      	b.n	8004808 <_malloc_r+0x34>
 80048aa:	463c      	mov	r4, r7
 80048ac:	687f      	ldr	r7, [r7, #4]
 80048ae:	e7b6      	b.n	800481e <_malloc_r+0x4a>
 80048b0:	461a      	mov	r2, r3
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	d1fb      	bne.n	80048b0 <_malloc_r+0xdc>
 80048b8:	2300      	movs	r3, #0
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	e7de      	b.n	800487c <_malloc_r+0xa8>
 80048be:	230c      	movs	r3, #12
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 f80c 	bl	80048e0 <__malloc_unlock>
 80048c8:	e794      	b.n	80047f4 <_malloc_r+0x20>
 80048ca:	6005      	str	r5, [r0, #0]
 80048cc:	e7d6      	b.n	800487c <_malloc_r+0xa8>
 80048ce:	bf00      	nop
 80048d0:	200002d0 	.word	0x200002d0

080048d4 <__malloc_lock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	@ (80048dc <__malloc_lock+0x8>)
 80048d6:	f7ff bf00 	b.w	80046da <__retarget_lock_acquire_recursive>
 80048da:	bf00      	nop
 80048dc:	200002c8 	.word	0x200002c8

080048e0 <__malloc_unlock>:
 80048e0:	4801      	ldr	r0, [pc, #4]	@ (80048e8 <__malloc_unlock+0x8>)
 80048e2:	f7ff befb 	b.w	80046dc <__retarget_lock_release_recursive>
 80048e6:	bf00      	nop
 80048e8:	200002c8 	.word	0x200002c8

080048ec <__ssputs_r>:
 80048ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	688e      	ldr	r6, [r1, #8]
 80048f2:	461f      	mov	r7, r3
 80048f4:	42be      	cmp	r6, r7
 80048f6:	680b      	ldr	r3, [r1, #0]
 80048f8:	4682      	mov	sl, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4690      	mov	r8, r2
 80048fe:	d82d      	bhi.n	800495c <__ssputs_r+0x70>
 8004900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004908:	d026      	beq.n	8004958 <__ssputs_r+0x6c>
 800490a:	6965      	ldr	r5, [r4, #20]
 800490c:	6909      	ldr	r1, [r1, #16]
 800490e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004912:	eba3 0901 	sub.w	r9, r3, r1
 8004916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800491a:	1c7b      	adds	r3, r7, #1
 800491c:	444b      	add	r3, r9
 800491e:	106d      	asrs	r5, r5, #1
 8004920:	429d      	cmp	r5, r3
 8004922:	bf38      	it	cc
 8004924:	461d      	movcc	r5, r3
 8004926:	0553      	lsls	r3, r2, #21
 8004928:	d527      	bpl.n	800497a <__ssputs_r+0x8e>
 800492a:	4629      	mov	r1, r5
 800492c:	f7ff ff52 	bl	80047d4 <_malloc_r>
 8004930:	4606      	mov	r6, r0
 8004932:	b360      	cbz	r0, 800498e <__ssputs_r+0xa2>
 8004934:	6921      	ldr	r1, [r4, #16]
 8004936:	464a      	mov	r2, r9
 8004938:	f7ff fed1 	bl	80046de <memcpy>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004946:	81a3      	strh	r3, [r4, #12]
 8004948:	6126      	str	r6, [r4, #16]
 800494a:	6165      	str	r5, [r4, #20]
 800494c:	444e      	add	r6, r9
 800494e:	eba5 0509 	sub.w	r5, r5, r9
 8004952:	6026      	str	r6, [r4, #0]
 8004954:	60a5      	str	r5, [r4, #8]
 8004956:	463e      	mov	r6, r7
 8004958:	42be      	cmp	r6, r7
 800495a:	d900      	bls.n	800495e <__ssputs_r+0x72>
 800495c:	463e      	mov	r6, r7
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	4632      	mov	r2, r6
 8004962:	4641      	mov	r1, r8
 8004964:	f000 fd2a 	bl	80053bc <memmove>
 8004968:	68a3      	ldr	r3, [r4, #8]
 800496a:	1b9b      	subs	r3, r3, r6
 800496c:	60a3      	str	r3, [r4, #8]
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	4433      	add	r3, r6
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	2000      	movs	r0, #0
 8004976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497a:	462a      	mov	r2, r5
 800497c:	f000 fd48 	bl	8005410 <_realloc_r>
 8004980:	4606      	mov	r6, r0
 8004982:	2800      	cmp	r0, #0
 8004984:	d1e0      	bne.n	8004948 <__ssputs_r+0x5c>
 8004986:	6921      	ldr	r1, [r4, #16]
 8004988:	4650      	mov	r0, sl
 800498a:	f7ff feb7 	bl	80046fc <_free_r>
 800498e:	230c      	movs	r3, #12
 8004990:	f8ca 3000 	str.w	r3, [sl]
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	e7e9      	b.n	8004976 <__ssputs_r+0x8a>
	...

080049a4 <_svfiprintf_r>:
 80049a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a8:	4698      	mov	r8, r3
 80049aa:	898b      	ldrh	r3, [r1, #12]
 80049ac:	061b      	lsls	r3, r3, #24
 80049ae:	b09d      	sub	sp, #116	@ 0x74
 80049b0:	4607      	mov	r7, r0
 80049b2:	460d      	mov	r5, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	d510      	bpl.n	80049da <_svfiprintf_r+0x36>
 80049b8:	690b      	ldr	r3, [r1, #16]
 80049ba:	b973      	cbnz	r3, 80049da <_svfiprintf_r+0x36>
 80049bc:	2140      	movs	r1, #64	@ 0x40
 80049be:	f7ff ff09 	bl	80047d4 <_malloc_r>
 80049c2:	6028      	str	r0, [r5, #0]
 80049c4:	6128      	str	r0, [r5, #16]
 80049c6:	b930      	cbnz	r0, 80049d6 <_svfiprintf_r+0x32>
 80049c8:	230c      	movs	r3, #12
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	b01d      	add	sp, #116	@ 0x74
 80049d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d6:	2340      	movs	r3, #64	@ 0x40
 80049d8:	616b      	str	r3, [r5, #20]
 80049da:	2300      	movs	r3, #0
 80049dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049de:	2320      	movs	r3, #32
 80049e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e8:	2330      	movs	r3, #48	@ 0x30
 80049ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b88 <_svfiprintf_r+0x1e4>
 80049ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049f2:	f04f 0901 	mov.w	r9, #1
 80049f6:	4623      	mov	r3, r4
 80049f8:	469a      	mov	sl, r3
 80049fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049fe:	b10a      	cbz	r2, 8004a04 <_svfiprintf_r+0x60>
 8004a00:	2a25      	cmp	r2, #37	@ 0x25
 8004a02:	d1f9      	bne.n	80049f8 <_svfiprintf_r+0x54>
 8004a04:	ebba 0b04 	subs.w	fp, sl, r4
 8004a08:	d00b      	beq.n	8004a22 <_svfiprintf_r+0x7e>
 8004a0a:	465b      	mov	r3, fp
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4638      	mov	r0, r7
 8004a12:	f7ff ff6b 	bl	80048ec <__ssputs_r>
 8004a16:	3001      	adds	r0, #1
 8004a18:	f000 80a7 	beq.w	8004b6a <_svfiprintf_r+0x1c6>
 8004a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a1e:	445a      	add	r2, fp
 8004a20:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a22:	f89a 3000 	ldrb.w	r3, [sl]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 809f 	beq.w	8004b6a <_svfiprintf_r+0x1c6>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a36:	f10a 0a01 	add.w	sl, sl, #1
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	9307      	str	r3, [sp, #28]
 8004a3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a42:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a44:	4654      	mov	r4, sl
 8004a46:	2205      	movs	r2, #5
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	484e      	ldr	r0, [pc, #312]	@ (8004b88 <_svfiprintf_r+0x1e4>)
 8004a4e:	f7fb fbcf 	bl	80001f0 <memchr>
 8004a52:	9a04      	ldr	r2, [sp, #16]
 8004a54:	b9d8      	cbnz	r0, 8004a8e <_svfiprintf_r+0xea>
 8004a56:	06d0      	lsls	r0, r2, #27
 8004a58:	bf44      	itt	mi
 8004a5a:	2320      	movmi	r3, #32
 8004a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a60:	0711      	lsls	r1, r2, #28
 8004a62:	bf44      	itt	mi
 8004a64:	232b      	movmi	r3, #43	@ 0x2b
 8004a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a70:	d015      	beq.n	8004a9e <_svfiprintf_r+0xfa>
 8004a72:	9a07      	ldr	r2, [sp, #28]
 8004a74:	4654      	mov	r4, sl
 8004a76:	2000      	movs	r0, #0
 8004a78:	f04f 0c0a 	mov.w	ip, #10
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a82:	3b30      	subs	r3, #48	@ 0x30
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	d94b      	bls.n	8004b20 <_svfiprintf_r+0x17c>
 8004a88:	b1b0      	cbz	r0, 8004ab8 <_svfiprintf_r+0x114>
 8004a8a:	9207      	str	r2, [sp, #28]
 8004a8c:	e014      	b.n	8004ab8 <_svfiprintf_r+0x114>
 8004a8e:	eba0 0308 	sub.w	r3, r0, r8
 8004a92:	fa09 f303 	lsl.w	r3, r9, r3
 8004a96:	4313      	orrs	r3, r2
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	46a2      	mov	sl, r4
 8004a9c:	e7d2      	b.n	8004a44 <_svfiprintf_r+0xa0>
 8004a9e:	9b03      	ldr	r3, [sp, #12]
 8004aa0:	1d19      	adds	r1, r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	9103      	str	r1, [sp, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bfbb      	ittet	lt
 8004aaa:	425b      	neglt	r3, r3
 8004aac:	f042 0202 	orrlt.w	r2, r2, #2
 8004ab0:	9307      	strge	r3, [sp, #28]
 8004ab2:	9307      	strlt	r3, [sp, #28]
 8004ab4:	bfb8      	it	lt
 8004ab6:	9204      	strlt	r2, [sp, #16]
 8004ab8:	7823      	ldrb	r3, [r4, #0]
 8004aba:	2b2e      	cmp	r3, #46	@ 0x2e
 8004abc:	d10a      	bne.n	8004ad4 <_svfiprintf_r+0x130>
 8004abe:	7863      	ldrb	r3, [r4, #1]
 8004ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ac2:	d132      	bne.n	8004b2a <_svfiprintf_r+0x186>
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9203      	str	r2, [sp, #12]
 8004acc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ad0:	3402      	adds	r4, #2
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b98 <_svfiprintf_r+0x1f4>
 8004ad8:	7821      	ldrb	r1, [r4, #0]
 8004ada:	2203      	movs	r2, #3
 8004adc:	4650      	mov	r0, sl
 8004ade:	f7fb fb87 	bl	80001f0 <memchr>
 8004ae2:	b138      	cbz	r0, 8004af4 <_svfiprintf_r+0x150>
 8004ae4:	9b04      	ldr	r3, [sp, #16]
 8004ae6:	eba0 000a 	sub.w	r0, r0, sl
 8004aea:	2240      	movs	r2, #64	@ 0x40
 8004aec:	4082      	lsls	r2, r0
 8004aee:	4313      	orrs	r3, r2
 8004af0:	3401      	adds	r4, #1
 8004af2:	9304      	str	r3, [sp, #16]
 8004af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af8:	4824      	ldr	r0, [pc, #144]	@ (8004b8c <_svfiprintf_r+0x1e8>)
 8004afa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004afe:	2206      	movs	r2, #6
 8004b00:	f7fb fb76 	bl	80001f0 <memchr>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d036      	beq.n	8004b76 <_svfiprintf_r+0x1d2>
 8004b08:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <_svfiprintf_r+0x1ec>)
 8004b0a:	bb1b      	cbnz	r3, 8004b54 <_svfiprintf_r+0x1b0>
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	3307      	adds	r3, #7
 8004b10:	f023 0307 	bic.w	r3, r3, #7
 8004b14:	3308      	adds	r3, #8
 8004b16:	9303      	str	r3, [sp, #12]
 8004b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1a:	4433      	add	r3, r6
 8004b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b1e:	e76a      	b.n	80049f6 <_svfiprintf_r+0x52>
 8004b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b24:	460c      	mov	r4, r1
 8004b26:	2001      	movs	r0, #1
 8004b28:	e7a8      	b.n	8004a7c <_svfiprintf_r+0xd8>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	3401      	adds	r4, #1
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 0c0a 	mov.w	ip, #10
 8004b36:	4620      	mov	r0, r4
 8004b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b3c:	3a30      	subs	r2, #48	@ 0x30
 8004b3e:	2a09      	cmp	r2, #9
 8004b40:	d903      	bls.n	8004b4a <_svfiprintf_r+0x1a6>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0c6      	beq.n	8004ad4 <_svfiprintf_r+0x130>
 8004b46:	9105      	str	r1, [sp, #20]
 8004b48:	e7c4      	b.n	8004ad4 <_svfiprintf_r+0x130>
 8004b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b4e:	4604      	mov	r4, r0
 8004b50:	2301      	movs	r3, #1
 8004b52:	e7f0      	b.n	8004b36 <_svfiprintf_r+0x192>
 8004b54:	ab03      	add	r3, sp, #12
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	462a      	mov	r2, r5
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <_svfiprintf_r+0x1f0>)
 8004b5c:	a904      	add	r1, sp, #16
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f3af 8000 	nop.w
 8004b64:	1c42      	adds	r2, r0, #1
 8004b66:	4606      	mov	r6, r0
 8004b68:	d1d6      	bne.n	8004b18 <_svfiprintf_r+0x174>
 8004b6a:	89ab      	ldrh	r3, [r5, #12]
 8004b6c:	065b      	lsls	r3, r3, #25
 8004b6e:	f53f af2d 	bmi.w	80049cc <_svfiprintf_r+0x28>
 8004b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b74:	e72c      	b.n	80049d0 <_svfiprintf_r+0x2c>
 8004b76:	ab03      	add	r3, sp, #12
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <_svfiprintf_r+0x1f0>)
 8004b7e:	a904      	add	r1, sp, #16
 8004b80:	4638      	mov	r0, r7
 8004b82:	f000 f9bb 	bl	8004efc <_printf_i>
 8004b86:	e7ed      	b.n	8004b64 <_svfiprintf_r+0x1c0>
 8004b88:	08005814 	.word	0x08005814
 8004b8c:	0800581e 	.word	0x0800581e
 8004b90:	00000000 	.word	0x00000000
 8004b94:	080048ed 	.word	0x080048ed
 8004b98:	0800581a 	.word	0x0800581a

08004b9c <__sfputc_r>:
 8004b9c:	6893      	ldr	r3, [r2, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	b410      	push	{r4}
 8004ba4:	6093      	str	r3, [r2, #8]
 8004ba6:	da08      	bge.n	8004bba <__sfputc_r+0x1e>
 8004ba8:	6994      	ldr	r4, [r2, #24]
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	db01      	blt.n	8004bb2 <__sfputc_r+0x16>
 8004bae:	290a      	cmp	r1, #10
 8004bb0:	d103      	bne.n	8004bba <__sfputc_r+0x1e>
 8004bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb6:	f000 bb6d 	b.w	8005294 <__swbuf_r>
 8004bba:	6813      	ldr	r3, [r2, #0]
 8004bbc:	1c58      	adds	r0, r3, #1
 8004bbe:	6010      	str	r0, [r2, #0]
 8004bc0:	7019      	strb	r1, [r3, #0]
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <__sfputs_r>:
 8004bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	18d5      	adds	r5, r2, r3
 8004bd4:	42ac      	cmp	r4, r5
 8004bd6:	d101      	bne.n	8004bdc <__sfputs_r+0x12>
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e007      	b.n	8004bec <__sfputs_r+0x22>
 8004bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be0:	463a      	mov	r2, r7
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7ff ffda 	bl	8004b9c <__sfputc_r>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d1f3      	bne.n	8004bd4 <__sfputs_r+0xa>
 8004bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bf0 <_vfiprintf_r>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	b09d      	sub	sp, #116	@ 0x74
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	4698      	mov	r8, r3
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	b118      	cbz	r0, 8004c08 <_vfiprintf_r+0x18>
 8004c00:	6a03      	ldr	r3, [r0, #32]
 8004c02:	b90b      	cbnz	r3, 8004c08 <_vfiprintf_r+0x18>
 8004c04:	f7ff fc44 	bl	8004490 <__sinit>
 8004c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c0a:	07d9      	lsls	r1, r3, #31
 8004c0c:	d405      	bmi.n	8004c1a <_vfiprintf_r+0x2a>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	059a      	lsls	r2, r3, #22
 8004c12:	d402      	bmi.n	8004c1a <_vfiprintf_r+0x2a>
 8004c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c16:	f7ff fd60 	bl	80046da <__retarget_lock_acquire_recursive>
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	d501      	bpl.n	8004c24 <_vfiprintf_r+0x34>
 8004c20:	692b      	ldr	r3, [r5, #16]
 8004c22:	b99b      	cbnz	r3, 8004c4c <_vfiprintf_r+0x5c>
 8004c24:	4629      	mov	r1, r5
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 fb72 	bl	8005310 <__swsetup_r>
 8004c2c:	b170      	cbz	r0, 8004c4c <_vfiprintf_r+0x5c>
 8004c2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c30:	07dc      	lsls	r4, r3, #31
 8004c32:	d504      	bpl.n	8004c3e <_vfiprintf_r+0x4e>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	b01d      	add	sp, #116	@ 0x74
 8004c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	0598      	lsls	r0, r3, #22
 8004c42:	d4f7      	bmi.n	8004c34 <_vfiprintf_r+0x44>
 8004c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c46:	f7ff fd49 	bl	80046dc <__retarget_lock_release_recursive>
 8004c4a:	e7f3      	b.n	8004c34 <_vfiprintf_r+0x44>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c50:	2320      	movs	r3, #32
 8004c52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c5a:	2330      	movs	r3, #48	@ 0x30
 8004c5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e0c <_vfiprintf_r+0x21c>
 8004c60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c64:	f04f 0901 	mov.w	r9, #1
 8004c68:	4623      	mov	r3, r4
 8004c6a:	469a      	mov	sl, r3
 8004c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c70:	b10a      	cbz	r2, 8004c76 <_vfiprintf_r+0x86>
 8004c72:	2a25      	cmp	r2, #37	@ 0x25
 8004c74:	d1f9      	bne.n	8004c6a <_vfiprintf_r+0x7a>
 8004c76:	ebba 0b04 	subs.w	fp, sl, r4
 8004c7a:	d00b      	beq.n	8004c94 <_vfiprintf_r+0xa4>
 8004c7c:	465b      	mov	r3, fp
 8004c7e:	4622      	mov	r2, r4
 8004c80:	4629      	mov	r1, r5
 8004c82:	4630      	mov	r0, r6
 8004c84:	f7ff ffa1 	bl	8004bca <__sfputs_r>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f000 80a7 	beq.w	8004ddc <_vfiprintf_r+0x1ec>
 8004c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c90:	445a      	add	r2, fp
 8004c92:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c94:	f89a 3000 	ldrb.w	r3, [sl]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 809f 	beq.w	8004ddc <_vfiprintf_r+0x1ec>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca8:	f10a 0a01 	add.w	sl, sl, #1
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	9307      	str	r3, [sp, #28]
 8004cb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cb6:	4654      	mov	r4, sl
 8004cb8:	2205      	movs	r2, #5
 8004cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbe:	4853      	ldr	r0, [pc, #332]	@ (8004e0c <_vfiprintf_r+0x21c>)
 8004cc0:	f7fb fa96 	bl	80001f0 <memchr>
 8004cc4:	9a04      	ldr	r2, [sp, #16]
 8004cc6:	b9d8      	cbnz	r0, 8004d00 <_vfiprintf_r+0x110>
 8004cc8:	06d1      	lsls	r1, r2, #27
 8004cca:	bf44      	itt	mi
 8004ccc:	2320      	movmi	r3, #32
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd2:	0713      	lsls	r3, r2, #28
 8004cd4:	bf44      	itt	mi
 8004cd6:	232b      	movmi	r3, #43	@ 0x2b
 8004cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce2:	d015      	beq.n	8004d10 <_vfiprintf_r+0x120>
 8004ce4:	9a07      	ldr	r2, [sp, #28]
 8004ce6:	4654      	mov	r4, sl
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f04f 0c0a 	mov.w	ip, #10
 8004cee:	4621      	mov	r1, r4
 8004cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf4:	3b30      	subs	r3, #48	@ 0x30
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d94b      	bls.n	8004d92 <_vfiprintf_r+0x1a2>
 8004cfa:	b1b0      	cbz	r0, 8004d2a <_vfiprintf_r+0x13a>
 8004cfc:	9207      	str	r2, [sp, #28]
 8004cfe:	e014      	b.n	8004d2a <_vfiprintf_r+0x13a>
 8004d00:	eba0 0308 	sub.w	r3, r0, r8
 8004d04:	fa09 f303 	lsl.w	r3, r9, r3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	46a2      	mov	sl, r4
 8004d0e:	e7d2      	b.n	8004cb6 <_vfiprintf_r+0xc6>
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	1d19      	adds	r1, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	9103      	str	r1, [sp, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bfbb      	ittet	lt
 8004d1c:	425b      	neglt	r3, r3
 8004d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d22:	9307      	strge	r3, [sp, #28]
 8004d24:	9307      	strlt	r3, [sp, #28]
 8004d26:	bfb8      	it	lt
 8004d28:	9204      	strlt	r2, [sp, #16]
 8004d2a:	7823      	ldrb	r3, [r4, #0]
 8004d2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d2e:	d10a      	bne.n	8004d46 <_vfiprintf_r+0x156>
 8004d30:	7863      	ldrb	r3, [r4, #1]
 8004d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d34:	d132      	bne.n	8004d9c <_vfiprintf_r+0x1ac>
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	1d1a      	adds	r2, r3, #4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	9203      	str	r2, [sp, #12]
 8004d3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d42:	3402      	adds	r4, #2
 8004d44:	9305      	str	r3, [sp, #20]
 8004d46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e1c <_vfiprintf_r+0x22c>
 8004d4a:	7821      	ldrb	r1, [r4, #0]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	4650      	mov	r0, sl
 8004d50:	f7fb fa4e 	bl	80001f0 <memchr>
 8004d54:	b138      	cbz	r0, 8004d66 <_vfiprintf_r+0x176>
 8004d56:	9b04      	ldr	r3, [sp, #16]
 8004d58:	eba0 000a 	sub.w	r0, r0, sl
 8004d5c:	2240      	movs	r2, #64	@ 0x40
 8004d5e:	4082      	lsls	r2, r0
 8004d60:	4313      	orrs	r3, r2
 8004d62:	3401      	adds	r4, #1
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6a:	4829      	ldr	r0, [pc, #164]	@ (8004e10 <_vfiprintf_r+0x220>)
 8004d6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d70:	2206      	movs	r2, #6
 8004d72:	f7fb fa3d 	bl	80001f0 <memchr>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d03f      	beq.n	8004dfa <_vfiprintf_r+0x20a>
 8004d7a:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <_vfiprintf_r+0x224>)
 8004d7c:	bb1b      	cbnz	r3, 8004dc6 <_vfiprintf_r+0x1d6>
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	3307      	adds	r3, #7
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	3308      	adds	r3, #8
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8c:	443b      	add	r3, r7
 8004d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d90:	e76a      	b.n	8004c68 <_vfiprintf_r+0x78>
 8004d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d96:	460c      	mov	r4, r1
 8004d98:	2001      	movs	r0, #1
 8004d9a:	e7a8      	b.n	8004cee <_vfiprintf_r+0xfe>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	3401      	adds	r4, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	4619      	mov	r1, r3
 8004da4:	f04f 0c0a 	mov.w	ip, #10
 8004da8:	4620      	mov	r0, r4
 8004daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dae:	3a30      	subs	r2, #48	@ 0x30
 8004db0:	2a09      	cmp	r2, #9
 8004db2:	d903      	bls.n	8004dbc <_vfiprintf_r+0x1cc>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0c6      	beq.n	8004d46 <_vfiprintf_r+0x156>
 8004db8:	9105      	str	r1, [sp, #20]
 8004dba:	e7c4      	b.n	8004d46 <_vfiprintf_r+0x156>
 8004dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e7f0      	b.n	8004da8 <_vfiprintf_r+0x1b8>
 8004dc6:	ab03      	add	r3, sp, #12
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	462a      	mov	r2, r5
 8004dcc:	4b12      	ldr	r3, [pc, #72]	@ (8004e18 <_vfiprintf_r+0x228>)
 8004dce:	a904      	add	r1, sp, #16
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	f3af 8000 	nop.w
 8004dd6:	4607      	mov	r7, r0
 8004dd8:	1c78      	adds	r0, r7, #1
 8004dda:	d1d6      	bne.n	8004d8a <_vfiprintf_r+0x19a>
 8004ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dde:	07d9      	lsls	r1, r3, #31
 8004de0:	d405      	bmi.n	8004dee <_vfiprintf_r+0x1fe>
 8004de2:	89ab      	ldrh	r3, [r5, #12]
 8004de4:	059a      	lsls	r2, r3, #22
 8004de6:	d402      	bmi.n	8004dee <_vfiprintf_r+0x1fe>
 8004de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dea:	f7ff fc77 	bl	80046dc <__retarget_lock_release_recursive>
 8004dee:	89ab      	ldrh	r3, [r5, #12]
 8004df0:	065b      	lsls	r3, r3, #25
 8004df2:	f53f af1f 	bmi.w	8004c34 <_vfiprintf_r+0x44>
 8004df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004df8:	e71e      	b.n	8004c38 <_vfiprintf_r+0x48>
 8004dfa:	ab03      	add	r3, sp, #12
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	462a      	mov	r2, r5
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <_vfiprintf_r+0x228>)
 8004e02:	a904      	add	r1, sp, #16
 8004e04:	4630      	mov	r0, r6
 8004e06:	f000 f879 	bl	8004efc <_printf_i>
 8004e0a:	e7e4      	b.n	8004dd6 <_vfiprintf_r+0x1e6>
 8004e0c:	08005814 	.word	0x08005814
 8004e10:	0800581e 	.word	0x0800581e
 8004e14:	00000000 	.word	0x00000000
 8004e18:	08004bcb 	.word	0x08004bcb
 8004e1c:	0800581a 	.word	0x0800581a

08004e20 <_printf_common>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	4616      	mov	r6, r2
 8004e26:	4698      	mov	r8, r3
 8004e28:	688a      	ldr	r2, [r1, #8]
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e30:	4293      	cmp	r3, r2
 8004e32:	bfb8      	it	lt
 8004e34:	4613      	movlt	r3, r2
 8004e36:	6033      	str	r3, [r6, #0]
 8004e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b10a      	cbz	r2, 8004e46 <_printf_common+0x26>
 8004e42:	3301      	adds	r3, #1
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	0699      	lsls	r1, r3, #26
 8004e4a:	bf42      	ittt	mi
 8004e4c:	6833      	ldrmi	r3, [r6, #0]
 8004e4e:	3302      	addmi	r3, #2
 8004e50:	6033      	strmi	r3, [r6, #0]
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	f015 0506 	ands.w	r5, r5, #6
 8004e58:	d106      	bne.n	8004e68 <_printf_common+0x48>
 8004e5a:	f104 0a19 	add.w	sl, r4, #25
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	6832      	ldr	r2, [r6, #0]
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	dc26      	bgt.n	8004eb6 <_printf_common+0x96>
 8004e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	3b00      	subs	r3, #0
 8004e70:	bf18      	it	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	0692      	lsls	r2, r2, #26
 8004e76:	d42b      	bmi.n	8004ed0 <_printf_common+0xb0>
 8004e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	4638      	mov	r0, r7
 8004e80:	47c8      	blx	r9
 8004e82:	3001      	adds	r0, #1
 8004e84:	d01e      	beq.n	8004ec4 <_printf_common+0xa4>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	6922      	ldr	r2, [r4, #16]
 8004e8a:	f003 0306 	and.w	r3, r3, #6
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	bf02      	ittt	eq
 8004e92:	68e5      	ldreq	r5, [r4, #12]
 8004e94:	6833      	ldreq	r3, [r6, #0]
 8004e96:	1aed      	subeq	r5, r5, r3
 8004e98:	68a3      	ldr	r3, [r4, #8]
 8004e9a:	bf0c      	ite	eq
 8004e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea0:	2500      	movne	r5, #0
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bfc4      	itt	gt
 8004ea6:	1a9b      	subgt	r3, r3, r2
 8004ea8:	18ed      	addgt	r5, r5, r3
 8004eaa:	2600      	movs	r6, #0
 8004eac:	341a      	adds	r4, #26
 8004eae:	42b5      	cmp	r5, r6
 8004eb0:	d11a      	bne.n	8004ee8 <_printf_common+0xc8>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	e008      	b.n	8004ec8 <_printf_common+0xa8>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4652      	mov	r2, sl
 8004eba:	4641      	mov	r1, r8
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	47c8      	blx	r9
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d103      	bne.n	8004ecc <_printf_common+0xac>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ecc:	3501      	adds	r5, #1
 8004ece:	e7c6      	b.n	8004e5e <_printf_common+0x3e>
 8004ed0:	18e1      	adds	r1, r4, r3
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	2030      	movs	r0, #48	@ 0x30
 8004ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eda:	4422      	add	r2, r4
 8004edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	e7c7      	b.n	8004e78 <_printf_common+0x58>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4622      	mov	r2, r4
 8004eec:	4641      	mov	r1, r8
 8004eee:	4638      	mov	r0, r7
 8004ef0:	47c8      	blx	r9
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d0e6      	beq.n	8004ec4 <_printf_common+0xa4>
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7d9      	b.n	8004eae <_printf_common+0x8e>
	...

08004efc <_printf_i>:
 8004efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	7e0f      	ldrb	r7, [r1, #24]
 8004f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f04:	2f78      	cmp	r7, #120	@ 0x78
 8004f06:	4691      	mov	r9, r2
 8004f08:	4680      	mov	r8, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	469a      	mov	sl, r3
 8004f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f12:	d807      	bhi.n	8004f24 <_printf_i+0x28>
 8004f14:	2f62      	cmp	r7, #98	@ 0x62
 8004f16:	d80a      	bhi.n	8004f2e <_printf_i+0x32>
 8004f18:	2f00      	cmp	r7, #0
 8004f1a:	f000 80d2 	beq.w	80050c2 <_printf_i+0x1c6>
 8004f1e:	2f58      	cmp	r7, #88	@ 0x58
 8004f20:	f000 80b9 	beq.w	8005096 <_printf_i+0x19a>
 8004f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f2c:	e03a      	b.n	8004fa4 <_printf_i+0xa8>
 8004f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f32:	2b15      	cmp	r3, #21
 8004f34:	d8f6      	bhi.n	8004f24 <_printf_i+0x28>
 8004f36:	a101      	add	r1, pc, #4	@ (adr r1, 8004f3c <_printf_i+0x40>)
 8004f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f3c:	08004f95 	.word	0x08004f95
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004f25 	.word	0x08004f25
 8004f48:	08004f25 	.word	0x08004f25
 8004f4c:	08004f25 	.word	0x08004f25
 8004f50:	08004f25 	.word	0x08004f25
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004f25 	.word	0x08004f25
 8004f5c:	08004f25 	.word	0x08004f25
 8004f60:	08004f25 	.word	0x08004f25
 8004f64:	08004f25 	.word	0x08004f25
 8004f68:	080050a9 	.word	0x080050a9
 8004f6c:	08004fd3 	.word	0x08004fd3
 8004f70:	08005063 	.word	0x08005063
 8004f74:	08004f25 	.word	0x08004f25
 8004f78:	08004f25 	.word	0x08004f25
 8004f7c:	080050cb 	.word	0x080050cb
 8004f80:	08004f25 	.word	0x08004f25
 8004f84:	08004fd3 	.word	0x08004fd3
 8004f88:	08004f25 	.word	0x08004f25
 8004f8c:	08004f25 	.word	0x08004f25
 8004f90:	0800506b 	.word	0x0800506b
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	1d1a      	adds	r2, r3, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6032      	str	r2, [r6, #0]
 8004f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e09d      	b.n	80050e4 <_printf_i+0x1e8>
 8004fa8:	6833      	ldr	r3, [r6, #0]
 8004faa:	6820      	ldr	r0, [r4, #0]
 8004fac:	1d19      	adds	r1, r3, #4
 8004fae:	6031      	str	r1, [r6, #0]
 8004fb0:	0606      	lsls	r6, r0, #24
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0xbc>
 8004fb4:	681d      	ldr	r5, [r3, #0]
 8004fb6:	e003      	b.n	8004fc0 <_printf_i+0xc4>
 8004fb8:	0645      	lsls	r5, r0, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0xb8>
 8004fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	da03      	bge.n	8004fcc <_printf_i+0xd0>
 8004fc4:	232d      	movs	r3, #45	@ 0x2d
 8004fc6:	426d      	negs	r5, r5
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fcc:	4859      	ldr	r0, [pc, #356]	@ (8005134 <_printf_i+0x238>)
 8004fce:	230a      	movs	r3, #10
 8004fd0:	e011      	b.n	8004ff6 <_printf_i+0xfa>
 8004fd2:	6821      	ldr	r1, [r4, #0]
 8004fd4:	6833      	ldr	r3, [r6, #0]
 8004fd6:	0608      	lsls	r0, r1, #24
 8004fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fdc:	d402      	bmi.n	8004fe4 <_printf_i+0xe8>
 8004fde:	0649      	lsls	r1, r1, #25
 8004fe0:	bf48      	it	mi
 8004fe2:	b2ad      	uxthmi	r5, r5
 8004fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fe6:	4853      	ldr	r0, [pc, #332]	@ (8005134 <_printf_i+0x238>)
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	bf14      	ite	ne
 8004fec:	230a      	movne	r3, #10
 8004fee:	2308      	moveq	r3, #8
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ff6:	6866      	ldr	r6, [r4, #4]
 8004ff8:	60a6      	str	r6, [r4, #8]
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	bfa2      	ittt	ge
 8004ffe:	6821      	ldrge	r1, [r4, #0]
 8005000:	f021 0104 	bicge.w	r1, r1, #4
 8005004:	6021      	strge	r1, [r4, #0]
 8005006:	b90d      	cbnz	r5, 800500c <_printf_i+0x110>
 8005008:	2e00      	cmp	r6, #0
 800500a:	d04b      	beq.n	80050a4 <_printf_i+0x1a8>
 800500c:	4616      	mov	r6, r2
 800500e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005012:	fb03 5711 	mls	r7, r3, r1, r5
 8005016:	5dc7      	ldrb	r7, [r0, r7]
 8005018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800501c:	462f      	mov	r7, r5
 800501e:	42bb      	cmp	r3, r7
 8005020:	460d      	mov	r5, r1
 8005022:	d9f4      	bls.n	800500e <_printf_i+0x112>
 8005024:	2b08      	cmp	r3, #8
 8005026:	d10b      	bne.n	8005040 <_printf_i+0x144>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	07df      	lsls	r7, r3, #31
 800502c:	d508      	bpl.n	8005040 <_printf_i+0x144>
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	6861      	ldr	r1, [r4, #4]
 8005032:	4299      	cmp	r1, r3
 8005034:	bfde      	ittt	le
 8005036:	2330      	movle	r3, #48	@ 0x30
 8005038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800503c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005040:	1b92      	subs	r2, r2, r6
 8005042:	6122      	str	r2, [r4, #16]
 8005044:	f8cd a000 	str.w	sl, [sp]
 8005048:	464b      	mov	r3, r9
 800504a:	aa03      	add	r2, sp, #12
 800504c:	4621      	mov	r1, r4
 800504e:	4640      	mov	r0, r8
 8005050:	f7ff fee6 	bl	8004e20 <_printf_common>
 8005054:	3001      	adds	r0, #1
 8005056:	d14a      	bne.n	80050ee <_printf_i+0x1f2>
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	b004      	add	sp, #16
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	4833      	ldr	r0, [pc, #204]	@ (8005138 <_printf_i+0x23c>)
 800506c:	2778      	movs	r7, #120	@ 0x78
 800506e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	6831      	ldr	r1, [r6, #0]
 8005076:	061f      	lsls	r7, r3, #24
 8005078:	f851 5b04 	ldr.w	r5, [r1], #4
 800507c:	d402      	bmi.n	8005084 <_printf_i+0x188>
 800507e:	065f      	lsls	r7, r3, #25
 8005080:	bf48      	it	mi
 8005082:	b2ad      	uxthmi	r5, r5
 8005084:	6031      	str	r1, [r6, #0]
 8005086:	07d9      	lsls	r1, r3, #31
 8005088:	bf44      	itt	mi
 800508a:	f043 0320 	orrmi.w	r3, r3, #32
 800508e:	6023      	strmi	r3, [r4, #0]
 8005090:	b11d      	cbz	r5, 800509a <_printf_i+0x19e>
 8005092:	2310      	movs	r3, #16
 8005094:	e7ac      	b.n	8004ff0 <_printf_i+0xf4>
 8005096:	4827      	ldr	r0, [pc, #156]	@ (8005134 <_printf_i+0x238>)
 8005098:	e7e9      	b.n	800506e <_printf_i+0x172>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	f023 0320 	bic.w	r3, r3, #32
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	e7f6      	b.n	8005092 <_printf_i+0x196>
 80050a4:	4616      	mov	r6, r2
 80050a6:	e7bd      	b.n	8005024 <_printf_i+0x128>
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	6825      	ldr	r5, [r4, #0]
 80050ac:	6961      	ldr	r1, [r4, #20]
 80050ae:	1d18      	adds	r0, r3, #4
 80050b0:	6030      	str	r0, [r6, #0]
 80050b2:	062e      	lsls	r6, r5, #24
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	d501      	bpl.n	80050bc <_printf_i+0x1c0>
 80050b8:	6019      	str	r1, [r3, #0]
 80050ba:	e002      	b.n	80050c2 <_printf_i+0x1c6>
 80050bc:	0668      	lsls	r0, r5, #25
 80050be:	d5fb      	bpl.n	80050b8 <_printf_i+0x1bc>
 80050c0:	8019      	strh	r1, [r3, #0]
 80050c2:	2300      	movs	r3, #0
 80050c4:	6123      	str	r3, [r4, #16]
 80050c6:	4616      	mov	r6, r2
 80050c8:	e7bc      	b.n	8005044 <_printf_i+0x148>
 80050ca:	6833      	ldr	r3, [r6, #0]
 80050cc:	1d1a      	adds	r2, r3, #4
 80050ce:	6032      	str	r2, [r6, #0]
 80050d0:	681e      	ldr	r6, [r3, #0]
 80050d2:	6862      	ldr	r2, [r4, #4]
 80050d4:	2100      	movs	r1, #0
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7fb f88a 	bl	80001f0 <memchr>
 80050dc:	b108      	cbz	r0, 80050e2 <_printf_i+0x1e6>
 80050de:	1b80      	subs	r0, r0, r6
 80050e0:	6060      	str	r0, [r4, #4]
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	6123      	str	r3, [r4, #16]
 80050e6:	2300      	movs	r3, #0
 80050e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ec:	e7aa      	b.n	8005044 <_printf_i+0x148>
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	4632      	mov	r2, r6
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	47d0      	blx	sl
 80050f8:	3001      	adds	r0, #1
 80050fa:	d0ad      	beq.n	8005058 <_printf_i+0x15c>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	079b      	lsls	r3, r3, #30
 8005100:	d413      	bmi.n	800512a <_printf_i+0x22e>
 8005102:	68e0      	ldr	r0, [r4, #12]
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	4298      	cmp	r0, r3
 8005108:	bfb8      	it	lt
 800510a:	4618      	movlt	r0, r3
 800510c:	e7a6      	b.n	800505c <_printf_i+0x160>
 800510e:	2301      	movs	r3, #1
 8005110:	4632      	mov	r2, r6
 8005112:	4649      	mov	r1, r9
 8005114:	4640      	mov	r0, r8
 8005116:	47d0      	blx	sl
 8005118:	3001      	adds	r0, #1
 800511a:	d09d      	beq.n	8005058 <_printf_i+0x15c>
 800511c:	3501      	adds	r5, #1
 800511e:	68e3      	ldr	r3, [r4, #12]
 8005120:	9903      	ldr	r1, [sp, #12]
 8005122:	1a5b      	subs	r3, r3, r1
 8005124:	42ab      	cmp	r3, r5
 8005126:	dcf2      	bgt.n	800510e <_printf_i+0x212>
 8005128:	e7eb      	b.n	8005102 <_printf_i+0x206>
 800512a:	2500      	movs	r5, #0
 800512c:	f104 0619 	add.w	r6, r4, #25
 8005130:	e7f5      	b.n	800511e <_printf_i+0x222>
 8005132:	bf00      	nop
 8005134:	08005825 	.word	0x08005825
 8005138:	08005836 	.word	0x08005836

0800513c <__sflush_r>:
 800513c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005144:	0716      	lsls	r6, r2, #28
 8005146:	4605      	mov	r5, r0
 8005148:	460c      	mov	r4, r1
 800514a:	d454      	bmi.n	80051f6 <__sflush_r+0xba>
 800514c:	684b      	ldr	r3, [r1, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dc02      	bgt.n	8005158 <__sflush_r+0x1c>
 8005152:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	dd48      	ble.n	80051ea <__sflush_r+0xae>
 8005158:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800515a:	2e00      	cmp	r6, #0
 800515c:	d045      	beq.n	80051ea <__sflush_r+0xae>
 800515e:	2300      	movs	r3, #0
 8005160:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005164:	682f      	ldr	r7, [r5, #0]
 8005166:	6a21      	ldr	r1, [r4, #32]
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	d030      	beq.n	80051ce <__sflush_r+0x92>
 800516c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	0759      	lsls	r1, r3, #29
 8005172:	d505      	bpl.n	8005180 <__sflush_r+0x44>
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800517a:	b10b      	cbz	r3, 8005180 <__sflush_r+0x44>
 800517c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005184:	6a21      	ldr	r1, [r4, #32]
 8005186:	4628      	mov	r0, r5
 8005188:	47b0      	blx	r6
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	d106      	bne.n	800519e <__sflush_r+0x62>
 8005190:	6829      	ldr	r1, [r5, #0]
 8005192:	291d      	cmp	r1, #29
 8005194:	d82b      	bhi.n	80051ee <__sflush_r+0xb2>
 8005196:	4a2a      	ldr	r2, [pc, #168]	@ (8005240 <__sflush_r+0x104>)
 8005198:	410a      	asrs	r2, r1
 800519a:	07d6      	lsls	r6, r2, #31
 800519c:	d427      	bmi.n	80051ee <__sflush_r+0xb2>
 800519e:	2200      	movs	r2, #0
 80051a0:	6062      	str	r2, [r4, #4]
 80051a2:	04d9      	lsls	r1, r3, #19
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	6022      	str	r2, [r4, #0]
 80051a8:	d504      	bpl.n	80051b4 <__sflush_r+0x78>
 80051aa:	1c42      	adds	r2, r0, #1
 80051ac:	d101      	bne.n	80051b2 <__sflush_r+0x76>
 80051ae:	682b      	ldr	r3, [r5, #0]
 80051b0:	b903      	cbnz	r3, 80051b4 <__sflush_r+0x78>
 80051b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80051b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051b6:	602f      	str	r7, [r5, #0]
 80051b8:	b1b9      	cbz	r1, 80051ea <__sflush_r+0xae>
 80051ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051be:	4299      	cmp	r1, r3
 80051c0:	d002      	beq.n	80051c8 <__sflush_r+0x8c>
 80051c2:	4628      	mov	r0, r5
 80051c4:	f7ff fa9a 	bl	80046fc <_free_r>
 80051c8:	2300      	movs	r3, #0
 80051ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80051cc:	e00d      	b.n	80051ea <__sflush_r+0xae>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b0      	blx	r6
 80051d4:	4602      	mov	r2, r0
 80051d6:	1c50      	adds	r0, r2, #1
 80051d8:	d1c9      	bne.n	800516e <__sflush_r+0x32>
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0c6      	beq.n	800516e <__sflush_r+0x32>
 80051e0:	2b1d      	cmp	r3, #29
 80051e2:	d001      	beq.n	80051e8 <__sflush_r+0xac>
 80051e4:	2b16      	cmp	r3, #22
 80051e6:	d11e      	bne.n	8005226 <__sflush_r+0xea>
 80051e8:	602f      	str	r7, [r5, #0]
 80051ea:	2000      	movs	r0, #0
 80051ec:	e022      	b.n	8005234 <__sflush_r+0xf8>
 80051ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f2:	b21b      	sxth	r3, r3
 80051f4:	e01b      	b.n	800522e <__sflush_r+0xf2>
 80051f6:	690f      	ldr	r7, [r1, #16]
 80051f8:	2f00      	cmp	r7, #0
 80051fa:	d0f6      	beq.n	80051ea <__sflush_r+0xae>
 80051fc:	0793      	lsls	r3, r2, #30
 80051fe:	680e      	ldr	r6, [r1, #0]
 8005200:	bf08      	it	eq
 8005202:	694b      	ldreq	r3, [r1, #20]
 8005204:	600f      	str	r7, [r1, #0]
 8005206:	bf18      	it	ne
 8005208:	2300      	movne	r3, #0
 800520a:	eba6 0807 	sub.w	r8, r6, r7
 800520e:	608b      	str	r3, [r1, #8]
 8005210:	f1b8 0f00 	cmp.w	r8, #0
 8005214:	dde9      	ble.n	80051ea <__sflush_r+0xae>
 8005216:	6a21      	ldr	r1, [r4, #32]
 8005218:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800521a:	4643      	mov	r3, r8
 800521c:	463a      	mov	r2, r7
 800521e:	4628      	mov	r0, r5
 8005220:	47b0      	blx	r6
 8005222:	2800      	cmp	r0, #0
 8005224:	dc08      	bgt.n	8005238 <__sflush_r+0xfc>
 8005226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800522e:	81a3      	strh	r3, [r4, #12]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005238:	4407      	add	r7, r0
 800523a:	eba8 0800 	sub.w	r8, r8, r0
 800523e:	e7e7      	b.n	8005210 <__sflush_r+0xd4>
 8005240:	dfbffffe 	.word	0xdfbffffe

08005244 <_fflush_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	690b      	ldr	r3, [r1, #16]
 8005248:	4605      	mov	r5, r0
 800524a:	460c      	mov	r4, r1
 800524c:	b913      	cbnz	r3, 8005254 <_fflush_r+0x10>
 800524e:	2500      	movs	r5, #0
 8005250:	4628      	mov	r0, r5
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	b118      	cbz	r0, 800525e <_fflush_r+0x1a>
 8005256:	6a03      	ldr	r3, [r0, #32]
 8005258:	b90b      	cbnz	r3, 800525e <_fflush_r+0x1a>
 800525a:	f7ff f919 	bl	8004490 <__sinit>
 800525e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f3      	beq.n	800524e <_fflush_r+0xa>
 8005266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005268:	07d0      	lsls	r0, r2, #31
 800526a:	d404      	bmi.n	8005276 <_fflush_r+0x32>
 800526c:	0599      	lsls	r1, r3, #22
 800526e:	d402      	bmi.n	8005276 <_fflush_r+0x32>
 8005270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005272:	f7ff fa32 	bl	80046da <__retarget_lock_acquire_recursive>
 8005276:	4628      	mov	r0, r5
 8005278:	4621      	mov	r1, r4
 800527a:	f7ff ff5f 	bl	800513c <__sflush_r>
 800527e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005280:	07da      	lsls	r2, r3, #31
 8005282:	4605      	mov	r5, r0
 8005284:	d4e4      	bmi.n	8005250 <_fflush_r+0xc>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	059b      	lsls	r3, r3, #22
 800528a:	d4e1      	bmi.n	8005250 <_fflush_r+0xc>
 800528c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800528e:	f7ff fa25 	bl	80046dc <__retarget_lock_release_recursive>
 8005292:	e7dd      	b.n	8005250 <_fflush_r+0xc>

08005294 <__swbuf_r>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	460e      	mov	r6, r1
 8005298:	4614      	mov	r4, r2
 800529a:	4605      	mov	r5, r0
 800529c:	b118      	cbz	r0, 80052a6 <__swbuf_r+0x12>
 800529e:	6a03      	ldr	r3, [r0, #32]
 80052a0:	b90b      	cbnz	r3, 80052a6 <__swbuf_r+0x12>
 80052a2:	f7ff f8f5 	bl	8004490 <__sinit>
 80052a6:	69a3      	ldr	r3, [r4, #24]
 80052a8:	60a3      	str	r3, [r4, #8]
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	071a      	lsls	r2, r3, #28
 80052ae:	d501      	bpl.n	80052b4 <__swbuf_r+0x20>
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	b943      	cbnz	r3, 80052c6 <__swbuf_r+0x32>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f82a 	bl	8005310 <__swsetup_r>
 80052bc:	b118      	cbz	r0, 80052c6 <__swbuf_r+0x32>
 80052be:	f04f 37ff 	mov.w	r7, #4294967295
 80052c2:	4638      	mov	r0, r7
 80052c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	6922      	ldr	r2, [r4, #16]
 80052ca:	1a98      	subs	r0, r3, r2
 80052cc:	6963      	ldr	r3, [r4, #20]
 80052ce:	b2f6      	uxtb	r6, r6
 80052d0:	4283      	cmp	r3, r0
 80052d2:	4637      	mov	r7, r6
 80052d4:	dc05      	bgt.n	80052e2 <__swbuf_r+0x4e>
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f7ff ffb3 	bl	8005244 <_fflush_r>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d1ed      	bne.n	80052be <__swbuf_r+0x2a>
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	60a3      	str	r3, [r4, #8]
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	6022      	str	r2, [r4, #0]
 80052ee:	701e      	strb	r6, [r3, #0]
 80052f0:	6962      	ldr	r2, [r4, #20]
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d004      	beq.n	8005302 <__swbuf_r+0x6e>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	07db      	lsls	r3, r3, #31
 80052fc:	d5e1      	bpl.n	80052c2 <__swbuf_r+0x2e>
 80052fe:	2e0a      	cmp	r6, #10
 8005300:	d1df      	bne.n	80052c2 <__swbuf_r+0x2e>
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
 8005306:	f7ff ff9d 	bl	8005244 <_fflush_r>
 800530a:	2800      	cmp	r0, #0
 800530c:	d0d9      	beq.n	80052c2 <__swbuf_r+0x2e>
 800530e:	e7d6      	b.n	80052be <__swbuf_r+0x2a>

08005310 <__swsetup_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4b29      	ldr	r3, [pc, #164]	@ (80053b8 <__swsetup_r+0xa8>)
 8005314:	4605      	mov	r5, r0
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	460c      	mov	r4, r1
 800531a:	b118      	cbz	r0, 8005324 <__swsetup_r+0x14>
 800531c:	6a03      	ldr	r3, [r0, #32]
 800531e:	b90b      	cbnz	r3, 8005324 <__swsetup_r+0x14>
 8005320:	f7ff f8b6 	bl	8004490 <__sinit>
 8005324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005328:	0719      	lsls	r1, r3, #28
 800532a:	d422      	bmi.n	8005372 <__swsetup_r+0x62>
 800532c:	06da      	lsls	r2, r3, #27
 800532e:	d407      	bmi.n	8005340 <__swsetup_r+0x30>
 8005330:	2209      	movs	r2, #9
 8005332:	602a      	str	r2, [r5, #0]
 8005334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	f04f 30ff 	mov.w	r0, #4294967295
 800533e:	e033      	b.n	80053a8 <__swsetup_r+0x98>
 8005340:	0758      	lsls	r0, r3, #29
 8005342:	d512      	bpl.n	800536a <__swsetup_r+0x5a>
 8005344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005346:	b141      	cbz	r1, 800535a <__swsetup_r+0x4a>
 8005348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800534c:	4299      	cmp	r1, r3
 800534e:	d002      	beq.n	8005356 <__swsetup_r+0x46>
 8005350:	4628      	mov	r0, r5
 8005352:	f7ff f9d3 	bl	80046fc <_free_r>
 8005356:	2300      	movs	r3, #0
 8005358:	6363      	str	r3, [r4, #52]	@ 0x34
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005360:	81a3      	strh	r3, [r4, #12]
 8005362:	2300      	movs	r3, #0
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f043 0308 	orr.w	r3, r3, #8
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	b94b      	cbnz	r3, 800538a <__swsetup_r+0x7a>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800537c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005380:	d003      	beq.n	800538a <__swsetup_r+0x7a>
 8005382:	4621      	mov	r1, r4
 8005384:	4628      	mov	r0, r5
 8005386:	f000 f897 	bl	80054b8 <__smakebuf_r>
 800538a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538e:	f013 0201 	ands.w	r2, r3, #1
 8005392:	d00a      	beq.n	80053aa <__swsetup_r+0x9a>
 8005394:	2200      	movs	r2, #0
 8005396:	60a2      	str	r2, [r4, #8]
 8005398:	6962      	ldr	r2, [r4, #20]
 800539a:	4252      	negs	r2, r2
 800539c:	61a2      	str	r2, [r4, #24]
 800539e:	6922      	ldr	r2, [r4, #16]
 80053a0:	b942      	cbnz	r2, 80053b4 <__swsetup_r+0xa4>
 80053a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053a6:	d1c5      	bne.n	8005334 <__swsetup_r+0x24>
 80053a8:	bd38      	pop	{r3, r4, r5, pc}
 80053aa:	0799      	lsls	r1, r3, #30
 80053ac:	bf58      	it	pl
 80053ae:	6962      	ldrpl	r2, [r4, #20]
 80053b0:	60a2      	str	r2, [r4, #8]
 80053b2:	e7f4      	b.n	800539e <__swsetup_r+0x8e>
 80053b4:	2000      	movs	r0, #0
 80053b6:	e7f7      	b.n	80053a8 <__swsetup_r+0x98>
 80053b8:	20000018 	.word	0x20000018

080053bc <memmove>:
 80053bc:	4288      	cmp	r0, r1
 80053be:	b510      	push	{r4, lr}
 80053c0:	eb01 0402 	add.w	r4, r1, r2
 80053c4:	d902      	bls.n	80053cc <memmove+0x10>
 80053c6:	4284      	cmp	r4, r0
 80053c8:	4623      	mov	r3, r4
 80053ca:	d807      	bhi.n	80053dc <memmove+0x20>
 80053cc:	1e43      	subs	r3, r0, #1
 80053ce:	42a1      	cmp	r1, r4
 80053d0:	d008      	beq.n	80053e4 <memmove+0x28>
 80053d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053da:	e7f8      	b.n	80053ce <memmove+0x12>
 80053dc:	4402      	add	r2, r0
 80053de:	4601      	mov	r1, r0
 80053e0:	428a      	cmp	r2, r1
 80053e2:	d100      	bne.n	80053e6 <memmove+0x2a>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ee:	e7f7      	b.n	80053e0 <memmove+0x24>

080053f0 <_sbrk_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d06      	ldr	r5, [pc, #24]	@ (800540c <_sbrk_r+0x1c>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fc fc84 	bl	8001d08 <_sbrk>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_sbrk_r+0x1a>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_sbrk_r+0x1a>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200002c4 	.word	0x200002c4

08005410 <_realloc_r>:
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	4680      	mov	r8, r0
 8005416:	4615      	mov	r5, r2
 8005418:	460c      	mov	r4, r1
 800541a:	b921      	cbnz	r1, 8005426 <_realloc_r+0x16>
 800541c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	4611      	mov	r1, r2
 8005422:	f7ff b9d7 	b.w	80047d4 <_malloc_r>
 8005426:	b92a      	cbnz	r2, 8005434 <_realloc_r+0x24>
 8005428:	f7ff f968 	bl	80046fc <_free_r>
 800542c:	2400      	movs	r4, #0
 800542e:	4620      	mov	r0, r4
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	f000 f89e 	bl	8005574 <_malloc_usable_size_r>
 8005438:	4285      	cmp	r5, r0
 800543a:	4606      	mov	r6, r0
 800543c:	d802      	bhi.n	8005444 <_realloc_r+0x34>
 800543e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005442:	d8f4      	bhi.n	800542e <_realloc_r+0x1e>
 8005444:	4629      	mov	r1, r5
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff f9c4 	bl	80047d4 <_malloc_r>
 800544c:	4607      	mov	r7, r0
 800544e:	2800      	cmp	r0, #0
 8005450:	d0ec      	beq.n	800542c <_realloc_r+0x1c>
 8005452:	42b5      	cmp	r5, r6
 8005454:	462a      	mov	r2, r5
 8005456:	4621      	mov	r1, r4
 8005458:	bf28      	it	cs
 800545a:	4632      	movcs	r2, r6
 800545c:	f7ff f93f 	bl	80046de <memcpy>
 8005460:	4621      	mov	r1, r4
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff f94a 	bl	80046fc <_free_r>
 8005468:	463c      	mov	r4, r7
 800546a:	e7e0      	b.n	800542e <_realloc_r+0x1e>

0800546c <__swhatbuf_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005474:	2900      	cmp	r1, #0
 8005476:	b096      	sub	sp, #88	@ 0x58
 8005478:	4615      	mov	r5, r2
 800547a:	461e      	mov	r6, r3
 800547c:	da0d      	bge.n	800549a <__swhatbuf_r+0x2e>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	bf14      	ite	ne
 800548a:	2340      	movne	r3, #64	@ 0x40
 800548c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005490:	2000      	movs	r0, #0
 8005492:	6031      	str	r1, [r6, #0]
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	b016      	add	sp, #88	@ 0x58
 8005498:	bd70      	pop	{r4, r5, r6, pc}
 800549a:	466a      	mov	r2, sp
 800549c:	f000 f848 	bl	8005530 <_fstat_r>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	dbec      	blt.n	800547e <__swhatbuf_r+0x12>
 80054a4:	9901      	ldr	r1, [sp, #4]
 80054a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80054aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054ae:	4259      	negs	r1, r3
 80054b0:	4159      	adcs	r1, r3
 80054b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054b6:	e7eb      	b.n	8005490 <__swhatbuf_r+0x24>

080054b8 <__smakebuf_r>:
 80054b8:	898b      	ldrh	r3, [r1, #12]
 80054ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054bc:	079d      	lsls	r5, r3, #30
 80054be:	4606      	mov	r6, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	d507      	bpl.n	80054d4 <__smakebuf_r+0x1c>
 80054c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	2301      	movs	r3, #1
 80054ce:	6163      	str	r3, [r4, #20]
 80054d0:	b003      	add	sp, #12
 80054d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d4:	ab01      	add	r3, sp, #4
 80054d6:	466a      	mov	r2, sp
 80054d8:	f7ff ffc8 	bl	800546c <__swhatbuf_r>
 80054dc:	9f00      	ldr	r7, [sp, #0]
 80054de:	4605      	mov	r5, r0
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff f976 	bl	80047d4 <_malloc_r>
 80054e8:	b948      	cbnz	r0, 80054fe <__smakebuf_r+0x46>
 80054ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ee:	059a      	lsls	r2, r3, #22
 80054f0:	d4ee      	bmi.n	80054d0 <__smakebuf_r+0x18>
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	f043 0302 	orr.w	r3, r3, #2
 80054fa:	81a3      	strh	r3, [r4, #12]
 80054fc:	e7e2      	b.n	80054c4 <__smakebuf_r+0xc>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	6020      	str	r0, [r4, #0]
 8005502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	9b01      	ldr	r3, [sp, #4]
 800550a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800550e:	b15b      	cbz	r3, 8005528 <__smakebuf_r+0x70>
 8005510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f81d 	bl	8005554 <_isatty_r>
 800551a:	b128      	cbz	r0, 8005528 <__smakebuf_r+0x70>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	431d      	orrs	r5, r3
 800552c:	81a5      	strh	r5, [r4, #12]
 800552e:	e7cf      	b.n	80054d0 <__smakebuf_r+0x18>

08005530 <_fstat_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	@ (8005550 <_fstat_r+0x20>)
 8005534:	2300      	movs	r3, #0
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	4611      	mov	r1, r2
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	f7fc fbbb 	bl	8001cb8 <_fstat>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	d102      	bne.n	800554c <_fstat_r+0x1c>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	b103      	cbz	r3, 800554c <_fstat_r+0x1c>
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	bd38      	pop	{r3, r4, r5, pc}
 800554e:	bf00      	nop
 8005550:	200002c4 	.word	0x200002c4

08005554 <_isatty_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	@ (8005570 <_isatty_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fc fbba 	bl	8001cd8 <_isatty>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_isatty_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_isatty_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	200002c4 	.word	0x200002c4

08005574 <_malloc_usable_size_r>:
 8005574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005578:	1f18      	subs	r0, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfbc      	itt	lt
 800557e:	580b      	ldrlt	r3, [r1, r0]
 8005580:	18c0      	addlt	r0, r0, r3
 8005582:	4770      	bx	lr

08005584 <_init>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr

08005590 <_fini>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr
