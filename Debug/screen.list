
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08005c30  08005c30  00006c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec0  08005ec0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec8  08005ec8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec8  08005ec8  00006ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ecc  08005ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ed0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000068  08005f38  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08005f38  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8b0  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002615  00000000  00000000  00014948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00016f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093a  00000000  00000000  00017b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001865d  00000000  00000000  000184c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb46  00000000  00000000  00030b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb33  00000000  00000000  00040665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a24  00000000  00000000  000d01dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d3c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c18 	.word	0x08005c18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005c18 	.word	0x08005c18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <CLOCK_init>:

#include "clock.h"


void CLOCK_init()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	ILI9341_Init();
 80005c2:	f000 fe59 	bl	8001278 <ILI9341_Init>
	char timerInit[LENGHT_TIMER];
	TIMER_init(timerInit);
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f9ef 	bl	80019ac <TIMER_init>
	ILI9341_InitDrawString(timerInit);
 80005ce:	463b      	mov	r3, r7
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f8bf 	bl	8001754 <ILI9341_InitDrawString>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <CLOCK_start>:

void CLOCK_start()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
	uint8_t lastMinutes = TIMER_getTime().Minutes;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f9cb 	bl	8001984 <TIMER_getTime>
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	70fb      	strb	r3, [r7, #3]
	while(1)
	{
		if (TIMER_updateTime(&lastMinutes))
 80005f2:	1cfb      	adds	r3, r7, #3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f9f5 	bl	80019e4 <TIMER_updateTime>
		{
			//Return true => change time
		}
		printf("Salut toi\n");
 80005fa:	4804      	ldr	r0, [pc, #16]	@ (800060c <CLOCK_start+0x2c>)
 80005fc:	f004 fad2 	bl	8004ba4 <puts>
		HAL_Delay(2000);
 8000600:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000604:	f001 fab8 	bl	8001b78 <HAL_Delay>
		if (TIMER_updateTime(&lastMinutes))
 8000608:	e7f3      	b.n	80005f2 <CLOCK_start+0x12>
 800060a:	bf00      	nop
 800060c:	08005c30 	.word	0x08005c30

08000610 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN PFP */
// Variable globale pour l'état de la LED
volatile uint8_t ledState = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == Bouton_poussoir_Pin)
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d117      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x40>
  {
    ledState = !ledState;
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <HAL_GPIO_EXTI_Callback+0x48>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf0c      	ite	eq
 800062a:	2301      	moveq	r3, #1
 800062c:	2300      	movne	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_GPIO_EXTI_Callback+0x48>)
 8000634:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, Led_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_GPIO_EXTI_Callback+0x48>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	2104      	movs	r1, #4
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <HAL_GPIO_EXTI_Callback+0x4c>)
 800064c:	f002 f8be 	bl	80027cc <HAL_GPIO_WritePin>
  }
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200001ec 	.word	0x200001ec
 800065c:	40020800 	.word	0x40020800

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f001 fa16 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f814 	bl	8000694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f98a 	bl	8000984 <MX_GPIO_Init>
  MX_DMA_Init();
 8000670:	f000 f968 	bl	8000944 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f93c 	bl	80008f0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000678:	f000 f8da 	bl	8000830 <MX_SPI3_Init>
  MX_RTC_Init();
 800067c:	f000 f876 	bl	800076c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000680:	f000 f90c 	bl	800089c <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  CLOCK_init();
 8000684:	f7ff ff9a 	bl	80005bc <CLOCK_init>
  CLOCK_start();
 8000688:	f7ff ffaa 	bl	80005e0 <CLOCK_start>
 800068c:	2300      	movs	r3, #0

  //CLOCK_start();


  /* USER CODE END 3 */
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fb80 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a22      	ldr	r2, [pc, #136]	@ (8000768 <SystemClock_Config+0xd4>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006f0:	230a      	movs	r3, #10
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f886 	bl	8002830 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f9cb 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fae8 	bl	8002d20 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 f9b5 	bl	8000ac4 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

/* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <MX_RTC_Init+0xbc>)
 8000786:	4a29      	ldr	r2, [pc, #164]	@ (800082c <MX_RTC_Init+0xc0>)
 8000788:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800078a:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <MX_RTC_Init+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_RTC_Init+0xbc>)
 8000792:	227f      	movs	r2, #127	@ 0x7f
 8000794:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <MX_RTC_Init+0xbc>)
 8000798:	22ff      	movs	r2, #255	@ 0xff
 800079a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_RTC_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <MX_RTC_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_RTC_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ae:	481e      	ldr	r0, [pc, #120]	@ (8000828 <MX_RTC_Init+0xbc>)
 80007b0:	f002 fdc6 	bl	8003340 <HAL_RTC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RTC_Init+0x52>
  {
	Error_Handler();
 80007ba:	f000 f983 	bl	8000ac4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 80007be:	2313      	movs	r3, #19
 80007c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80007c2:	233b      	movs	r3, #59	@ 0x3b
 80007c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 80007c6:	232d      	movs	r3, #45	@ 0x2d
 80007c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	@ (8000828 <MX_RTC_Init+0xbc>)
 80007da:	f002 fe32 	bl	8003442 <HAL_RTC_SetTime>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0x7c>
  {
	Error_Handler();
 80007e4:	f000 f96e 	bl	8000ac4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007e8:	2301      	movs	r3, #1
 80007ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007ec:	2301      	movs	r3, #1
 80007ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	480a      	ldr	r0, [pc, #40]	@ (8000828 <MX_RTC_Init+0xbc>)
 8000800:	f002 ff17 	bl	8003632 <HAL_RTC_SetDate>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0xa2>
  {
	Error_Handler();
 800080a:	f000 f95b 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2029      	movs	r0, #41	@ 0x29
 8000814:	f001 faaf 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000818:	2029      	movs	r0, #41	@ 0x29
 800081a:	f001 fac8 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000084 	.word	0x20000084
 800082c:	40002800 	.word	0x40002800

08000830 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <MX_SPI3_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_SPI3_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_SPI3_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_SPI3_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_SPI3_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_SPI3_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_SPI3_Init+0x64>)
 8000882:	f003 f867 	bl	8003954 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800088c:	f000 f91a 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000a4 	.word	0x200000a4
 8000898:	40003c00 	.word	0x40003c00

0800089c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_USART1_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USART1_UART_Init+0x4c>)
 80008d4:	f003 fc30 	bl	8004138 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f8f1 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000015c 	.word	0x2000015c
 80008ec:	40011000 	.word	0x40011000

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f003 fc06 	bl	8004138 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f8c7 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001a4 	.word	0x200001a4
 8000940:	40004400 	.word	0x40004400

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_DMA_Init+0x3c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a0b      	ldr	r2, [pc, #44]	@ (8000980 <MX_DMA_Init+0x3c>)
 8000954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_DMA_Init+0x3c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2010      	movs	r0, #16
 800096c:	f001 fa03 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000970:	2010      	movs	r0, #16
 8000972:	f001 fa1c 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b45      	ldr	r3, [pc, #276]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a44      	ldr	r2, [pc, #272]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b42      	ldr	r3, [pc, #264]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b37      	ldr	r3, [pc, #220]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a36      	ldr	r2, [pc, #216]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	482a      	ldr	r0, [pc, #168]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a10:	f001 fedc 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2120      	movs	r1, #32
 8000a18:	4828      	ldr	r0, [pc, #160]	@ (8000abc <MX_GPIO_Init+0x138>)
 8000a1a:	f001 fed7 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000a24:	4826      	ldr	r0, [pc, #152]	@ (8000ac0 <MX_GPIO_Init+0x13c>)
 8000a26:	f001 fed1 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a42:	f001 fd3f 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Bouton_poussoir_Pin */
  GPIO_InitStruct.Pin = Bouton_poussoir_Pin;
 8000a46:	2308      	movs	r3, #8
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bouton_poussoir_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4817      	ldr	r0, [pc, #92]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a5c:	f001 fd32 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a60:	2320      	movs	r3, #32
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4811      	ldr	r0, [pc, #68]	@ (8000abc <MX_GPIO_Init+0x138>)
 8000a78:	f001 fd24 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000a7c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <MX_GPIO_Init+0x13c>)
 8000a96:	f001 fd15 	bl	80024c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f001 f969 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000aa4:	2009      	movs	r0, #9
 8000aa6:	f001 f982 	bl	8001dae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f001 f926 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <HAL_RTC_MspInit+0x50>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d111      	bne.n	8000b68 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fb04 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b5e:	f7ff ffb1 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <HAL_RTC_MspInit+0x54>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40002800 	.word	0x40002800
 8000b74:	42470e3c 	.word	0x42470e3c

08000b78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a3f      	ldr	r2, [pc, #252]	@ (8000c94 <HAL_SPI_MspInit+0x11c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d178      	bne.n	8000c8c <HAL_SPI_MspInit+0x114>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b3b      	ldr	r3, [pc, #236]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a36      	ldr	r2, [pc, #216]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <HAL_SPI_MspInit+0x120>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c00:	2306      	movs	r3, #6
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4824      	ldr	r0, [pc, #144]	@ (8000c9c <HAL_SPI_MspInit+0x124>)
 8000c0c:	f001 fc5a 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c10:	2320      	movs	r3, #32
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c20:	2306      	movs	r3, #6
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481d      	ldr	r0, [pc, #116]	@ (8000ca0 <HAL_SPI_MspInit+0x128>)
 8000c2c:	f001 fc4a 	bl	80024c4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c32:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca8 <HAL_SPI_MspInit+0x130>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c3e:	2240      	movs	r2, #64	@ 0x40
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c68:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c72:	f001 f8b7 	bl	8001de4 <HAL_DMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000c7c:	f7ff ff22 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c84:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c86:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_SPI_MspInit+0x12c>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	@ 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40003c00 	.word	0x40003c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	200000fc 	.word	0x200000fc
 8000ca8:	40026088 	.word	0x40026088

08000cac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	@ 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a32      	ldr	r2, [pc, #200]	@ (8000d94 <HAL_UART_MspInit+0xe8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12d      	bne.n	8000d2a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a29      	ldr	r2, [pc, #164]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	@ (8000d9c <HAL_UART_MspInit+0xf0>)
 8000d24:	f001 fbce 	bl	80024c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d28:	e030      	b.n	8000d8c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <HAL_UART_MspInit+0xf4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d12b      	bne.n	8000d8c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a16      	ldr	r2, [pc, #88]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d60:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_UART_MspInit+0xec>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <HAL_UART_MspInit+0xf0>)
 8000d88:	f001 fb9c 	bl	80024c4 <HAL_GPIO_Init>
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	@ 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40004400 	.word	0x40004400

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 fe9d 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton_poussoir_Pin);
 8000e06:	2008      	movs	r0, #8
 8000e08:	f001 fcfa 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DMA1_Stream5_IRQHandler+0x10>)
 8000e16:	f001 f8eb 	bl	8001ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000fc 	.word	0x200000fc

08000e24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
  }

  return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fd67 	bl	800194c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
  }
  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 ff88 	bl	8004e44 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20020000 	.word	0x20020000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200001f0 	.word	0x200001f0
 8000f68:	20000360 	.word	0x20000360

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_SPI_TxCpltCallback>:
extern SPI_HandleTypeDef hspi3;
extern DMA_HandleTypeDef hdma_spi3_tx;

// DMA callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI3) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <HAL_SPI_TxCpltCallback+0x24>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d102      	bne.n	8000fa8 <HAL_SPI_TxCpltCallback+0x18>
        spiDmaTransferComplete = 1;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <HAL_SPI_TxCpltCallback+0x28>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
    }
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40003c00 	.word	0x40003c00
 8000fb8:	200001f4 	.word	0x200001f4

08000fbc <LCD_WR_REG>:

static void LCD_WR_REG(uint8_t data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	DC_L();
 8000fc6:	f000 f8ff 	bl	80011c8 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 8000fca:	1df9      	adds	r1, r7, #7
 8000fcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <LCD_WR_REG+0x30>)
 8000fd4:	f002 fd47 	bl	8003a66 <HAL_SPI_Transmit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <LCD_WR_REG+0x26>
		Error_Handler();
 8000fde:	f7ff fd71 	bl	8000ac4 <Error_Handler>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000a4 	.word	0x200000a4

08000ff0 <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	DC_H();
 8000ffa:	f000 f8f1 	bl	80011e0 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 8000ffe:	1df9      	adds	r1, r7, #7
 8001000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001004:	2201      	movs	r2, #1
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <LCD_WR_DATA+0x30>)
 8001008:	f002 fd2d 	bl	8003a66 <HAL_SPI_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <LCD_WR_DATA+0x26>
		Error_Handler();
 8001012:	f7ff fd57 	bl	8000ac4 <Error_Handler>
	}
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000a4 	.word	0x200000a4

08001024 <change>:

static void change(int x, uint8_t time, SPI_HandleTypeDef hspi3)
{
 8001024:	b082      	sub	sp, #8
 8001026:	b5b0      	push	{r4, r5, r7, lr}
 8001028:	b098      	sub	sp, #96	@ 0x60
 800102a:	af14      	add	r7, sp, #80	@ 0x50
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	f107 0020 	add.w	r0, r7, #32
 8001032:	e880 000c 	stmia.w	r0, {r2, r3}
 8001036:	460b      	mov	r3, r1
 8001038:	70fb      	strb	r3, [r7, #3]
	char caractere = time + '0';  // Conversion en caractère
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	3330      	adds	r3, #48	@ 0x30
 800103e:	73fb      	strb	r3, [r7, #15]
	ILI9341_DrawChar(x, caractere, hspi3);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	b29c      	uxth	r4, r3
 8001044:	7bfd      	ldrb	r5, [r7, #15]
 8001046:	4668      	mov	r0, sp
 8001048:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800104c:	2250      	movs	r2, #80	@ 0x50
 800104e:	4619      	mov	r1, r3
 8001050:	f003 ff25 	bl	8004e9e <memcpy>
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	cb0c      	ldmia	r3, {r2, r3}
 800105a:	4629      	mov	r1, r5
 800105c:	4620      	mov	r0, r4
 800105e:	f000 fae3 	bl	8001628 <ILI9341_DrawChar>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800106c:	b002      	add	sp, #8
 800106e:	4770      	bx	lr

08001070 <ILI9341_WritePixelsFullHeight>:


static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b09d      	sub	sp, #116	@ 0x74
 8001074:	af16      	add	r7, sp, #88	@ 0x58
 8001076:	60ba      	str	r2, [r7, #8]
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4603      	mov	r3, r0
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	460b      	mov	r3, r1
 8001080:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e034      	b.n	80010f2 <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e02a      	b.n	80010e4 <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	b29b      	uxth	r3, r3
 8001092:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001094:	fb12 f303 	smulbb	r3, r2, r3
 8001098:	b29a      	uxth	r2, r3
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	4413      	add	r3, r2
 800109e:	b29a      	uxth	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b29c      	uxth	r4, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80010ae:	fb12 f303 	smulbb	r3, r2, r3
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	89bb      	ldrh	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4413      	add	r3, r2
 80010c0:	b29d      	uxth	r5, r3
 80010c2:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 80010c4:	4668      	mov	r0, sp
 80010c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010ca:	2254      	movs	r2, #84	@ 0x54
 80010cc:	4619      	mov	r1, r3
 80010ce:	f003 fee6 	bl	8004e9e <memcpy>
 80010d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010d4:	4632      	mov	r2, r6
 80010d6:	4629      	mov	r1, r5
 80010d8:	4620      	mov	r0, r4
 80010da:	f000 fa42 	bl	8001562 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	3301      	adds	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbd0      	blt.n	800108e <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbc6      	blt.n	8001088 <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001104 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8001104:	b084      	sub	sp, #16
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	4604      	mov	r4, r0
 800110e:	f107 001c 	add.w	r0, r7, #28
 8001112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001116:	4623      	mov	r3, r4
 8001118:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d827      	bhi.n	8001170 <LCD_direction+0x6c>
 8001120:	a201      	add	r2, pc, #4	@ (adr r2, 8001128 <LCD_direction+0x24>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	08001139 	.word	0x08001139
 800112c:	08001147 	.word	0x08001147
 8001130:	08001155 	.word	0x08001155
 8001134:	08001163 	.word	0x08001163
	case ROTATE_0:
		LCD_WR_REG(0x36);
 8001138:	2036      	movs	r0, #54	@ 0x36
 800113a:	f7ff ff3f 	bl	8000fbc <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 800113e:	2048      	movs	r0, #72	@ 0x48
 8001140:	f7ff ff56 	bl	8000ff0 <LCD_WR_DATA>
		break;
 8001144:	e014      	b.n	8001170 <LCD_direction+0x6c>
	case ROTATE_90:
		LCD_WR_REG(0x36);
 8001146:	2036      	movs	r0, #54	@ 0x36
 8001148:	f7ff ff38 	bl	8000fbc <LCD_WR_REG>
		LCD_WR_DATA(0x28);
 800114c:	2028      	movs	r0, #40	@ 0x28
 800114e:	f7ff ff4f 	bl	8000ff0 <LCD_WR_DATA>
		break;
 8001152:	e00d      	b.n	8001170 <LCD_direction+0x6c>
	case ROTATE_180:
		LCD_WR_REG(0x36);
 8001154:	2036      	movs	r0, #54	@ 0x36
 8001156:	f7ff ff31 	bl	8000fbc <LCD_WR_REG>
		LCD_WR_DATA(0x88);
 800115a:	2088      	movs	r0, #136	@ 0x88
 800115c:	f7ff ff48 	bl	8000ff0 <LCD_WR_DATA>
		break;
 8001160:	e006      	b.n	8001170 <LCD_direction+0x6c>
	case ROTATE_270:
		LCD_WR_REG(0x36);
 8001162:	2036      	movs	r0, #54	@ 0x36
 8001164:	f7ff ff2a 	bl	8000fbc <LCD_WR_REG>
		LCD_WR_DATA(0xE8);
 8001168:	20e8      	movs	r0, #232	@ 0xe8
 800116a:	f7ff ff41 	bl	8000ff0 <LCD_WR_DATA>
		break;
 800116e:	bf00      	nop
	}
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800117a:	b004      	add	sp, #16
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <RESET_L>:

static void RESET_L(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2180      	movs	r1, #128	@ 0x80
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <RESET_L+0x14>)
 800118a:	f001 fb1f 	bl	80027cc <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020400 	.word	0x40020400

08001198 <RESET_H>:

static void RESET_H(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <RESET_H+0x14>)
 80011a2:	f001 fb13 	bl	80027cc <HAL_GPIO_WritePin>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40020400 	.word	0x40020400

080011b0 <CS_L>:

static void CS_L(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2140      	movs	r1, #64	@ 0x40
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <CS_L+0x14>)
 80011ba:	f001 fb07 	bl	80027cc <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020400 	.word	0x40020400

080011c8 <DC_L>:

static void DC_L(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011d2:	4802      	ldr	r0, [pc, #8]	@ (80011dc <DC_L+0x14>)
 80011d4:	f001 fafa 	bl	80027cc <HAL_GPIO_WritePin>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020400 	.word	0x40020400

080011e0 <DC_H>:

static void DC_H(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ea:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <DC_H+0x14>)
 80011ec:	f001 faee 	bl	80027cc <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020400 	.word	0x40020400

080011f8 <LED_H>:

static void LED_H(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <blackFond>:

static void blackFond(SPI_HandleTypeDef hspi3){
 8001206:	b084      	sub	sp, #16
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b098      	sub	sp, #96	@ 0x60
 800120c:	af16      	add	r7, sp, #88	@ 0x58
 800120e:	f107 0418 	add.w	r4, r7, #24
 8001212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1);
 8001216:	f240 133f 	movw	r3, #319	@ 0x13f
 800121a:	22ef      	movs	r2, #239	@ 0xef
 800121c:	2100      	movs	r1, #0
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f956 	bl	80014d0 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001224:	2300      	movs	r3, #0
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	e01a      	b.n	8001260 <blackFond+0x5a>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800122a:	2300      	movs	r3, #0
 800122c:	80bb      	strh	r3, [r7, #4]
 800122e:	e011      	b.n	8001254 <blackFond+0x4e>
			ILI9341_WritePixel(x, y, 0x0000, hspi3);
 8001230:	88bd      	ldrh	r5, [r7, #4]
 8001232:	88fc      	ldrh	r4, [r7, #6]
 8001234:	4668      	mov	r0, sp
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2254      	movs	r2, #84	@ 0x54
 800123c:	4619      	mov	r1, r3
 800123e:	f003 fe2e 	bl	8004e9e <memcpy>
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2200      	movs	r2, #0
 8001246:	4629      	mov	r1, r5
 8001248:	4620      	mov	r0, r4
 800124a:	f000 f98a 	bl	8001562 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	3301      	adds	r3, #1
 8001252:	80bb      	strh	r3, [r7, #4]
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	2bef      	cmp	r3, #239	@ 0xef
 8001258:	d9ea      	bls.n	8001230 <blackFond+0x2a>
	for (uint16_t x = 0; x < W_LCD; x++) {
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	3301      	adds	r3, #1
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001266:	d3e0      	bcc.n	800122a <blackFond+0x24>
		}
	}
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001274:	b004      	add	sp, #16
 8001276:	4770      	bx	lr

08001278 <ILI9341_Init>:

// Initialization
void ILI9341_Init()
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b095      	sub	sp, #84	@ 0x54
 800127c:	af14      	add	r7, sp, #80	@ 0x50
	ILI9341_Reset();
 800127e:	f000 f9a2 	bl	80015c6 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8001282:	4c92      	ldr	r4, [pc, #584]	@ (80014cc <ILI9341_Init+0x254>)
 8001284:	4668      	mov	r0, sp
 8001286:	f104 0310 	add.w	r3, r4, #16
 800128a:	2248      	movs	r2, #72	@ 0x48
 800128c:	4619      	mov	r1, r3
 800128e:	f003 fe06 	bl	8004e9e <memcpy>
 8001292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001296:	f000 f9a8 	bl	80015ea <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB);
 800129a:	20cb      	movs	r0, #203	@ 0xcb
 800129c:	f7ff fe8e 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012a0:	2039      	movs	r0, #57	@ 0x39
 80012a2:	f7ff fea5 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012a6:	202c      	movs	r0, #44	@ 0x2c
 80012a8:	f7ff fea2 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fe9f 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012b2:	2034      	movs	r0, #52	@ 0x34
 80012b4:	f7ff fe9c 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012b8:	2002      	movs	r0, #2
 80012ba:	f7ff fe99 	bl	8000ff0 <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF);
 80012be:	20cf      	movs	r0, #207	@ 0xcf
 80012c0:	f7ff fe7c 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fe93 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80012ca:	20c1      	movs	r0, #193	@ 0xc1
 80012cc:	f7ff fe90 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30);
 80012d0:	2030      	movs	r0, #48	@ 0x30
 80012d2:	f7ff fe8d 	bl	8000ff0 <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8);
 80012d6:	20e8      	movs	r0, #232	@ 0xe8
 80012d8:	f7ff fe70 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80012dc:	2085      	movs	r0, #133	@ 0x85
 80012de:	f7ff fe87 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fe84 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x78);
 80012e8:	2078      	movs	r0, #120	@ 0x78
 80012ea:	f7ff fe81 	bl	8000ff0 <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA);
 80012ee:	20ea      	movs	r0, #234	@ 0xea
 80012f0:	f7ff fe64 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fe7b 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fe78 	bl	8000ff0 <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED);
 8001300:	20ed      	movs	r0, #237	@ 0xed
 8001302:	f7ff fe5b 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001306:	2064      	movs	r0, #100	@ 0x64
 8001308:	f7ff fe72 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800130c:	2003      	movs	r0, #3
 800130e:	f7ff fe6f 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8001312:	2012      	movs	r0, #18
 8001314:	f7ff fe6c 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x81);
 8001318:	2081      	movs	r0, #129	@ 0x81
 800131a:	f7ff fe69 	bl	8000ff0 <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7);
 800131e:	20f7      	movs	r0, #247	@ 0xf7
 8001320:	f7ff fe4c 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001324:	2020      	movs	r0, #32
 8001326:	f7ff fe63 	bl	8000ff0 <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0);
 800132a:	20c0      	movs	r0, #192	@ 0xc0
 800132c:	f7ff fe46 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 8001330:	2010      	movs	r0, #16
 8001332:	f7ff fe5d 	bl	8000ff0 <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1);
 8001336:	20c1      	movs	r0, #193	@ 0xc1
 8001338:	f7ff fe40 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x10);
 800133c:	2010      	movs	r0, #16
 800133e:	f7ff fe57 	bl	8000ff0 <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5);
 8001342:	20c5      	movs	r0, #197	@ 0xc5
 8001344:	f7ff fe3a 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x3E);
 8001348:	203e      	movs	r0, #62	@ 0x3e
 800134a:	f7ff fe51 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800134e:	2028      	movs	r0, #40	@ 0x28
 8001350:	f7ff fe4e 	bl	8000ff0 <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7);
 8001354:	20c7      	movs	r0, #199	@ 0xc7
 8001356:	f7ff fe31 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x86);
 800135a:	2086      	movs	r0, #134	@ 0x86
 800135c:	f7ff fe48 	bl	8000ff0 <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36);
 8001360:	2036      	movs	r0, #54	@ 0x36
 8001362:	f7ff fe2b 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x48);
 8001366:	2048      	movs	r0, #72	@ 0x48
 8001368:	f7ff fe42 	bl	8000ff0 <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A);
 800136c:	203a      	movs	r0, #58	@ 0x3a
 800136e:	f7ff fe25 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x55);    //16bit
 8001372:	2055      	movs	r0, #85	@ 0x55
 8001374:	f7ff fe3c 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001378:	20b1      	movs	r0, #177	@ 0xb1
 800137a:	f7ff fe1f 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fe36 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x18);
 8001384:	2018      	movs	r0, #24
 8001386:	f7ff fe33 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x20); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6);
 800138a:	20b6      	movs	r0, #182	@ 0xb6
 800138c:	f7ff fe16 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x08);
 8001390:	2008      	movs	r0, #8
 8001392:	f7ff fe2d 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x82);
 8001396:	2082      	movs	r0, #130	@ 0x82
 8001398:	f7ff fe2a 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x27);
 800139c:	2027      	movs	r0, #39	@ 0x27
 800139e:	f7ff fe27 	bl	8000ff0 <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2);
 80013a2:	20f2      	movs	r0, #242	@ 0xf2
 80013a4:	f7ff fe0a 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fe21 	bl	8000ff0 <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26); //Gamma set
 80013ae:	2026      	movs	r0, #38	@ 0x26
 80013b0:	f7ff fe04 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x01); 	//Gamma Curve (G2.2)
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff fe1b 	bl	8000ff0 <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0);
 80013ba:	20e0      	movs	r0, #224	@ 0xe0
 80013bc:	f7ff fdfe 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80013c0:	200f      	movs	r0, #15
 80013c2:	f7ff fe15 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 80013c6:	2031      	movs	r0, #49	@ 0x31
 80013c8:	f7ff fe12 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013cc:	202b      	movs	r0, #43	@ 0x2b
 80013ce:	f7ff fe0f 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 80013d2:	200c      	movs	r0, #12
 80013d4:	f7ff fe0c 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013d8:	200e      	movs	r0, #14
 80013da:	f7ff fe09 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013de:	2008      	movs	r0, #8
 80013e0:	f7ff fe06 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x4E);
 80013e4:	204e      	movs	r0, #78	@ 0x4e
 80013e6:	f7ff fe03 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xF1);
 80013ea:	20f1      	movs	r0, #241	@ 0xf1
 80013ec:	f7ff fe00 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 80013f0:	2037      	movs	r0, #55	@ 0x37
 80013f2:	f7ff fdfd 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013f6:	2007      	movs	r0, #7
 80013f8:	f7ff fdfa 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013fc:	2010      	movs	r0, #16
 80013fe:	f7ff fdf7 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001402:	2003      	movs	r0, #3
 8001404:	f7ff fdf4 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001408:	200e      	movs	r0, #14
 800140a:	f7ff fdf1 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 800140e:	2009      	movs	r0, #9
 8001410:	f7ff fdee 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fdeb 	bl	8000ff0 <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1);
 800141a:	20e1      	movs	r0, #225	@ 0xe1
 800141c:	f7ff fdce 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fde5 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001426:	200e      	movs	r0, #14
 8001428:	f7ff fde2 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x14);
 800142c:	2014      	movs	r0, #20
 800142e:	f7ff fddf 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001432:	2003      	movs	r0, #3
 8001434:	f7ff fddc 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001438:	2011      	movs	r0, #17
 800143a:	f7ff fdd9 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800143e:	2007      	movs	r0, #7
 8001440:	f7ff fdd6 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001444:	2031      	movs	r0, #49	@ 0x31
 8001446:	f7ff fdd3 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800144a:	20c1      	movs	r0, #193	@ 0xc1
 800144c:	f7ff fdd0 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 8001450:	2048      	movs	r0, #72	@ 0x48
 8001452:	f7ff fdcd 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001456:	2008      	movs	r0, #8
 8001458:	f7ff fdca 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800145c:	200f      	movs	r0, #15
 800145e:	f7ff fdc7 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8001462:	200c      	movs	r0, #12
 8001464:	f7ff fdc4 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001468:	2031      	movs	r0, #49	@ 0x31
 800146a:	f7ff fdc1 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x36);
 800146e:	2036      	movs	r0, #54	@ 0x36
 8001470:	f7ff fdbe 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001474:	200f      	movs	r0, #15
 8001476:	f7ff fdbb 	bl	8000ff0 <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11);
 800147a:	2011      	movs	r0, #17
 800147c:	f7ff fd9e 	bl	8000fbc <LCD_WR_REG>

	HAL_Delay(120);
 8001480:	2078      	movs	r0, #120	@ 0x78
 8001482:	f000 fb79 	bl	8001b78 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29);
 8001486:	2029      	movs	r0, #41	@ 0x29
 8001488:	f7ff fd98 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(0x2C);
 800148c:	202c      	movs	r0, #44	@ 0x2c
 800148e:	f7ff fdaf 	bl	8000ff0 <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 8001492:	4c0e      	ldr	r4, [pc, #56]	@ (80014cc <ILI9341_Init+0x254>)
 8001494:	4668      	mov	r0, sp
 8001496:	f104 030c 	add.w	r3, r4, #12
 800149a:	224c      	movs	r2, #76	@ 0x4c
 800149c:	4619      	mov	r1, r3
 800149e:	f003 fcfe 	bl	8004e9e <memcpy>
 80014a2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80014a6:	2003      	movs	r0, #3
 80014a8:	f7ff fe2c 	bl	8001104 <LCD_direction>

	blackFond(hspi3);
 80014ac:	4c07      	ldr	r4, [pc, #28]	@ (80014cc <ILI9341_Init+0x254>)
 80014ae:	4668      	mov	r0, sp
 80014b0:	f104 0310 	add.w	r3, r4, #16
 80014b4:	2248      	movs	r2, #72	@ 0x48
 80014b6:	4619      	mov	r1, r3
 80014b8:	f003 fcf1 	bl	8004e9e <memcpy>
 80014bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014c0:	f7ff fea1 	bl	8001206 <blackFond>

}
 80014c4:	bf00      	nop
 80014c6:	3704      	adds	r7, #4
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	200000a4 	.word	0x200000a4

080014d0 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4603      	mov	r3, r0
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a);
 80014ee:	202a      	movs	r0, #42	@ 0x2a
 80014f0:	f7ff fd64 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd77 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd72 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8);
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b29b      	uxth	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd6b 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x);
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fd66 	bl	8000ff0 <LCD_WR_DATA>

	LCD_WR_REG(0x2b);
 8001524:	202b      	movs	r0, #43	@ 0x2b
 8001526:	f7ff fd49 	bl	8000fbc <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8);
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd5c 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y);
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd57 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8);
 8001542:	883b      	ldrh	r3, [r7, #0]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fd50 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y);
 8001550:	883b      	ldrh	r3, [r7, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fd4b 	bl	8000ff0 <LCD_WR_DATA>

}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}

08001562 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 8001562:	b082      	sub	sp, #8
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	4603      	mov	r3, r0
 800156e:	80fb      	strh	r3, [r7, #6]
 8001570:	460b      	mov	r3, r1
 8001572:	80bb      	strh	r3, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b29b      	uxth	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y);
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	88b9      	ldrh	r1, [r7, #4]
 800158e:	88f8      	ldrh	r0, [r7, #6]
 8001590:	f7ff ff9e 	bl	80014d0 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c);
 8001594:	202c      	movs	r0, #44	@ 0x2c
 8001596:	f7ff fd11 	bl	8000fbc <LCD_WR_REG>
	DC_H();
 800159a:	f7ff fe21 	bl	80011e0 <DC_H>
	if (HAL_SPI_Transmit_DMA(&hspi3, data, 2) != HAL_OK) {
 800159e:	f107 010c 	add.w	r1, r7, #12
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	2202      	movs	r2, #2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fba1 	bl	8003cf0 <HAL_SPI_Transmit_DMA>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <ILI9341_WritePixel+0x56>
		Error_Handler();
 80015b4:	f7ff fa86 	bl	8000ac4 <Error_Handler>
	}
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015c2:	b002      	add	sp, #8
 80015c4:	4770      	bx	lr

080015c6 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
	RESET_L();
 80015ca:	f7ff fdd9 	bl	8001180 <RESET_L>
	HAL_Delay(100);
 80015ce:	2064      	movs	r0, #100	@ 0x64
 80015d0:	f000 fad2 	bl	8001b78 <HAL_Delay>
	RESET_H();
 80015d4:	f7ff fde0 	bl	8001198 <RESET_H>
	HAL_Delay(100);
 80015d8:	2064      	movs	r0, #100	@ 0x64
 80015da:	f000 facd 	bl	8001b78 <HAL_Delay>
	CS_L();
 80015de:	f7ff fde7 	bl	80011b0 <CS_L>
	LED_H();
 80015e2:	f7ff fe09 	bl	80011f8 <LED_H>
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}

080015ea <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 80015ea:	b084      	sub	sp, #16
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	f107 0c10 	add.w	ip, r7, #16
 80015f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80015fe:	f7ff fde3 	bl	80011c8 <DC_L>
	if (HAL_SPI_Transmit_DMA(&hspi3, &cmd, 1) != HAL_OK) {
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	f107 0010 	add.w	r0, r7, #16
 800160c:	f002 fb70 	bl	8003cf0 <HAL_SPI_Transmit_DMA>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <ILI9341_SoftReset+0x30>
		Error_Handler();
 8001616:	f7ff fa55 	bl	8000ac4 <Error_Handler>
	}
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001624:	b004      	add	sp, #16
 8001626:	4770      	bx	lr

08001628 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, char c, SPI_HandleTypeDef hspi3) {
 8001628:	b082      	sub	sp, #8
 800162a:	b5b0      	push	{r4, r5, r7, lr}
 800162c:	b0a2      	sub	sp, #136	@ 0x88
 800162e:	af1a      	add	r7, sp, #104	@ 0x68
 8001630:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001634:	e884 000c 	stmia.w	r4, {r2, r3}
 8001638:	4603      	mov	r3, r0
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	460b      	mov	r3, r1
 800163e:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) {
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	2b1f      	cmp	r3, #31
 8001644:	d902      	bls.n	800164c <ILI9341_DrawChar+0x24>
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	2b7e      	cmp	r3, #126	@ 0x7e
 800164a:	d901      	bls.n	8001650 <ILI9341_DrawChar+0x28>
	        c = '?'; // Si le caractère n'est pas supporté
 800164c:	233f      	movs	r3, #63	@ 0x3f
 800164e:	717b      	strb	r3, [r7, #5]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 8001650:	797b      	ldrb	r3, [r7, #5]
 8001652:	f1a3 0220 	sub.w	r2, r3, #32
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <ILI9341_DrawChar+0x128>)
 800165e:	4413      	add	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 8001662:	2307      	movs	r3, #7
 8001664:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 8001666:	231e      	movs	r3, #30
 8001668:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e041      	b.n	80016f4 <ILI9341_DrawChar+0xcc>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	e038      	b.n	80016e8 <ILI9341_DrawChar+0xc0>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	fa42 f303 	asr.w	r3, r2, r3
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <ILI9341_DrawChar+0x92>
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0xFFFF, hspi3);
 800168e:	88fc      	ldrh	r4, [r7, #6]
 8001690:	ab03      	add	r3, sp, #12
 8001692:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001696:	2258      	movs	r2, #88	@ 0x58
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fc00 	bl	8004e9e <memcpy>
 800169e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	89bb      	ldrh	r3, [r7, #12]
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	2114      	movs	r1, #20
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fcdc 	bl	8001070 <ILI9341_WritePixelsFullHeight>
 80016b8:	e013      	b.n	80016e2 <ILI9341_DrawChar+0xba>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0x0000, hspi3);
 80016ba:	88fc      	ldrh	r4, [r7, #6]
 80016bc:	ab03      	add	r3, sp, #12
 80016be:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80016c2:	2258      	movs	r2, #88	@ 0x58
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fbea 	bl	8004e9e <memcpy>
 80016ca:	2300      	movs	r3, #0
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	89bb      	ldrh	r3, [r7, #12]
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	2114      	movs	r1, #20
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fcc7 	bl	8001070 <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	ddc3      	ble.n	8001676 <ILI9341_DrawChar+0x4e>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	ddba      	ble.n	8001670 <ILI9341_DrawChar+0x48>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
 80016fe:	e01a      	b.n	8001736 <ILI9341_DrawChar+0x10e>
        ILI9341_WritePixel(x + 5, Y_CHAR + j, 0x0000, hspi3);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	3305      	adds	r3, #5
 8001704:	b29c      	uxth	r4, r3
 8001706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3314      	adds	r3, #20
 800170e:	b29d      	uxth	r5, r3
 8001710:	4668      	mov	r0, sp
 8001712:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001716:	2254      	movs	r2, #84	@ 0x54
 8001718:	4619      	mov	r1, r3
 800171a:	f003 fbc0 	bl	8004e9e <memcpy>
 800171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001720:	2200      	movs	r2, #0
 8001722:	4629      	mov	r1, r5
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff ff1c 	bl	8001562 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 800172a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	75fb      	strb	r3, [r7, #23]
 8001736:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800173a:	2b06      	cmp	r3, #6
 800173c:	dde0      	ble.n	8001700 <ILI9341_DrawChar+0xd8>
    }
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800174a:	b002      	add	sp, #8
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	08005ca4 	.word	0x08005ca4

08001754 <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str) {
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b099      	sub	sp, #100	@ 0x64
 8001758:	af14      	add	r7, sp, #80	@ 0x50
 800175a:	6078      	str	r0, [r7, #4]
	int cmpt = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
	uint16_t x = MARGE_NUMBERS_X;
 8001760:	2305      	movs	r3, #5
 8001762:	817b      	strh	r3, [r7, #10]
	if (strlen(str) == 5)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7fe fd3b 	bl	80001e0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	2b05      	cmp	r3, #5
 800176e:	d127      	bne.n	80017c0 <ILI9341_InitDrawString+0x6c>
	{
		while (*str)
 8001770:	e021      	b.n	80017b6 <ILI9341_InitDrawString+0x62>
		{
			if (cmpt != 0){
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <ILI9341_InitDrawString+0x34>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	0192      	lsls	r2, r2, #6
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b29b      	uxth	r3, r3
 8001784:	3305      	adds	r3, #5
 8001786:	817b      	strh	r3, [r7, #10]
			}
			ILI9341_DrawChar(x, *str, hspi3);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	781e      	ldrb	r6, [r3, #0]
 800178c:	4c10      	ldr	r4, [pc, #64]	@ (80017d0 <ILI9341_InitDrawString+0x7c>)
 800178e:	897d      	ldrh	r5, [r7, #10]
 8001790:	4668      	mov	r0, sp
 8001792:	f104 0308 	add.w	r3, r4, #8
 8001796:	2250      	movs	r2, #80	@ 0x50
 8001798:	4619      	mov	r1, r3
 800179a:	f003 fb80 	bl	8004e9e <memcpy>
 800179e:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017a2:	4631      	mov	r1, r6
 80017a4:	4628      	mov	r0, r5
 80017a6:	f7ff ff3f 	bl	8001628 <ILI9341_DrawChar>
			str++;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3301      	adds	r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
		while (*str)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1d9      	bne.n	8001772 <ILI9341_InitDrawString+0x1e>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 80017be:	e002      	b.n	80017c6 <ILI9341_InitDrawString+0x72>
		printf("Erreur le string est composé de plus de 5 éléments");
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <ILI9341_InitDrawString+0x80>)
 80017c2:	f003 f987 	bl	8004ad4 <iprintf>
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200000a4 	.word	0x200000a4
 80017d4:	08005c3c 	.word	0x08005c3c

080017d8 <ILI9341_ChangeTime>:
/*
 * Methode de changement de temps
 * Il y a deux parties, une pour les heures et l'autre pour les minutes.
 */
void ILI9341_ChangeTime(RTC_TimeTypeDef Time)
{
 80017d8:	b084      	sub	sp, #16
 80017da:	b5b0      	push	{r4, r5, r7, lr}
 80017dc:	b096      	sub	sp, #88	@ 0x58
 80017de:	af14      	add	r7, sp, #80	@ 0x50
 80017e0:	f107 0418 	add.w	r4, r7, #24
 80017e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Time.Minutes == 00)
 80017e8:	7e7b      	ldrb	r3, [r7, #25]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d15f      	bne.n	80018ae <ILI9341_ChangeTime+0xd6>
	{
		uint8_t diz = Time.Hours / 10; // Get the dizaines
 80017ee:	7e3b      	ldrb	r3, [r7, #24]
 80017f0:	4a54      	ldr	r2, [pc, #336]	@ (8001944 <ILI9341_ChangeTime+0x16c>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	717b      	strb	r3, [r7, #5]
		uint8_t unite = Time.Hours % 10; // get unités
 80017fa:	7e3a      	ldrb	r2, [r7, #24]
 80017fc:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <ILI9341_ChangeTime+0x16c>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	08d9      	lsrs	r1, r3, #3
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	713b      	strb	r3, [r7, #4]
		if (unite != 0)
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00f      	beq.n	8001836 <ILI9341_ChangeTime+0x5e>
		{
			change(X_UNIT_HOUR, unite, hspi3);
 8001816:	4c4c      	ldr	r4, [pc, #304]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 8001818:	793d      	ldrb	r5, [r7, #4]
 800181a:	4668      	mov	r0, sp
 800181c:	f104 0308 	add.w	r3, r4, #8
 8001820:	2250      	movs	r2, #80	@ 0x50
 8001822:	4619      	mov	r1, r3
 8001824:	f003 fb3b 	bl	8004e9e <memcpy>
 8001828:	e894 000c 	ldmia.w	r4, {r2, r3}
 800182c:	4629      	mov	r1, r5
 800182e:	2044      	movs	r0, #68	@ 0x44
 8001830:	f7ff fbf8 	bl	8001024 <change>
 8001834:	e01d      	b.n	8001872 <ILI9341_ChangeTime+0x9a>
		}
		else
		{
			change(X_DIX_HOUR, diz, hspi3);
 8001836:	4c44      	ldr	r4, [pc, #272]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 8001838:	797d      	ldrb	r5, [r7, #5]
 800183a:	4668      	mov	r0, sp
 800183c:	f104 0308 	add.w	r3, r4, #8
 8001840:	2250      	movs	r2, #80	@ 0x50
 8001842:	4619      	mov	r1, r3
 8001844:	f003 fb2b 	bl	8004e9e <memcpy>
 8001848:	e894 000c 	ldmia.w	r4, {r2, r3}
 800184c:	4629      	mov	r1, r5
 800184e:	2005      	movs	r0, #5
 8001850:	f7ff fbe8 	bl	8001024 <change>
			change(X_UNIT_HOUR, unite, hspi3);
 8001854:	4c3c      	ldr	r4, [pc, #240]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 8001856:	793d      	ldrb	r5, [r7, #4]
 8001858:	4668      	mov	r0, sp
 800185a:	f104 0308 	add.w	r3, r4, #8
 800185e:	2250      	movs	r2, #80	@ 0x50
 8001860:	4619      	mov	r1, r3
 8001862:	f003 fb1c 	bl	8004e9e <memcpy>
 8001866:	e894 000c 	ldmia.w	r4, {r2, r3}
 800186a:	4629      	mov	r1, r5
 800186c:	2044      	movs	r0, #68	@ 0x44
 800186e:	f7ff fbd9 	bl	8001024 <change>
		}
		// Il faut modifier l'unité et la dizaine des minutes
		change(X_DIX_MIN, 0, hspi3);
 8001872:	4c35      	ldr	r4, [pc, #212]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 8001874:	4668      	mov	r0, sp
 8001876:	f104 0308 	add.w	r3, r4, #8
 800187a:	2250      	movs	r2, #80	@ 0x50
 800187c:	4619      	mov	r1, r3
 800187e:	f003 fb0e 	bl	8004e9e <memcpy>
 8001882:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001886:	2100      	movs	r1, #0
 8001888:	20c2      	movs	r0, #194	@ 0xc2
 800188a:	f7ff fbcb 	bl	8001024 <change>
		change(X_UNIT_MIN, 0, hspi3);
 800188e:	4c2e      	ldr	r4, [pc, #184]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 8001890:	4668      	mov	r0, sp
 8001892:	f104 0308 	add.w	r3, r4, #8
 8001896:	2250      	movs	r2, #80	@ 0x50
 8001898:	4619      	mov	r1, r3
 800189a:	f003 fb00 	bl	8004e9e <memcpy>
 800189e:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018a2:	2100      	movs	r1, #0
 80018a4:	f240 1001 	movw	r0, #257	@ 0x101
 80018a8:	f7ff fbbc 	bl	8001024 <change>
			change(X_DIX_MIN, diz, hspi3);
			change(X_UNIT_MIN, unite, hspi3);
		}

	}
}
 80018ac:	e043      	b.n	8001936 <ILI9341_ChangeTime+0x15e>
		uint8_t diz = Time.Minutes / 10; // Get the dizaines
 80018ae:	7e7b      	ldrb	r3, [r7, #25]
 80018b0:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <ILI9341_ChangeTime+0x16c>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	71fb      	strb	r3, [r7, #7]
		uint8_t unite = Time.Minutes % 10; // get unités
 80018ba:	7e7a      	ldrb	r2, [r7, #25]
 80018bc:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <ILI9341_ChangeTime+0x16c>)
 80018be:	fba3 1302 	umull	r1, r3, r3, r2
 80018c2:	08d9      	lsrs	r1, r3, #3
 80018c4:	460b      	mov	r3, r1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	71bb      	strb	r3, [r7, #6]
		if (unite != 0)
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <ILI9341_ChangeTime+0x120>
			change(X_UNIT_MIN, unite, hspi3);
 80018d6:	4c1c      	ldr	r4, [pc, #112]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 80018d8:	79bd      	ldrb	r5, [r7, #6]
 80018da:	4668      	mov	r0, sp
 80018dc:	f104 0308 	add.w	r3, r4, #8
 80018e0:	2250      	movs	r2, #80	@ 0x50
 80018e2:	4619      	mov	r1, r3
 80018e4:	f003 fadb 	bl	8004e9e <memcpy>
 80018e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018ec:	4629      	mov	r1, r5
 80018ee:	f240 1001 	movw	r0, #257	@ 0x101
 80018f2:	f7ff fb97 	bl	8001024 <change>
}
 80018f6:	e01e      	b.n	8001936 <ILI9341_ChangeTime+0x15e>
			change(X_DIX_MIN, diz, hspi3);
 80018f8:	4c13      	ldr	r4, [pc, #76]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 80018fa:	79fd      	ldrb	r5, [r7, #7]
 80018fc:	4668      	mov	r0, sp
 80018fe:	f104 0308 	add.w	r3, r4, #8
 8001902:	2250      	movs	r2, #80	@ 0x50
 8001904:	4619      	mov	r1, r3
 8001906:	f003 faca 	bl	8004e9e <memcpy>
 800190a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800190e:	4629      	mov	r1, r5
 8001910:	20c2      	movs	r0, #194	@ 0xc2
 8001912:	f7ff fb87 	bl	8001024 <change>
			change(X_UNIT_MIN, unite, hspi3);
 8001916:	4c0c      	ldr	r4, [pc, #48]	@ (8001948 <ILI9341_ChangeTime+0x170>)
 8001918:	79bd      	ldrb	r5, [r7, #6]
 800191a:	4668      	mov	r0, sp
 800191c:	f104 0308 	add.w	r3, r4, #8
 8001920:	2250      	movs	r2, #80	@ 0x50
 8001922:	4619      	mov	r1, r3
 8001924:	f003 fabb 	bl	8004e9e <memcpy>
 8001928:	e894 000c 	ldmia.w	r4, {r2, r3}
 800192c:	4629      	mov	r1, r5
 800192e:	f240 1001 	movw	r0, #257	@ 0x101
 8001932:	f7ff fb77 	bl	8001024 <change>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001940:	b004      	add	sp, #16
 8001942:	4770      	bx	lr
 8001944:	cccccccd 	.word	0xcccccccd
 8001948:	200000a4 	.word	0x200000a4

0800194c <__io_putchar>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001954:	1d39      	adds	r1, r7, #4
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	2201      	movs	r2, #1
 800195c:	4807      	ldr	r0, [pc, #28]	@ (800197c <__io_putchar+0x30>)
 800195e:	f002 fc3b 	bl	80041d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001962:	1d39      	adds	r1, r7, #4
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	2201      	movs	r2, #1
 800196a:	4805      	ldr	r0, [pc, #20]	@ (8001980 <__io_putchar+0x34>)
 800196c:	f002 fc34 	bl	80041d8 <HAL_UART_Transmit>
	return ch;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000015c 	.word	0x2000015c
 8001980:	200001a4 	.word	0x200001a4

08001984 <TIMER_getTime>:

RTC_TimeTypeDef TIMER_getTime()
{
 8001984:	b4b0      	push	{r4, r5, r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	return Time;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <TIMER_getTime+0x24>)
 8001990:	461c      	mov	r4, r3
 8001992:	4615      	mov	r5, r2
 8001994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	6023      	str	r3, [r4, #0]
}
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bcb0      	pop	{r4, r5, r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200001fc 	.word	0x200001fc

080019ac <TIMER_init>:

void TIMER_init(char timeChar[])
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80019b4:	2200      	movs	r2, #0
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <TIMER_init+0x2c>)
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <TIMER_init+0x30>)
 80019ba:	f001 fddc 	bl	8003576 <HAL_RTC_GetTime>
	sprintf(timeChar, "%02d:%02d", (char)Time.Hours, (char)Time.Minutes);
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <TIMER_init+0x2c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <TIMER_init+0x2c>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	4905      	ldr	r1, [pc, #20]	@ (80019e0 <TIMER_init+0x34>)
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f003 f8f2 	bl	8004bb4 <siprintf>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200001fc 	.word	0x200001fc
 80019dc:	20000084 	.word	0x20000084
 80019e0:	08005c74 	.word	0x08005c74

080019e4 <TIMER_updateTime>:

bool TIMER_updateTime(uint8_t *lastMinutes)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	6078      	str	r0, [r7, #4]
	printf("Salut toi\n");
 80019ec:	480f      	ldr	r0, [pc, #60]	@ (8001a2c <TIMER_updateTime+0x48>)
 80019ee:	f003 f8d9 	bl	8004ba4 <puts>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80019f2:	2200      	movs	r2, #0
 80019f4:	490e      	ldr	r1, [pc, #56]	@ (8001a30 <TIMER_updateTime+0x4c>)
 80019f6:	480f      	ldr	r0, [pc, #60]	@ (8001a34 <TIMER_updateTime+0x50>)
 80019f8:	f001 fdbd 	bl	8003576 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80019fc:	2200      	movs	r2, #0
 80019fe:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <TIMER_updateTime+0x54>)
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <TIMER_updateTime+0x50>)
 8001a02:	f001 fe9a 	bl	800373a <HAL_RTC_GetDate>
	if (lastMinutes != &Time.Minutes)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <TIMER_updateTime+0x58>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <TIMER_updateTime+0x3e>
	{
		ILI9341_ChangeTime(Time);
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <TIMER_updateTime+0x4c>)
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a16:	f7ff fedf 	bl	80017d8 <ILI9341_ChangeTime>
		lastMinutes = &Time.Minutes;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <TIMER_updateTime+0x58>)
 8001a1c:	607b      	str	r3, [r7, #4]
		return true;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <TIMER_updateTime+0x40>
	}
	else {
		return false;
 8001a22:	2300      	movs	r3, #0
	}
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08005c80 	.word	0x08005c80
 8001a30:	200001fc 	.word	0x200001fc
 8001a34:	20000084 	.word	0x20000084
 8001a38:	200001f8 	.word	0x200001f8
 8001a3c:	200001fd 	.word	0x200001fd

08001a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a44:	f7ff fa92 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f003 f9ef 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7fe fdf5 	bl	8000660 <main>
  bx  lr    
 8001a76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a84:	08005ed0 	.word	0x08005ed0
  ldr r2, =_sbss
 8001a88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a8c:	20000360 	.word	0x20000360

08001a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <HAL_Init+0x40>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_Init+0x40>)
 8001aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_Init+0x40>)
 8001ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 f94f 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff f802 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f967 	bl	8001dca <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 f92f 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000210 	.word	0x20000210

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000210 	.word	0x20000210

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4907      	ldr	r1, [pc, #28]	@ (8001c5c <__NVIC_EnableIRQ+0x38>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	@ (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f1c3 0307 	rsb	r3, r3, #7
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf28      	it	cs
 8001cd2:	2304      	movcs	r3, #4
 8001cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d902      	bls.n	8001ce4 <NVIC_EncodePriority+0x30>
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3b03      	subs	r3, #3
 8001ce2:	e000      	b.n	8001ce6 <NVIC_EncodePriority+0x32>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	4313      	orrs	r3, r2
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	@ 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff8e 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff29 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff3e 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff8e 	bl	8001cb4 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5d 	bl	8001c60 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff31 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff feb6 	bl	8001b60 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e099      	b.n	8001f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e20:	e00f      	b.n	8001e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e22:	f7ff fe9d 	bl	8001b60 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d908      	bls.n	8001e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e078      	b.n	8001f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e8      	bne.n	8001e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4b38      	ldr	r3, [pc, #224]	@ (8001f3c <HAL_DMA_Init+0x158>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d117      	bne.n	8001f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fa6f 	bl	80023cc <DMA_CheckFifoParam>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2240      	movs	r2, #64	@ 0x40
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f02:	2301      	movs	r3, #1
 8001f04:	e016      	b.n	8001f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fa26 	bl	8002360 <DMA_CalcBaseAndBitshift>
 8001f14:	4603      	mov	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1c:	223f      	movs	r2, #63	@ 0x3f
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	f010803f 	.word	0xf010803f

08001f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Start_IT+0x26>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e040      	b.n	8001fe8 <HAL_DMA_Start_IT+0xa8>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d12f      	bne.n	8001fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f9b8 	bl	8002304 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	223f      	movs	r2, #63	@ 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0216 	orr.w	r2, r2, #22
 8001fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0208 	orr.w	r2, r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e005      	b.n	8001fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ffc:	4b8e      	ldr	r3, [pc, #568]	@ (8002238 <HAL_DMA_IRQHandler+0x248>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a8e      	ldr	r2, [pc, #568]	@ (800223c <HAL_DMA_IRQHandler+0x24c>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	2208      	movs	r2, #8
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01a      	beq.n	800205c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0204 	bic.w	r2, r2, #4
 8002042:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	2208      	movs	r2, #8
 800204a:	409a      	lsls	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	2201      	movs	r2, #1
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d012      	beq.n	8002092 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	2201      	movs	r2, #1
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002096:	2204      	movs	r2, #4
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2204      	movs	r2, #4
 80020b6:	409a      	lsls	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	f043 0204 	orr.w	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	2210      	movs	r2, #16
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d043      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d03c      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	2210      	movs	r2, #16
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d024      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e01f      	b.n	8002160 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e016      	b.n	8002160 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0208 	bic.w	r2, r2, #8
 800214e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2220      	movs	r2, #32
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 808f 	beq.w	8002290 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8087 	beq.w	8002290 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	2220      	movs	r2, #32
 8002188:	409a      	lsls	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b05      	cmp	r3, #5
 8002198:	d136      	bne.n	8002208 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0216 	bic.w	r2, r2, #22
 80021a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_DMA_IRQHandler+0x1da>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0208 	bic.w	r2, r2, #8
 80021d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021de:	223f      	movs	r2, #63	@ 0x3f
 80021e0:	409a      	lsls	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d07e      	beq.n	80022fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
        }
        return;
 8002206:	e079      	b.n	80022fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01d      	beq.n	8002252 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	2b00      	cmp	r3, #0
 800222a:	d031      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
 8002234:	e02c      	b.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000
 800223c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d023      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e01e      	b.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10f      	bne.n	8002280 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0210 	bic.w	r2, r2, #16
 800226e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	2b00      	cmp	r3, #0
 8002296:	d032      	beq.n	80022fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2205      	movs	r2, #5
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d307      	bcc.n	80022d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <HAL_DMA_IRQHandler+0x2cc>
 80022d6:	e000      	b.n	80022da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	4798      	blx	r3
 80022fa:	e000      	b.n	80022fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80022fc:	bf00      	nop
    }
  }
}
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002320:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b40      	cmp	r3, #64	@ 0x40
 8002330:	d108      	bne.n	8002344 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002342:	e007      	b.n	8002354 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3b10      	subs	r3, #16
 8002370:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <DMA_CalcBaseAndBitshift+0x68>)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d909      	bls.n	80023a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	1d1a      	adds	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	@ 0x58
 80023a0:	e007      	b.n	80023b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	aaaaaaab 	.word	0xaaaaaaab
 80023c8:	08005e84 	.word	0x08005e84

080023cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11f      	bne.n	8002426 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d856      	bhi.n	800249a <DMA_CheckFifoParam+0xce>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <DMA_CheckFifoParam+0x28>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002417 	.word	0x08002417
 80023fc:	08002405 	.word	0x08002405
 8002400:	0800249b 	.word	0x0800249b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d046      	beq.n	800249e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e043      	b.n	800249e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800241e:	d140      	bne.n	80024a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e03d      	b.n	80024a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800242e:	d121      	bne.n	8002474 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d837      	bhi.n	80024a6 <DMA_CheckFifoParam+0xda>
 8002436:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <DMA_CheckFifoParam+0x70>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	0800244d 	.word	0x0800244d
 8002440:	08002453 	.word	0x08002453
 8002444:	0800244d 	.word	0x0800244d
 8002448:	08002465 	.word	0x08002465
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e030      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d025      	beq.n	80024aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002462:	e022      	b.n	80024aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800246c:	d11f      	bne.n	80024ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002472:	e01c      	b.n	80024ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d903      	bls.n	8002482 <DMA_CheckFifoParam+0xb6>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d003      	beq.n	8002488 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002480:	e018      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      break;
 8002486:	e015      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e00b      	b.n	80024b2 <DMA_CheckFifoParam+0xe6>
      break;
 800249a:	bf00      	nop
 800249c:	e00a      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e008      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e006      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
 80024a8:	e004      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
    }
  } 
  
  return status; 
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	@ 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e159      	b.n	8002794 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8148 	bne.w	800278e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a2 	beq.w	800278e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b57      	ldr	r3, [pc, #348]	@ (80027ac <HAL_GPIO_Init+0x2e8>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a56      	ldr	r2, [pc, #344]	@ (80027ac <HAL_GPIO_Init+0x2e8>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b54      	ldr	r3, [pc, #336]	@ (80027ac <HAL_GPIO_Init+0x2e8>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_GPIO_Init+0x2ec>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a49      	ldr	r2, [pc, #292]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x202>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a48      	ldr	r2, [pc, #288]	@ (80027b8 <HAL_GPIO_Init+0x2f4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x1fe>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a47      	ldr	r2, [pc, #284]	@ (80027bc <HAL_GPIO_Init+0x2f8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x1fa>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a46      	ldr	r2, [pc, #280]	@ (80027c0 <HAL_GPIO_Init+0x2fc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x1f6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a45      	ldr	r2, [pc, #276]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x1f2>
 80026b2:	2304      	movs	r3, #4
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x204>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x204>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x204>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x204>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x204>
 80026c6:	2300      	movs	r3, #0
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	@ (80027b0 <HAL_GPIO_Init+0x2ec>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b38      	ldr	r3, [pc, #224]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a2f      	ldr	r2, [pc, #188]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a24      	ldr	r2, [pc, #144]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273a:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275e:	4a1a      	ldr	r2, [pc, #104]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002788:	4a0f      	ldr	r2, [pc, #60]	@ (80027c8 <HAL_GPIO_Init+0x304>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	f67f aea2 	bls.w	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3724      	adds	r7, #36	@ 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800280a:	4b08      	ldr	r3, [pc, #32]	@ (800282c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002816:	4a05      	ldr	r2, [pc, #20]	@ (800282c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fef6 	bl	8000610 <HAL_GPIO_EXTI_Callback>
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e267      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d075      	beq.n	800293a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00c      	beq.n	8002874 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285a:	4b85      	ldr	r3, [pc, #532]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002862:	2b08      	cmp	r3, #8
 8002864:	d112      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002872:	d10b      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	4b7e      	ldr	r3, [pc, #504]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05b      	beq.n	8002938 <HAL_RCC_OscConfig+0x108>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d157      	bne.n	8002938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e242      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_OscConfig+0x74>
 8002896:	4b76      	ldr	r3, [pc, #472]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a75      	ldr	r2, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x98>
 80028ae:	4b70      	ldr	r3, [pc, #448]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6c      	ldr	r2, [pc, #432]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028c8:	4b69      	ldr	r3, [pc, #420]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a68      	ldr	r2, [pc, #416]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b66      	ldr	r3, [pc, #408]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff f93a 	bl	8001b60 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff f936 	bl	8001b60 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e207      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xc0>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7ff f926 	bl	8001b60 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7ff f922 	bl	8001b60 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1f3      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	4b51      	ldr	r3, [pc, #324]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0xe8>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d063      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11c      	bne.n	8002998 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b44      	ldr	r3, [pc, #272]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x152>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e1c7      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4937      	ldr	r1, [pc, #220]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	e03a      	b.n	8002a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <HAL_RCC_OscConfig+0x244>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7ff f8db 	bl	8001b60 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ae:	f7ff f8d7 	bl	8001b60 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1a8      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4925      	ldr	r1, [pc, #148]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e2:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_RCC_OscConfig+0x244>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f8ba 	bl	8001b60 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f0:	f7ff f8b6 	bl	8001b60 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e187      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d036      	beq.n	8002a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_RCC_OscConfig+0x248>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7ff f89a 	bl	8001b60 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7ff f896 	bl	8001b60 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e167      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x200>
 8002a4e:	e01b      	b.n	8002a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a50:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_OscConfig+0x248>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7ff f883 	bl	8001b60 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	e00e      	b.n	8002a7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7ff f87f 	bl	8001b60 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d907      	bls.n	8002a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e150      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
 8002a78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b88      	ldr	r3, [pc, #544]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ea      	bne.n	8002a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8097 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b77      	ldr	r3, [pc, #476]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b74      	ldr	r3, [pc, #464]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a73      	ldr	r2, [pc, #460]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7ff f83f 	bl	8001b60 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff f83b 	bl	8001b60 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e10c      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2ea>
 8002b0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	4a63      	ldr	r2, [pc, #396]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b18:	e01c      	b.n	8002b54 <HAL_RCC_OscConfig+0x324>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x30c>
 8002b22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0x324>
 8002b3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a57      	ldr	r2, [pc, #348]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	4b55      	ldr	r3, [pc, #340]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7ff f800 	bl	8001b60 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fffc 	bl	8001b60 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0cb      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ee      	beq.n	8002b64 <HAL_RCC_OscConfig+0x334>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7fe ffea 	bl	8001b60 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe ffe6 	bl	8001b60 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0b5      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ee      	bne.n	8002b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a38      	ldr	r2, [pc, #224]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a1 	beq.w	8002d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bce:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d05c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d141      	bne.n	8002c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_OscConfig+0x478>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe ffba 	bl	8001b60 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe ffb6 	bl	8001b60 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e087      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	491b      	ldr	r1, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x478>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe ff8f 	bl	8001b60 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe ff8b 	bl	8001b60 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e05c      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x416>
 8002c64:	e054      	b.n	8002d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_RCC_OscConfig+0x478>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe ff78 	bl	8001b60 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe ff74 	bl	8001b60 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e045      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x444>
 8002c92:	e03d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e038      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_RCC_OscConfig+0x4ec>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d028      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d121      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d11a      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d111      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0cc      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b68      	ldr	r3, [pc, #416]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d90c      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b65      	ldr	r3, [pc, #404]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b63      	ldr	r3, [pc, #396]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a52      	ldr	r2, [pc, #328]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d044      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e067      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4934      	ldr	r1, [pc, #208]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e10:	f7fe fea6 	bl	8001b60 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fe fea2 	bl	8001b60 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e04f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d20c      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fe06 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023c00 	.word	0x40023c00
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08005c8c 	.word	0x08005c8c
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef0:	b094      	sub	sp, #80	@ 0x50
 8002ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f04:	4b79      	ldr	r3, [pc, #484]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d00d      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x40>
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	f200 80e1 	bhi.w	80030d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x34>
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f1e:	e0db      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b73      	ldr	r3, [pc, #460]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f24:	e0db      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f26:	4b73      	ldr	r3, [pc, #460]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f2a:	e0d8      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f36:	4b6d      	ldr	r3, [pc, #436]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d063      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	4b6a      	ldr	r3, [pc, #424]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	2200      	movs	r2, #0
 8002f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f56:	2300      	movs	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f70:	0150      	lsls	r0, r2, #5
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4621      	mov	r1, r4
 8002f78:	1a51      	subs	r1, r2, r1
 8002f7a:	6139      	str	r1, [r7, #16]
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f90:	4659      	mov	r1, fp
 8002f92:	018b      	lsls	r3, r1, #6
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	018a      	lsls	r2, r1, #6
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fbe:	4690      	mov	r8, r2
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	eb18 0303 	adds.w	r3, r8, r3
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	462b      	mov	r3, r5
 8002fcc:	eb49 0303 	adc.w	r3, r9, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	024b      	lsls	r3, r1, #9
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe8:	4621      	mov	r1, r4
 8002fea:	024a      	lsls	r2, r1, #9
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ffc:	f7fd f948 	bl	8000290 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003008:	e058      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b38      	ldr	r3, [pc, #224]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	4618      	mov	r0, r3
 8003014:	4611      	mov	r1, r2
 8003016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003024:	4642      	mov	r2, r8
 8003026:	464b      	mov	r3, r9
 8003028:	f04f 0000 	mov.w	r0, #0
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	0159      	lsls	r1, r3, #5
 8003032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003036:	0150      	lsls	r0, r2, #5
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4641      	mov	r1, r8
 800303e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb63 0b01 	sbc.w	fp, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800305c:	ebb2 040a 	subs.w	r4, r2, sl
 8003060:	eb63 050b 	sbc.w	r5, r3, fp
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00eb      	lsls	r3, r5, #3
 800306e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003072:	00e2      	lsls	r2, r4, #3
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4643      	mov	r3, r8
 800307a:	18e3      	adds	r3, r4, r3
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	464b      	mov	r3, r9
 8003080:	eb45 0303 	adc.w	r3, r5, r3
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003092:	4629      	mov	r1, r5
 8003094:	028b      	lsls	r3, r1, #10
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800309c:	4621      	mov	r1, r4
 800309e:	028a      	lsls	r2, r1, #10
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a6:	2200      	movs	r2, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	61fa      	str	r2, [r7, #28]
 80030ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b0:	f7fd f8ee 	bl	8000290 <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4613      	mov	r3, r2
 80030ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3750      	adds	r7, #80	@ 0x50
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	@ (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08005c9c 	.word	0x08005c9c

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffdc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0b5b      	lsrs	r3, r3, #13
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	08005c9c 	.word	0x08005c9c

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003184:	2b00      	cmp	r3, #0
 8003186:	d038      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003188:	4b68      	ldr	r3, [pc, #416]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800318e:	f7fe fce7 	bl	8001b60 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003196:	f7fe fce3 	bl	8001b60 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0bd      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a8:	4b61      	ldr	r3, [pc, #388]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	495a      	ldr	r1, [pc, #360]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ce:	4b57      	ldr	r3, [pc, #348]	@ (800332c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fcc4 	bl	8001b60 <HAL_GetTick>
 80031d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031dc:	f7fe fcc0 	bl	8001b60 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e09a      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ee:	4b50      	ldr	r3, [pc, #320]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8083 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	4b48      	ldr	r3, [pc, #288]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	4a47      	ldr	r2, [pc, #284]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	@ 0x40
 8003218:	4b45      	ldr	r3, [pc, #276]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003224:	4b43      	ldr	r3, [pc, #268]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a42      	ldr	r2, [pc, #264]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003230:	f7fe fc96 	bl	8001b60 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fe fc92 	bl	8001b60 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e06c      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800324a:	4b3a      	ldr	r3, [pc, #232]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003256:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02f      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d028      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003274:	4b2e      	ldr	r3, [pc, #184]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800327e:	4b2e      	ldr	r3, [pc, #184]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003284:	4b2c      	ldr	r3, [pc, #176]	@ (8003338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800328a:	4a29      	ldr	r2, [pc, #164]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003290:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d114      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fc60 	bl	8001b60 <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	e00a      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe fc5c 	bl	8001b60 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e034      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ee      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d2:	d10d      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80032d4:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80032e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e8:	4911      	ldr	r1, [pc, #68]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	e005      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032fa:	6093      	str	r3, [r2, #8]
 80032fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	4909      	ldr	r1, [pc, #36]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7d1a      	ldrb	r2, [r3, #20]
 800331e:	4b07      	ldr	r3, [pc, #28]	@ (800333c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003320:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	42470068 	.word	0x42470068
 8003330:	40023800 	.word	0x40023800
 8003334:	40007000 	.word	0x40007000
 8003338:	42470e40 	.word	0x42470e40
 800333c:	424711e0 	.word	0x424711e0

08003340 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e073      	b.n	800343a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7f5b      	ldrb	r3, [r3, #29]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fbdc 	bl	8000b20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b10      	cmp	r3, #16
 800337a:	d055      	beq.n	8003428 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	22ca      	movs	r2, #202	@ 0xca
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2253      	movs	r2, #83	@ 0x53
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa49 	bl	8003824 <RTC_EnterInitMode>
 8003392:	4603      	mov	r3, r0
 8003394:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12c      	bne.n	80033f6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80033aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	041a      	lsls	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa50 	bl	8003892 <RTC_ExitInitMode>
 80033f2:	4603      	mov	r3, r0
 80033f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d110      	bne.n	800341e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	22ff      	movs	r2, #255	@ 0xff
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24
 8003426:	e001      	b.n	800342c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003442:	b590      	push	{r4, r7, lr}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	7f1b      	ldrb	r3, [r3, #28]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_RTC_SetTime+0x1c>
 800345a:	2302      	movs	r3, #2
 800345c:	e087      	b.n	800356e <HAL_RTC_SetTime+0x12c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2202      	movs	r2, #2
 8003468:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d126      	bne.n	80034be <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fa27 	bl	80038dc <RTC_ByteToBcd2>
 800348e:	4603      	mov	r3, r0
 8003490:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	785b      	ldrb	r3, [r3, #1]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa20 	bl	80038dc <RTC_ByteToBcd2>
 800349c:	4603      	mov	r3, r0
 800349e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034a0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	789b      	ldrb	r3, [r3, #2]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fa18 	bl	80038dc <RTC_ByteToBcd2>
 80034ac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e018      	b.n	80034f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034de:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80034e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	22ca      	movs	r2, #202	@ 0xca
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2253      	movs	r2, #83	@ 0x53
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f98f 	bl	8003824 <RTC_EnterInitMode>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d120      	bne.n	8003552 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800351a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800351e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800352e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f9a2 	bl	8003892 <RTC_ExitInitMode>
 800354e:	4603      	mov	r3, r0
 8003550:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	22ff      	movs	r2, #255	@ 0xff
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]

  return status;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
}
 800356e:	4618      	mov	r0, r3
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}

08003576 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80035a8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80035ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	0d9b      	lsrs	r3, r3, #22
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11a      	bne.n	8003628 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f98e 	bl	8003918 <RTC_Bcd2ToByte>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f985 	bl	8003918 <RTC_Bcd2ToByte>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	789b      	ldrb	r3, [r3, #2]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f97c 	bl	8003918 <RTC_Bcd2ToByte>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003632:	b590      	push	{r4, r7, lr}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	7f1b      	ldrb	r3, [r3, #28]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_RTC_SetDate+0x1c>
 800364a:	2302      	movs	r3, #2
 800364c:	e071      	b.n	8003732 <HAL_RTC_SetDate+0x100>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2202      	movs	r2, #2
 8003658:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <HAL_RTC_SetDate+0x4c>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	b2db      	uxtb	r3, r3
 8003676:	330a      	adds	r3, #10
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11c      	bne.n	80036be <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	78db      	ldrb	r3, [r3, #3]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f927 	bl	80038dc <RTC_ByteToBcd2>
 800368e:	4603      	mov	r3, r0
 8003690:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f920 	bl	80038dc <RTC_ByteToBcd2>
 800369c:	4603      	mov	r3, r0
 800369e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	789b      	ldrb	r3, [r3, #2]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f918 	bl	80038dc <RTC_ByteToBcd2>
 80036ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e00e      	b.n	80036dc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	78db      	ldrb	r3, [r3, #3]
 80036c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	785b      	ldrb	r3, [r3, #1]
 80036c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036ca:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80036d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	22ca      	movs	r2, #202	@ 0xca
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2253      	movs	r2, #83	@ 0x53
 80036ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f899 	bl	8003824 <RTC_EnterInitMode>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10c      	bne.n	8003716 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003706:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800370a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f8c0 	bl	8003892 <RTC_ExitInitMode>
 8003712:	4603      	mov	r3, r0
 8003714:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	22ff      	movs	r2, #255	@ 0xff
 8003728:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]

  return status;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
}
 8003732:	4618      	mov	r0, r3
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd90      	pop	{r4, r7, pc}

0800373a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003754:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003758:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	0b5b      	lsrs	r3, r3, #13
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11a      	bne.n	80037ce <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f8bb 	bl	8003918 <RTC_Bcd2ToByte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f8b2 	bl	8003918 <RTC_Bcd2ToByte>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f8a9 	bl	8003918 <RTC_Bcd2ToByte>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <HAL_RTC_WaitForSynchro+0x48>)
 80037ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ec:	f7fe f9b8 	bl	8001b60 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037f2:	e009      	b.n	8003808 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037f4:	f7fe f9b4 	bl	8001b60 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003802:	d901      	bls.n	8003808 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e007      	b.n	8003818 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00013f5f 	.word	0x00013f5f

08003824 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d122      	bne.n	8003888 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003850:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003852:	f7fe f985 	bl	8001b60 <HAL_GetTick>
 8003856:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003858:	e00c      	b.n	8003874 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800385a:	f7fe f981 	bl	8001b60 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003868:	d904      	bls.n	8003874 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <RTC_EnterInitMode+0x64>
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d1e8      	bne.n	800385a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff8b 	bl	80037d8 <HAL_RTC_WaitForSynchro>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2204      	movs	r2, #4
 80038cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80038ea:	e005      	b.n	80038f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	3b0a      	subs	r3, #10
 80038f6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	d8f6      	bhi.n	80038ec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	b2da      	uxtb	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4313      	orrs	r3, r2
 800390a:	b2db      	uxtb	r3, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4413      	add	r3, r2
 8003946:	b2db      	uxtb	r3, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07b      	b.n	8003a5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003976:	d009      	beq.n	800398c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
 800397e:	e005      	b.n	800398c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd f8e6 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a10:	ea42 0103 	orr.w	r1, r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0104 	and.w	r1, r3, #4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	f003 0210 	and.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a76:	f7fe f873 	bl	8001b60 <HAL_GetTick>
 8003a7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e12a      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_Transmit+0x36>
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e122      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_SPI_Transmit+0x48>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e11b      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afc:	d10f      	bne.n	8003b1e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d007      	beq.n	8003b3c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b44:	d152      	bne.n	8003bec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_SPI_Transmit+0xee>
 8003b4e:	8b7b      	ldrh	r3, [r7, #26]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d145      	bne.n	8003be0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b78:	e032      	b.n	8003be0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d112      	bne.n	8003bae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	881a      	ldrh	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bac:	e018      	b.n	8003be0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bae:	f7fd ffd7 	bl	8001b60 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_Transmit+0x160>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Transmit+0x166>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e082      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1c7      	bne.n	8003b7a <HAL_SPI_Transmit+0x114>
 8003bea:	e053      	b.n	8003c94 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_SPI_Transmit+0x194>
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d147      	bne.n	8003c8a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c20:	e033      	b.n	8003c8a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d113      	bne.n	8003c58 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c56:	e018      	b.n	8003c8a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c58:	f7fd ff82 	bl	8001b60 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d803      	bhi.n	8003c70 <HAL_SPI_Transmit+0x20a>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d102      	bne.n	8003c76 <HAL_SPI_Transmit+0x210>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e02d      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1c6      	bne.n	8003c22 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	6839      	ldr	r1, [r7, #0]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f9f9 	bl	8004090 <SPI_EndRxTxTransaction>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e097      	b.n	8003e3e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Transmit_DMA+0x2a>
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e08f      	b.n	8003e3e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_SPI_Transmit_DMA+0x3c>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e088      	b.n	8003e3e <HAL_SPI_Transmit_DMA+0x14e>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2203      	movs	r2, #3
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d7a:	d10f      	bne.n	8003d9c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da0:	4a29      	ldr	r2, [pc, #164]	@ (8003e48 <HAL_SPI_Transmit_DMA+0x158>)
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da8:	4a28      	ldr	r2, [pc, #160]	@ (8003e4c <HAL_SPI_Transmit_DMA+0x15c>)
 8003daa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db0:	4a27      	ldr	r2, [pc, #156]	@ (8003e50 <HAL_SPI_Transmit_DMA+0x160>)
 8003db2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db8:	2200      	movs	r2, #0
 8003dba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dd4:	f7fe f8b4 	bl	8001f40 <HAL_DMA_Start_IT>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de2:	f043 0210 	orr.w	r2, r3, #16
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e023      	b.n	8003e3e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b40      	cmp	r3, #64	@ 0x40
 8003e02:	d007      	beq.n	8003e14 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0220 	orr.w	r2, r2, #32
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0202 	orr.w	r2, r2, #2
 8003e3a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	08003f25 	.word	0x08003f25
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003f41 	.word	0x08003f41

08003e54 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8a:	f7fd fe69 	bl	8001b60 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9e:	d03b      	beq.n	8003f18 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0220 	bic.w	r2, r2, #32
 8003eae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0202 	bic.w	r2, r2, #2
 8003ebe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	2164      	movs	r1, #100	@ 0x64
 8003ec4:	6978      	ldr	r0, [r7, #20]
 8003ec6:	f000 f8e3 	bl	8004090 <SPI_EndRxTxTransaction>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	f7ff ffa9 	bl	8003e68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f16:	e002      	b.n	8003f1e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f18:	6978      	ldr	r0, [r7, #20]
 8003f1a:	f7fd f839 	bl	8000f90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff8e 	bl	8003e54 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0203 	bic.w	r2, r2, #3
 8003f5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff ff78 	bl	8003e68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f90:	f7fd fde6 	bl	8001b60 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa0:	f7fd fdde 	bl	8001b60 <HAL_GetTick>
 8003fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa6:	4b39      	ldr	r3, [pc, #228]	@ (800408c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	0d1b      	lsrs	r3, r3, #20
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb6:	e055      	b.n	8004064 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d051      	beq.n	8004064 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc0:	f7fd fdce 	bl	8001b60 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d902      	bls.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d13d      	bne.n	8004052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fee:	d111      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff8:	d004      	beq.n	8004004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004002:	d107      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401c:	d10f      	bne.n	800403e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800403c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e018      	b.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e002      	b.n	8004064 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3b01      	subs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	429a      	cmp	r2, r3
 8004080:	d19a      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000000 	.word	0x20000000

08004090 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2201      	movs	r2, #1
 80040a4:	2102      	movs	r1, #2
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff6a 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e032      	b.n	8004128 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004130 <SPI_EndRxTxTransaction+0xa0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004134 <SPI_EndRxTxTransaction+0xa4>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	0d5b      	lsrs	r3, r3, #21
 80040ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e0:	d112      	bne.n	8004108 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2180      	movs	r1, #128	@ 0x80
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff ff47 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e00f      	b.n	8004128 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3b01      	subs	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411e:	2b80      	cmp	r3, #128	@ 0x80
 8004120:	d0f2      	beq.n	8004108 <SPI_EndRxTxTransaction+0x78>
 8004122:	e000      	b.n	8004126 <SPI_EndRxTxTransaction+0x96>
        break;
 8004124:	bf00      	nop
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000000 	.word	0x20000000
 8004134:	165e9f81 	.word	0x165e9f81

08004138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e042      	b.n	80041d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fda4 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	@ 0x24
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800417a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f973 	bl	8004468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d175      	bne.n	80042e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Transmit+0x2c>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e06e      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2221      	movs	r2, #33	@ 0x21
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004216:	f7fd fca3 	bl	8001b60 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004230:	d108      	bne.n	8004244 <HAL_UART_Transmit+0x6c>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e003      	b.n	800424c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800424c:	e02e      	b.n	80042ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	@ 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f848 	bl	80042ee <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e03a      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3302      	adds	r3, #2
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e007      	b.n	800429e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3301      	adds	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1cb      	bne.n	800424e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	2140      	movs	r1, #64	@ 0x40
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f814 	bl	80042ee <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	e03b      	b.n	8004378 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d037      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fd fc2a 	bl	8001b60 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6a3a      	ldr	r2, [r7, #32]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <UART_WaitOnFlagUntilTimeout+0x30>
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e03a      	b.n	8004398 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d023      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b80      	cmp	r3, #128	@ 0x80
 8004334:	d020      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d01d      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d116      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f81d 	bl	80043a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2208      	movs	r2, #8
 800436a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e00f      	b.n	8004398 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	429a      	cmp	r2, r3
 8004394:	d0b4      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b095      	sub	sp, #84	@ 0x54
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	2b01      	cmp	r3, #1
 8004416:	d119      	bne.n	800444c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	60bb      	str	r3, [r7, #8]
   return(result);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 0310 	bic.w	r3, r3, #16
 800442e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004438:	61ba      	str	r2, [r7, #24]
 800443a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	613b      	str	r3, [r7, #16]
   return(result);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800445a:	bf00      	nop
 800445c:	3754      	adds	r7, #84	@ 0x54
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b0c0      	sub	sp, #256	@ 0x100
 800446e:	af00      	add	r7, sp, #0
 8004470:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	68d9      	ldr	r1, [r3, #12]
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	ea40 0301 	orr.w	r3, r0, r1
 8004490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044c0:	f021 010c 	bic.w	r1, r1, #12
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044ce:	430b      	orrs	r3, r1
 80044d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e2:	6999      	ldr	r1, [r3, #24]
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	ea40 0301 	orr.w	r3, r0, r1
 80044ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004734 <UART_SetConfig+0x2cc>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d005      	beq.n	8004508 <UART_SetConfig+0xa0>
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b8d      	ldr	r3, [pc, #564]	@ (8004738 <UART_SetConfig+0x2d0>)
 8004504:	429a      	cmp	r2, r3
 8004506:	d104      	bne.n	8004512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7fe fe16 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 800450c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004510:	e003      	b.n	800451a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004512:	f7fe fdfd 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004516:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004524:	f040 810c 	bne.w	8004740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452c:	2200      	movs	r2, #0
 800452e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004532:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	1891      	adds	r1, r2, r2
 8004540:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004542:	415b      	adcs	r3, r3
 8004544:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800454a:	4621      	mov	r1, r4
 800454c:	eb12 0801 	adds.w	r8, r2, r1
 8004550:	4629      	mov	r1, r5
 8004552:	eb43 0901 	adc.w	r9, r3, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456a:	4690      	mov	r8, r2
 800456c:	4699      	mov	r9, r3
 800456e:	4623      	mov	r3, r4
 8004570:	eb18 0303 	adds.w	r3, r8, r3
 8004574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004578:	462b      	mov	r3, r5
 800457a:	eb49 0303 	adc.w	r3, r9, r3
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800458e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004596:	460b      	mov	r3, r1
 8004598:	18db      	adds	r3, r3, r3
 800459a:	653b      	str	r3, [r7, #80]	@ 0x50
 800459c:	4613      	mov	r3, r2
 800459e:	eb42 0303 	adc.w	r3, r2, r3
 80045a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045ac:	f7fb fe70 	bl	8000290 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4b61      	ldr	r3, [pc, #388]	@ (800473c <UART_SetConfig+0x2d4>)
 80045b6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	011c      	lsls	r4, r3, #4
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	1891      	adds	r1, r2, r2
 80045d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045d8:	415b      	adcs	r3, r3
 80045da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045e0:	4641      	mov	r1, r8
 80045e2:	eb12 0a01 	adds.w	sl, r2, r1
 80045e6:	4649      	mov	r1, r9
 80045e8:	eb43 0b01 	adc.w	fp, r3, r1
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004600:	4692      	mov	sl, r2
 8004602:	469b      	mov	fp, r3
 8004604:	4643      	mov	r3, r8
 8004606:	eb1a 0303 	adds.w	r3, sl, r3
 800460a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800460e:	464b      	mov	r3, r9
 8004610:	eb4b 0303 	adc.w	r3, fp, r3
 8004614:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004624:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800462c:	460b      	mov	r3, r1
 800462e:	18db      	adds	r3, r3, r3
 8004630:	643b      	str	r3, [r7, #64]	@ 0x40
 8004632:	4613      	mov	r3, r2
 8004634:	eb42 0303 	adc.w	r3, r2, r3
 8004638:	647b      	str	r3, [r7, #68]	@ 0x44
 800463a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800463e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004642:	f7fb fe25 	bl	8000290 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4611      	mov	r1, r2
 800464c:	4b3b      	ldr	r3, [pc, #236]	@ (800473c <UART_SetConfig+0x2d4>)
 800464e:	fba3 2301 	umull	r2, r3, r3, r1
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2264      	movs	r2, #100	@ 0x64
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	1acb      	subs	r3, r1, r3
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004662:	4b36      	ldr	r3, [pc, #216]	@ (800473c <UART_SetConfig+0x2d4>)
 8004664:	fba3 2302 	umull	r2, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004670:	441c      	add	r4, r3
 8004672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800467c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800468c:	415b      	adcs	r3, r3
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004694:	4641      	mov	r1, r8
 8004696:	1851      	adds	r1, r2, r1
 8004698:	6339      	str	r1, [r7, #48]	@ 0x30
 800469a:	4649      	mov	r1, r9
 800469c:	414b      	adcs	r3, r1
 800469e:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046ac:	4659      	mov	r1, fp
 80046ae:	00cb      	lsls	r3, r1, #3
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b6:	4651      	mov	r1, sl
 80046b8:	00ca      	lsls	r2, r1, #3
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	4642      	mov	r2, r8
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046c8:	464b      	mov	r3, r9
 80046ca:	460a      	mov	r2, r1
 80046cc:	eb42 0303 	adc.w	r3, r2, r3
 80046d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046e8:	460b      	mov	r3, r1
 80046ea:	18db      	adds	r3, r3, r3
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ee:	4613      	mov	r3, r2
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046fe:	f7fb fdc7 	bl	8000290 <__aeabi_uldivmod>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <UART_SetConfig+0x2d4>)
 8004708:	fba3 1302 	umull	r1, r3, r3, r2
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	2164      	movs	r1, #100	@ 0x64
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	3332      	adds	r3, #50	@ 0x32
 800471a:	4a08      	ldr	r2, [pc, #32]	@ (800473c <UART_SetConfig+0x2d4>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	f003 0207 	and.w	r2, r3, #7
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4422      	add	r2, r4
 800472e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004730:	e106      	b.n	8004940 <UART_SetConfig+0x4d8>
 8004732:	bf00      	nop
 8004734:	40011000 	.word	0x40011000
 8004738:	40011400 	.word	0x40011400
 800473c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800474a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800474e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004752:	4642      	mov	r2, r8
 8004754:	464b      	mov	r3, r9
 8004756:	1891      	adds	r1, r2, r2
 8004758:	6239      	str	r1, [r7, #32]
 800475a:	415b      	adcs	r3, r3
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
 800475e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004762:	4641      	mov	r1, r8
 8004764:	1854      	adds	r4, r2, r1
 8004766:	4649      	mov	r1, r9
 8004768:	eb43 0501 	adc.w	r5, r3, r1
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	00eb      	lsls	r3, r5, #3
 8004776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477a:	00e2      	lsls	r2, r4, #3
 800477c:	4614      	mov	r4, r2
 800477e:	461d      	mov	r5, r3
 8004780:	4643      	mov	r3, r8
 8004782:	18e3      	adds	r3, r4, r3
 8004784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004788:	464b      	mov	r3, r9
 800478a:	eb45 0303 	adc.w	r3, r5, r3
 800478e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800479e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047ae:	4629      	mov	r1, r5
 80047b0:	008b      	lsls	r3, r1, #2
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b8:	4621      	mov	r1, r4
 80047ba:	008a      	lsls	r2, r1, #2
 80047bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047c0:	f7fb fd66 	bl	8000290 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4b60      	ldr	r3, [pc, #384]	@ (800494c <UART_SetConfig+0x4e4>)
 80047ca:	fba3 2302 	umull	r2, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	011c      	lsls	r4, r3, #4
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	61b9      	str	r1, [r7, #24]
 80047ec:	415b      	adcs	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6139      	str	r1, [r7, #16]
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004828:	464b      	mov	r3, r9
 800482a:	460a      	mov	r2, r1
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800483e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800484c:	4649      	mov	r1, r9
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004856:	4641      	mov	r1, r8
 8004858:	008a      	lsls	r2, r1, #2
 800485a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800485e:	f7fb fd17 	bl	8000290 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4611      	mov	r1, r2
 8004868:	4b38      	ldr	r3, [pc, #224]	@ (800494c <UART_SetConfig+0x4e4>)
 800486a:	fba3 2301 	umull	r2, r3, r3, r1
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2264      	movs	r2, #100	@ 0x64
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	@ 0x32
 800487c:	4a33      	ldr	r2, [pc, #204]	@ (800494c <UART_SetConfig+0x4e4>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	673b      	str	r3, [r7, #112]	@ 0x70
 8004892:	677a      	str	r2, [r7, #116]	@ 0x74
 8004894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	415b      	adcs	r3, r3
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a8:	4641      	mov	r1, r8
 80048aa:	1851      	adds	r1, r2, r1
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	4649      	mov	r1, r9
 80048b0:	414b      	adcs	r3, r1
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048c0:	4659      	mov	r1, fp
 80048c2:	00cb      	lsls	r3, r1, #3
 80048c4:	4651      	mov	r1, sl
 80048c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ca:	4651      	mov	r1, sl
 80048cc:	00ca      	lsls	r2, r1, #3
 80048ce:	4610      	mov	r0, r2
 80048d0:	4619      	mov	r1, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	4642      	mov	r2, r8
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048da:	464b      	mov	r3, r9
 80048dc:	460a      	mov	r2, r1
 80048de:	eb42 0303 	adc.w	r3, r2, r3
 80048e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048fc:	4649      	mov	r1, r9
 80048fe:	008b      	lsls	r3, r1, #2
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004906:	4641      	mov	r1, r8
 8004908:	008a      	lsls	r2, r1, #2
 800490a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800490e:	f7fb fcbf 	bl	8000290 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <UART_SetConfig+0x4e4>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	@ 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	3332      	adds	r3, #50	@ 0x32
 800492a:	4a08      	ldr	r2, [pc, #32]	@ (800494c <UART_SetConfig+0x4e4>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4422      	add	r2, r4
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004946:	46bd      	mov	sp, r7
 8004948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <std>:
 8004950:	2300      	movs	r3, #0
 8004952:	b510      	push	{r4, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	e9c0 3300 	strd	r3, r3, [r0]
 800495a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495e:	6083      	str	r3, [r0, #8]
 8004960:	8181      	strh	r1, [r0, #12]
 8004962:	6643      	str	r3, [r0, #100]	@ 0x64
 8004964:	81c2      	strh	r2, [r0, #14]
 8004966:	6183      	str	r3, [r0, #24]
 8004968:	4619      	mov	r1, r3
 800496a:	2208      	movs	r2, #8
 800496c:	305c      	adds	r0, #92	@ 0x5c
 800496e:	f000 fa1b 	bl	8004da8 <memset>
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <std+0x58>)
 8004974:	6263      	str	r3, [r4, #36]	@ 0x24
 8004976:	4b0d      	ldr	r3, [pc, #52]	@ (80049ac <std+0x5c>)
 8004978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <std+0x60>)
 800497c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <std+0x64>)
 8004980:	6323      	str	r3, [r4, #48]	@ 0x30
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <std+0x68>)
 8004984:	6224      	str	r4, [r4, #32]
 8004986:	429c      	cmp	r4, r3
 8004988:	d006      	beq.n	8004998 <std+0x48>
 800498a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800498e:	4294      	cmp	r4, r2
 8004990:	d002      	beq.n	8004998 <std+0x48>
 8004992:	33d0      	adds	r3, #208	@ 0xd0
 8004994:	429c      	cmp	r4, r3
 8004996:	d105      	bne.n	80049a4 <std+0x54>
 8004998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a0:	f000 ba7a 	b.w	8004e98 <__retarget_lock_init_recursive>
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	08004bf9 	.word	0x08004bf9
 80049ac:	08004c1b 	.word	0x08004c1b
 80049b0:	08004c53 	.word	0x08004c53
 80049b4:	08004c77 	.word	0x08004c77
 80049b8:	20000214 	.word	0x20000214

080049bc <stdio_exit_handler>:
 80049bc:	4a02      	ldr	r2, [pc, #8]	@ (80049c8 <stdio_exit_handler+0xc>)
 80049be:	4903      	ldr	r1, [pc, #12]	@ (80049cc <stdio_exit_handler+0x10>)
 80049c0:	4803      	ldr	r0, [pc, #12]	@ (80049d0 <stdio_exit_handler+0x14>)
 80049c2:	f000 b869 	b.w	8004a98 <_fwalk_sglue>
 80049c6:	bf00      	nop
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	08005a01 	.word	0x08005a01
 80049d0:	2000001c 	.word	0x2000001c

080049d4 <cleanup_stdio>:
 80049d4:	6841      	ldr	r1, [r0, #4]
 80049d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <cleanup_stdio+0x34>)
 80049d8:	4299      	cmp	r1, r3
 80049da:	b510      	push	{r4, lr}
 80049dc:	4604      	mov	r4, r0
 80049de:	d001      	beq.n	80049e4 <cleanup_stdio+0x10>
 80049e0:	f001 f80e 	bl	8005a00 <_fflush_r>
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <cleanup_stdio+0x38>)
 80049e8:	4299      	cmp	r1, r3
 80049ea:	d002      	beq.n	80049f2 <cleanup_stdio+0x1e>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f001 f807 	bl	8005a00 <_fflush_r>
 80049f2:	68e1      	ldr	r1, [r4, #12]
 80049f4:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <cleanup_stdio+0x3c>)
 80049f6:	4299      	cmp	r1, r3
 80049f8:	d004      	beq.n	8004a04 <cleanup_stdio+0x30>
 80049fa:	4620      	mov	r0, r4
 80049fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a00:	f000 bffe 	b.w	8005a00 <_fflush_r>
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	bf00      	nop
 8004a08:	20000214 	.word	0x20000214
 8004a0c:	2000027c 	.word	0x2000027c
 8004a10:	200002e4 	.word	0x200002e4

08004a14 <global_stdio_init.part.0>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <global_stdio_init.part.0+0x30>)
 8004a18:	4c0b      	ldr	r4, [pc, #44]	@ (8004a48 <global_stdio_init.part.0+0x34>)
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a4c <global_stdio_init.part.0+0x38>)
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	4620      	mov	r0, r4
 8004a20:	2200      	movs	r2, #0
 8004a22:	2104      	movs	r1, #4
 8004a24:	f7ff ff94 	bl	8004950 <std>
 8004a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2109      	movs	r1, #9
 8004a30:	f7ff ff8e 	bl	8004950 <std>
 8004a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a38:	2202      	movs	r2, #2
 8004a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3e:	2112      	movs	r1, #18
 8004a40:	f7ff bf86 	b.w	8004950 <std>
 8004a44:	2000034c 	.word	0x2000034c
 8004a48:	20000214 	.word	0x20000214
 8004a4c:	080049bd 	.word	0x080049bd

08004a50 <__sfp_lock_acquire>:
 8004a50:	4801      	ldr	r0, [pc, #4]	@ (8004a58 <__sfp_lock_acquire+0x8>)
 8004a52:	f000 ba22 	b.w	8004e9a <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	20000355 	.word	0x20000355

08004a5c <__sfp_lock_release>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	@ (8004a64 <__sfp_lock_release+0x8>)
 8004a5e:	f000 ba1d 	b.w	8004e9c <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000355 	.word	0x20000355

08004a68 <__sinit>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	f7ff fff0 	bl	8004a50 <__sfp_lock_acquire>
 8004a70:	6a23      	ldr	r3, [r4, #32]
 8004a72:	b11b      	cbz	r3, 8004a7c <__sinit+0x14>
 8004a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a78:	f7ff bff0 	b.w	8004a5c <__sfp_lock_release>
 8004a7c:	4b04      	ldr	r3, [pc, #16]	@ (8004a90 <__sinit+0x28>)
 8004a7e:	6223      	str	r3, [r4, #32]
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__sinit+0x2c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f5      	bne.n	8004a74 <__sinit+0xc>
 8004a88:	f7ff ffc4 	bl	8004a14 <global_stdio_init.part.0>
 8004a8c:	e7f2      	b.n	8004a74 <__sinit+0xc>
 8004a8e:	bf00      	nop
 8004a90:	080049d5 	.word	0x080049d5
 8004a94:	2000034c 	.word	0x2000034c

08004a98 <_fwalk_sglue>:
 8004a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	4688      	mov	r8, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8004aac:	d505      	bpl.n	8004aba <_fwalk_sglue+0x22>
 8004aae:	6824      	ldr	r4, [r4, #0]
 8004ab0:	2c00      	cmp	r4, #0
 8004ab2:	d1f7      	bne.n	8004aa4 <_fwalk_sglue+0xc>
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aba:	89ab      	ldrh	r3, [r5, #12]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d907      	bls.n	8004ad0 <_fwalk_sglue+0x38>
 8004ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	d003      	beq.n	8004ad0 <_fwalk_sglue+0x38>
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4638      	mov	r0, r7
 8004acc:	47c0      	blx	r8
 8004ace:	4306      	orrs	r6, r0
 8004ad0:	3568      	adds	r5, #104	@ 0x68
 8004ad2:	e7e9      	b.n	8004aa8 <_fwalk_sglue+0x10>

08004ad4 <iprintf>:
 8004ad4:	b40f      	push	{r0, r1, r2, r3}
 8004ad6:	b507      	push	{r0, r1, r2, lr}
 8004ad8:	4906      	ldr	r1, [pc, #24]	@ (8004af4 <iprintf+0x20>)
 8004ada:	ab04      	add	r3, sp, #16
 8004adc:	6808      	ldr	r0, [r1, #0]
 8004ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae2:	6881      	ldr	r1, [r0, #8]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	f000 fc63 	bl	80053b0 <_vfiprintf_r>
 8004aea:	b003      	add	sp, #12
 8004aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004af0:	b004      	add	sp, #16
 8004af2:	4770      	bx	lr
 8004af4:	20000018 	.word	0x20000018

08004af8 <_puts_r>:
 8004af8:	6a03      	ldr	r3, [r0, #32]
 8004afa:	b570      	push	{r4, r5, r6, lr}
 8004afc:	6884      	ldr	r4, [r0, #8]
 8004afe:	4605      	mov	r5, r0
 8004b00:	460e      	mov	r6, r1
 8004b02:	b90b      	cbnz	r3, 8004b08 <_puts_r+0x10>
 8004b04:	f7ff ffb0 	bl	8004a68 <__sinit>
 8004b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b0a:	07db      	lsls	r3, r3, #31
 8004b0c:	d405      	bmi.n	8004b1a <_puts_r+0x22>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	0598      	lsls	r0, r3, #22
 8004b12:	d402      	bmi.n	8004b1a <_puts_r+0x22>
 8004b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b16:	f000 f9c0 	bl	8004e9a <__retarget_lock_acquire_recursive>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	0719      	lsls	r1, r3, #28
 8004b1e:	d502      	bpl.n	8004b26 <_puts_r+0x2e>
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d135      	bne.n	8004b92 <_puts_r+0x9a>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f000 f8e7 	bl	8004cfc <__swsetup_r>
 8004b2e:	b380      	cbz	r0, 8004b92 <_puts_r+0x9a>
 8004b30:	f04f 35ff 	mov.w	r5, #4294967295
 8004b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b36:	07da      	lsls	r2, r3, #31
 8004b38:	d405      	bmi.n	8004b46 <_puts_r+0x4e>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	059b      	lsls	r3, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_puts_r+0x4e>
 8004b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b42:	f000 f9ab 	bl	8004e9c <__retarget_lock_release_recursive>
 8004b46:	4628      	mov	r0, r5
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da04      	bge.n	8004b58 <_puts_r+0x60>
 8004b4e:	69a2      	ldr	r2, [r4, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	dc17      	bgt.n	8004b84 <_puts_r+0x8c>
 8004b54:	290a      	cmp	r1, #10
 8004b56:	d015      	beq.n	8004b84 <_puts_r+0x8c>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	7019      	strb	r1, [r3, #0]
 8004b60:	68a3      	ldr	r3, [r4, #8]
 8004b62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b66:	3b01      	subs	r3, #1
 8004b68:	60a3      	str	r3, [r4, #8]
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d1ed      	bne.n	8004b4a <_puts_r+0x52>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da11      	bge.n	8004b96 <_puts_r+0x9e>
 8004b72:	4622      	mov	r2, r4
 8004b74:	210a      	movs	r1, #10
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f881 	bl	8004c7e <__swbuf_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d0d7      	beq.n	8004b30 <_puts_r+0x38>
 8004b80:	250a      	movs	r5, #10
 8004b82:	e7d7      	b.n	8004b34 <_puts_r+0x3c>
 8004b84:	4622      	mov	r2, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f879 	bl	8004c7e <__swbuf_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d1e7      	bne.n	8004b60 <_puts_r+0x68>
 8004b90:	e7ce      	b.n	8004b30 <_puts_r+0x38>
 8004b92:	3e01      	subs	r6, #1
 8004b94:	e7e4      	b.n	8004b60 <_puts_r+0x68>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	6022      	str	r2, [r4, #0]
 8004b9c:	220a      	movs	r2, #10
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e7ee      	b.n	8004b80 <_puts_r+0x88>
	...

08004ba4 <puts>:
 8004ba4:	4b02      	ldr	r3, [pc, #8]	@ (8004bb0 <puts+0xc>)
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f7ff bfa5 	b.w	8004af8 <_puts_r>
 8004bae:	bf00      	nop
 8004bb0:	20000018 	.word	0x20000018

08004bb4 <siprintf>:
 8004bb4:	b40e      	push	{r1, r2, r3}
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	b09d      	sub	sp, #116	@ 0x74
 8004bba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004bbc:	9002      	str	r0, [sp, #8]
 8004bbe:	9006      	str	r0, [sp, #24]
 8004bc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004bc4:	480a      	ldr	r0, [pc, #40]	@ (8004bf0 <siprintf+0x3c>)
 8004bc6:	9107      	str	r1, [sp, #28]
 8004bc8:	9104      	str	r1, [sp, #16]
 8004bca:	490a      	ldr	r1, [pc, #40]	@ (8004bf4 <siprintf+0x40>)
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	9105      	str	r1, [sp, #20]
 8004bd2:	2400      	movs	r4, #0
 8004bd4:	a902      	add	r1, sp, #8
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004bdc:	f000 fac2 	bl	8005164 <_svfiprintf_r>
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	701c      	strb	r4, [r3, #0]
 8004be4:	b01d      	add	sp, #116	@ 0x74
 8004be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bea:	b003      	add	sp, #12
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000018 	.word	0x20000018
 8004bf4:	ffff0208 	.word	0xffff0208

08004bf8 <__sread>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	f000 f8fc 	bl	8004dfc <_read_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	bfab      	itete	ge
 8004c08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c0c:	181b      	addge	r3, r3, r0
 8004c0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c12:	bfac      	ite	ge
 8004c14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c16:	81a3      	strhlt	r3, [r4, #12]
 8004c18:	bd10      	pop	{r4, pc}

08004c1a <__swrite>:
 8004c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1e:	461f      	mov	r7, r3
 8004c20:	898b      	ldrh	r3, [r1, #12]
 8004c22:	05db      	lsls	r3, r3, #23
 8004c24:	4605      	mov	r5, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	4616      	mov	r6, r2
 8004c2a:	d505      	bpl.n	8004c38 <__swrite+0x1e>
 8004c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c30:	2302      	movs	r3, #2
 8004c32:	2200      	movs	r2, #0
 8004c34:	f000 f8d0 	bl	8004dd8 <_lseek_r>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	4632      	mov	r2, r6
 8004c46:	463b      	mov	r3, r7
 8004c48:	4628      	mov	r0, r5
 8004c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4e:	f000 b8e7 	b.w	8004e20 <_write_r>

08004c52 <__sseek>:
 8004c52:	b510      	push	{r4, lr}
 8004c54:	460c      	mov	r4, r1
 8004c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5a:	f000 f8bd 	bl	8004dd8 <_lseek_r>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	bf15      	itete	ne
 8004c64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c6e:	81a3      	strheq	r3, [r4, #12]
 8004c70:	bf18      	it	ne
 8004c72:	81a3      	strhne	r3, [r4, #12]
 8004c74:	bd10      	pop	{r4, pc}

08004c76 <__sclose>:
 8004c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7a:	f000 b89d 	b.w	8004db8 <_close_r>

08004c7e <__swbuf_r>:
 8004c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c80:	460e      	mov	r6, r1
 8004c82:	4614      	mov	r4, r2
 8004c84:	4605      	mov	r5, r0
 8004c86:	b118      	cbz	r0, 8004c90 <__swbuf_r+0x12>
 8004c88:	6a03      	ldr	r3, [r0, #32]
 8004c8a:	b90b      	cbnz	r3, 8004c90 <__swbuf_r+0x12>
 8004c8c:	f7ff feec 	bl	8004a68 <__sinit>
 8004c90:	69a3      	ldr	r3, [r4, #24]
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	071a      	lsls	r2, r3, #28
 8004c98:	d501      	bpl.n	8004c9e <__swbuf_r+0x20>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	b943      	cbnz	r3, 8004cb0 <__swbuf_r+0x32>
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 f82b 	bl	8004cfc <__swsetup_r>
 8004ca6:	b118      	cbz	r0, 8004cb0 <__swbuf_r+0x32>
 8004ca8:	f04f 37ff 	mov.w	r7, #4294967295
 8004cac:	4638      	mov	r0, r7
 8004cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	6922      	ldr	r2, [r4, #16]
 8004cb4:	1a98      	subs	r0, r3, r2
 8004cb6:	6963      	ldr	r3, [r4, #20]
 8004cb8:	b2f6      	uxtb	r6, r6
 8004cba:	4283      	cmp	r3, r0
 8004cbc:	4637      	mov	r7, r6
 8004cbe:	dc05      	bgt.n	8004ccc <__swbuf_r+0x4e>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 fe9c 	bl	8005a00 <_fflush_r>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d1ed      	bne.n	8004ca8 <__swbuf_r+0x2a>
 8004ccc:	68a3      	ldr	r3, [r4, #8]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	60a3      	str	r3, [r4, #8]
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	6022      	str	r2, [r4, #0]
 8004cd8:	701e      	strb	r6, [r3, #0]
 8004cda:	6962      	ldr	r2, [r4, #20]
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d004      	beq.n	8004cec <__swbuf_r+0x6e>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	07db      	lsls	r3, r3, #31
 8004ce6:	d5e1      	bpl.n	8004cac <__swbuf_r+0x2e>
 8004ce8:	2e0a      	cmp	r6, #10
 8004cea:	d1df      	bne.n	8004cac <__swbuf_r+0x2e>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 fe86 	bl	8005a00 <_fflush_r>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d0d9      	beq.n	8004cac <__swbuf_r+0x2e>
 8004cf8:	e7d6      	b.n	8004ca8 <__swbuf_r+0x2a>
	...

08004cfc <__swsetup_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4b29      	ldr	r3, [pc, #164]	@ (8004da4 <__swsetup_r+0xa8>)
 8004d00:	4605      	mov	r5, r0
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	460c      	mov	r4, r1
 8004d06:	b118      	cbz	r0, 8004d10 <__swsetup_r+0x14>
 8004d08:	6a03      	ldr	r3, [r0, #32]
 8004d0a:	b90b      	cbnz	r3, 8004d10 <__swsetup_r+0x14>
 8004d0c:	f7ff feac 	bl	8004a68 <__sinit>
 8004d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d14:	0719      	lsls	r1, r3, #28
 8004d16:	d422      	bmi.n	8004d5e <__swsetup_r+0x62>
 8004d18:	06da      	lsls	r2, r3, #27
 8004d1a:	d407      	bmi.n	8004d2c <__swsetup_r+0x30>
 8004d1c:	2209      	movs	r2, #9
 8004d1e:	602a      	str	r2, [r5, #0]
 8004d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	e033      	b.n	8004d94 <__swsetup_r+0x98>
 8004d2c:	0758      	lsls	r0, r3, #29
 8004d2e:	d512      	bpl.n	8004d56 <__swsetup_r+0x5a>
 8004d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d32:	b141      	cbz	r1, 8004d46 <__swsetup_r+0x4a>
 8004d34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	d002      	beq.n	8004d42 <__swsetup_r+0x46>
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f000 f8bd 	bl	8004ebc <_free_r>
 8004d42:	2300      	movs	r3, #0
 8004d44:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6063      	str	r3, [r4, #4]
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	f043 0308 	orr.w	r3, r3, #8
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	b94b      	cbnz	r3, 8004d76 <__swsetup_r+0x7a>
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6c:	d003      	beq.n	8004d76 <__swsetup_r+0x7a>
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 fe93 	bl	8005a9c <__smakebuf_r>
 8004d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d7a:	f013 0201 	ands.w	r2, r3, #1
 8004d7e:	d00a      	beq.n	8004d96 <__swsetup_r+0x9a>
 8004d80:	2200      	movs	r2, #0
 8004d82:	60a2      	str	r2, [r4, #8]
 8004d84:	6962      	ldr	r2, [r4, #20]
 8004d86:	4252      	negs	r2, r2
 8004d88:	61a2      	str	r2, [r4, #24]
 8004d8a:	6922      	ldr	r2, [r4, #16]
 8004d8c:	b942      	cbnz	r2, 8004da0 <__swsetup_r+0xa4>
 8004d8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d92:	d1c5      	bne.n	8004d20 <__swsetup_r+0x24>
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
 8004d96:	0799      	lsls	r1, r3, #30
 8004d98:	bf58      	it	pl
 8004d9a:	6962      	ldrpl	r2, [r4, #20]
 8004d9c:	60a2      	str	r2, [r4, #8]
 8004d9e:	e7f4      	b.n	8004d8a <__swsetup_r+0x8e>
 8004da0:	2000      	movs	r0, #0
 8004da2:	e7f7      	b.n	8004d94 <__swsetup_r+0x98>
 8004da4:	20000018 	.word	0x20000018

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <_close_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4d06      	ldr	r5, [pc, #24]	@ (8004dd4 <_close_r+0x1c>)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	f7fc f867 	bl	8000e96 <_close>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_close_r+0x1a>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_close_r+0x1a>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	20000350 	.word	0x20000350

08004dd8 <_lseek_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d07      	ldr	r5, [pc, #28]	@ (8004df8 <_lseek_r+0x20>)
 8004ddc:	4604      	mov	r4, r0
 8004dde:	4608      	mov	r0, r1
 8004de0:	4611      	mov	r1, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	602a      	str	r2, [r5, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f7fc f87c 	bl	8000ee4 <_lseek>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_lseek_r+0x1e>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_lseek_r+0x1e>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20000350 	.word	0x20000350

08004dfc <_read_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d07      	ldr	r5, [pc, #28]	@ (8004e1c <_read_r+0x20>)
 8004e00:	4604      	mov	r4, r0
 8004e02:	4608      	mov	r0, r1
 8004e04:	4611      	mov	r1, r2
 8004e06:	2200      	movs	r2, #0
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fc f80a 	bl	8000e24 <_read>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_read_r+0x1e>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_read_r+0x1e>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000350 	.word	0x20000350

08004e20 <_write_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	@ (8004e40 <_write_r+0x20>)
 8004e24:	4604      	mov	r4, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc f815 	bl	8000e5e <_write>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_write_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_write_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000350 	.word	0x20000350

08004e44 <__errno>:
 8004e44:	4b01      	ldr	r3, [pc, #4]	@ (8004e4c <__errno+0x8>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000018 	.word	0x20000018

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4d0d      	ldr	r5, [pc, #52]	@ (8004e88 <__libc_init_array+0x38>)
 8004e54:	4c0d      	ldr	r4, [pc, #52]	@ (8004e8c <__libc_init_array+0x3c>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	4d0b      	ldr	r5, [pc, #44]	@ (8004e90 <__libc_init_array+0x40>)
 8004e62:	4c0c      	ldr	r4, [pc, #48]	@ (8004e94 <__libc_init_array+0x44>)
 8004e64:	f000 fed8 	bl	8005c18 <_init>
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	08005ec8 	.word	0x08005ec8
 8004e8c:	08005ec8 	.word	0x08005ec8
 8004e90:	08005ec8 	.word	0x08005ec8
 8004e94:	08005ecc 	.word	0x08005ecc

08004e98 <__retarget_lock_init_recursive>:
 8004e98:	4770      	bx	lr

08004e9a <__retarget_lock_acquire_recursive>:
 8004e9a:	4770      	bx	lr

08004e9c <__retarget_lock_release_recursive>:
 8004e9c:	4770      	bx	lr

08004e9e <memcpy>:
 8004e9e:	440a      	add	r2, r1
 8004ea0:	4291      	cmp	r1, r2
 8004ea2:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea6:	d100      	bne.n	8004eaa <memcpy+0xc>
 8004ea8:	4770      	bx	lr
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb4:	4291      	cmp	r1, r2
 8004eb6:	d1f9      	bne.n	8004eac <memcpy+0xe>
 8004eb8:	bd10      	pop	{r4, pc}
	...

08004ebc <_free_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	d041      	beq.n	8004f48 <_free_r+0x8c>
 8004ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec8:	1f0c      	subs	r4, r1, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfb8      	it	lt
 8004ece:	18e4      	addlt	r4, r4, r3
 8004ed0:	f000 f8e0 	bl	8005094 <__malloc_lock>
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <_free_r+0x90>)
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	b933      	cbnz	r3, 8004ee8 <_free_r+0x2c>
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	6014      	str	r4, [r2, #0]
 8004ede:	4628      	mov	r0, r5
 8004ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee4:	f000 b8dc 	b.w	80050a0 <__malloc_unlock>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d908      	bls.n	8004efe <_free_r+0x42>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf01      	itttt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	1809      	addeq	r1, r1, r0
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	e7ed      	b.n	8004eda <_free_r+0x1e>
 8004efe:	461a      	mov	r2, r3
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b10b      	cbz	r3, 8004f08 <_free_r+0x4c>
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	d9fa      	bls.n	8004efe <_free_r+0x42>
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	1850      	adds	r0, r2, r1
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d10b      	bne.n	8004f28 <_free_r+0x6c>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	4401      	add	r1, r0
 8004f14:	1850      	adds	r0, r2, r1
 8004f16:	4283      	cmp	r3, r0
 8004f18:	6011      	str	r1, [r2, #0]
 8004f1a:	d1e0      	bne.n	8004ede <_free_r+0x22>
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	6053      	str	r3, [r2, #4]
 8004f22:	4408      	add	r0, r1
 8004f24:	6010      	str	r0, [r2, #0]
 8004f26:	e7da      	b.n	8004ede <_free_r+0x22>
 8004f28:	d902      	bls.n	8004f30 <_free_r+0x74>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	e7d6      	b.n	8004ede <_free_r+0x22>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	1821      	adds	r1, r4, r0
 8004f34:	428b      	cmp	r3, r1
 8004f36:	bf04      	itt	eq
 8004f38:	6819      	ldreq	r1, [r3, #0]
 8004f3a:	685b      	ldreq	r3, [r3, #4]
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	bf04      	itt	eq
 8004f40:	1809      	addeq	r1, r1, r0
 8004f42:	6021      	streq	r1, [r4, #0]
 8004f44:	6054      	str	r4, [r2, #4]
 8004f46:	e7ca      	b.n	8004ede <_free_r+0x22>
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2000035c 	.word	0x2000035c

08004f50 <sbrk_aligned>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4e0f      	ldr	r6, [pc, #60]	@ (8004f90 <sbrk_aligned+0x40>)
 8004f54:	460c      	mov	r4, r1
 8004f56:	6831      	ldr	r1, [r6, #0]
 8004f58:	4605      	mov	r5, r0
 8004f5a:	b911      	cbnz	r1, 8004f62 <sbrk_aligned+0x12>
 8004f5c:	f000 fe16 	bl	8005b8c <_sbrk_r>
 8004f60:	6030      	str	r0, [r6, #0]
 8004f62:	4621      	mov	r1, r4
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 fe11 	bl	8005b8c <_sbrk_r>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	d103      	bne.n	8004f76 <sbrk_aligned+0x26>
 8004f6e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f72:	4620      	mov	r0, r4
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
 8004f76:	1cc4      	adds	r4, r0, #3
 8004f78:	f024 0403 	bic.w	r4, r4, #3
 8004f7c:	42a0      	cmp	r0, r4
 8004f7e:	d0f8      	beq.n	8004f72 <sbrk_aligned+0x22>
 8004f80:	1a21      	subs	r1, r4, r0
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 fe02 	bl	8005b8c <_sbrk_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d1f2      	bne.n	8004f72 <sbrk_aligned+0x22>
 8004f8c:	e7ef      	b.n	8004f6e <sbrk_aligned+0x1e>
 8004f8e:	bf00      	nop
 8004f90:	20000358 	.word	0x20000358

08004f94 <_malloc_r>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	1ccd      	adds	r5, r1, #3
 8004f9a:	f025 0503 	bic.w	r5, r5, #3
 8004f9e:	3508      	adds	r5, #8
 8004fa0:	2d0c      	cmp	r5, #12
 8004fa2:	bf38      	it	cc
 8004fa4:	250c      	movcc	r5, #12
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	4606      	mov	r6, r0
 8004faa:	db01      	blt.n	8004fb0 <_malloc_r+0x1c>
 8004fac:	42a9      	cmp	r1, r5
 8004fae:	d904      	bls.n	8004fba <_malloc_r+0x26>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	6033      	str	r3, [r6, #0]
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005090 <_malloc_r+0xfc>
 8004fbe:	f000 f869 	bl	8005094 <__malloc_lock>
 8004fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc6:	461c      	mov	r4, r3
 8004fc8:	bb44      	cbnz	r4, 800501c <_malloc_r+0x88>
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff ffbf 	bl	8004f50 <sbrk_aligned>
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	d158      	bne.n	800508a <_malloc_r+0xf6>
 8004fd8:	f8d8 4000 	ldr.w	r4, [r8]
 8004fdc:	4627      	mov	r7, r4
 8004fde:	2f00      	cmp	r7, #0
 8004fe0:	d143      	bne.n	800506a <_malloc_r+0xd6>
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	d04b      	beq.n	800507e <_malloc_r+0xea>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	eb04 0903 	add.w	r9, r4, r3
 8004ff0:	f000 fdcc 	bl	8005b8c <_sbrk_r>
 8004ff4:	4581      	cmp	r9, r0
 8004ff6:	d142      	bne.n	800507e <_malloc_r+0xea>
 8004ff8:	6821      	ldr	r1, [r4, #0]
 8004ffa:	1a6d      	subs	r5, r5, r1
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7ff ffa6 	bl	8004f50 <sbrk_aligned>
 8005004:	3001      	adds	r0, #1
 8005006:	d03a      	beq.n	800507e <_malloc_r+0xea>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	442b      	add	r3, r5
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	f8d8 3000 	ldr.w	r3, [r8]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	bb62      	cbnz	r2, 8005070 <_malloc_r+0xdc>
 8005016:	f8c8 7000 	str.w	r7, [r8]
 800501a:	e00f      	b.n	800503c <_malloc_r+0xa8>
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	1b52      	subs	r2, r2, r5
 8005020:	d420      	bmi.n	8005064 <_malloc_r+0xd0>
 8005022:	2a0b      	cmp	r2, #11
 8005024:	d917      	bls.n	8005056 <_malloc_r+0xc2>
 8005026:	1961      	adds	r1, r4, r5
 8005028:	42a3      	cmp	r3, r4
 800502a:	6025      	str	r5, [r4, #0]
 800502c:	bf18      	it	ne
 800502e:	6059      	strne	r1, [r3, #4]
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	bf08      	it	eq
 8005034:	f8c8 1000 	streq.w	r1, [r8]
 8005038:	5162      	str	r2, [r4, r5]
 800503a:	604b      	str	r3, [r1, #4]
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f82f 	bl	80050a0 <__malloc_unlock>
 8005042:	f104 000b 	add.w	r0, r4, #11
 8005046:	1d23      	adds	r3, r4, #4
 8005048:	f020 0007 	bic.w	r0, r0, #7
 800504c:	1ac2      	subs	r2, r0, r3
 800504e:	bf1c      	itt	ne
 8005050:	1a1b      	subne	r3, r3, r0
 8005052:	50a3      	strne	r3, [r4, r2]
 8005054:	e7af      	b.n	8004fb6 <_malloc_r+0x22>
 8005056:	6862      	ldr	r2, [r4, #4]
 8005058:	42a3      	cmp	r3, r4
 800505a:	bf0c      	ite	eq
 800505c:	f8c8 2000 	streq.w	r2, [r8]
 8005060:	605a      	strne	r2, [r3, #4]
 8005062:	e7eb      	b.n	800503c <_malloc_r+0xa8>
 8005064:	4623      	mov	r3, r4
 8005066:	6864      	ldr	r4, [r4, #4]
 8005068:	e7ae      	b.n	8004fc8 <_malloc_r+0x34>
 800506a:	463c      	mov	r4, r7
 800506c:	687f      	ldr	r7, [r7, #4]
 800506e:	e7b6      	b.n	8004fde <_malloc_r+0x4a>
 8005070:	461a      	mov	r2, r3
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	42a3      	cmp	r3, r4
 8005076:	d1fb      	bne.n	8005070 <_malloc_r+0xdc>
 8005078:	2300      	movs	r3, #0
 800507a:	6053      	str	r3, [r2, #4]
 800507c:	e7de      	b.n	800503c <_malloc_r+0xa8>
 800507e:	230c      	movs	r3, #12
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f80c 	bl	80050a0 <__malloc_unlock>
 8005088:	e794      	b.n	8004fb4 <_malloc_r+0x20>
 800508a:	6005      	str	r5, [r0, #0]
 800508c:	e7d6      	b.n	800503c <_malloc_r+0xa8>
 800508e:	bf00      	nop
 8005090:	2000035c 	.word	0x2000035c

08005094 <__malloc_lock>:
 8005094:	4801      	ldr	r0, [pc, #4]	@ (800509c <__malloc_lock+0x8>)
 8005096:	f7ff bf00 	b.w	8004e9a <__retarget_lock_acquire_recursive>
 800509a:	bf00      	nop
 800509c:	20000354 	.word	0x20000354

080050a0 <__malloc_unlock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	@ (80050a8 <__malloc_unlock+0x8>)
 80050a2:	f7ff befb 	b.w	8004e9c <__retarget_lock_release_recursive>
 80050a6:	bf00      	nop
 80050a8:	20000354 	.word	0x20000354

080050ac <__ssputs_r>:
 80050ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	688e      	ldr	r6, [r1, #8]
 80050b2:	461f      	mov	r7, r3
 80050b4:	42be      	cmp	r6, r7
 80050b6:	680b      	ldr	r3, [r1, #0]
 80050b8:	4682      	mov	sl, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	4690      	mov	r8, r2
 80050be:	d82d      	bhi.n	800511c <__ssputs_r+0x70>
 80050c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050c8:	d026      	beq.n	8005118 <__ssputs_r+0x6c>
 80050ca:	6965      	ldr	r5, [r4, #20]
 80050cc:	6909      	ldr	r1, [r1, #16]
 80050ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050d2:	eba3 0901 	sub.w	r9, r3, r1
 80050d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050da:	1c7b      	adds	r3, r7, #1
 80050dc:	444b      	add	r3, r9
 80050de:	106d      	asrs	r5, r5, #1
 80050e0:	429d      	cmp	r5, r3
 80050e2:	bf38      	it	cc
 80050e4:	461d      	movcc	r5, r3
 80050e6:	0553      	lsls	r3, r2, #21
 80050e8:	d527      	bpl.n	800513a <__ssputs_r+0x8e>
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7ff ff52 	bl	8004f94 <_malloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	b360      	cbz	r0, 800514e <__ssputs_r+0xa2>
 80050f4:	6921      	ldr	r1, [r4, #16]
 80050f6:	464a      	mov	r2, r9
 80050f8:	f7ff fed1 	bl	8004e9e <memcpy>
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	6126      	str	r6, [r4, #16]
 800510a:	6165      	str	r5, [r4, #20]
 800510c:	444e      	add	r6, r9
 800510e:	eba5 0509 	sub.w	r5, r5, r9
 8005112:	6026      	str	r6, [r4, #0]
 8005114:	60a5      	str	r5, [r4, #8]
 8005116:	463e      	mov	r6, r7
 8005118:	42be      	cmp	r6, r7
 800511a:	d900      	bls.n	800511e <__ssputs_r+0x72>
 800511c:	463e      	mov	r6, r7
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	4632      	mov	r2, r6
 8005122:	4641      	mov	r1, r8
 8005124:	f000 fcf6 	bl	8005b14 <memmove>
 8005128:	68a3      	ldr	r3, [r4, #8]
 800512a:	1b9b      	subs	r3, r3, r6
 800512c:	60a3      	str	r3, [r4, #8]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	4433      	add	r3, r6
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	2000      	movs	r0, #0
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	462a      	mov	r2, r5
 800513c:	f000 fd36 	bl	8005bac <_realloc_r>
 8005140:	4606      	mov	r6, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d1e0      	bne.n	8005108 <__ssputs_r+0x5c>
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	4650      	mov	r0, sl
 800514a:	f7ff feb7 	bl	8004ebc <_free_r>
 800514e:	230c      	movs	r3, #12
 8005150:	f8ca 3000 	str.w	r3, [sl]
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515a:	81a3      	strh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e7e9      	b.n	8005136 <__ssputs_r+0x8a>
	...

08005164 <_svfiprintf_r>:
 8005164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005168:	4698      	mov	r8, r3
 800516a:	898b      	ldrh	r3, [r1, #12]
 800516c:	061b      	lsls	r3, r3, #24
 800516e:	b09d      	sub	sp, #116	@ 0x74
 8005170:	4607      	mov	r7, r0
 8005172:	460d      	mov	r5, r1
 8005174:	4614      	mov	r4, r2
 8005176:	d510      	bpl.n	800519a <_svfiprintf_r+0x36>
 8005178:	690b      	ldr	r3, [r1, #16]
 800517a:	b973      	cbnz	r3, 800519a <_svfiprintf_r+0x36>
 800517c:	2140      	movs	r1, #64	@ 0x40
 800517e:	f7ff ff09 	bl	8004f94 <_malloc_r>
 8005182:	6028      	str	r0, [r5, #0]
 8005184:	6128      	str	r0, [r5, #16]
 8005186:	b930      	cbnz	r0, 8005196 <_svfiprintf_r+0x32>
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	b01d      	add	sp, #116	@ 0x74
 8005192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005196:	2340      	movs	r3, #64	@ 0x40
 8005198:	616b      	str	r3, [r5, #20]
 800519a:	2300      	movs	r3, #0
 800519c:	9309      	str	r3, [sp, #36]	@ 0x24
 800519e:	2320      	movs	r3, #32
 80051a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051a8:	2330      	movs	r3, #48	@ 0x30
 80051aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005348 <_svfiprintf_r+0x1e4>
 80051ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051b2:	f04f 0901 	mov.w	r9, #1
 80051b6:	4623      	mov	r3, r4
 80051b8:	469a      	mov	sl, r3
 80051ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051be:	b10a      	cbz	r2, 80051c4 <_svfiprintf_r+0x60>
 80051c0:	2a25      	cmp	r2, #37	@ 0x25
 80051c2:	d1f9      	bne.n	80051b8 <_svfiprintf_r+0x54>
 80051c4:	ebba 0b04 	subs.w	fp, sl, r4
 80051c8:	d00b      	beq.n	80051e2 <_svfiprintf_r+0x7e>
 80051ca:	465b      	mov	r3, fp
 80051cc:	4622      	mov	r2, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ff6b 	bl	80050ac <__ssputs_r>
 80051d6:	3001      	adds	r0, #1
 80051d8:	f000 80a7 	beq.w	800532a <_svfiprintf_r+0x1c6>
 80051dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051de:	445a      	add	r2, fp
 80051e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e2:	f89a 3000 	ldrb.w	r3, [sl]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 809f 	beq.w	800532a <_svfiprintf_r+0x1c6>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295
 80051f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f6:	f10a 0a01 	add.w	sl, sl, #1
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	9307      	str	r3, [sp, #28]
 80051fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005202:	931a      	str	r3, [sp, #104]	@ 0x68
 8005204:	4654      	mov	r4, sl
 8005206:	2205      	movs	r2, #5
 8005208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520c:	484e      	ldr	r0, [pc, #312]	@ (8005348 <_svfiprintf_r+0x1e4>)
 800520e:	f7fa ffef 	bl	80001f0 <memchr>
 8005212:	9a04      	ldr	r2, [sp, #16]
 8005214:	b9d8      	cbnz	r0, 800524e <_svfiprintf_r+0xea>
 8005216:	06d0      	lsls	r0, r2, #27
 8005218:	bf44      	itt	mi
 800521a:	2320      	movmi	r3, #32
 800521c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005220:	0711      	lsls	r1, r2, #28
 8005222:	bf44      	itt	mi
 8005224:	232b      	movmi	r3, #43	@ 0x2b
 8005226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800522a:	f89a 3000 	ldrb.w	r3, [sl]
 800522e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005230:	d015      	beq.n	800525e <_svfiprintf_r+0xfa>
 8005232:	9a07      	ldr	r2, [sp, #28]
 8005234:	4654      	mov	r4, sl
 8005236:	2000      	movs	r0, #0
 8005238:	f04f 0c0a 	mov.w	ip, #10
 800523c:	4621      	mov	r1, r4
 800523e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005242:	3b30      	subs	r3, #48	@ 0x30
 8005244:	2b09      	cmp	r3, #9
 8005246:	d94b      	bls.n	80052e0 <_svfiprintf_r+0x17c>
 8005248:	b1b0      	cbz	r0, 8005278 <_svfiprintf_r+0x114>
 800524a:	9207      	str	r2, [sp, #28]
 800524c:	e014      	b.n	8005278 <_svfiprintf_r+0x114>
 800524e:	eba0 0308 	sub.w	r3, r0, r8
 8005252:	fa09 f303 	lsl.w	r3, r9, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	9304      	str	r3, [sp, #16]
 800525a:	46a2      	mov	sl, r4
 800525c:	e7d2      	b.n	8005204 <_svfiprintf_r+0xa0>
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	1d19      	adds	r1, r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	9103      	str	r1, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfbb      	ittet	lt
 800526a:	425b      	neglt	r3, r3
 800526c:	f042 0202 	orrlt.w	r2, r2, #2
 8005270:	9307      	strge	r3, [sp, #28]
 8005272:	9307      	strlt	r3, [sp, #28]
 8005274:	bfb8      	it	lt
 8005276:	9204      	strlt	r2, [sp, #16]
 8005278:	7823      	ldrb	r3, [r4, #0]
 800527a:	2b2e      	cmp	r3, #46	@ 0x2e
 800527c:	d10a      	bne.n	8005294 <_svfiprintf_r+0x130>
 800527e:	7863      	ldrb	r3, [r4, #1]
 8005280:	2b2a      	cmp	r3, #42	@ 0x2a
 8005282:	d132      	bne.n	80052ea <_svfiprintf_r+0x186>
 8005284:	9b03      	ldr	r3, [sp, #12]
 8005286:	1d1a      	adds	r2, r3, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	9203      	str	r2, [sp, #12]
 800528c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005290:	3402      	adds	r4, #2
 8005292:	9305      	str	r3, [sp, #20]
 8005294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005358 <_svfiprintf_r+0x1f4>
 8005298:	7821      	ldrb	r1, [r4, #0]
 800529a:	2203      	movs	r2, #3
 800529c:	4650      	mov	r0, sl
 800529e:	f7fa ffa7 	bl	80001f0 <memchr>
 80052a2:	b138      	cbz	r0, 80052b4 <_svfiprintf_r+0x150>
 80052a4:	9b04      	ldr	r3, [sp, #16]
 80052a6:	eba0 000a 	sub.w	r0, r0, sl
 80052aa:	2240      	movs	r2, #64	@ 0x40
 80052ac:	4082      	lsls	r2, r0
 80052ae:	4313      	orrs	r3, r2
 80052b0:	3401      	adds	r4, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b8:	4824      	ldr	r0, [pc, #144]	@ (800534c <_svfiprintf_r+0x1e8>)
 80052ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052be:	2206      	movs	r2, #6
 80052c0:	f7fa ff96 	bl	80001f0 <memchr>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d036      	beq.n	8005336 <_svfiprintf_r+0x1d2>
 80052c8:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <_svfiprintf_r+0x1ec>)
 80052ca:	bb1b      	cbnz	r3, 8005314 <_svfiprintf_r+0x1b0>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	3307      	adds	r3, #7
 80052d0:	f023 0307 	bic.w	r3, r3, #7
 80052d4:	3308      	adds	r3, #8
 80052d6:	9303      	str	r3, [sp, #12]
 80052d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052da:	4433      	add	r3, r6
 80052dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80052de:	e76a      	b.n	80051b6 <_svfiprintf_r+0x52>
 80052e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052e4:	460c      	mov	r4, r1
 80052e6:	2001      	movs	r0, #1
 80052e8:	e7a8      	b.n	800523c <_svfiprintf_r+0xd8>
 80052ea:	2300      	movs	r3, #0
 80052ec:	3401      	adds	r4, #1
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	4619      	mov	r1, r3
 80052f2:	f04f 0c0a 	mov.w	ip, #10
 80052f6:	4620      	mov	r0, r4
 80052f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052fc:	3a30      	subs	r2, #48	@ 0x30
 80052fe:	2a09      	cmp	r2, #9
 8005300:	d903      	bls.n	800530a <_svfiprintf_r+0x1a6>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0c6      	beq.n	8005294 <_svfiprintf_r+0x130>
 8005306:	9105      	str	r1, [sp, #20]
 8005308:	e7c4      	b.n	8005294 <_svfiprintf_r+0x130>
 800530a:	fb0c 2101 	mla	r1, ip, r1, r2
 800530e:	4604      	mov	r4, r0
 8005310:	2301      	movs	r3, #1
 8005312:	e7f0      	b.n	80052f6 <_svfiprintf_r+0x192>
 8005314:	ab03      	add	r3, sp, #12
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	462a      	mov	r2, r5
 800531a:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <_svfiprintf_r+0x1f0>)
 800531c:	a904      	add	r1, sp, #16
 800531e:	4638      	mov	r0, r7
 8005320:	f3af 8000 	nop.w
 8005324:	1c42      	adds	r2, r0, #1
 8005326:	4606      	mov	r6, r0
 8005328:	d1d6      	bne.n	80052d8 <_svfiprintf_r+0x174>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	065b      	lsls	r3, r3, #25
 800532e:	f53f af2d 	bmi.w	800518c <_svfiprintf_r+0x28>
 8005332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005334:	e72c      	b.n	8005190 <_svfiprintf_r+0x2c>
 8005336:	ab03      	add	r3, sp, #12
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	462a      	mov	r2, r5
 800533c:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <_svfiprintf_r+0x1f0>)
 800533e:	a904      	add	r1, sp, #16
 8005340:	4638      	mov	r0, r7
 8005342:	f000 f9bb 	bl	80056bc <_printf_i>
 8005346:	e7ed      	b.n	8005324 <_svfiprintf_r+0x1c0>
 8005348:	08005e8c 	.word	0x08005e8c
 800534c:	08005e96 	.word	0x08005e96
 8005350:	00000000 	.word	0x00000000
 8005354:	080050ad 	.word	0x080050ad
 8005358:	08005e92 	.word	0x08005e92

0800535c <__sfputc_r>:
 800535c:	6893      	ldr	r3, [r2, #8]
 800535e:	3b01      	subs	r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	b410      	push	{r4}
 8005364:	6093      	str	r3, [r2, #8]
 8005366:	da08      	bge.n	800537a <__sfputc_r+0x1e>
 8005368:	6994      	ldr	r4, [r2, #24]
 800536a:	42a3      	cmp	r3, r4
 800536c:	db01      	blt.n	8005372 <__sfputc_r+0x16>
 800536e:	290a      	cmp	r1, #10
 8005370:	d103      	bne.n	800537a <__sfputc_r+0x1e>
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	f7ff bc82 	b.w	8004c7e <__swbuf_r>
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	1c58      	adds	r0, r3, #1
 800537e:	6010      	str	r0, [r2, #0]
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	4608      	mov	r0, r1
 8005384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005388:	4770      	bx	lr

0800538a <__sfputs_r>:
 800538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	4614      	mov	r4, r2
 8005392:	18d5      	adds	r5, r2, r3
 8005394:	42ac      	cmp	r4, r5
 8005396:	d101      	bne.n	800539c <__sfputs_r+0x12>
 8005398:	2000      	movs	r0, #0
 800539a:	e007      	b.n	80053ac <__sfputs_r+0x22>
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	463a      	mov	r2, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffda 	bl	800535c <__sfputc_r>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d1f3      	bne.n	8005394 <__sfputs_r+0xa>
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053b0 <_vfiprintf_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	460d      	mov	r5, r1
 80053b6:	b09d      	sub	sp, #116	@ 0x74
 80053b8:	4614      	mov	r4, r2
 80053ba:	4698      	mov	r8, r3
 80053bc:	4606      	mov	r6, r0
 80053be:	b118      	cbz	r0, 80053c8 <_vfiprintf_r+0x18>
 80053c0:	6a03      	ldr	r3, [r0, #32]
 80053c2:	b90b      	cbnz	r3, 80053c8 <_vfiprintf_r+0x18>
 80053c4:	f7ff fb50 	bl	8004a68 <__sinit>
 80053c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053d6:	f7ff fd60 	bl	8004e9a <__retarget_lock_acquire_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	071b      	lsls	r3, r3, #28
 80053de:	d501      	bpl.n	80053e4 <_vfiprintf_r+0x34>
 80053e0:	692b      	ldr	r3, [r5, #16]
 80053e2:	b99b      	cbnz	r3, 800540c <_vfiprintf_r+0x5c>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff fc88 	bl	8004cfc <__swsetup_r>
 80053ec:	b170      	cbz	r0, 800540c <_vfiprintf_r+0x5c>
 80053ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053f0:	07dc      	lsls	r4, r3, #31
 80053f2:	d504      	bpl.n	80053fe <_vfiprintf_r+0x4e>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b01d      	add	sp, #116	@ 0x74
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	0598      	lsls	r0, r3, #22
 8005402:	d4f7      	bmi.n	80053f4 <_vfiprintf_r+0x44>
 8005404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005406:	f7ff fd49 	bl	8004e9c <__retarget_lock_release_recursive>
 800540a:	e7f3      	b.n	80053f4 <_vfiprintf_r+0x44>
 800540c:	2300      	movs	r3, #0
 800540e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005410:	2320      	movs	r3, #32
 8005412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005416:	f8cd 800c 	str.w	r8, [sp, #12]
 800541a:	2330      	movs	r3, #48	@ 0x30
 800541c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055cc <_vfiprintf_r+0x21c>
 8005420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005424:	f04f 0901 	mov.w	r9, #1
 8005428:	4623      	mov	r3, r4
 800542a:	469a      	mov	sl, r3
 800542c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005430:	b10a      	cbz	r2, 8005436 <_vfiprintf_r+0x86>
 8005432:	2a25      	cmp	r2, #37	@ 0x25
 8005434:	d1f9      	bne.n	800542a <_vfiprintf_r+0x7a>
 8005436:	ebba 0b04 	subs.w	fp, sl, r4
 800543a:	d00b      	beq.n	8005454 <_vfiprintf_r+0xa4>
 800543c:	465b      	mov	r3, fp
 800543e:	4622      	mov	r2, r4
 8005440:	4629      	mov	r1, r5
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffa1 	bl	800538a <__sfputs_r>
 8005448:	3001      	adds	r0, #1
 800544a:	f000 80a7 	beq.w	800559c <_vfiprintf_r+0x1ec>
 800544e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005450:	445a      	add	r2, fp
 8005452:	9209      	str	r2, [sp, #36]	@ 0x24
 8005454:	f89a 3000 	ldrb.w	r3, [sl]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 809f 	beq.w	800559c <_vfiprintf_r+0x1ec>
 800545e:	2300      	movs	r3, #0
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005468:	f10a 0a01 	add.w	sl, sl, #1
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005474:	931a      	str	r3, [sp, #104]	@ 0x68
 8005476:	4654      	mov	r4, sl
 8005478:	2205      	movs	r2, #5
 800547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547e:	4853      	ldr	r0, [pc, #332]	@ (80055cc <_vfiprintf_r+0x21c>)
 8005480:	f7fa feb6 	bl	80001f0 <memchr>
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	b9d8      	cbnz	r0, 80054c0 <_vfiprintf_r+0x110>
 8005488:	06d1      	lsls	r1, r2, #27
 800548a:	bf44      	itt	mi
 800548c:	2320      	movmi	r3, #32
 800548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005492:	0713      	lsls	r3, r2, #28
 8005494:	bf44      	itt	mi
 8005496:	232b      	movmi	r3, #43	@ 0x2b
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800549c:	f89a 3000 	ldrb.w	r3, [sl]
 80054a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80054a2:	d015      	beq.n	80054d0 <_vfiprintf_r+0x120>
 80054a4:	9a07      	ldr	r2, [sp, #28]
 80054a6:	4654      	mov	r4, sl
 80054a8:	2000      	movs	r0, #0
 80054aa:	f04f 0c0a 	mov.w	ip, #10
 80054ae:	4621      	mov	r1, r4
 80054b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b4:	3b30      	subs	r3, #48	@ 0x30
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d94b      	bls.n	8005552 <_vfiprintf_r+0x1a2>
 80054ba:	b1b0      	cbz	r0, 80054ea <_vfiprintf_r+0x13a>
 80054bc:	9207      	str	r2, [sp, #28]
 80054be:	e014      	b.n	80054ea <_vfiprintf_r+0x13a>
 80054c0:	eba0 0308 	sub.w	r3, r0, r8
 80054c4:	fa09 f303 	lsl.w	r3, r9, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	46a2      	mov	sl, r4
 80054ce:	e7d2      	b.n	8005476 <_vfiprintf_r+0xc6>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d19      	adds	r1, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfbb      	ittet	lt
 80054dc:	425b      	neglt	r3, r3
 80054de:	f042 0202 	orrlt.w	r2, r2, #2
 80054e2:	9307      	strge	r3, [sp, #28]
 80054e4:	9307      	strlt	r3, [sp, #28]
 80054e6:	bfb8      	it	lt
 80054e8:	9204      	strlt	r2, [sp, #16]
 80054ea:	7823      	ldrb	r3, [r4, #0]
 80054ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80054ee:	d10a      	bne.n	8005506 <_vfiprintf_r+0x156>
 80054f0:	7863      	ldrb	r3, [r4, #1]
 80054f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f4:	d132      	bne.n	800555c <_vfiprintf_r+0x1ac>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	9203      	str	r2, [sp, #12]
 80054fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005502:	3402      	adds	r4, #2
 8005504:	9305      	str	r3, [sp, #20]
 8005506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80055dc <_vfiprintf_r+0x22c>
 800550a:	7821      	ldrb	r1, [r4, #0]
 800550c:	2203      	movs	r2, #3
 800550e:	4650      	mov	r0, sl
 8005510:	f7fa fe6e 	bl	80001f0 <memchr>
 8005514:	b138      	cbz	r0, 8005526 <_vfiprintf_r+0x176>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	eba0 000a 	sub.w	r0, r0, sl
 800551c:	2240      	movs	r2, #64	@ 0x40
 800551e:	4082      	lsls	r2, r0
 8005520:	4313      	orrs	r3, r2
 8005522:	3401      	adds	r4, #1
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552a:	4829      	ldr	r0, [pc, #164]	@ (80055d0 <_vfiprintf_r+0x220>)
 800552c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005530:	2206      	movs	r2, #6
 8005532:	f7fa fe5d 	bl	80001f0 <memchr>
 8005536:	2800      	cmp	r0, #0
 8005538:	d03f      	beq.n	80055ba <_vfiprintf_r+0x20a>
 800553a:	4b26      	ldr	r3, [pc, #152]	@ (80055d4 <_vfiprintf_r+0x224>)
 800553c:	bb1b      	cbnz	r3, 8005586 <_vfiprintf_r+0x1d6>
 800553e:	9b03      	ldr	r3, [sp, #12]
 8005540:	3307      	adds	r3, #7
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	3308      	adds	r3, #8
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800554c:	443b      	add	r3, r7
 800554e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005550:	e76a      	b.n	8005428 <_vfiprintf_r+0x78>
 8005552:	fb0c 3202 	mla	r2, ip, r2, r3
 8005556:	460c      	mov	r4, r1
 8005558:	2001      	movs	r0, #1
 800555a:	e7a8      	b.n	80054ae <_vfiprintf_r+0xfe>
 800555c:	2300      	movs	r3, #0
 800555e:	3401      	adds	r4, #1
 8005560:	9305      	str	r3, [sp, #20]
 8005562:	4619      	mov	r1, r3
 8005564:	f04f 0c0a 	mov.w	ip, #10
 8005568:	4620      	mov	r0, r4
 800556a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800556e:	3a30      	subs	r2, #48	@ 0x30
 8005570:	2a09      	cmp	r2, #9
 8005572:	d903      	bls.n	800557c <_vfiprintf_r+0x1cc>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0c6      	beq.n	8005506 <_vfiprintf_r+0x156>
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	e7c4      	b.n	8005506 <_vfiprintf_r+0x156>
 800557c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005580:	4604      	mov	r4, r0
 8005582:	2301      	movs	r3, #1
 8005584:	e7f0      	b.n	8005568 <_vfiprintf_r+0x1b8>
 8005586:	ab03      	add	r3, sp, #12
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	462a      	mov	r2, r5
 800558c:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <_vfiprintf_r+0x228>)
 800558e:	a904      	add	r1, sp, #16
 8005590:	4630      	mov	r0, r6
 8005592:	f3af 8000 	nop.w
 8005596:	4607      	mov	r7, r0
 8005598:	1c78      	adds	r0, r7, #1
 800559a:	d1d6      	bne.n	800554a <_vfiprintf_r+0x19a>
 800559c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800559e:	07d9      	lsls	r1, r3, #31
 80055a0:	d405      	bmi.n	80055ae <_vfiprintf_r+0x1fe>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	059a      	lsls	r2, r3, #22
 80055a6:	d402      	bmi.n	80055ae <_vfiprintf_r+0x1fe>
 80055a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055aa:	f7ff fc77 	bl	8004e9c <__retarget_lock_release_recursive>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	065b      	lsls	r3, r3, #25
 80055b2:	f53f af1f 	bmi.w	80053f4 <_vfiprintf_r+0x44>
 80055b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b8:	e71e      	b.n	80053f8 <_vfiprintf_r+0x48>
 80055ba:	ab03      	add	r3, sp, #12
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	462a      	mov	r2, r5
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <_vfiprintf_r+0x228>)
 80055c2:	a904      	add	r1, sp, #16
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f879 	bl	80056bc <_printf_i>
 80055ca:	e7e4      	b.n	8005596 <_vfiprintf_r+0x1e6>
 80055cc:	08005e8c 	.word	0x08005e8c
 80055d0:	08005e96 	.word	0x08005e96
 80055d4:	00000000 	.word	0x00000000
 80055d8:	0800538b 	.word	0x0800538b
 80055dc:	08005e92 	.word	0x08005e92

080055e0 <_printf_common>:
 80055e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	4616      	mov	r6, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	688a      	ldr	r2, [r1, #8]
 80055ea:	690b      	ldr	r3, [r1, #16]
 80055ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bfb8      	it	lt
 80055f4:	4613      	movlt	r3, r2
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055fc:	4607      	mov	r7, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	b10a      	cbz	r2, 8005606 <_printf_common+0x26>
 8005602:	3301      	adds	r3, #1
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	0699      	lsls	r1, r3, #26
 800560a:	bf42      	ittt	mi
 800560c:	6833      	ldrmi	r3, [r6, #0]
 800560e:	3302      	addmi	r3, #2
 8005610:	6033      	strmi	r3, [r6, #0]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	f015 0506 	ands.w	r5, r5, #6
 8005618:	d106      	bne.n	8005628 <_printf_common+0x48>
 800561a:	f104 0a19 	add.w	sl, r4, #25
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	6832      	ldr	r2, [r6, #0]
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	42ab      	cmp	r3, r5
 8005626:	dc26      	bgt.n	8005676 <_printf_common+0x96>
 8005628:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	3b00      	subs	r3, #0
 8005630:	bf18      	it	ne
 8005632:	2301      	movne	r3, #1
 8005634:	0692      	lsls	r2, r2, #26
 8005636:	d42b      	bmi.n	8005690 <_printf_common+0xb0>
 8005638:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800563c:	4641      	mov	r1, r8
 800563e:	4638      	mov	r0, r7
 8005640:	47c8      	blx	r9
 8005642:	3001      	adds	r0, #1
 8005644:	d01e      	beq.n	8005684 <_printf_common+0xa4>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	f003 0306 	and.w	r3, r3, #6
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf02      	ittt	eq
 8005652:	68e5      	ldreq	r5, [r4, #12]
 8005654:	6833      	ldreq	r3, [r6, #0]
 8005656:	1aed      	subeq	r5, r5, r3
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	bf0c      	ite	eq
 800565c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005660:	2500      	movne	r5, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfc4      	itt	gt
 8005666:	1a9b      	subgt	r3, r3, r2
 8005668:	18ed      	addgt	r5, r5, r3
 800566a:	2600      	movs	r6, #0
 800566c:	341a      	adds	r4, #26
 800566e:	42b5      	cmp	r5, r6
 8005670:	d11a      	bne.n	80056a8 <_printf_common+0xc8>
 8005672:	2000      	movs	r0, #0
 8005674:	e008      	b.n	8005688 <_printf_common+0xa8>
 8005676:	2301      	movs	r3, #1
 8005678:	4652      	mov	r2, sl
 800567a:	4641      	mov	r1, r8
 800567c:	4638      	mov	r0, r7
 800567e:	47c8      	blx	r9
 8005680:	3001      	adds	r0, #1
 8005682:	d103      	bne.n	800568c <_printf_common+0xac>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568c:	3501      	adds	r5, #1
 800568e:	e7c6      	b.n	800561e <_printf_common+0x3e>
 8005690:	18e1      	adds	r1, r4, r3
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	2030      	movs	r0, #48	@ 0x30
 8005696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800569a:	4422      	add	r2, r4
 800569c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056a4:	3302      	adds	r3, #2
 80056a6:	e7c7      	b.n	8005638 <_printf_common+0x58>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4622      	mov	r2, r4
 80056ac:	4641      	mov	r1, r8
 80056ae:	4638      	mov	r0, r7
 80056b0:	47c8      	blx	r9
 80056b2:	3001      	adds	r0, #1
 80056b4:	d0e6      	beq.n	8005684 <_printf_common+0xa4>
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7d9      	b.n	800566e <_printf_common+0x8e>
	...

080056bc <_printf_i>:
 80056bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	7e0f      	ldrb	r7, [r1, #24]
 80056c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056c4:	2f78      	cmp	r7, #120	@ 0x78
 80056c6:	4691      	mov	r9, r2
 80056c8:	4680      	mov	r8, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	469a      	mov	sl, r3
 80056ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056d2:	d807      	bhi.n	80056e4 <_printf_i+0x28>
 80056d4:	2f62      	cmp	r7, #98	@ 0x62
 80056d6:	d80a      	bhi.n	80056ee <_printf_i+0x32>
 80056d8:	2f00      	cmp	r7, #0
 80056da:	f000 80d1 	beq.w	8005880 <_printf_i+0x1c4>
 80056de:	2f58      	cmp	r7, #88	@ 0x58
 80056e0:	f000 80b8 	beq.w	8005854 <_printf_i+0x198>
 80056e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056ec:	e03a      	b.n	8005764 <_printf_i+0xa8>
 80056ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056f2:	2b15      	cmp	r3, #21
 80056f4:	d8f6      	bhi.n	80056e4 <_printf_i+0x28>
 80056f6:	a101      	add	r1, pc, #4	@ (adr r1, 80056fc <_printf_i+0x40>)
 80056f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056fc:	08005755 	.word	0x08005755
 8005700:	08005769 	.word	0x08005769
 8005704:	080056e5 	.word	0x080056e5
 8005708:	080056e5 	.word	0x080056e5
 800570c:	080056e5 	.word	0x080056e5
 8005710:	080056e5 	.word	0x080056e5
 8005714:	08005769 	.word	0x08005769
 8005718:	080056e5 	.word	0x080056e5
 800571c:	080056e5 	.word	0x080056e5
 8005720:	080056e5 	.word	0x080056e5
 8005724:	080056e5 	.word	0x080056e5
 8005728:	08005867 	.word	0x08005867
 800572c:	08005793 	.word	0x08005793
 8005730:	08005821 	.word	0x08005821
 8005734:	080056e5 	.word	0x080056e5
 8005738:	080056e5 	.word	0x080056e5
 800573c:	08005889 	.word	0x08005889
 8005740:	080056e5 	.word	0x080056e5
 8005744:	08005793 	.word	0x08005793
 8005748:	080056e5 	.word	0x080056e5
 800574c:	080056e5 	.word	0x080056e5
 8005750:	08005829 	.word	0x08005829
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6032      	str	r2, [r6, #0]
 800575c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005764:	2301      	movs	r3, #1
 8005766:	e09c      	b.n	80058a2 <_printf_i+0x1e6>
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	6031      	str	r1, [r6, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	d501      	bpl.n	8005778 <_printf_i+0xbc>
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	e003      	b.n	8005780 <_printf_i+0xc4>
 8005778:	0645      	lsls	r5, r0, #25
 800577a:	d5fb      	bpl.n	8005774 <_printf_i+0xb8>
 800577c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005780:	2d00      	cmp	r5, #0
 8005782:	da03      	bge.n	800578c <_printf_i+0xd0>
 8005784:	232d      	movs	r3, #45	@ 0x2d
 8005786:	426d      	negs	r5, r5
 8005788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800578c:	4858      	ldr	r0, [pc, #352]	@ (80058f0 <_printf_i+0x234>)
 800578e:	230a      	movs	r3, #10
 8005790:	e011      	b.n	80057b6 <_printf_i+0xfa>
 8005792:	6821      	ldr	r1, [r4, #0]
 8005794:	6833      	ldr	r3, [r6, #0]
 8005796:	0608      	lsls	r0, r1, #24
 8005798:	f853 5b04 	ldr.w	r5, [r3], #4
 800579c:	d402      	bmi.n	80057a4 <_printf_i+0xe8>
 800579e:	0649      	lsls	r1, r1, #25
 80057a0:	bf48      	it	mi
 80057a2:	b2ad      	uxthmi	r5, r5
 80057a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057a6:	4852      	ldr	r0, [pc, #328]	@ (80058f0 <_printf_i+0x234>)
 80057a8:	6033      	str	r3, [r6, #0]
 80057aa:	bf14      	ite	ne
 80057ac:	230a      	movne	r3, #10
 80057ae:	2308      	moveq	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057b6:	6866      	ldr	r6, [r4, #4]
 80057b8:	60a6      	str	r6, [r4, #8]
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	db05      	blt.n	80057ca <_printf_i+0x10e>
 80057be:	6821      	ldr	r1, [r4, #0]
 80057c0:	432e      	orrs	r6, r5
 80057c2:	f021 0104 	bic.w	r1, r1, #4
 80057c6:	6021      	str	r1, [r4, #0]
 80057c8:	d04b      	beq.n	8005862 <_printf_i+0x1a6>
 80057ca:	4616      	mov	r6, r2
 80057cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80057d0:	fb03 5711 	mls	r7, r3, r1, r5
 80057d4:	5dc7      	ldrb	r7, [r0, r7]
 80057d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057da:	462f      	mov	r7, r5
 80057dc:	42bb      	cmp	r3, r7
 80057de:	460d      	mov	r5, r1
 80057e0:	d9f4      	bls.n	80057cc <_printf_i+0x110>
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d10b      	bne.n	80057fe <_printf_i+0x142>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	07df      	lsls	r7, r3, #31
 80057ea:	d508      	bpl.n	80057fe <_printf_i+0x142>
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	6861      	ldr	r1, [r4, #4]
 80057f0:	4299      	cmp	r1, r3
 80057f2:	bfde      	ittt	le
 80057f4:	2330      	movle	r3, #48	@ 0x30
 80057f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057fe:	1b92      	subs	r2, r2, r6
 8005800:	6122      	str	r2, [r4, #16]
 8005802:	f8cd a000 	str.w	sl, [sp]
 8005806:	464b      	mov	r3, r9
 8005808:	aa03      	add	r2, sp, #12
 800580a:	4621      	mov	r1, r4
 800580c:	4640      	mov	r0, r8
 800580e:	f7ff fee7 	bl	80055e0 <_printf_common>
 8005812:	3001      	adds	r0, #1
 8005814:	d14a      	bne.n	80058ac <_printf_i+0x1f0>
 8005816:	f04f 30ff 	mov.w	r0, #4294967295
 800581a:	b004      	add	sp, #16
 800581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	f043 0320 	orr.w	r3, r3, #32
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	4832      	ldr	r0, [pc, #200]	@ (80058f4 <_printf_i+0x238>)
 800582a:	2778      	movs	r7, #120	@ 0x78
 800582c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	6831      	ldr	r1, [r6, #0]
 8005834:	061f      	lsls	r7, r3, #24
 8005836:	f851 5b04 	ldr.w	r5, [r1], #4
 800583a:	d402      	bmi.n	8005842 <_printf_i+0x186>
 800583c:	065f      	lsls	r7, r3, #25
 800583e:	bf48      	it	mi
 8005840:	b2ad      	uxthmi	r5, r5
 8005842:	6031      	str	r1, [r6, #0]
 8005844:	07d9      	lsls	r1, r3, #31
 8005846:	bf44      	itt	mi
 8005848:	f043 0320 	orrmi.w	r3, r3, #32
 800584c:	6023      	strmi	r3, [r4, #0]
 800584e:	b11d      	cbz	r5, 8005858 <_printf_i+0x19c>
 8005850:	2310      	movs	r3, #16
 8005852:	e7ad      	b.n	80057b0 <_printf_i+0xf4>
 8005854:	4826      	ldr	r0, [pc, #152]	@ (80058f0 <_printf_i+0x234>)
 8005856:	e7e9      	b.n	800582c <_printf_i+0x170>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f023 0320 	bic.w	r3, r3, #32
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	e7f6      	b.n	8005850 <_printf_i+0x194>
 8005862:	4616      	mov	r6, r2
 8005864:	e7bd      	b.n	80057e2 <_printf_i+0x126>
 8005866:	6833      	ldr	r3, [r6, #0]
 8005868:	6825      	ldr	r5, [r4, #0]
 800586a:	6961      	ldr	r1, [r4, #20]
 800586c:	1d18      	adds	r0, r3, #4
 800586e:	6030      	str	r0, [r6, #0]
 8005870:	062e      	lsls	r6, r5, #24
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	d501      	bpl.n	800587a <_printf_i+0x1be>
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	e002      	b.n	8005880 <_printf_i+0x1c4>
 800587a:	0668      	lsls	r0, r5, #25
 800587c:	d5fb      	bpl.n	8005876 <_printf_i+0x1ba>
 800587e:	8019      	strh	r1, [r3, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	4616      	mov	r6, r2
 8005886:	e7bc      	b.n	8005802 <_printf_i+0x146>
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	6032      	str	r2, [r6, #0]
 800588e:	681e      	ldr	r6, [r3, #0]
 8005890:	6862      	ldr	r2, [r4, #4]
 8005892:	2100      	movs	r1, #0
 8005894:	4630      	mov	r0, r6
 8005896:	f7fa fcab 	bl	80001f0 <memchr>
 800589a:	b108      	cbz	r0, 80058a0 <_printf_i+0x1e4>
 800589c:	1b80      	subs	r0, r0, r6
 800589e:	6060      	str	r0, [r4, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	2300      	movs	r3, #0
 80058a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058aa:	e7aa      	b.n	8005802 <_printf_i+0x146>
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	4632      	mov	r2, r6
 80058b0:	4649      	mov	r1, r9
 80058b2:	4640      	mov	r0, r8
 80058b4:	47d0      	blx	sl
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0ad      	beq.n	8005816 <_printf_i+0x15a>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	079b      	lsls	r3, r3, #30
 80058be:	d413      	bmi.n	80058e8 <_printf_i+0x22c>
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	4298      	cmp	r0, r3
 80058c6:	bfb8      	it	lt
 80058c8:	4618      	movlt	r0, r3
 80058ca:	e7a6      	b.n	800581a <_printf_i+0x15e>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4632      	mov	r2, r6
 80058d0:	4649      	mov	r1, r9
 80058d2:	4640      	mov	r0, r8
 80058d4:	47d0      	blx	sl
 80058d6:	3001      	adds	r0, #1
 80058d8:	d09d      	beq.n	8005816 <_printf_i+0x15a>
 80058da:	3501      	adds	r5, #1
 80058dc:	68e3      	ldr	r3, [r4, #12]
 80058de:	9903      	ldr	r1, [sp, #12]
 80058e0:	1a5b      	subs	r3, r3, r1
 80058e2:	42ab      	cmp	r3, r5
 80058e4:	dcf2      	bgt.n	80058cc <_printf_i+0x210>
 80058e6:	e7eb      	b.n	80058c0 <_printf_i+0x204>
 80058e8:	2500      	movs	r5, #0
 80058ea:	f104 0619 	add.w	r6, r4, #25
 80058ee:	e7f5      	b.n	80058dc <_printf_i+0x220>
 80058f0:	08005e9d 	.word	0x08005e9d
 80058f4:	08005eae 	.word	0x08005eae

080058f8 <__sflush_r>:
 80058f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005900:	0716      	lsls	r6, r2, #28
 8005902:	4605      	mov	r5, r0
 8005904:	460c      	mov	r4, r1
 8005906:	d454      	bmi.n	80059b2 <__sflush_r+0xba>
 8005908:	684b      	ldr	r3, [r1, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	dc02      	bgt.n	8005914 <__sflush_r+0x1c>
 800590e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	dd48      	ble.n	80059a6 <__sflush_r+0xae>
 8005914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005916:	2e00      	cmp	r6, #0
 8005918:	d045      	beq.n	80059a6 <__sflush_r+0xae>
 800591a:	2300      	movs	r3, #0
 800591c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005920:	682f      	ldr	r7, [r5, #0]
 8005922:	6a21      	ldr	r1, [r4, #32]
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	d030      	beq.n	800598a <__sflush_r+0x92>
 8005928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	0759      	lsls	r1, r3, #29
 800592e:	d505      	bpl.n	800593c <__sflush_r+0x44>
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005936:	b10b      	cbz	r3, 800593c <__sflush_r+0x44>
 8005938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005940:	6a21      	ldr	r1, [r4, #32]
 8005942:	4628      	mov	r0, r5
 8005944:	47b0      	blx	r6
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	d106      	bne.n	800595a <__sflush_r+0x62>
 800594c:	6829      	ldr	r1, [r5, #0]
 800594e:	291d      	cmp	r1, #29
 8005950:	d82b      	bhi.n	80059aa <__sflush_r+0xb2>
 8005952:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <__sflush_r+0x104>)
 8005954:	40ca      	lsrs	r2, r1
 8005956:	07d6      	lsls	r6, r2, #31
 8005958:	d527      	bpl.n	80059aa <__sflush_r+0xb2>
 800595a:	2200      	movs	r2, #0
 800595c:	6062      	str	r2, [r4, #4]
 800595e:	04d9      	lsls	r1, r3, #19
 8005960:	6922      	ldr	r2, [r4, #16]
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	d504      	bpl.n	8005970 <__sflush_r+0x78>
 8005966:	1c42      	adds	r2, r0, #1
 8005968:	d101      	bne.n	800596e <__sflush_r+0x76>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	b903      	cbnz	r3, 8005970 <__sflush_r+0x78>
 800596e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005972:	602f      	str	r7, [r5, #0]
 8005974:	b1b9      	cbz	r1, 80059a6 <__sflush_r+0xae>
 8005976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800597a:	4299      	cmp	r1, r3
 800597c:	d002      	beq.n	8005984 <__sflush_r+0x8c>
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fa9c 	bl	8004ebc <_free_r>
 8005984:	2300      	movs	r3, #0
 8005986:	6363      	str	r3, [r4, #52]	@ 0x34
 8005988:	e00d      	b.n	80059a6 <__sflush_r+0xae>
 800598a:	2301      	movs	r3, #1
 800598c:	4628      	mov	r0, r5
 800598e:	47b0      	blx	r6
 8005990:	4602      	mov	r2, r0
 8005992:	1c50      	adds	r0, r2, #1
 8005994:	d1c9      	bne.n	800592a <__sflush_r+0x32>
 8005996:	682b      	ldr	r3, [r5, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0c6      	beq.n	800592a <__sflush_r+0x32>
 800599c:	2b1d      	cmp	r3, #29
 800599e:	d001      	beq.n	80059a4 <__sflush_r+0xac>
 80059a0:	2b16      	cmp	r3, #22
 80059a2:	d11e      	bne.n	80059e2 <__sflush_r+0xea>
 80059a4:	602f      	str	r7, [r5, #0]
 80059a6:	2000      	movs	r0, #0
 80059a8:	e022      	b.n	80059f0 <__sflush_r+0xf8>
 80059aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ae:	b21b      	sxth	r3, r3
 80059b0:	e01b      	b.n	80059ea <__sflush_r+0xf2>
 80059b2:	690f      	ldr	r7, [r1, #16]
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	d0f6      	beq.n	80059a6 <__sflush_r+0xae>
 80059b8:	0793      	lsls	r3, r2, #30
 80059ba:	680e      	ldr	r6, [r1, #0]
 80059bc:	bf08      	it	eq
 80059be:	694b      	ldreq	r3, [r1, #20]
 80059c0:	600f      	str	r7, [r1, #0]
 80059c2:	bf18      	it	ne
 80059c4:	2300      	movne	r3, #0
 80059c6:	eba6 0807 	sub.w	r8, r6, r7
 80059ca:	608b      	str	r3, [r1, #8]
 80059cc:	f1b8 0f00 	cmp.w	r8, #0
 80059d0:	dde9      	ble.n	80059a6 <__sflush_r+0xae>
 80059d2:	6a21      	ldr	r1, [r4, #32]
 80059d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80059d6:	4643      	mov	r3, r8
 80059d8:	463a      	mov	r2, r7
 80059da:	4628      	mov	r0, r5
 80059dc:	47b0      	blx	r6
 80059de:	2800      	cmp	r0, #0
 80059e0:	dc08      	bgt.n	80059f4 <__sflush_r+0xfc>
 80059e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	4407      	add	r7, r0
 80059f6:	eba8 0800 	sub.w	r8, r8, r0
 80059fa:	e7e7      	b.n	80059cc <__sflush_r+0xd4>
 80059fc:	20400001 	.word	0x20400001

08005a00 <_fflush_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	690b      	ldr	r3, [r1, #16]
 8005a04:	4605      	mov	r5, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	b913      	cbnz	r3, 8005a10 <_fflush_r+0x10>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	b118      	cbz	r0, 8005a1a <_fflush_r+0x1a>
 8005a12:	6a03      	ldr	r3, [r0, #32]
 8005a14:	b90b      	cbnz	r3, 8005a1a <_fflush_r+0x1a>
 8005a16:	f7ff f827 	bl	8004a68 <__sinit>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f3      	beq.n	8005a0a <_fflush_r+0xa>
 8005a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a24:	07d0      	lsls	r0, r2, #31
 8005a26:	d404      	bmi.n	8005a32 <_fflush_r+0x32>
 8005a28:	0599      	lsls	r1, r3, #22
 8005a2a:	d402      	bmi.n	8005a32 <_fflush_r+0x32>
 8005a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a2e:	f7ff fa34 	bl	8004e9a <__retarget_lock_acquire_recursive>
 8005a32:	4628      	mov	r0, r5
 8005a34:	4621      	mov	r1, r4
 8005a36:	f7ff ff5f 	bl	80058f8 <__sflush_r>
 8005a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a3c:	07da      	lsls	r2, r3, #31
 8005a3e:	4605      	mov	r5, r0
 8005a40:	d4e4      	bmi.n	8005a0c <_fflush_r+0xc>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	059b      	lsls	r3, r3, #22
 8005a46:	d4e1      	bmi.n	8005a0c <_fflush_r+0xc>
 8005a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a4a:	f7ff fa27 	bl	8004e9c <__retarget_lock_release_recursive>
 8005a4e:	e7dd      	b.n	8005a0c <_fflush_r+0xc>

08005a50 <__swhatbuf_r>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	460c      	mov	r4, r1
 8005a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	b096      	sub	sp, #88	@ 0x58
 8005a5c:	4615      	mov	r5, r2
 8005a5e:	461e      	mov	r6, r3
 8005a60:	da0d      	bge.n	8005a7e <__swhatbuf_r+0x2e>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	bf14      	ite	ne
 8005a6e:	2340      	movne	r3, #64	@ 0x40
 8005a70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a74:	2000      	movs	r0, #0
 8005a76:	6031      	str	r1, [r6, #0]
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	b016      	add	sp, #88	@ 0x58
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
 8005a7e:	466a      	mov	r2, sp
 8005a80:	f000 f862 	bl	8005b48 <_fstat_r>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	dbec      	blt.n	8005a62 <__swhatbuf_r+0x12>
 8005a88:	9901      	ldr	r1, [sp, #4]
 8005a8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a92:	4259      	negs	r1, r3
 8005a94:	4159      	adcs	r1, r3
 8005a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a9a:	e7eb      	b.n	8005a74 <__swhatbuf_r+0x24>

08005a9c <__smakebuf_r>:
 8005a9c:	898b      	ldrh	r3, [r1, #12]
 8005a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aa0:	079d      	lsls	r5, r3, #30
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	d507      	bpl.n	8005ab8 <__smakebuf_r+0x1c>
 8005aa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	6163      	str	r3, [r4, #20]
 8005ab4:	b003      	add	sp, #12
 8005ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab8:	ab01      	add	r3, sp, #4
 8005aba:	466a      	mov	r2, sp
 8005abc:	f7ff ffc8 	bl	8005a50 <__swhatbuf_r>
 8005ac0:	9f00      	ldr	r7, [sp, #0]
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff fa64 	bl	8004f94 <_malloc_r>
 8005acc:	b948      	cbnz	r0, 8005ae2 <__smakebuf_r+0x46>
 8005ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad2:	059a      	lsls	r2, r3, #22
 8005ad4:	d4ee      	bmi.n	8005ab4 <__smakebuf_r+0x18>
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	f043 0302 	orr.w	r3, r3, #2
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	e7e2      	b.n	8005aa8 <__smakebuf_r+0xc>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	6020      	str	r0, [r4, #0]
 8005ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aea:	81a3      	strh	r3, [r4, #12]
 8005aec:	9b01      	ldr	r3, [sp, #4]
 8005aee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005af2:	b15b      	cbz	r3, 8005b0c <__smakebuf_r+0x70>
 8005af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f837 	bl	8005b6c <_isatty_r>
 8005afe:	b128      	cbz	r0, 8005b0c <__smakebuf_r+0x70>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	431d      	orrs	r5, r3
 8005b10:	81a5      	strh	r5, [r4, #12]
 8005b12:	e7cf      	b.n	8005ab4 <__smakebuf_r+0x18>

08005b14 <memmove>:
 8005b14:	4288      	cmp	r0, r1
 8005b16:	b510      	push	{r4, lr}
 8005b18:	eb01 0402 	add.w	r4, r1, r2
 8005b1c:	d902      	bls.n	8005b24 <memmove+0x10>
 8005b1e:	4284      	cmp	r4, r0
 8005b20:	4623      	mov	r3, r4
 8005b22:	d807      	bhi.n	8005b34 <memmove+0x20>
 8005b24:	1e43      	subs	r3, r0, #1
 8005b26:	42a1      	cmp	r1, r4
 8005b28:	d008      	beq.n	8005b3c <memmove+0x28>
 8005b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b32:	e7f8      	b.n	8005b26 <memmove+0x12>
 8005b34:	4402      	add	r2, r0
 8005b36:	4601      	mov	r1, r0
 8005b38:	428a      	cmp	r2, r1
 8005b3a:	d100      	bne.n	8005b3e <memmove+0x2a>
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b46:	e7f7      	b.n	8005b38 <memmove+0x24>

08005b48 <_fstat_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d07      	ldr	r5, [pc, #28]	@ (8005b68 <_fstat_r+0x20>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	602b      	str	r3, [r5, #0]
 8005b56:	f7fb f9aa 	bl	8000eae <_fstat>
 8005b5a:	1c43      	adds	r3, r0, #1
 8005b5c:	d102      	bne.n	8005b64 <_fstat_r+0x1c>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	b103      	cbz	r3, 8005b64 <_fstat_r+0x1c>
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	bd38      	pop	{r3, r4, r5, pc}
 8005b66:	bf00      	nop
 8005b68:	20000350 	.word	0x20000350

08005b6c <_isatty_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d06      	ldr	r5, [pc, #24]	@ (8005b88 <_isatty_r+0x1c>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fb f9a9 	bl	8000ece <_isatty>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_isatty_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_isatty_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20000350 	.word	0x20000350

08005b8c <_sbrk_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	@ (8005ba8 <_sbrk_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fb f9b2 	bl	8000f00 <_sbrk>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_sbrk_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_sbrk_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20000350 	.word	0x20000350

08005bac <_realloc_r>:
 8005bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4614      	mov	r4, r2
 8005bb4:	460d      	mov	r5, r1
 8005bb6:	b921      	cbnz	r1, 8005bc2 <_realloc_r+0x16>
 8005bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	f7ff b9e9 	b.w	8004f94 <_malloc_r>
 8005bc2:	b92a      	cbnz	r2, 8005bd0 <_realloc_r+0x24>
 8005bc4:	f7ff f97a 	bl	8004ebc <_free_r>
 8005bc8:	4625      	mov	r5, r4
 8005bca:	4628      	mov	r0, r5
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	f000 f81a 	bl	8005c08 <_malloc_usable_size_r>
 8005bd4:	4284      	cmp	r4, r0
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	d802      	bhi.n	8005be0 <_realloc_r+0x34>
 8005bda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bde:	d8f4      	bhi.n	8005bca <_realloc_r+0x1e>
 8005be0:	4621      	mov	r1, r4
 8005be2:	4638      	mov	r0, r7
 8005be4:	f7ff f9d6 	bl	8004f94 <_malloc_r>
 8005be8:	4680      	mov	r8, r0
 8005bea:	b908      	cbnz	r0, 8005bf0 <_realloc_r+0x44>
 8005bec:	4645      	mov	r5, r8
 8005bee:	e7ec      	b.n	8005bca <_realloc_r+0x1e>
 8005bf0:	42b4      	cmp	r4, r6
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	bf28      	it	cs
 8005bf8:	4632      	movcs	r2, r6
 8005bfa:	f7ff f950 	bl	8004e9e <memcpy>
 8005bfe:	4629      	mov	r1, r5
 8005c00:	4638      	mov	r0, r7
 8005c02:	f7ff f95b 	bl	8004ebc <_free_r>
 8005c06:	e7f1      	b.n	8005bec <_realloc_r+0x40>

08005c08 <_malloc_usable_size_r>:
 8005c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0c:	1f18      	subs	r0, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfbc      	itt	lt
 8005c12:	580b      	ldrlt	r3, [r1, r0]
 8005c14:	18c0      	addlt	r0, r0, r3
 8005c16:	4770      	bx	lr

08005c18 <_init>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr

08005c24 <_fini>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr
