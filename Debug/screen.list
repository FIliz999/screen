
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005990  08005990  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005990  08005990  00006990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005998  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08005a00  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005a00  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c130  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201a  00000000  00000000  000131c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000151e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  00015d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cc6  00000000  00000000  00016586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df0b  00000000  00000000  0002e24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f503  00000000  00000000  0003c157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb65a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000cb6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ced44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005700 	.word	0x08005700

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005700 	.word	0x08005700

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b09a      	sub	sp, #104	@ 0x68
 8000584:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fd25 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f863 	bl	8000654 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f98f 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f963 	bl	800085c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000596:	f000 f92b 	bl	80007f0 <MX_SPI3_Init>
  MX_RTC_Init();
 800059a:	f000 f8c7 	bl	800072c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(hspi3);  // Initialisation de l'écran ILI9341
 800059e:	4c28      	ldr	r4, [pc, #160]	@ (8000640 <main+0xc0>)
 80005a0:	4668      	mov	r0, sp
 80005a2:	f104 0310 	add.w	r3, r4, #16
 80005a6:	2248      	movs	r2, #72	@ 0x48
 80005a8:	4619      	mov	r1, r3
 80005aa:	f004 f956 	bl	800485a <memcpy>
 80005ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005b2:	f000 fbf3 	bl	8000d9c <ILI9341_Init>
  char timeChar[6];
  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80005b6:	2200      	movs	r2, #0
 80005b8:	4922      	ldr	r1, [pc, #136]	@ (8000644 <main+0xc4>)
 80005ba:	4823      	ldr	r0, [pc, #140]	@ (8000648 <main+0xc8>)
 80005bc:	f002 fef5 	bl	80033aa <HAL_RTC_GetTime>

  sprintf(timeChar, "%02d:%02d", (char)Time.Hours, (char)Time.Minutes);
 80005c0:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <main+0xc4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <main+0xc4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4638      	mov	r0, r7
 80005cc:	491f      	ldr	r1, [pc, #124]	@ (800064c <main+0xcc>)
 80005ce:	f004 f865 	bl	800469c <siprintf>
  ILI9341_InitDrawString(timeChar, hspi3);
 80005d2:	4c1b      	ldr	r4, [pc, #108]	@ (8000640 <main+0xc0>)
 80005d4:	463d      	mov	r5, r7
 80005d6:	4668      	mov	r0, sp
 80005d8:	f104 030c 	add.w	r3, r4, #12
 80005dc:	224c      	movs	r2, #76	@ 0x4c
 80005de:	4619      	mov	r1, r3
 80005e0:	f004 f93b 	bl	800485a <memcpy>
 80005e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80005e8:	4628      	mov	r0, r5
 80005ea:	f001 fa87 	bl	8001afc <ILI9341_InitDrawString>
  uint8_t lastMinutes = Time.Minutes;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <main+0xc4>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80005f4:	2200      	movs	r2, #0
 80005f6:	4913      	ldr	r1, [pc, #76]	@ (8000644 <main+0xc4>)
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <main+0xc8>)
 80005fa:	f002 fed6 	bl	80033aa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80005fe:	2200      	movs	r2, #0
 8000600:	4913      	ldr	r1, [pc, #76]	@ (8000650 <main+0xd0>)
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <main+0xc8>)
 8000604:	f002 ffb3 	bl	800356e <HAL_RTC_GetDate>
	if (lastMinutes != Time.Minutes)
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <main+0xc4>)
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	429a      	cmp	r2, r3
 8000610:	d010      	beq.n	8000634 <main+0xb4>
	{
		changeTime(Time, hspi3);
 8000612:	4c0c      	ldr	r4, [pc, #48]	@ (8000644 <main+0xc4>)
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <main+0xc0>)
 8000616:	ab01      	add	r3, sp, #4
 8000618:	4611      	mov	r1, r2
 800061a:	2258      	movs	r2, #88	@ 0x58
 800061c:	4618      	mov	r0, r3
 800061e:	f004 f91c 	bl	800485a <memcpy>
 8000622:	6923      	ldr	r3, [r4, #16]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800062a:	f001 faaf 	bl	8001b8c <changeTime>
		lastMinutes = Time.Minutes;
 800062e:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <main+0xc4>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	71fb      	strb	r3, [r7, #7]
	}
	HAL_Delay(500);
 8000634:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000638:	f001 fd3e 	bl	80020b8 <HAL_Delay>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800063c:	e7da      	b.n	80005f4 <main+0x74>
 800063e:	bf00      	nop
 8000640:	200000a4 	.word	0x200000a4
 8000644:	20000148 	.word	0x20000148
 8000648:	20000084 	.word	0x20000084
 800064c:	08005718 	.word	0x08005718
 8000650:	20000144 	.word	0x20000144

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	@ 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 f87d 	bl	8004762 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a28      	ldr	r2, [pc, #160]	@ (8000724 <SystemClock_Config+0xd0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a22      	ldr	r2, [pc, #136]	@ (8000728 <SystemClock_Config+0xd4>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006b0:	230a      	movs	r3, #10
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 ffbe 	bl	8002660 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f969 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fa20 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000716:	f000 f953 	bl	80009c0 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000744:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <MX_RTC_Init+0xbc>)
 8000746:	4a29      	ldr	r2, [pc, #164]	@ (80007ec <MX_RTC_Init+0xc0>)
 8000748:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800074a:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_RTC_Init+0xbc>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_RTC_Init+0xbc>)
 8000752:	227f      	movs	r2, #127	@ 0x7f
 8000754:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <MX_RTC_Init+0xbc>)
 8000758:	22ff      	movs	r2, #255	@ 0xff
 800075a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_RTC_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_RTC_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_RTC_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800076e:	481e      	ldr	r0, [pc, #120]	@ (80007e8 <MX_RTC_Init+0xbc>)
 8000770:	f002 fcfe 	bl	8003170 <HAL_RTC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f921 	bl	80009c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 800077e:	2313      	movs	r3, #19
 8000780:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8000782:	233b      	movs	r3, #59	@ 0x3b
 8000784:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 8000786:	232d      	movs	r3, #45	@ 0x2d
 8000788:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4813      	ldr	r0, [pc, #76]	@ (80007e8 <MX_RTC_Init+0xbc>)
 800079a:	f002 fd6c 	bl	8003276 <HAL_RTC_SetTime>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f90c 	bl	80009c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007a8:	2301      	movs	r3, #1
 80007aa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007ac:	2301      	movs	r3, #1
 80007ae:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <MX_RTC_Init+0xbc>)
 80007c0:	f002 fe51 	bl	8003466 <HAL_RTC_SetDate>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80007ca:	f000 f8f9 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2029      	movs	r0, #41	@ 0x29
 80007d4:	f001 fd6f 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80007d8:	2029      	movs	r0, #41	@ 0x29
 80007da:	f001 fd88 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000084 	.word	0x20000084
 80007ec:	40002800 	.word	0x40002800

080007f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <MX_SPI3_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	@ (8000858 <MX_SPI3_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_SPI3_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_SPI3_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_SPI3_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <MX_SPI3_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_SPI3_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_SPI3_Init+0x64>)
 8000842:	f002 ffa1 	bl	8003788 <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 f8b8 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000a4 	.word	0x200000a4
 8000858:	40003c00 	.word	0x40003c00

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f003 fa22 	bl	8003cdc <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 f88f 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000fc 	.word	0x200000fc
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <MX_GPIO_Init+0xe0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <MX_GPIO_Init+0xe0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a29      	ldr	r2, [pc, #164]	@ (8000990 <MX_GPIO_Init+0xe0>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <MX_GPIO_Init+0xe0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_GPIO_Init+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <MX_GPIO_Init+0xe0>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	4816      	ldr	r0, [pc, #88]	@ (8000994 <MX_GPIO_Init+0xe4>)
 800093c:	f001 fe76 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000946:	4814      	ldr	r0, [pc, #80]	@ (8000998 <MX_GPIO_Init+0xe8>)
 8000948:	f001 fe70 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094c:	2320      	movs	r3, #32
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480c      	ldr	r0, [pc, #48]	@ (8000994 <MX_GPIO_Init+0xe4>)
 8000964:	f001 fcde 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000968:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_GPIO_Init+0xe8>)
 8000982:	f001 fccf 	bl	8002324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	@ 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000
 8000998:	40020400 	.word	0x40020400

0800099c <__io_putchar>:

int __io_putchar(int ch)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80009a4:	1d39      	adds	r1, r7, #4
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2201      	movs	r2, #1
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <__io_putchar+0x20>)
 80009ae:	f003 f9e5 	bl	8003d7c <HAL_UART_Transmit>
	return ch;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000fc 	.word	0x200000fc

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f001 fc48 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <HAL_RTC_MspInit+0x50>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d111      	bne.n	8000a64 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a48:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fa9e 	bl	8002f90 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a5a:	f7ff ffb1 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <HAL_RTC_MspInit+0x54>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40002800 	.word	0x40002800
 8000a70:	42470e3c 	.word	0x42470e3c

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a28      	ldr	r2, [pc, #160]	@ (8000b34 <HAL_SPI_MspInit+0xc0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d14a      	bne.n	8000b2c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a1f      	ldr	r2, [pc, #124]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a18      	ldr	r2, [pc, #96]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_SPI_MspInit+0xc4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000afc:	2306      	movs	r3, #6
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <HAL_SPI_MspInit+0xc8>)
 8000b08:	f001 fc0c 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <HAL_SPI_MspInit+0xcc>)
 8000b28:	f001 fbfc 	bl	8002324 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40003c00 	.word	0x40003c00
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_UART_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_UART_MspInit+0x8c>)
 8000bba:	f001 fbb3 	bl	8002324 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f001 fa25 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e00a      	b.n	8000c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c44:	f3af 8000 	nop.w
 8000c48:	4601      	mov	r1, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	60ba      	str	r2, [r7, #8]
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf0      	blt.n	8000c44 <_read+0x12>
  }

  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e009      	b.n	8000c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	60ba      	str	r2, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe88 	bl	800099c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbf1      	blt.n	8000c7e <_write+0x12>
  }
  return len;
 8000c9a:	687b      	ldr	r3, [r7, #4]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_close>:

int _close(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_isatty>:

int _isatty(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce4:	2301      	movs	r3, #1
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f003 fd60 	bl	8004800 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20020000 	.word	0x20020000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	2000015c 	.word	0x2000015c
 8000d74:	200002b0 	.word	0x200002b0

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <ILI9341_Init>:
static void change(int x, uint8_t time, SPI_HandleTypeDef hspi3);
static void blackFond(SPI_HandleTypeDef hspi3);

// Initialization
void ILI9341_Init(SPI_HandleTypeDef hspi3)
{
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b094      	sub	sp, #80	@ 0x50
 8000da2:	af14      	add	r7, sp, #80	@ 0x50
 8000da4:	f107 0c08 	add.w	ip, r7, #8
 8000da8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Reset();
 8000dac:	f000 fd5c 	bl	8001868 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000db0:	4668      	mov	r0, sp
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2248      	movs	r2, #72	@ 0x48
 8000db8:	4619      	mov	r1, r3
 8000dba:	f003 fd4e 	bl	800485a <memcpy>
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc4:	f000 fd62 	bl	800188c <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB, hspi3);
 8000dc8:	4668      	mov	r0, sp
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	224c      	movs	r2, #76	@ 0x4c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f003 fd42 	bl	800485a <memcpy>
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ddc:	20cb      	movs	r0, #203	@ 0xcb
 8000dde:	f000 fd75 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x39, hspi3);
 8000de2:	4668      	mov	r0, sp
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	224c      	movs	r2, #76	@ 0x4c
 8000dea:	4619      	mov	r1, r3
 8000dec:	f003 fd35 	bl	800485a <memcpy>
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df6:	2039      	movs	r0, #57	@ 0x39
 8000df8:	f000 fd89 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x2C, hspi3);
 8000dfc:	4668      	mov	r0, sp
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	224c      	movs	r2, #76	@ 0x4c
 8000e04:	4619      	mov	r1, r3
 8000e06:	f003 fd28 	bl	800485a <memcpy>
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e10:	202c      	movs	r0, #44	@ 0x2c
 8000e12:	f000 fd7c 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000e16:	4668      	mov	r0, sp
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	224c      	movs	r2, #76	@ 0x4c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f003 fd1b 	bl	800485a <memcpy>
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 fd6f 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x34, hspi3);
 8000e30:	4668      	mov	r0, sp
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	224c      	movs	r2, #76	@ 0x4c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f003 fd0e 	bl	800485a <memcpy>
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e44:	2034      	movs	r0, #52	@ 0x34
 8000e46:	f000 fd62 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x02, hspi3);
 8000e4a:	4668      	mov	r0, sp
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	224c      	movs	r2, #76	@ 0x4c
 8000e52:	4619      	mov	r1, r3
 8000e54:	f003 fd01 	bl	800485a <memcpy>
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 fd55 	bl	800190e <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF, hspi3);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	224c      	movs	r2, #76	@ 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f003 fcf4 	bl	800485a <memcpy>
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	20cf      	movs	r0, #207	@ 0xcf
 8000e7a:	f000 fd27 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000e7e:	4668      	mov	r0, sp
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	224c      	movs	r2, #76	@ 0x4c
 8000e86:	4619      	mov	r1, r3
 8000e88:	f003 fce7 	bl	800485a <memcpy>
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 fd3b 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8000e98:	4668      	mov	r0, sp
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	224c      	movs	r2, #76	@ 0x4c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f003 fcda 	bl	800485a <memcpy>
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eac:	20c1      	movs	r0, #193	@ 0xc1
 8000eae:	f000 fd2e 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x30, hspi3);
 8000eb2:	4668      	mov	r0, sp
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	224c      	movs	r2, #76	@ 0x4c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f003 fccd 	bl	800485a <memcpy>
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec6:	2030      	movs	r0, #48	@ 0x30
 8000ec8:	f000 fd21 	bl	800190e <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8, hspi3);
 8000ecc:	4668      	mov	r0, sp
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	224c      	movs	r2, #76	@ 0x4c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f003 fcc0 	bl	800485a <memcpy>
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee0:	20e8      	movs	r0, #232	@ 0xe8
 8000ee2:	f000 fcf3 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x85, hspi3);
 8000ee6:	4668      	mov	r0, sp
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	224c      	movs	r2, #76	@ 0x4c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f003 fcb3 	bl	800485a <memcpy>
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000efa:	2085      	movs	r0, #133	@ 0x85
 8000efc:	f000 fd07 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000f00:	4668      	mov	r0, sp
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	224c      	movs	r2, #76	@ 0x4c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f003 fca6 	bl	800485a <memcpy>
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 fcfa 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x78, hspi3);
 8000f1a:	4668      	mov	r0, sp
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	224c      	movs	r2, #76	@ 0x4c
 8000f22:	4619      	mov	r1, r3
 8000f24:	f003 fc99 	bl	800485a <memcpy>
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f2e:	2078      	movs	r0, #120	@ 0x78
 8000f30:	f000 fced 	bl	800190e <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA, hspi3);
 8000f34:	4668      	mov	r0, sp
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	224c      	movs	r2, #76	@ 0x4c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f003 fc8c 	bl	800485a <memcpy>
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f48:	20ea      	movs	r0, #234	@ 0xea
 8000f4a:	f000 fcbf 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000f4e:	4668      	mov	r0, sp
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	224c      	movs	r2, #76	@ 0x4c
 8000f56:	4619      	mov	r1, r3
 8000f58:	f003 fc7f 	bl	800485a <memcpy>
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 fcd3 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000f68:	4668      	mov	r0, sp
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	224c      	movs	r2, #76	@ 0x4c
 8000f70:	4619      	mov	r1, r3
 8000f72:	f003 fc72 	bl	800485a <memcpy>
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fcc6 	bl	800190e <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED, hspi3);
 8000f82:	4668      	mov	r0, sp
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	224c      	movs	r2, #76	@ 0x4c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f003 fc65 	bl	800485a <memcpy>
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f96:	20ed      	movs	r0, #237	@ 0xed
 8000f98:	f000 fc98 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x64, hspi3);
 8000f9c:	4668      	mov	r0, sp
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	224c      	movs	r2, #76	@ 0x4c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f003 fc58 	bl	800485a <memcpy>
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb0:	2064      	movs	r0, #100	@ 0x64
 8000fb2:	f000 fcac 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000fb6:	4668      	mov	r0, sp
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	224c      	movs	r2, #76	@ 0x4c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f003 fc4b 	bl	800485a <memcpy>
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 fc9f 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x12, hspi3);
 8000fd0:	4668      	mov	r0, sp
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	224c      	movs	r2, #76	@ 0x4c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f003 fc3e 	bl	800485a <memcpy>
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe4:	2012      	movs	r0, #18
 8000fe6:	f000 fc92 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x81, hspi3);
 8000fea:	4668      	mov	r0, sp
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	224c      	movs	r2, #76	@ 0x4c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f003 fc31 	bl	800485a <memcpy>
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffe:	2081      	movs	r0, #129	@ 0x81
 8001000:	f000 fc85 	bl	800190e <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7, hspi3);
 8001004:	4668      	mov	r0, sp
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	224c      	movs	r2, #76	@ 0x4c
 800100c:	4619      	mov	r1, r3
 800100e:	f003 fc24 	bl	800485a <memcpy>
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001018:	20f7      	movs	r0, #247	@ 0xf7
 800101a:	f000 fc57 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x20, hspi3);
 800101e:	4668      	mov	r0, sp
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	224c      	movs	r2, #76	@ 0x4c
 8001026:	4619      	mov	r1, r3
 8001028:	f003 fc17 	bl	800485a <memcpy>
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001032:	2020      	movs	r0, #32
 8001034:	f000 fc6b 	bl	800190e <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0, hspi3);
 8001038:	4668      	mov	r0, sp
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	224c      	movs	r2, #76	@ 0x4c
 8001040:	4619      	mov	r1, r3
 8001042:	f003 fc0a 	bl	800485a <memcpy>
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104c:	20c0      	movs	r0, #192	@ 0xc0
 800104e:	f000 fc3d 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8001052:	4668      	mov	r0, sp
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	224c      	movs	r2, #76	@ 0x4c
 800105a:	4619      	mov	r1, r3
 800105c:	f003 fbfd 	bl	800485a <memcpy>
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001066:	2010      	movs	r0, #16
 8001068:	f000 fc51 	bl	800190e <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1, hspi3);
 800106c:	4668      	mov	r0, sp
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	224c      	movs	r2, #76	@ 0x4c
 8001074:	4619      	mov	r1, r3
 8001076:	f003 fbf0 	bl	800485a <memcpy>
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001080:	20c1      	movs	r0, #193	@ 0xc1
 8001082:	f000 fc23 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8001086:	4668      	mov	r0, sp
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	224c      	movs	r2, #76	@ 0x4c
 800108e:	4619      	mov	r1, r3
 8001090:	f003 fbe3 	bl	800485a <memcpy>
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109a:	2010      	movs	r0, #16
 800109c:	f000 fc37 	bl	800190e <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5, hspi3);
 80010a0:	4668      	mov	r0, sp
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	224c      	movs	r2, #76	@ 0x4c
 80010a8:	4619      	mov	r1, r3
 80010aa:	f003 fbd6 	bl	800485a <memcpy>
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b4:	20c5      	movs	r0, #197	@ 0xc5
 80010b6:	f000 fc09 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x3E, hspi3);
 80010ba:	4668      	mov	r0, sp
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	224c      	movs	r2, #76	@ 0x4c
 80010c2:	4619      	mov	r1, r3
 80010c4:	f003 fbc9 	bl	800485a <memcpy>
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ce:	203e      	movs	r0, #62	@ 0x3e
 80010d0:	f000 fc1d 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x28, hspi3);
 80010d4:	4668      	mov	r0, sp
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	224c      	movs	r2, #76	@ 0x4c
 80010dc:	4619      	mov	r1, r3
 80010de:	f003 fbbc 	bl	800485a <memcpy>
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e8:	2028      	movs	r0, #40	@ 0x28
 80010ea:	f000 fc10 	bl	800190e <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7, hspi3);
 80010ee:	4668      	mov	r0, sp
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	224c      	movs	r2, #76	@ 0x4c
 80010f6:	4619      	mov	r1, r3
 80010f8:	f003 fbaf 	bl	800485a <memcpy>
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001102:	20c7      	movs	r0, #199	@ 0xc7
 8001104:	f000 fbe2 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x86, hspi3);
 8001108:	4668      	mov	r0, sp
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	224c      	movs	r2, #76	@ 0x4c
 8001110:	4619      	mov	r1, r3
 8001112:	f003 fba2 	bl	800485a <memcpy>
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111c:	2086      	movs	r0, #134	@ 0x86
 800111e:	f000 fbf6 	bl	800190e <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36, hspi3);
 8001122:	4668      	mov	r0, sp
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	224c      	movs	r2, #76	@ 0x4c
 800112a:	4619      	mov	r1, r3
 800112c:	f003 fb95 	bl	800485a <memcpy>
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	2036      	movs	r0, #54	@ 0x36
 8001138:	f000 fbc8 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x48, hspi3);
 800113c:	4668      	mov	r0, sp
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	224c      	movs	r2, #76	@ 0x4c
 8001144:	4619      	mov	r1, r3
 8001146:	f003 fb88 	bl	800485a <memcpy>
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001150:	2048      	movs	r0, #72	@ 0x48
 8001152:	f000 fbdc 	bl	800190e <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A, hspi3);
 8001156:	4668      	mov	r0, sp
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	224c      	movs	r2, #76	@ 0x4c
 800115e:	4619      	mov	r1, r3
 8001160:	f003 fb7b 	bl	800485a <memcpy>
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116a:	203a      	movs	r0, #58	@ 0x3a
 800116c:	f000 fbae 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x55, hspi3);    //16bit
 8001170:	4668      	mov	r0, sp
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	224c      	movs	r2, #76	@ 0x4c
 8001178:	4619      	mov	r1, r3
 800117a:	f003 fb6e 	bl	800485a <memcpy>
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001184:	2055      	movs	r0, #85	@ 0x55
 8001186:	f000 fbc2 	bl	800190e <LCD_WR_DATA>
	LCD_WR_REG(0xB1, hspi3);
 800118a:	4668      	mov	r0, sp
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	224c      	movs	r2, #76	@ 0x4c
 8001192:	4619      	mov	r1, r3
 8001194:	f003 fb61 	bl	800485a <memcpy>
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119e:	20b1      	movs	r0, #177	@ 0xb1
 80011a0:	f000 fb94 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 80011a4:	4668      	mov	r0, sp
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	224c      	movs	r2, #76	@ 0x4c
 80011ac:	4619      	mov	r1, r3
 80011ae:	f003 fb54 	bl	800485a <memcpy>
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fba8 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x18, hspi3);
 80011be:	4668      	mov	r0, sp
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	224c      	movs	r2, #76	@ 0x4c
 80011c6:	4619      	mov	r1, r3
 80011c8:	f003 fb47 	bl	800485a <memcpy>
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d2:	2018      	movs	r0, #24
 80011d4:	f000 fb9b 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x01, hspi3);
	LCD_WR_DATA(0x00, hspi3);
	LCD_WR_DATA(0x20, hspi3); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6, hspi3);
 80011d8:	4668      	mov	r0, sp
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	224c      	movs	r2, #76	@ 0x4c
 80011e0:	4619      	mov	r1, r3
 80011e2:	f003 fb3a 	bl	800485a <memcpy>
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ec:	20b6      	movs	r0, #182	@ 0xb6
 80011ee:	f000 fb6d 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x08, hspi3);
 80011f2:	4668      	mov	r0, sp
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	224c      	movs	r2, #76	@ 0x4c
 80011fa:	4619      	mov	r1, r3
 80011fc:	f003 fb2d 	bl	800485a <memcpy>
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001206:	2008      	movs	r0, #8
 8001208:	f000 fb81 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x82, hspi3);
 800120c:	4668      	mov	r0, sp
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	224c      	movs	r2, #76	@ 0x4c
 8001214:	4619      	mov	r1, r3
 8001216:	f003 fb20 	bl	800485a <memcpy>
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	2082      	movs	r0, #130	@ 0x82
 8001222:	f000 fb74 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x27, hspi3);
 8001226:	4668      	mov	r0, sp
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	224c      	movs	r2, #76	@ 0x4c
 800122e:	4619      	mov	r1, r3
 8001230:	f003 fb13 	bl	800485a <memcpy>
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123a:	2027      	movs	r0, #39	@ 0x27
 800123c:	f000 fb67 	bl	800190e <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2, hspi3);
 8001240:	4668      	mov	r0, sp
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	224c      	movs	r2, #76	@ 0x4c
 8001248:	4619      	mov	r1, r3
 800124a:	f003 fb06 	bl	800485a <memcpy>
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001254:	20f2      	movs	r0, #242	@ 0xf2
 8001256:	f000 fb39 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 800125a:	4668      	mov	r0, sp
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	224c      	movs	r2, #76	@ 0x4c
 8001262:	4619      	mov	r1, r3
 8001264:	f003 faf9 	bl	800485a <memcpy>
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800126e:	2000      	movs	r0, #0
 8001270:	f000 fb4d 	bl	800190e <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26, hspi3); //Gamma set
 8001274:	4668      	mov	r0, sp
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	224c      	movs	r2, #76	@ 0x4c
 800127c:	4619      	mov	r1, r3
 800127e:	f003 faec 	bl	800485a <memcpy>
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001288:	2026      	movs	r0, #38	@ 0x26
 800128a:	f000 fb1f 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x01, hspi3); 	//Gamma Curve (G2.2)
 800128e:	4668      	mov	r0, sp
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	224c      	movs	r2, #76	@ 0x4c
 8001296:	4619      	mov	r1, r3
 8001298:	f003 fadf 	bl	800485a <memcpy>
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 fb33 	bl	800190e <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0, hspi3);
 80012a8:	4668      	mov	r0, sp
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	224c      	movs	r2, #76	@ 0x4c
 80012b0:	4619      	mov	r1, r3
 80012b2:	f003 fad2 	bl	800485a <memcpy>
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012bc:	20e0      	movs	r0, #224	@ 0xe0
 80012be:	f000 fb05 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x0F, hspi3);
 80012c2:	4668      	mov	r0, sp
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	224c      	movs	r2, #76	@ 0x4c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f003 fac5 	bl	800485a <memcpy>
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d6:	200f      	movs	r0, #15
 80012d8:	f000 fb19 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 80012dc:	4668      	mov	r0, sp
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	224c      	movs	r2, #76	@ 0x4c
 80012e4:	4619      	mov	r1, r3
 80012e6:	f003 fab8 	bl	800485a <memcpy>
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f0:	2031      	movs	r0, #49	@ 0x31
 80012f2:	f000 fb0c 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x2B, hspi3);
 80012f6:	4668      	mov	r0, sp
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	224c      	movs	r2, #76	@ 0x4c
 80012fe:	4619      	mov	r1, r3
 8001300:	f003 faab 	bl	800485a <memcpy>
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130a:	202b      	movs	r0, #43	@ 0x2b
 800130c:	f000 faff 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8001310:	4668      	mov	r0, sp
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	224c      	movs	r2, #76	@ 0x4c
 8001318:	4619      	mov	r1, r3
 800131a:	f003 fa9e 	bl	800485a <memcpy>
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001324:	200c      	movs	r0, #12
 8001326:	f000 faf2 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 800132a:	4668      	mov	r0, sp
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	224c      	movs	r2, #76	@ 0x4c
 8001332:	4619      	mov	r1, r3
 8001334:	f003 fa91 	bl	800485a <memcpy>
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133e:	200e      	movs	r0, #14
 8001340:	f000 fae5 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8001344:	4668      	mov	r0, sp
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	224c      	movs	r2, #76	@ 0x4c
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fa84 	bl	800485a <memcpy>
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	2008      	movs	r0, #8
 800135a:	f000 fad8 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x4E, hspi3);
 800135e:	4668      	mov	r0, sp
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	224c      	movs	r2, #76	@ 0x4c
 8001366:	4619      	mov	r1, r3
 8001368:	f003 fa77 	bl	800485a <memcpy>
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001372:	204e      	movs	r0, #78	@ 0x4e
 8001374:	f000 facb 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xF1, hspi3);
 8001378:	4668      	mov	r0, sp
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	224c      	movs	r2, #76	@ 0x4c
 8001380:	4619      	mov	r1, r3
 8001382:	f003 fa6a 	bl	800485a <memcpy>
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138c:	20f1      	movs	r0, #241	@ 0xf1
 800138e:	f000 fabe 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x37, hspi3);
 8001392:	4668      	mov	r0, sp
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	224c      	movs	r2, #76	@ 0x4c
 800139a:	4619      	mov	r1, r3
 800139c:	f003 fa5d 	bl	800485a <memcpy>
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a6:	2037      	movs	r0, #55	@ 0x37
 80013a8:	f000 fab1 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 80013ac:	4668      	mov	r0, sp
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	224c      	movs	r2, #76	@ 0x4c
 80013b4:	4619      	mov	r1, r3
 80013b6:	f003 fa50 	bl	800485a <memcpy>
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c0:	2007      	movs	r0, #7
 80013c2:	f000 faa4 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x10, hspi3);
 80013c6:	4668      	mov	r0, sp
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	224c      	movs	r2, #76	@ 0x4c
 80013ce:	4619      	mov	r1, r3
 80013d0:	f003 fa43 	bl	800485a <memcpy>
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013da:	2010      	movs	r0, #16
 80013dc:	f000 fa97 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 80013e0:	4668      	mov	r0, sp
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	224c      	movs	r2, #76	@ 0x4c
 80013e8:	4619      	mov	r1, r3
 80013ea:	f003 fa36 	bl	800485a <memcpy>
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 fa8a 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 80013fa:	4668      	mov	r0, sp
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	224c      	movs	r2, #76	@ 0x4c
 8001402:	4619      	mov	r1, r3
 8001404:	f003 fa29 	bl	800485a <memcpy>
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	200e      	movs	r0, #14
 8001410:	f000 fa7d 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x09, hspi3);
 8001414:	4668      	mov	r0, sp
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	224c      	movs	r2, #76	@ 0x4c
 800141c:	4619      	mov	r1, r3
 800141e:	f003 fa1c 	bl	800485a <memcpy>
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	2009      	movs	r0, #9
 800142a:	f000 fa70 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 800142e:	4668      	mov	r0, sp
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	224c      	movs	r2, #76	@ 0x4c
 8001436:	4619      	mov	r1, r3
 8001438:	f003 fa0f 	bl	800485a <memcpy>
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001442:	2000      	movs	r0, #0
 8001444:	f000 fa63 	bl	800190e <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1, hspi3);
 8001448:	4668      	mov	r0, sp
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	224c      	movs	r2, #76	@ 0x4c
 8001450:	4619      	mov	r1, r3
 8001452:	f003 fa02 	bl	800485a <memcpy>
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145c:	20e1      	movs	r0, #225	@ 0xe1
 800145e:	f000 fa35 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8001462:	4668      	mov	r0, sp
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	224c      	movs	r2, #76	@ 0x4c
 800146a:	4619      	mov	r1, r3
 800146c:	f003 f9f5 	bl	800485a <memcpy>
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001476:	2000      	movs	r0, #0
 8001478:	f000 fa49 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 800147c:	4668      	mov	r0, sp
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	224c      	movs	r2, #76	@ 0x4c
 8001484:	4619      	mov	r1, r3
 8001486:	f003 f9e8 	bl	800485a <memcpy>
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	200e      	movs	r0, #14
 8001492:	f000 fa3c 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x14, hspi3);
 8001496:	4668      	mov	r0, sp
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	224c      	movs	r2, #76	@ 0x4c
 800149e:	4619      	mov	r1, r3
 80014a0:	f003 f9db 	bl	800485a <memcpy>
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014aa:	2014      	movs	r0, #20
 80014ac:	f000 fa2f 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 80014b0:	4668      	mov	r0, sp
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	224c      	movs	r2, #76	@ 0x4c
 80014b8:	4619      	mov	r1, r3
 80014ba:	f003 f9ce 	bl	800485a <memcpy>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 fa22 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x11, hspi3);
 80014ca:	4668      	mov	r0, sp
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	224c      	movs	r2, #76	@ 0x4c
 80014d2:	4619      	mov	r1, r3
 80014d4:	f003 f9c1 	bl	800485a <memcpy>
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	2011      	movs	r0, #17
 80014e0:	f000 fa15 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 80014e4:	4668      	mov	r0, sp
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	224c      	movs	r2, #76	@ 0x4c
 80014ec:	4619      	mov	r1, r3
 80014ee:	f003 f9b4 	bl	800485a <memcpy>
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f8:	2007      	movs	r0, #7
 80014fa:	f000 fa08 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 80014fe:	4668      	mov	r0, sp
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	224c      	movs	r2, #76	@ 0x4c
 8001506:	4619      	mov	r1, r3
 8001508:	f003 f9a7 	bl	800485a <memcpy>
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001512:	2031      	movs	r0, #49	@ 0x31
 8001514:	f000 f9fb 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8001518:	4668      	mov	r0, sp
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	224c      	movs	r2, #76	@ 0x4c
 8001520:	4619      	mov	r1, r3
 8001522:	f003 f99a 	bl	800485a <memcpy>
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152c:	20c1      	movs	r0, #193	@ 0xc1
 800152e:	f000 f9ee 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x48, hspi3);
 8001532:	4668      	mov	r0, sp
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	224c      	movs	r2, #76	@ 0x4c
 800153a:	4619      	mov	r1, r3
 800153c:	f003 f98d 	bl	800485a <memcpy>
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	2048      	movs	r0, #72	@ 0x48
 8001548:	f000 f9e1 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 800154c:	4668      	mov	r0, sp
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	224c      	movs	r2, #76	@ 0x4c
 8001554:	4619      	mov	r1, r3
 8001556:	f003 f980 	bl	800485a <memcpy>
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001560:	2008      	movs	r0, #8
 8001562:	f000 f9d4 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8001566:	4668      	mov	r0, sp
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	224c      	movs	r2, #76	@ 0x4c
 800156e:	4619      	mov	r1, r3
 8001570:	f003 f973 	bl	800485a <memcpy>
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157a:	200f      	movs	r0, #15
 800157c:	f000 f9c7 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8001580:	4668      	mov	r0, sp
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	224c      	movs	r2, #76	@ 0x4c
 8001588:	4619      	mov	r1, r3
 800158a:	f003 f966 	bl	800485a <memcpy>
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001594:	200c      	movs	r0, #12
 8001596:	f000 f9ba 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 800159a:	4668      	mov	r0, sp
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	224c      	movs	r2, #76	@ 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	f003 f959 	bl	800485a <memcpy>
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ae:	2031      	movs	r0, #49	@ 0x31
 80015b0:	f000 f9ad 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x36, hspi3);
 80015b4:	4668      	mov	r0, sp
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	224c      	movs	r2, #76	@ 0x4c
 80015bc:	4619      	mov	r1, r3
 80015be:	f003 f94c 	bl	800485a <memcpy>
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c8:	2036      	movs	r0, #54	@ 0x36
 80015ca:	f000 f9a0 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 80015ce:	4668      	mov	r0, sp
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	224c      	movs	r2, #76	@ 0x4c
 80015d6:	4619      	mov	r1, r3
 80015d8:	f003 f93f 	bl	800485a <memcpy>
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f993 	bl	800190e <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11, hspi3);
 80015e8:	4668      	mov	r0, sp
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	224c      	movs	r2, #76	@ 0x4c
 80015f0:	4619      	mov	r1, r3
 80015f2:	f003 f932 	bl	800485a <memcpy>
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	2011      	movs	r0, #17
 80015fe:	f000 f965 	bl	80018cc <LCD_WR_REG>

	HAL_Delay(120);
 8001602:	2078      	movs	r0, #120	@ 0x78
 8001604:	f000 fd58 	bl	80020b8 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29, hspi3);
 8001608:	4668      	mov	r0, sp
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	224c      	movs	r2, #76	@ 0x4c
 8001610:	4619      	mov	r1, r3
 8001612:	f003 f922 	bl	800485a <memcpy>
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161c:	2029      	movs	r0, #41	@ 0x29
 800161e:	f000 f955 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x2C, hspi3);
 8001622:	4668      	mov	r0, sp
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	224c      	movs	r2, #76	@ 0x4c
 800162a:	4619      	mov	r1, r3
 800162c:	f003 f915 	bl	800485a <memcpy>
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001636:	202c      	movs	r0, #44	@ 0x2c
 8001638:	f000 f969 	bl	800190e <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 800163c:	4668      	mov	r0, sp
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	224c      	movs	r2, #76	@ 0x4c
 8001644:	4619      	mov	r1, r3
 8001646:	f003 f908 	bl	800485a <memcpy>
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001650:	2003      	movs	r0, #3
 8001652:	f000 fbc3 	bl	8001ddc <LCD_direction>

	blackFond(hspi3);
 8001656:	4668      	mov	r0, sp
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2248      	movs	r2, #72	@ 0x48
 800165e:	4619      	mov	r1, r3
 8001660:	f003 f8fb 	bl	800485a <memcpy>
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166a:	f000 f971 	bl	8001950 <blackFond>
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001676:	b004      	add	sp, #16
 8001678:	4770      	bx	lr

0800167a <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 800167a:	b590      	push	{r4, r7, lr}
 800167c:	b097      	sub	sp, #92	@ 0x5c
 800167e:	af14      	add	r7, sp, #80	@ 0x50
 8001680:	4604      	mov	r4, r0
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	4603      	mov	r3, r0
 800168e:	80bb      	strh	r3, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a, hspi3);
 8001698:	4668      	mov	r0, sp
 800169a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169e:	224c      	movs	r2, #76	@ 0x4c
 80016a0:	4619      	mov	r1, r3
 80016a2:	f003 f8da 	bl	800485a <memcpy>
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ac:	202a      	movs	r0, #42	@ 0x2a
 80016ae:	f000 f90d 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8, hspi3);
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b2dc      	uxtb	r4, r3
 80016ba:	4668      	mov	r0, sp
 80016bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c0:	224c      	movs	r2, #76	@ 0x4c
 80016c2:	4619      	mov	r1, r3
 80016c4:	f003 f8c9 	bl	800485a <memcpy>
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ce:	4620      	mov	r0, r4
 80016d0:	f000 f91d 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x, hspi3);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	b2dc      	uxtb	r4, r3
 80016d8:	4668      	mov	r0, sp
 80016da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016de:	224c      	movs	r2, #76	@ 0x4c
 80016e0:	4619      	mov	r1, r3
 80016e2:	f003 f8ba 	bl	800485a <memcpy>
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 f90e 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8, hspi3);
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2dc      	uxtb	r4, r3
 80016fa:	4668      	mov	r0, sp
 80016fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001700:	224c      	movs	r2, #76	@ 0x4c
 8001702:	4619      	mov	r1, r3
 8001704:	f003 f8a9 	bl	800485a <memcpy>
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170e:	4620      	mov	r0, r4
 8001710:	f000 f8fd 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x, hspi3);
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	b2dc      	uxtb	r4, r3
 8001718:	4668      	mov	r0, sp
 800171a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171e:	224c      	movs	r2, #76	@ 0x4c
 8001720:	4619      	mov	r1, r3
 8001722:	f003 f89a 	bl	800485a <memcpy>
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	4620      	mov	r0, r4
 800172e:	f000 f8ee 	bl	800190e <LCD_WR_DATA>

	LCD_WR_REG(0x2b, hspi3);
 8001732:	4668      	mov	r0, sp
 8001734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001738:	224c      	movs	r2, #76	@ 0x4c
 800173a:	4619      	mov	r1, r3
 800173c:	f003 f88d 	bl	800485a <memcpy>
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001746:	202b      	movs	r0, #43	@ 0x2b
 8001748:	f000 f8c0 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8, hspi3);
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	b29b      	uxth	r3, r3
 8001752:	b2dc      	uxtb	r4, r3
 8001754:	4668      	mov	r0, sp
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	224c      	movs	r2, #76	@ 0x4c
 800175c:	4619      	mov	r1, r3
 800175e:	f003 f87c 	bl	800485a <memcpy>
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001768:	4620      	mov	r0, r4
 800176a:	f000 f8d0 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y, hspi3);
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	b2dc      	uxtb	r4, r3
 8001772:	4668      	mov	r0, sp
 8001774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001778:	224c      	movs	r2, #76	@ 0x4c
 800177a:	4619      	mov	r1, r3
 800177c:	f003 f86d 	bl	800485a <memcpy>
 8001780:	f107 0318 	add.w	r3, r7, #24
 8001784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001786:	4620      	mov	r0, r4
 8001788:	f000 f8c1 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8, hspi3);
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2dc      	uxtb	r4, r3
 8001794:	4668      	mov	r0, sp
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	224c      	movs	r2, #76	@ 0x4c
 800179c:	4619      	mov	r1, r3
 800179e:	f003 f85c 	bl	800485a <memcpy>
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a8:	4620      	mov	r0, r4
 80017aa:	f000 f8b0 	bl	800190e <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y, hspi3);
 80017ae:	883b      	ldrh	r3, [r7, #0]
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	4668      	mov	r0, sp
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	224c      	movs	r2, #76	@ 0x4c
 80017ba:	4619      	mov	r1, r3
 80017bc:	f003 f84d 	bl	800485a <memcpy>
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 f8a1 	bl	800190e <LCD_WR_DATA>

}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 80017d4:	b082      	sub	sp, #8
 80017d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017da:	b09a      	sub	sp, #104	@ 0x68
 80017dc:	af16      	add	r7, sp, #88	@ 0x58
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e0:	4603      	mov	r3, r0
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	460b      	mov	r3, r1
 80017e6:	80bb      	strh	r3, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 80017fc:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8001800:	88fe      	ldrh	r6, [r7, #6]
 8001802:	88bd      	ldrh	r5, [r7, #4]
 8001804:	88fc      	ldrh	r4, [r7, #6]
 8001806:	4668      	mov	r0, sp
 8001808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180c:	2258      	movs	r2, #88	@ 0x58
 800180e:	4619      	mov	r1, r3
 8001810:	f003 f823 	bl	800485a <memcpy>
 8001814:	4643      	mov	r3, r8
 8001816:	4632      	mov	r2, r6
 8001818:	4629      	mov	r1, r5
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff ff2d 	bl	800167a <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c, hspi3);
 8001820:	4668      	mov	r0, sp
 8001822:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001826:	224c      	movs	r2, #76	@ 0x4c
 8001828:	4619      	mov	r1, r3
 800182a:	f003 f816 	bl	800485a <memcpy>
 800182e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001834:	202c      	movs	r0, #44	@ 0x2c
 8001836:	f000 f849 	bl	80018cc <LCD_WR_REG>
	DC_H();
 800183a:	f000 fb8d 	bl	8001f58 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 800183e:	f107 010c 	add.w	r1, r7, #12
 8001842:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184a:	2202      	movs	r2, #2
 800184c:	f002 f825 	bl	800389a <HAL_SPI_Transmit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <ILI9341_WritePixel+0x86>
		Error_Handler();
 8001856:	f7ff f8b3 	bl	80009c0 <Error_Handler>
	}
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001864:	b002      	add	sp, #8
 8001866:	4770      	bx	lr

08001868 <ILI9341_Reset>:
	__HAL_SPI_ENABLE(&hspi3);
#endif
}

void ILI9341_Reset(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	RESET_L();
 800186c:	f000 fb44 	bl	8001ef8 <RESET_L>
	HAL_Delay(100);
 8001870:	2064      	movs	r0, #100	@ 0x64
 8001872:	f000 fc21 	bl	80020b8 <HAL_Delay>
	RESET_H();
 8001876:	f000 fb4b 	bl	8001f10 <RESET_H>
	HAL_Delay(100);
 800187a:	2064      	movs	r0, #100	@ 0x64
 800187c:	f000 fc1c 	bl	80020b8 <HAL_Delay>
	CS_L();
 8001880:	f000 fb52 	bl	8001f28 <CS_L>
	LED_H();
 8001884:	f000 fb74 	bl	8001f70 <LED_H>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 800188c:	b084      	sub	sp, #16
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	f107 0c10 	add.w	ip, r7, #16
 8001898:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 800189c:	2301      	movs	r3, #1
 800189e:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80018a0:	f000 fb4e 	bl	8001f40 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 80018a4:	1df9      	adds	r1, r7, #7
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	2201      	movs	r2, #1
 80018ac:	f107 0010 	add.w	r0, r7, #16
 80018b0:	f001 fff3 	bl	800389a <HAL_SPI_Transmit>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <ILI9341_SoftReset+0x32>
		Error_Handler();
 80018ba:	f7ff f881 	bl	80009c0 <Error_Handler>
	}
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018c8:	b004      	add	sp, #16
 80018ca:	4770      	bx	lr

080018cc <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data, SPI_HandleTypeDef hspi3)
{
 80018cc:	b084      	sub	sp, #16
 80018ce:	b590      	push	{r4, r7, lr}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4604      	mov	r4, r0
 80018d6:	f107 001c 	add.w	r0, r7, #28
 80018da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018de:	4623      	mov	r3, r4
 80018e0:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80018e2:	f000 fb2d 	bl	8001f40 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80018e6:	1df9      	adds	r1, r7, #7
 80018e8:	f107 001c 	add.w	r0, r7, #28
 80018ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f0:	2201      	movs	r2, #1
 80018f2:	f001 ffd2 	bl	800389a <HAL_SPI_Transmit>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <LCD_WR_REG+0x34>
		Error_Handler();
 80018fc:	f7ff f860 	bl	80009c0 <Error_Handler>
	}
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800190a:	b004      	add	sp, #16
 800190c:	4770      	bx	lr

0800190e <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data, SPI_HandleTypeDef hspi3)
{
 800190e:	b084      	sub	sp, #16
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4604      	mov	r4, r0
 8001918:	f107 001c 	add.w	r0, r7, #28
 800191c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001920:	4623      	mov	r3, r4
 8001922:	71fb      	strb	r3, [r7, #7]
	DC_H();
 8001924:	f000 fb18 	bl	8001f58 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 8001928:	1df9      	adds	r1, r7, #7
 800192a:	f107 001c 	add.w	r0, r7, #28
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	2201      	movs	r2, #1
 8001934:	f001 ffb1 	bl	800389a <HAL_SPI_Transmit>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <LCD_WR_DATA+0x34>
		Error_Handler();
 800193e:	f7ff f83f 	bl	80009c0 <Error_Handler>
	}
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800194c:	b004      	add	sp, #16
 800194e:	4770      	bx	lr

08001950 <blackFond>:
	HAL_SPI_Transmit_DMA(&hspi3, pData, Size*2 );
	//HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)pData, Size );
	while(spiDmaTransferComplete == 0);
}

static void blackFond(SPI_HandleTypeDef hspi3){
 8001950:	b084      	sub	sp, #16
 8001952:	b5b0      	push	{r4, r5, r7, lr}
 8001954:	b098      	sub	sp, #96	@ 0x60
 8001956:	af16      	add	r7, sp, #88	@ 0x58
 8001958:	f107 0418 	add.w	r4, r7, #24
 800195c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 8001960:	466b      	mov	r3, sp
 8001962:	f107 0118 	add.w	r1, r7, #24
 8001966:	2258      	movs	r2, #88	@ 0x58
 8001968:	4618      	mov	r0, r3
 800196a:	f002 ff76 	bl	800485a <memcpy>
 800196e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001972:	22ef      	movs	r2, #239	@ 0xef
 8001974:	2100      	movs	r1, #0
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff fe7f 	bl	800167a <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 800197c:	2300      	movs	r3, #0
 800197e:	80fb      	strh	r3, [r7, #6]
 8001980:	e01a      	b.n	80019b8 <blackFond+0x68>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8001982:	2300      	movs	r3, #0
 8001984:	80bb      	strh	r3, [r7, #4]
 8001986:	e011      	b.n	80019ac <blackFond+0x5c>
			ILI9341_WritePixel(x, y, 0x0000, hspi3);
 8001988:	88bd      	ldrh	r5, [r7, #4]
 800198a:	88fc      	ldrh	r4, [r7, #6]
 800198c:	4668      	mov	r0, sp
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	2254      	movs	r2, #84	@ 0x54
 8001994:	4619      	mov	r1, r3
 8001996:	f002 ff60 	bl	800485a <memcpy>
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2200      	movs	r2, #0
 800199e:	4629      	mov	r1, r5
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff ff17 	bl	80017d4 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	3301      	adds	r3, #1
 80019aa:	80bb      	strh	r3, [r7, #4]
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	2bef      	cmp	r3, #239	@ 0xef
 80019b0:	d9ea      	bls.n	8001988 <blackFond+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	3301      	adds	r3, #1
 80019b6:	80fb      	strh	r3, [r7, #6]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80019be:	d3e0      	bcc.n	8001982 <blackFond+0x32>
		}
	}
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019cc:	b004      	add	sp, #16
 80019ce:	4770      	bx	lr

080019d0 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, char c, SPI_HandleTypeDef hspi3) {
 80019d0:	b082      	sub	sp, #8
 80019d2:	b5b0      	push	{r4, r5, r7, lr}
 80019d4:	b0a2      	sub	sp, #136	@ 0x88
 80019d6:	af1a      	add	r7, sp, #104	@ 0x68
 80019d8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80019dc:	e884 000c 	stmia.w	r4, {r2, r3}
 80019e0:	4603      	mov	r3, r0
 80019e2:	80fb      	strh	r3, [r7, #6]
 80019e4:	460b      	mov	r3, r1
 80019e6:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) {
 80019e8:	797b      	ldrb	r3, [r7, #5]
 80019ea:	2b1f      	cmp	r3, #31
 80019ec:	d902      	bls.n	80019f4 <ILI9341_DrawChar+0x24>
 80019ee:	797b      	ldrb	r3, [r7, #5]
 80019f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80019f2:	d901      	bls.n	80019f8 <ILI9341_DrawChar+0x28>
	        c = '?'; // Si le caractère n'est pas supporté
 80019f4:	233f      	movs	r3, #63	@ 0x3f
 80019f6:	717b      	strb	r3, [r7, #5]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80019f8:	797b      	ldrb	r3, [r7, #5]
 80019fa:	f1a3 0220 	sub.w	r2, r3, #32
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	4a3c      	ldr	r2, [pc, #240]	@ (8001af8 <ILI9341_DrawChar+0x128>)
 8001a06:	4413      	add	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 8001a0e:	231e      	movs	r3, #30
 8001a10:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e041      	b.n	8001a9c <ILI9341_DrawChar+0xcc>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	e038      	b.n	8001a90 <ILI9341_DrawChar+0xc0>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	fa42 f303 	asr.w	r3, r2, r3
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <ILI9341_DrawChar+0x92>
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0xFFFF, hspi3);
 8001a36:	88fc      	ldrh	r4, [r7, #6]
 8001a38:	ab03      	add	r3, sp, #12
 8001a3a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001a3e:	2258      	movs	r2, #88	@ 0x58
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 ff0a 	bl	800485a <memcpy>
 8001a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	89bb      	ldrh	r3, [r7, #12]
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	2114      	movs	r1, #20
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f000 f974 	bl	8001d48 <ILI9341_WritePixelsFullHeight>
 8001a60:	e013      	b.n	8001a8a <ILI9341_DrawChar+0xba>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0x0000, hspi3);
 8001a62:	88fc      	ldrh	r4, [r7, #6]
 8001a64:	ab03      	add	r3, sp, #12
 8001a66:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001a6a:	2258      	movs	r2, #88	@ 0x58
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fef4 	bl	800485a <memcpy>
 8001a72:	2300      	movs	r3, #0
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	89bb      	ldrh	r3, [r7, #12]
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	2114      	movs	r1, #20
 8001a84:	4620      	mov	r0, r4
 8001a86:	f000 f95f 	bl	8001d48 <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	ddc3      	ble.n	8001a1e <ILI9341_DrawChar+0x4e>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b07      	cmp	r3, #7
 8001aa0:	ddba      	ble.n	8001a18 <ILI9341_DrawChar+0x48>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
 8001aa6:	e01a      	b.n	8001ade <ILI9341_DrawChar+0x10e>
        ILI9341_WritePixel(x + 5, Y_CHAR + j, 0x0000, hspi3);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	3305      	adds	r3, #5
 8001aac:	b29c      	uxth	r4, r3
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3314      	adds	r3, #20
 8001ab6:	b29d      	uxth	r5, r3
 8001ab8:	4668      	mov	r0, sp
 8001aba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001abe:	2254      	movs	r2, #84	@ 0x54
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f002 feca 	bl	800485a <memcpy>
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4629      	mov	r1, r5
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff fe81 	bl	80017d4 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 8001ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	75fb      	strb	r3, [r7, #23]
 8001ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	dde0      	ble.n	8001aa8 <ILI9341_DrawChar+0xd8>
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001af2:	b002      	add	sp, #8
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	08005774 	.word	0x08005774

08001afc <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str, SPI_HandleTypeDef hspi3) {
 8001afc:	b084      	sub	sp, #16
 8001afe:	b5b0      	push	{r4, r5, r7, lr}
 8001b00:	b098      	sub	sp, #96	@ 0x60
 8001b02:	af14      	add	r7, sp, #80	@ 0x50
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int cmpt = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
	uint16_t x = MARGE_NUMBERS_X;
 8001b12:	2305      	movs	r3, #5
 8001b14:	817b      	strh	r3, [r7, #10]
	if (strlen(str) == 5)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fb62 	bl	80001e0 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d127      	bne.n	8001b72 <ILI9341_InitDrawString+0x76>
	{
		while (*str)
 8001b22:	e021      	b.n	8001b68 <ILI9341_InitDrawString+0x6c>
		{
			if (cmpt != 0){
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <ILI9341_InitDrawString+0x3e>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	0192      	lsls	r2, r2, #6
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3305      	adds	r3, #5
 8001b38:	817b      	strh	r3, [r7, #10]
			}
			ILI9341_DrawChar(x, *str, hspi3);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	781d      	ldrb	r5, [r3, #0]
 8001b3e:	897c      	ldrh	r4, [r7, #10]
 8001b40:	4668      	mov	r0, sp
 8001b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b46:	2250      	movs	r2, #80	@ 0x50
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f002 fe86 	bl	800485a <memcpy>
 8001b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b52:	cb0c      	ldmia	r3, {r2, r3}
 8001b54:	4629      	mov	r1, r5
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff ff3a 	bl	80019d0 <ILI9341_DrawChar>
			str++;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1d9      	bne.n	8001b24 <ILI9341_InitDrawString+0x28>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 8001b70:	e002      	b.n	8001b78 <ILI9341_InitDrawString+0x7c>
		printf("Erreur le string est composé de plus de 5 éléments");
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <ILI9341_InitDrawString+0x8c>)
 8001b74:	f002 fd80 	bl	8004678 <iprintf>
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	08005724 	.word	0x08005724

08001b8c <changeTime>:
/*
 * Methode de changement de temps
 * Il y a deux parties, une pour les heures et l'autre pour les minutes.
 */
void changeTime(RTC_TimeTypeDef Time, SPI_HandleTypeDef hspi3)
{
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	b590      	push	{r4, r7, lr}
 8001b90:	b097      	sub	sp, #92	@ 0x5c
 8001b92:	af14      	add	r7, sp, #80	@ 0x50
 8001b94:	f107 0418 	add.w	r4, r7, #24
 8001b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Time.Minutes == 00)
 8001b9c:	7e7b      	ldrb	r3, [r7, #25]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d15f      	bne.n	8001c62 <changeTime+0xd6>
	{
		uint8_t diz = Time.Hours / 10; // Get the dizaines
 8001ba2:	7e3b      	ldrb	r3, [r7, #24]
 8001ba4:	4a54      	ldr	r2, [pc, #336]	@ (8001cf8 <changeTime+0x16c>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	717b      	strb	r3, [r7, #5]
		uint8_t unite = Time.Hours % 10; // get unités
 8001bae:	7e3a      	ldrb	r2, [r7, #24]
 8001bb0:	4b51      	ldr	r3, [pc, #324]	@ (8001cf8 <changeTime+0x16c>)
 8001bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8001bb6:	08d9      	lsrs	r1, r3, #3
 8001bb8:	460b      	mov	r3, r1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	713b      	strb	r3, [r7, #4]
		if (unite != 0)
 8001bc4:	793b      	ldrb	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00f      	beq.n	8001bea <changeTime+0x5e>
		{
			change(X_UNIT_HOUR, unite, hspi3);
 8001bca:	793c      	ldrb	r4, [r7, #4]
 8001bcc:	4668      	mov	r0, sp
 8001bce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bd2:	2250      	movs	r2, #80	@ 0x50
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f002 fe40 	bl	800485a <memcpy>
 8001bda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bde:	cb0c      	ldmia	r3, {r2, r3}
 8001be0:	4621      	mov	r1, r4
 8001be2:	2044      	movs	r0, #68	@ 0x44
 8001be4:	f000 f88a 	bl	8001cfc <change>
 8001be8:	e01d      	b.n	8001c26 <changeTime+0x9a>
		}
		else
		{
			change(X_DIX_HOUR, diz, hspi3);
 8001bea:	797c      	ldrb	r4, [r7, #5]
 8001bec:	4668      	mov	r0, sp
 8001bee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bf2:	2250      	movs	r2, #80	@ 0x50
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f002 fe30 	bl	800485a <memcpy>
 8001bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bfe:	cb0c      	ldmia	r3, {r2, r3}
 8001c00:	4621      	mov	r1, r4
 8001c02:	2005      	movs	r0, #5
 8001c04:	f000 f87a 	bl	8001cfc <change>
			change(X_UNIT_HOUR, unite, hspi3);
 8001c08:	793c      	ldrb	r4, [r7, #4]
 8001c0a:	4668      	mov	r0, sp
 8001c0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c10:	2250      	movs	r2, #80	@ 0x50
 8001c12:	4619      	mov	r1, r3
 8001c14:	f002 fe21 	bl	800485a <memcpy>
 8001c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1c:	cb0c      	ldmia	r3, {r2, r3}
 8001c1e:	4621      	mov	r1, r4
 8001c20:	2044      	movs	r0, #68	@ 0x44
 8001c22:	f000 f86b 	bl	8001cfc <change>
		}
		// Il faut modifier l'unité et la dizaine des minutes
		change(X_DIX_MIN, 0, hspi3);
 8001c26:	4668      	mov	r0, sp
 8001c28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c2c:	2250      	movs	r2, #80	@ 0x50
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f002 fe13 	bl	800485a <memcpy>
 8001c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c38:	cb0c      	ldmia	r3, {r2, r3}
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	20c2      	movs	r0, #194	@ 0xc2
 8001c3e:	f000 f85d 	bl	8001cfc <change>
		change(X_UNIT_MIN, 0, hspi3);
 8001c42:	4668      	mov	r0, sp
 8001c44:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c48:	2250      	movs	r2, #80	@ 0x50
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f002 fe05 	bl	800485a <memcpy>
 8001c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c54:	cb0c      	ldmia	r3, {r2, r3}
 8001c56:	2100      	movs	r1, #0
 8001c58:	f240 1001 	movw	r0, #257	@ 0x101
 8001c5c:	f000 f84e 	bl	8001cfc <change>
			change(X_DIX_MIN, diz, hspi3);
			change(X_UNIT_MIN, unite, hspi3);
		}

	}
}
 8001c60:	e043      	b.n	8001cea <changeTime+0x15e>
		uint8_t diz = Time.Minutes / 10; // Get the dizaines
 8001c62:	7e7b      	ldrb	r3, [r7, #25]
 8001c64:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <changeTime+0x16c>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	71fb      	strb	r3, [r7, #7]
		uint8_t unite = Time.Minutes % 10; // get unités
 8001c6e:	7e7a      	ldrb	r2, [r7, #25]
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <changeTime+0x16c>)
 8001c72:	fba3 1302 	umull	r1, r3, r3, r2
 8001c76:	08d9      	lsrs	r1, r3, #3
 8001c78:	460b      	mov	r3, r1
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	71bb      	strb	r3, [r7, #6]
		if (unite != 0)
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <changeTime+0x120>
			change(X_UNIT_MIN, unite, hspi3);
 8001c8a:	79bc      	ldrb	r4, [r7, #6]
 8001c8c:	4668      	mov	r0, sp
 8001c8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c92:	2250      	movs	r2, #80	@ 0x50
 8001c94:	4619      	mov	r1, r3
 8001c96:	f002 fde0 	bl	800485a <memcpy>
 8001c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c9e:	cb0c      	ldmia	r3, {r2, r3}
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	f240 1001 	movw	r0, #257	@ 0x101
 8001ca6:	f000 f829 	bl	8001cfc <change>
}
 8001caa:	e01e      	b.n	8001cea <changeTime+0x15e>
			change(X_DIX_MIN, diz, hspi3);
 8001cac:	79fc      	ldrb	r4, [r7, #7]
 8001cae:	4668      	mov	r0, sp
 8001cb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cb4:	2250      	movs	r2, #80	@ 0x50
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f002 fdcf 	bl	800485a <memcpy>
 8001cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc0:	cb0c      	ldmia	r3, {r2, r3}
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	20c2      	movs	r0, #194	@ 0xc2
 8001cc6:	f000 f819 	bl	8001cfc <change>
			change(X_UNIT_MIN, unite, hspi3);
 8001cca:	79bc      	ldrb	r4, [r7, #6]
 8001ccc:	4668      	mov	r0, sp
 8001cce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cd2:	2250      	movs	r2, #80	@ 0x50
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f002 fdc0 	bl	800485a <memcpy>
 8001cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cde:	cb0c      	ldmia	r3, {r2, r3}
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	f240 1001 	movw	r0, #257	@ 0x101
 8001ce6:	f000 f809 	bl	8001cfc <change>
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cf4:	b004      	add	sp, #16
 8001cf6:	4770      	bx	lr
 8001cf8:	cccccccd 	.word	0xcccccccd

08001cfc <change>:

static void change(int x, uint8_t time, SPI_HandleTypeDef hspi3)
{
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	b5b0      	push	{r4, r5, r7, lr}
 8001d00:	b098      	sub	sp, #96	@ 0x60
 8001d02:	af14      	add	r7, sp, #80	@ 0x50
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	f107 0020 	add.w	r0, r7, #32
 8001d0a:	e880 000c 	stmia.w	r0, {r2, r3}
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
	char caractere = time + '0';  // Conversion en caractère
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	3330      	adds	r3, #48	@ 0x30
 8001d16:	73fb      	strb	r3, [r7, #15]
	ILI9341_DrawChar(x, caractere, hspi3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	b29c      	uxth	r4, r3
 8001d1c:	7bfd      	ldrb	r5, [r7, #15]
 8001d1e:	4668      	mov	r0, sp
 8001d20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d24:	2250      	movs	r2, #80	@ 0x50
 8001d26:	4619      	mov	r1, r3
 8001d28:	f002 fd97 	bl	800485a <memcpy>
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	cb0c      	ldmia	r3, {r2, r3}
 8001d32:	4629      	mov	r1, r5
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff fe4b 	bl	80019d0 <ILI9341_DrawChar>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d44:	b002      	add	sp, #8
 8001d46:	4770      	bx	lr

08001d48 <ILI9341_WritePixelsFullHeight>:


static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	b09d      	sub	sp, #116	@ 0x74
 8001d4c:	af16      	add	r7, sp, #88	@ 0x58
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4603      	mov	r3, r0
 8001d54:	81fb      	strh	r3, [r7, #14]
 8001d56:	460b      	mov	r3, r1
 8001d58:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e034      	b.n	8001dca <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e02a      	b.n	8001dbc <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001d6c:	fb12 f303 	smulbb	r3, r2, r3
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	4413      	add	r3, r2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b29c      	uxth	r4, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d86:	fb12 f303 	smulbb	r3, r2, r3
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	89bb      	ldrh	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	b29d      	uxth	r5, r3
 8001d9a:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 8001d9c:	4668      	mov	r0, sp
 8001d9e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001da2:	2254      	movs	r2, #84	@ 0x54
 8001da4:	4619      	mov	r1, r3
 8001da6:	f002 fd58 	bl	800485a <memcpy>
 8001daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dac:	4632      	mov	r2, r6
 8001dae:	4629      	mov	r1, r5
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fd0f 	bl	80017d4 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	3301      	adds	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbd0      	blt.n	8001d66 <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbc6      	blt.n	8001d60 <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ddc <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8001ddc:	b084      	sub	sp, #16
 8001dde:	b590      	push	{r4, r7, lr}
 8001de0:	b097      	sub	sp, #92	@ 0x5c
 8001de2:	af14      	add	r7, sp, #80	@ 0x50
 8001de4:	4604      	mov	r4, r0
 8001de6:	f107 001c 	add.w	r0, r7, #28
 8001dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001dee:	4623      	mov	r3, r4
 8001df0:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d877      	bhi.n	8001ee8 <LCD_direction+0x10c>
 8001df8:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <LCD_direction+0x24>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e47 	.word	0x08001e47
 8001e08:	08001e7d 	.word	0x08001e7d
 8001e0c:	08001eb3 	.word	0x08001eb3
	case ROTATE_0:
		LCD_WR_REG(0x36, hspi3);
 8001e10:	4668      	mov	r0, sp
 8001e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e16:	224c      	movs	r2, #76	@ 0x4c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f002 fd1e 	bl	800485a <memcpy>
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	2036      	movs	r0, #54	@ 0x36
 8001e26:	f7ff fd51 	bl	80018cc <LCD_WR_REG>
		LCD_WR_DATA(0x48, hspi3);
 8001e2a:	4668      	mov	r0, sp
 8001e2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e30:	224c      	movs	r2, #76	@ 0x4c
 8001e32:	4619      	mov	r1, r3
 8001e34:	f002 fd11 	bl	800485a <memcpy>
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3e:	2048      	movs	r0, #72	@ 0x48
 8001e40:	f7ff fd65 	bl	800190e <LCD_WR_DATA>
		break;
 8001e44:	e050      	b.n	8001ee8 <LCD_direction+0x10c>
	case ROTATE_90:
		LCD_WR_REG(0x36, hspi3);
 8001e46:	4668      	mov	r0, sp
 8001e48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e4c:	224c      	movs	r2, #76	@ 0x4c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f002 fd03 	bl	800485a <memcpy>
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5a:	2036      	movs	r0, #54	@ 0x36
 8001e5c:	f7ff fd36 	bl	80018cc <LCD_WR_REG>
		LCD_WR_DATA(0x28, hspi3);
 8001e60:	4668      	mov	r0, sp
 8001e62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e66:	224c      	movs	r2, #76	@ 0x4c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f002 fcf6 	bl	800485a <memcpy>
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e74:	2028      	movs	r0, #40	@ 0x28
 8001e76:	f7ff fd4a 	bl	800190e <LCD_WR_DATA>
		break;
 8001e7a:	e035      	b.n	8001ee8 <LCD_direction+0x10c>
	case ROTATE_180:
		LCD_WR_REG(0x36, hspi3);
 8001e7c:	4668      	mov	r0, sp
 8001e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e82:	224c      	movs	r2, #76	@ 0x4c
 8001e84:	4619      	mov	r1, r3
 8001e86:	f002 fce8 	bl	800485a <memcpy>
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e90:	2036      	movs	r0, #54	@ 0x36
 8001e92:	f7ff fd1b 	bl	80018cc <LCD_WR_REG>
		LCD_WR_DATA(0x88, hspi3);
 8001e96:	4668      	mov	r0, sp
 8001e98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e9c:	224c      	movs	r2, #76	@ 0x4c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f002 fcdb 	bl	800485a <memcpy>
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eaa:	2088      	movs	r0, #136	@ 0x88
 8001eac:	f7ff fd2f 	bl	800190e <LCD_WR_DATA>
		break;
 8001eb0:	e01a      	b.n	8001ee8 <LCD_direction+0x10c>
	case ROTATE_270:
		LCD_WR_REG(0x36, hspi3);
 8001eb2:	4668      	mov	r0, sp
 8001eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb8:	224c      	movs	r2, #76	@ 0x4c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f002 fccd 	bl	800485a <memcpy>
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec6:	2036      	movs	r0, #54	@ 0x36
 8001ec8:	f7ff fd00 	bl	80018cc <LCD_WR_REG>
		LCD_WR_DATA(0xE8, hspi3);
 8001ecc:	4668      	mov	r0, sp
 8001ece:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ed2:	224c      	movs	r2, #76	@ 0x4c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f002 fcc0 	bl	800485a <memcpy>
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee0:	20e8      	movs	r0, #232	@ 0xe8
 8001ee2:	f7ff fd14 	bl	800190e <LCD_WR_DATA>
		break;
 8001ee6:	bf00      	nop
	}
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ef2:	b004      	add	sp, #16
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <RESET_L>:

static void RESET_L(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <RESET_L+0x14>)
 8001f02:	f000 fb93 	bl	800262c <HAL_GPIO_WritePin>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020400 	.word	0x40020400

08001f10 <RESET_H>:

static void RESET_H(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <RESET_H+0x14>)
 8001f1a:	f000 fb87 	bl	800262c <HAL_GPIO_WritePin>
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40020400 	.word	0x40020400

08001f28 <CS_L>:

static void CS_L(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2140      	movs	r1, #64	@ 0x40
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <CS_L+0x14>)
 8001f32:	f000 fb7b 	bl	800262c <HAL_GPIO_WritePin>
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020400 	.word	0x40020400

08001f40 <DC_L>:

static void DC_L(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f4a:	4802      	ldr	r0, [pc, #8]	@ (8001f54 <DC_L+0x14>)
 8001f4c:	f000 fb6e 	bl	800262c <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40020400 	.word	0x40020400

08001f58 <DC_H>:

static void DC_H(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f62:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DC_H+0x14>)
 8001f64:	f000 fb62 	bl	800262c <HAL_GPIO_WritePin>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40020400 	.word	0x40020400

08001f70 <LED_H>:

static void LED_H(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f84:	f7fe fef8 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fae:	f002 fc2d 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7fe fae5 	bl	8000580 <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001fc4:	08005998 	.word	0x08005998
  ldr r2, =_sbss
 8001fc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001fcc:	200002b0 	.word	0x200002b0

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <HAL_Init+0x40>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <HAL_Init+0x40>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_Init+0x40>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f94f 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7fe fce0 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f967 	bl	800230a <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f92f 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	20000008 	.word	0x20000008
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008
 800209c:	20000160 	.word	0x20000160

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000160 	.word	0x20000160

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002132:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60d3      	str	r3, [r2, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	@ (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	@ (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	@ 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e159      	b.n	80025f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8148 	bne.w	80025ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	2b02      	cmp	r3, #2
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d017      	beq.n	8002414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a2 	beq.w	80025ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b57      	ldr	r3, [pc, #348]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	4a56      	ldr	r2, [pc, #344]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ba:	4b54      	ldr	r3, [pc, #336]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a52      	ldr	r2, [pc, #328]	@ (8002610 <HAL_GPIO_Init+0x2ec>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a49      	ldr	r2, [pc, #292]	@ (8002614 <HAL_GPIO_Init+0x2f0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x202>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a48      	ldr	r2, [pc, #288]	@ (8002618 <HAL_GPIO_Init+0x2f4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x1fe>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a47      	ldr	r2, [pc, #284]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x1fa>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a46      	ldr	r2, [pc, #280]	@ (8002620 <HAL_GPIO_Init+0x2fc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x1f6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a45      	ldr	r2, [pc, #276]	@ (8002624 <HAL_GPIO_Init+0x300>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x1f2>
 8002512:	2304      	movs	r3, #4
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002516:	2307      	movs	r3, #7
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	@ (8002610 <HAL_GPIO_Init+0x2ec>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b38      	ldr	r3, [pc, #224]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a2f      	ldr	r2, [pc, #188]	@ (8002628 <HAL_GPIO_Init+0x304>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <HAL_GPIO_Init+0x304>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a1a      	ldr	r2, [pc, #104]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f aea2 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40013800 	.word	0x40013800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	40020800 	.word	0x40020800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40021000 	.word	0x40021000
 8002628:	40013c00 	.word	0x40013c00

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e267      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d075      	beq.n	800276a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800267e:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b85      	ldr	r3, [pc, #532]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002692:	2b08      	cmp	r3, #8
 8002694:	d112      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b82      	ldr	r3, [pc, #520]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b7e      	ldr	r3, [pc, #504]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05b      	beq.n	8002768 <HAL_RCC_OscConfig+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d157      	bne.n	8002768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e242      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x74>
 80026c6:	4b76      	ldr	r3, [pc, #472]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b70      	ldr	r3, [pc, #448]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6f      	ldr	r2, [pc, #444]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6d      	ldr	r3, [pc, #436]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6c      	ldr	r2, [pc, #432]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026f8:	4b69      	ldr	r3, [pc, #420]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a68      	ldr	r2, [pc, #416]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b66      	ldr	r3, [pc, #408]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fcc2 	bl	80020a0 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff fcbe 	bl	80020a0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	@ 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e207      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b5b      	ldr	r3, [pc, #364]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xc0>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fcae 	bl	80020a0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff fcaa 	bl	80020a0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1f3      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b51      	ldr	r3, [pc, #324]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0xe8>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002776:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b44      	ldr	r3, [pc, #272]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1c7      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4937      	ldr	r1, [pc, #220]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e03a      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <HAL_RCC_OscConfig+0x244>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7ff fc63 	bl	80020a0 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7ff fc5f 	bl	80020a0 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1a8      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4925      	ldr	r1, [pc, #148]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_OscConfig+0x244>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff fc42 	bl	80020a0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff fc3e 	bl	80020a0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e187      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d036      	beq.n	80028b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff fc22 	bl	80020a0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7ff fc1e 	bl	80020a0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e167      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x200>
 800287e:	e01b      	b.n	80028b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7ff fc0b 	bl	80020a0 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	e00e      	b.n	80028ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7ff fc07 	bl	80020a0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d907      	bls.n	80028ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e150      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000
 80028a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ea      	bne.n	800288e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8097 	beq.w	80029f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b81      	ldr	r3, [pc, #516]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b77      	ldr	r3, [pc, #476]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b74      	ldr	r3, [pc, #464]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a73      	ldr	r2, [pc, #460]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7ff fbc7 	bl	80020a0 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7ff fbc3 	bl	80020a0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e10c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCC_OscConfig+0x474>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x2ea>
 800293c:	4b64      	ldr	r3, [pc, #400]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a63      	ldr	r2, [pc, #396]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	e01c      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x30c>
 8002952:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	4a5e      	ldr	r2, [pc, #376]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6713      	str	r3, [r2, #112]	@ 0x70
 800295e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800296c:	4b58      	ldr	r3, [pc, #352]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	4a57      	ldr	r2, [pc, #348]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	@ 0x70
 8002978:	4b55      	ldr	r3, [pc, #340]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a54      	ldr	r2, [pc, #336]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7ff fb88 	bl	80020a0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7ff fb84 	bl	80020a0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0cb      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ee      	beq.n	8002994 <HAL_RCC_OscConfig+0x334>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7ff fb72 	bl	80020a0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7ff fb6e 	bl	80020a0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b5      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ee      	bne.n	80029c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4a38      	ldr	r2, [pc, #224]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a1 	beq.w	8002b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fe:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d05c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d141      	bne.n	8002a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fb42 	bl	80020a0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7ff fb3e 	bl	80020a0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e087      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	491b      	ldr	r1, [pc, #108]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fb17 	bl	80020a0 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff fb13 	bl	80020a0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e05c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x416>
 8002a94:	e054      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fb00 	bl	80020a0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff fafc 	bl	80020a0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e045      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
 8002ac2:	e03d      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e038      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x4ec>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cc      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d90c      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b65      	ldr	r3, [pc, #404]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d044      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e067      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4934      	ldr	r1, [pc, #208]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7ff fa2e 	bl	80020a0 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7ff fa2a 	bl	80020a0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e04f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d20c      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f98e 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	0800575c 	.word	0x0800575c
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b094      	sub	sp, #80	@ 0x50
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d34:	4b79      	ldr	r3, [pc, #484]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x40>
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	f200 80e1 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4e:	e0db      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b73      	ldr	r3, [pc, #460]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d54:	e0db      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d56:	4b73      	ldr	r3, [pc, #460]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d5a:	e0d8      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d66:	4b6d      	ldr	r3, [pc, #436]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d86:	2300      	movs	r3, #0
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	1a51      	subs	r1, r2, r1
 8002daa:	6139      	str	r1, [r7, #16]
 8002dac:	4629      	mov	r1, r5
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	018b      	lsls	r3, r1, #6
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dca:	4651      	mov	r1, sl
 8002dcc:	018a      	lsls	r2, r1, #6
 8002dce:	4651      	mov	r1, sl
 8002dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dee:	4690      	mov	r8, r2
 8002df0:	4699      	mov	r9, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb18 0303 	adds.w	r3, r8, r3
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	eb49 0303 	adc.w	r3, r9, r3
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	024b      	lsls	r3, r1, #9
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e18:	4621      	mov	r1, r4
 8002e1a:	024a      	lsls	r2, r1, #9
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e22:	2200      	movs	r2, #0
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e2c:	f7fd fa30 	bl	8000290 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e38:	e058      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	4611      	mov	r1, r2
 8002e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	f04f 0000 	mov.w	r0, #0
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	0159      	lsls	r1, r3, #5
 8002e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e66:	0150      	lsls	r0, r2, #5
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e72:	4649      	mov	r1, r9
 8002e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e90:	eb63 050b 	sbc.w	r5, r3, fp
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	18e3      	adds	r3, r4, r3
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	464b      	mov	r3, r9
 8002eb0:	eb45 0303 	adc.w	r3, r5, r3
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	61fa      	str	r2, [r7, #28]
 8002edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee0:	f7fd f9d6 	bl	8000290 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002efc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3750      	adds	r7, #80	@ 0x50
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	007a1200 	.word	0x007a1200

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	0800576c 	.word	0x0800576c

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f6c:	f7ff ffdc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0b5b      	lsrs	r3, r3, #13
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	@ (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	0800576c 	.word	0x0800576c

08002f90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d038      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fb8:	4b68      	ldr	r3, [pc, #416]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbe:	f7ff f86f 	bl	80020a0 <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc6:	f7ff f86b 	bl	80020a0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0bd      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd8:	4b61      	ldr	r3, [pc, #388]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	071b      	lsls	r3, r3, #28
 8002ff6:	495a      	ldr	r1, [pc, #360]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ffe:	4b57      	ldr	r3, [pc, #348]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003004:	f7ff f84c 	bl	80020a0 <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800300c:	f7ff f848 	bl	80020a0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e09a      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800301e:	4b50      	ldr	r3, [pc, #320]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8083 	beq.w	800313e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4b48      	ldr	r3, [pc, #288]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	4a47      	ldr	r2, [pc, #284]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003046:	6413      	str	r3, [r2, #64]	@ 0x40
 8003048:	4b45      	ldr	r3, [pc, #276]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003054:	4b43      	ldr	r3, [pc, #268]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a42      	ldr	r2, [pc, #264]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003060:	f7ff f81e 	bl	80020a0 <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7ff f81a 	bl	80020a0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e06c      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800307a:	4b3a      	ldr	r3, [pc, #232]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003086:	4b36      	ldr	r3, [pc, #216]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d02f      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d028      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030ba:	4a29      	ldr	r2, [pc, #164]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030c0:	4b27      	ldr	r3, [pc, #156]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d114      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe ffe8 	bl	80020a0 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe ffe4 	bl	80020a0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e034      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ee      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003102:	d10d      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003104:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003118:	4911      	ldr	r1, [pc, #68]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
 800311e:	e005      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a0e      	ldr	r2, [pc, #56]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	4909      	ldr	r1, [pc, #36]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	4313      	orrs	r3, r2
 800313c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7d1a      	ldrb	r2, [r3, #20]
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003150:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	42470068 	.word	0x42470068
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470e40 	.word	0x42470e40
 800316c:	424711e0 	.word	0x424711e0

08003170 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7f5b      	ldrb	r3, [r3, #29]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fc40 	bl	8000a1c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d055      	beq.n	800325c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	22ca      	movs	r2, #202	@ 0xca
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2253      	movs	r2, #83	@ 0x53
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa49 	bl	8003658 <RTC_EnterInitMode>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d12c      	bne.n	800322a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80031de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68d2      	ldr	r2, [r2, #12]
 800320a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6919      	ldr	r1, [r3, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	041a      	lsls	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fa50 	bl	80036c6 <RTC_ExitInitMode>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d110      	bne.n	8003252 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	22ff      	movs	r2, #255	@ 0xff
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24
 800325a:	e001      	b.n	8003260 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003276:	b590      	push	{r4, r7, lr}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	7f1b      	ldrb	r3, [r3, #28]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_RTC_SetTime+0x1c>
 800328e:	2302      	movs	r3, #2
 8003290:	e087      	b.n	80033a2 <HAL_RTC_SetTime+0x12c>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2202      	movs	r2, #2
 800329c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d126      	bne.n	80032f2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2200      	movs	r2, #0
 80032b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fa27 	bl	8003710 <RTC_ByteToBcd2>
 80032c2:	4603      	mov	r3, r0
 80032c4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	785b      	ldrb	r3, [r3, #1]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fa20 	bl	8003710 <RTC_ByteToBcd2>
 80032d0:	4603      	mov	r3, r0
 80032d2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032d4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	789b      	ldrb	r3, [r3, #2]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa18 	bl	8003710 <RTC_ByteToBcd2>
 80032e0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032e2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e018      	b.n	8003324 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003312:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003318:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	78db      	ldrb	r3, [r3, #3]
 800331e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	22ca      	movs	r2, #202	@ 0xca
 800332a:	625a      	str	r2, [r3, #36]	@ 0x24
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2253      	movs	r2, #83	@ 0x53
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f98f 	bl	8003658 <RTC_EnterInitMode>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d120      	bne.n	8003386 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800334e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003352:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003362:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f9a2 	bl	80036c6 <RTC_ExitInitMode>
 8003382:	4603      	mov	r3, r0
 8003384:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	22ff      	movs	r2, #255	@ 0xff
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]

  return status;
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}

080033aa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80033dc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80033e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	0d9b      	lsrs	r3, r3, #22
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11a      	bne.n	800345c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f98e 	bl	800374c <RTC_Bcd2ToByte>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f985 	bl	800374c <RTC_Bcd2ToByte>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	789b      	ldrb	r3, [r3, #2]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f97c 	bl	800374c <RTC_Bcd2ToByte>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	7f1b      	ldrb	r3, [r3, #28]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_RTC_SetDate+0x1c>
 800347e:	2302      	movs	r3, #2
 8003480:	e071      	b.n	8003566 <HAL_RTC_SetDate+0x100>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2202      	movs	r2, #2
 800348c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10e      	bne.n	80034b2 <HAL_RTC_SetDate+0x4c>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	f023 0310 	bic.w	r3, r3, #16
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	330a      	adds	r3, #10
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11c      	bne.n	80034f2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	78db      	ldrb	r3, [r3, #3]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f927 	bl	8003710 <RTC_ByteToBcd2>
 80034c2:	4603      	mov	r3, r0
 80034c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f920 	bl	8003710 <RTC_ByteToBcd2>
 80034d0:	4603      	mov	r3, r0
 80034d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	789b      	ldrb	r3, [r3, #2]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f918 	bl	8003710 <RTC_ByteToBcd2>
 80034e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e00e      	b.n	8003510 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	78db      	ldrb	r3, [r3, #3]
 80034f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034fe:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003504:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	22ca      	movs	r2, #202	@ 0xca
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2253      	movs	r2, #83	@ 0x53
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f899 	bl	8003658 <RTC_EnterInitMode>
 8003526:	4603      	mov	r3, r0
 8003528:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10c      	bne.n	800354a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800353a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800353e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f8c0 	bl	80036c6 <RTC_ExitInitMode>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]

  return status;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
}
 8003566:	4618      	mov	r0, r3
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd90      	pop	{r4, r7, pc}

0800356e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003588:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800358c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	0b5b      	lsrs	r3, r3, #13
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11a      	bne.n	8003602 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	78db      	ldrb	r3, [r3, #3]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f8bb 	bl	800374c <RTC_Bcd2ToByte>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f8b2 	bl	800374c <RTC_Bcd2ToByte>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	789b      	ldrb	r3, [r3, #2]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f8a9 	bl	800374c <RTC_Bcd2ToByte>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <HAL_RTC_WaitForSynchro+0x48>)
 800361e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003620:	f7fe fd3e 	bl	80020a0 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003626:	e009      	b.n	800363c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003628:	f7fe fd3a 	bl	80020a0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003636:	d901      	bls.n	800363c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e007      	b.n	800364c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ee      	beq.n	8003628 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	00013f5f 	.word	0x00013f5f

08003658 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d122      	bne.n	80036bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003684:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003686:	f7fe fd0b 	bl	80020a0 <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800368c:	e00c      	b.n	80036a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800368e:	f7fe fd07 	bl	80020a0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800369c:	d904      	bls.n	80036a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <RTC_EnterInitMode+0x64>
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d1e8      	bne.n	800368e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff8b 	bl	800360c <HAL_RTC_WaitForSynchro>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2204      	movs	r2, #4
 8003700:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800371e:	e005      	b.n	800372c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	3b0a      	subs	r3, #10
 800372a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b09      	cmp	r3, #9
 8003730:	d8f6      	bhi.n	8003720 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	b2da      	uxtb	r2, r3
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	4313      	orrs	r3, r2
 800373e:	b2db      	uxtb	r3, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4413      	add	r3, r2
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07b      	b.n	8003892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037aa:	d009      	beq.n	80037c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	61da      	str	r2, [r3, #28]
 80037b2:	e005      	b.n	80037c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f94a 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0104 	and.w	r1, r3, #4
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0210 	and.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b088      	sub	sp, #32
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038aa:	f7fe fbf9 	bl	80020a0 <HAL_GetTick>
 80038ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	e12a      	b.n	8003b1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0x36>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e122      	b.n	8003b1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_SPI_Transmit+0x48>
 80038de:	2302      	movs	r3, #2
 80038e0:	e11b      	b.n	8003b1a <HAL_SPI_Transmit+0x280>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003930:	d10f      	bne.n	8003952 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003940:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003950:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b40      	cmp	r3, #64	@ 0x40
 800395e:	d007      	beq.n	8003970 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003978:	d152      	bne.n	8003a20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Transmit+0xee>
 8003982:	8b7b      	ldrh	r3, [r7, #26]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d145      	bne.n	8003a14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ac:	e032      	b.n	8003a14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d112      	bne.n	80039e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039e0:	e018      	b.n	8003a14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e2:	f7fe fb5d 	bl	80020a0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d803      	bhi.n	80039fa <HAL_SPI_Transmit+0x160>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d102      	bne.n	8003a00 <HAL_SPI_Transmit+0x166>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e082      	b.n	8003b1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1c7      	bne.n	80039ae <HAL_SPI_Transmit+0x114>
 8003a1e:	e053      	b.n	8003ac8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_SPI_Transmit+0x194>
 8003a28:	8b7b      	ldrh	r3, [r7, #26]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d147      	bne.n	8003abe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a54:	e033      	b.n	8003abe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d113      	bne.n	8003a8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a8a:	e018      	b.n	8003abe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a8c:	f7fe fb08 	bl	80020a0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d803      	bhi.n	8003aa4 <HAL_SPI_Transmit+0x20a>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d102      	bne.n	8003aaa <HAL_SPI_Transmit+0x210>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e02d      	b.n	8003b1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1c6      	bne.n	8003a56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f8b1 	bl	8003c34 <SPI_EndRxTxTransaction>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b34:	f7fe fab4 	bl	80020a0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b44:	f7fe faac 	bl	80020a0 <HAL_GetTick>
 8003b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b4a:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	0d1b      	lsrs	r3, r3, #20
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b5a:	e054      	b.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d050      	beq.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b64:	f7fe fa9c 	bl	80020a0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d902      	bls.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d13d      	bne.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b92:	d111      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b9c:	d004      	beq.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba6:	d107      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc0:	d10f      	bne.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e017      	b.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d19b      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000000 	.word	0x20000000

08003c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2201      	movs	r2, #1
 8003c48:	2102      	movs	r1, #2
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff ff6a 	bl	8003b24 <SPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e032      	b.n	8003ccc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c66:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <SPI_EndRxTxTransaction+0xa0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd8 <SPI_EndRxTxTransaction+0xa4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	0d5b      	lsrs	r3, r3, #21
 8003c72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c84:	d112      	bne.n	8003cac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	@ 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff ff47 	bl	8003b24 <SPI_WaitFlagStateUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e00f      	b.n	8003ccc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b80      	cmp	r3, #128	@ 0x80
 8003cc4:	d0f2      	beq.n	8003cac <SPI_EndRxTxTransaction+0x78>
 8003cc6:	e000      	b.n	8003cca <SPI_EndRxTxTransaction+0x96>
        break;
 8003cc8:	bf00      	nop
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000000 	.word	0x20000000
 8003cd8:	165e9f81 	.word	0x165e9f81

08003cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e042      	b.n	8003d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc ff1e 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f973 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d175      	bne.n	8003e88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_UART_Transmit+0x2c>
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e06e      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	@ 0x21
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dba:	f7fe f971 	bl	80020a0 <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd4:	d108      	bne.n	8003de8 <HAL_UART_Transmit+0x6c>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e003      	b.n	8003df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df0:	e02e      	b.n	8003e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	@ 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f848 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e03a      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e007      	b.n	8003e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1cb      	bne.n	8003df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2140      	movs	r1, #64	@ 0x40
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f814 	bl	8003e92 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea2:	e03b      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d037      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fe f8f8 	bl	80020a0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e03a      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d023      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b80      	cmp	r3, #128	@ 0x80
 8003ed8:	d020      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d01d      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d116      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f81d 	bl	8003f44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e00f      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d0b4      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b095      	sub	sp, #84	@ 0x54
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d119      	bne.n	8003ff0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 0310 	bic.w	r3, r3, #16
 8003fd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fdc:	61ba      	str	r2, [r7, #24]
 8003fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ffe:	bf00      	nop
 8004000:	3754      	adds	r7, #84	@ 0x54
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b0c0      	sub	sp, #256	@ 0x100
 8004012:	af00      	add	r7, sp, #0
 8004014:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	68d9      	ldr	r1, [r3, #12]
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	ea40 0301 	orr.w	r3, r0, r1
 8004034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004064:	f021 010c 	bic.w	r1, r1, #12
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	ea40 0301 	orr.w	r3, r0, r1
 8004092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <UART_SetConfig+0x2cc>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0xa0>
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8d      	ldr	r3, [pc, #564]	@ (80042dc <UART_SetConfig+0x2d0>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d104      	bne.n	80040b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe ff5c 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 80040b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040b4:	e003      	b.n	80040be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b6:	f7fe ff43 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 80040ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	f040 810c 	bne.w	80042e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	1891      	adds	r1, r2, r2
 80040e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040e6:	415b      	adcs	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ee:	4621      	mov	r1, r4
 80040f0:	eb12 0801 	adds.w	r8, r2, r1
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb43 0901 	adc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004132:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800413a:	460b      	mov	r3, r1
 800413c:	18db      	adds	r3, r3, r3
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004140:	4613      	mov	r3, r2
 8004142:	eb42 0303 	adc.w	r3, r2, r3
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54
 8004148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800414c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004150:	f7fc f89e 	bl	8000290 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <UART_SetConfig+0x2d4>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011c      	lsls	r4, r3, #4
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800417c:	415b      	adcs	r3, r3
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004184:	4641      	mov	r1, r8
 8004186:	eb12 0a01 	adds.w	sl, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0b01 	adc.w	fp, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800419c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a4:	4692      	mov	sl, r2
 80041a6:	469b      	mov	fp, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	eb1a 0303 	adds.w	r3, sl, r3
 80041ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b2:	464b      	mov	r3, r9
 80041b4:	eb4b 0303 	adc.w	r3, fp, r3
 80041b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041e6:	f7fc f853 	bl	8000290 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2301 	umull	r2, r3, r3, r1
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	@ 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1acb      	subs	r3, r1, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004206:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <UART_SetConfig+0x2d4>)
 8004208:	fba3 2302 	umull	r2, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004214:	441c      	add	r4, r3
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004220:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004230:	415b      	adcs	r3, r3
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6339      	str	r1, [r7, #48]	@ 0x30
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800426c:	464b      	mov	r3, r9
 800426e:	460a      	mov	r2, r1
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004284:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800429e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042a2:	f7fb fff5 	bl	8000290 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	@ 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	3332      	adds	r3, #50	@ 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 0207 	and.w	r2, r3, #7
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d4:	e106      	b.n	80044e4 <UART_SetConfig+0x4d8>
 80042d6:	bf00      	nop
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40011400 	.word	0x40011400
 80042e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042f6:	4642      	mov	r2, r8
 80042f8:	464b      	mov	r3, r9
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	6239      	str	r1, [r7, #32]
 80042fe:	415b      	adcs	r3, r3
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004306:	4641      	mov	r1, r8
 8004308:	1854      	adds	r4, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0501 	adc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800432c:	464b      	mov	r3, r9
 800432e:	eb45 0303 	adc.w	r3, r5, r3
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004352:	4629      	mov	r1, r5
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4621      	mov	r1, r4
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004364:	f7fb ff94 	bl	8000290 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011c      	lsls	r4, r3, #4
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004380:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	61b9      	str	r1, [r7, #24]
 8004390:	415b      	adcs	r3, r3
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6139      	str	r1, [r7, #16]
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043f0:	4649      	mov	r1, r9
 80043f2:	008b      	lsls	r3, r1, #2
 80043f4:	4641      	mov	r1, r8
 80043f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fa:	4641      	mov	r1, r8
 80043fc:	008a      	lsls	r2, r1, #2
 80043fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004402:	f7fb ff45 	bl	8000290 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4611      	mov	r1, r2
 800440c:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800440e:	fba3 2301 	umull	r2, r3, r3, r1
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	@ 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1acb      	subs	r3, r1, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	@ 0x32
 8004420:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <UART_SetConfig+0x4e4>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	673b      	str	r3, [r7, #112]	@ 0x70
 8004436:	677a      	str	r2, [r7, #116]	@ 0x74
 8004438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	415b      	adcs	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447e:	464b      	mov	r3, r9
 8004480:	460a      	mov	r2, r1
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	667a      	str	r2, [r7, #100]	@ 0x64
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044a0:	4649      	mov	r1, r9
 80044a2:	008b      	lsls	r3, r1, #2
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044aa:	4641      	mov	r1, r8
 80044ac:	008a      	lsls	r2, r1, #2
 80044ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044b2:	f7fb feed 	bl	8000290 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	@ 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3332      	adds	r3, #50	@ 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f0:	51eb851f 	.word	0x51eb851f

080044f4 <std>:
 80044f4:	2300      	movs	r3, #0
 80044f6:	b510      	push	{r4, lr}
 80044f8:	4604      	mov	r4, r0
 80044fa:	e9c0 3300 	strd	r3, r3, [r0]
 80044fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004502:	6083      	str	r3, [r0, #8]
 8004504:	8181      	strh	r1, [r0, #12]
 8004506:	6643      	str	r3, [r0, #100]	@ 0x64
 8004508:	81c2      	strh	r2, [r0, #14]
 800450a:	6183      	str	r3, [r0, #24]
 800450c:	4619      	mov	r1, r3
 800450e:	2208      	movs	r2, #8
 8004510:	305c      	adds	r0, #92	@ 0x5c
 8004512:	f000 f926 	bl	8004762 <memset>
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <std+0x58>)
 8004518:	6263      	str	r3, [r4, #36]	@ 0x24
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <std+0x5c>)
 800451c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800451e:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <std+0x60>)
 8004520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004522:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <std+0x64>)
 8004524:	6323      	str	r3, [r4, #48]	@ 0x30
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <std+0x68>)
 8004528:	6224      	str	r4, [r4, #32]
 800452a:	429c      	cmp	r4, r3
 800452c:	d006      	beq.n	800453c <std+0x48>
 800452e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004532:	4294      	cmp	r4, r2
 8004534:	d002      	beq.n	800453c <std+0x48>
 8004536:	33d0      	adds	r3, #208	@ 0xd0
 8004538:	429c      	cmp	r4, r3
 800453a:	d105      	bne.n	8004548 <std+0x54>
 800453c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004544:	f000 b986 	b.w	8004854 <__retarget_lock_init_recursive>
 8004548:	bd10      	pop	{r4, pc}
 800454a:	bf00      	nop
 800454c:	080046dd 	.word	0x080046dd
 8004550:	080046ff 	.word	0x080046ff
 8004554:	08004737 	.word	0x08004737
 8004558:	0800475b 	.word	0x0800475b
 800455c:	20000164 	.word	0x20000164

08004560 <stdio_exit_handler>:
 8004560:	4a02      	ldr	r2, [pc, #8]	@ (800456c <stdio_exit_handler+0xc>)
 8004562:	4903      	ldr	r1, [pc, #12]	@ (8004570 <stdio_exit_handler+0x10>)
 8004564:	4803      	ldr	r0, [pc, #12]	@ (8004574 <stdio_exit_handler+0x14>)
 8004566:	f000 b869 	b.w	800463c <_fwalk_sglue>
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c
 8004570:	080053c1 	.word	0x080053c1
 8004574:	2000001c 	.word	0x2000001c

08004578 <cleanup_stdio>:
 8004578:	6841      	ldr	r1, [r0, #4]
 800457a:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <cleanup_stdio+0x34>)
 800457c:	4299      	cmp	r1, r3
 800457e:	b510      	push	{r4, lr}
 8004580:	4604      	mov	r4, r0
 8004582:	d001      	beq.n	8004588 <cleanup_stdio+0x10>
 8004584:	f000 ff1c 	bl	80053c0 <_fflush_r>
 8004588:	68a1      	ldr	r1, [r4, #8]
 800458a:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <cleanup_stdio+0x38>)
 800458c:	4299      	cmp	r1, r3
 800458e:	d002      	beq.n	8004596 <cleanup_stdio+0x1e>
 8004590:	4620      	mov	r0, r4
 8004592:	f000 ff15 	bl	80053c0 <_fflush_r>
 8004596:	68e1      	ldr	r1, [r4, #12]
 8004598:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <cleanup_stdio+0x3c>)
 800459a:	4299      	cmp	r1, r3
 800459c:	d004      	beq.n	80045a8 <cleanup_stdio+0x30>
 800459e:	4620      	mov	r0, r4
 80045a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a4:	f000 bf0c 	b.w	80053c0 <_fflush_r>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	bf00      	nop
 80045ac:	20000164 	.word	0x20000164
 80045b0:	200001cc 	.word	0x200001cc
 80045b4:	20000234 	.word	0x20000234

080045b8 <global_stdio_init.part.0>:
 80045b8:	b510      	push	{r4, lr}
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <global_stdio_init.part.0+0x30>)
 80045bc:	4c0b      	ldr	r4, [pc, #44]	@ (80045ec <global_stdio_init.part.0+0x34>)
 80045be:	4a0c      	ldr	r2, [pc, #48]	@ (80045f0 <global_stdio_init.part.0+0x38>)
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	4620      	mov	r0, r4
 80045c4:	2200      	movs	r2, #0
 80045c6:	2104      	movs	r1, #4
 80045c8:	f7ff ff94 	bl	80044f4 <std>
 80045cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045d0:	2201      	movs	r2, #1
 80045d2:	2109      	movs	r1, #9
 80045d4:	f7ff ff8e 	bl	80044f4 <std>
 80045d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045dc:	2202      	movs	r2, #2
 80045de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e2:	2112      	movs	r1, #18
 80045e4:	f7ff bf86 	b.w	80044f4 <std>
 80045e8:	2000029c 	.word	0x2000029c
 80045ec:	20000164 	.word	0x20000164
 80045f0:	08004561 	.word	0x08004561

080045f4 <__sfp_lock_acquire>:
 80045f4:	4801      	ldr	r0, [pc, #4]	@ (80045fc <__sfp_lock_acquire+0x8>)
 80045f6:	f000 b92e 	b.w	8004856 <__retarget_lock_acquire_recursive>
 80045fa:	bf00      	nop
 80045fc:	200002a5 	.word	0x200002a5

08004600 <__sfp_lock_release>:
 8004600:	4801      	ldr	r0, [pc, #4]	@ (8004608 <__sfp_lock_release+0x8>)
 8004602:	f000 b929 	b.w	8004858 <__retarget_lock_release_recursive>
 8004606:	bf00      	nop
 8004608:	200002a5 	.word	0x200002a5

0800460c <__sinit>:
 800460c:	b510      	push	{r4, lr}
 800460e:	4604      	mov	r4, r0
 8004610:	f7ff fff0 	bl	80045f4 <__sfp_lock_acquire>
 8004614:	6a23      	ldr	r3, [r4, #32]
 8004616:	b11b      	cbz	r3, 8004620 <__sinit+0x14>
 8004618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800461c:	f7ff bff0 	b.w	8004600 <__sfp_lock_release>
 8004620:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <__sinit+0x28>)
 8004622:	6223      	str	r3, [r4, #32]
 8004624:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <__sinit+0x2c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f5      	bne.n	8004618 <__sinit+0xc>
 800462c:	f7ff ffc4 	bl	80045b8 <global_stdio_init.part.0>
 8004630:	e7f2      	b.n	8004618 <__sinit+0xc>
 8004632:	bf00      	nop
 8004634:	08004579 	.word	0x08004579
 8004638:	2000029c 	.word	0x2000029c

0800463c <_fwalk_sglue>:
 800463c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004640:	4607      	mov	r7, r0
 8004642:	4688      	mov	r8, r1
 8004644:	4614      	mov	r4, r2
 8004646:	2600      	movs	r6, #0
 8004648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800464c:	f1b9 0901 	subs.w	r9, r9, #1
 8004650:	d505      	bpl.n	800465e <_fwalk_sglue+0x22>
 8004652:	6824      	ldr	r4, [r4, #0]
 8004654:	2c00      	cmp	r4, #0
 8004656:	d1f7      	bne.n	8004648 <_fwalk_sglue+0xc>
 8004658:	4630      	mov	r0, r6
 800465a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800465e:	89ab      	ldrh	r3, [r5, #12]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d907      	bls.n	8004674 <_fwalk_sglue+0x38>
 8004664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004668:	3301      	adds	r3, #1
 800466a:	d003      	beq.n	8004674 <_fwalk_sglue+0x38>
 800466c:	4629      	mov	r1, r5
 800466e:	4638      	mov	r0, r7
 8004670:	47c0      	blx	r8
 8004672:	4306      	orrs	r6, r0
 8004674:	3568      	adds	r5, #104	@ 0x68
 8004676:	e7e9      	b.n	800464c <_fwalk_sglue+0x10>

08004678 <iprintf>:
 8004678:	b40f      	push	{r0, r1, r2, r3}
 800467a:	b507      	push	{r0, r1, r2, lr}
 800467c:	4906      	ldr	r1, [pc, #24]	@ (8004698 <iprintf+0x20>)
 800467e:	ab04      	add	r3, sp, #16
 8004680:	6808      	ldr	r0, [r1, #0]
 8004682:	f853 2b04 	ldr.w	r2, [r3], #4
 8004686:	6881      	ldr	r1, [r0, #8]
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	f000 fb6f 	bl	8004d6c <_vfiprintf_r>
 800468e:	b003      	add	sp, #12
 8004690:	f85d eb04 	ldr.w	lr, [sp], #4
 8004694:	b004      	add	sp, #16
 8004696:	4770      	bx	lr
 8004698:	20000018 	.word	0x20000018

0800469c <siprintf>:
 800469c:	b40e      	push	{r1, r2, r3}
 800469e:	b500      	push	{lr}
 80046a0:	b09c      	sub	sp, #112	@ 0x70
 80046a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80046a4:	9002      	str	r0, [sp, #8]
 80046a6:	9006      	str	r0, [sp, #24]
 80046a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046ac:	4809      	ldr	r0, [pc, #36]	@ (80046d4 <siprintf+0x38>)
 80046ae:	9107      	str	r1, [sp, #28]
 80046b0:	9104      	str	r1, [sp, #16]
 80046b2:	4909      	ldr	r1, [pc, #36]	@ (80046d8 <siprintf+0x3c>)
 80046b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b8:	9105      	str	r1, [sp, #20]
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	a902      	add	r1, sp, #8
 80046c0:	f000 fa2e 	bl	8004b20 <_svfiprintf_r>
 80046c4:	9b02      	ldr	r3, [sp, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	b01c      	add	sp, #112	@ 0x70
 80046cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d0:	b003      	add	sp, #12
 80046d2:	4770      	bx	lr
 80046d4:	20000018 	.word	0x20000018
 80046d8:	ffff0208 	.word	0xffff0208

080046dc <__sread>:
 80046dc:	b510      	push	{r4, lr}
 80046de:	460c      	mov	r4, r1
 80046e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e4:	f000 f868 	bl	80047b8 <_read_r>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	bfab      	itete	ge
 80046ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046ee:	89a3      	ldrhlt	r3, [r4, #12]
 80046f0:	181b      	addge	r3, r3, r0
 80046f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046f6:	bfac      	ite	ge
 80046f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046fa:	81a3      	strhlt	r3, [r4, #12]
 80046fc:	bd10      	pop	{r4, pc}

080046fe <__swrite>:
 80046fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004702:	461f      	mov	r7, r3
 8004704:	898b      	ldrh	r3, [r1, #12]
 8004706:	05db      	lsls	r3, r3, #23
 8004708:	4605      	mov	r5, r0
 800470a:	460c      	mov	r4, r1
 800470c:	4616      	mov	r6, r2
 800470e:	d505      	bpl.n	800471c <__swrite+0x1e>
 8004710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004714:	2302      	movs	r3, #2
 8004716:	2200      	movs	r2, #0
 8004718:	f000 f83c 	bl	8004794 <_lseek_r>
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004726:	81a3      	strh	r3, [r4, #12]
 8004728:	4632      	mov	r2, r6
 800472a:	463b      	mov	r3, r7
 800472c:	4628      	mov	r0, r5
 800472e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004732:	f000 b853 	b.w	80047dc <_write_r>

08004736 <__sseek>:
 8004736:	b510      	push	{r4, lr}
 8004738:	460c      	mov	r4, r1
 800473a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473e:	f000 f829 	bl	8004794 <_lseek_r>
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	bf15      	itete	ne
 8004748:	6560      	strne	r0, [r4, #84]	@ 0x54
 800474a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800474e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004752:	81a3      	strheq	r3, [r4, #12]
 8004754:	bf18      	it	ne
 8004756:	81a3      	strhne	r3, [r4, #12]
 8004758:	bd10      	pop	{r4, pc}

0800475a <__sclose>:
 800475a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475e:	f000 b809 	b.w	8004774 <_close_r>

08004762 <memset>:
 8004762:	4402      	add	r2, r0
 8004764:	4603      	mov	r3, r0
 8004766:	4293      	cmp	r3, r2
 8004768:	d100      	bne.n	800476c <memset+0xa>
 800476a:	4770      	bx	lr
 800476c:	f803 1b01 	strb.w	r1, [r3], #1
 8004770:	e7f9      	b.n	8004766 <memset+0x4>
	...

08004774 <_close_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d06      	ldr	r5, [pc, #24]	@ (8004790 <_close_r+0x1c>)
 8004778:	2300      	movs	r3, #0
 800477a:	4604      	mov	r4, r0
 800477c:	4608      	mov	r0, r1
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	f7fc fa90 	bl	8000ca4 <_close>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_close_r+0x1a>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_close_r+0x1a>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200002a0 	.word	0x200002a0

08004794 <_lseek_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	@ (80047b4 <_lseek_r+0x20>)
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc faa5 	bl	8000cf2 <_lseek>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_lseek_r+0x1e>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_lseek_r+0x1e>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	200002a0 	.word	0x200002a0

080047b8 <_read_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d07      	ldr	r5, [pc, #28]	@ (80047d8 <_read_r+0x20>)
 80047bc:	4604      	mov	r4, r0
 80047be:	4608      	mov	r0, r1
 80047c0:	4611      	mov	r1, r2
 80047c2:	2200      	movs	r2, #0
 80047c4:	602a      	str	r2, [r5, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f7fc fa33 	bl	8000c32 <_read>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_read_r+0x1e>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_read_r+0x1e>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200002a0 	.word	0x200002a0

080047dc <_write_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d07      	ldr	r5, [pc, #28]	@ (80047fc <_write_r+0x20>)
 80047e0:	4604      	mov	r4, r0
 80047e2:	4608      	mov	r0, r1
 80047e4:	4611      	mov	r1, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	602a      	str	r2, [r5, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7fc fa3e 	bl	8000c6c <_write>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_write_r+0x1e>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_write_r+0x1e>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	200002a0 	.word	0x200002a0

08004800 <__errno>:
 8004800:	4b01      	ldr	r3, [pc, #4]	@ (8004808 <__errno+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000018 	.word	0x20000018

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4d0d      	ldr	r5, [pc, #52]	@ (8004844 <__libc_init_array+0x38>)
 8004810:	4c0d      	ldr	r4, [pc, #52]	@ (8004848 <__libc_init_array+0x3c>)
 8004812:	1b64      	subs	r4, r4, r5
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	2600      	movs	r6, #0
 8004818:	42a6      	cmp	r6, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	4d0b      	ldr	r5, [pc, #44]	@ (800484c <__libc_init_array+0x40>)
 800481e:	4c0c      	ldr	r4, [pc, #48]	@ (8004850 <__libc_init_array+0x44>)
 8004820:	f000 ff6e 	bl	8005700 <_init>
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	2600      	movs	r6, #0
 800482a:	42a6      	cmp	r6, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f855 3b04 	ldr.w	r3, [r5], #4
 8004834:	4798      	blx	r3
 8004836:	3601      	adds	r6, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f855 3b04 	ldr.w	r3, [r5], #4
 800483e:	4798      	blx	r3
 8004840:	3601      	adds	r6, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	08005990 	.word	0x08005990
 8004848:	08005990 	.word	0x08005990
 800484c:	08005990 	.word	0x08005990
 8004850:	08005994 	.word	0x08005994

08004854 <__retarget_lock_init_recursive>:
 8004854:	4770      	bx	lr

08004856 <__retarget_lock_acquire_recursive>:
 8004856:	4770      	bx	lr

08004858 <__retarget_lock_release_recursive>:
 8004858:	4770      	bx	lr

0800485a <memcpy>:
 800485a:	440a      	add	r2, r1
 800485c:	4291      	cmp	r1, r2
 800485e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004862:	d100      	bne.n	8004866 <memcpy+0xc>
 8004864:	4770      	bx	lr
 8004866:	b510      	push	{r4, lr}
 8004868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800486c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004870:	4291      	cmp	r1, r2
 8004872:	d1f9      	bne.n	8004868 <memcpy+0xe>
 8004874:	bd10      	pop	{r4, pc}
	...

08004878 <_free_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4605      	mov	r5, r0
 800487c:	2900      	cmp	r1, #0
 800487e:	d041      	beq.n	8004904 <_free_r+0x8c>
 8004880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004884:	1f0c      	subs	r4, r1, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	bfb8      	it	lt
 800488a:	18e4      	addlt	r4, r4, r3
 800488c:	f000 f8e0 	bl	8004a50 <__malloc_lock>
 8004890:	4a1d      	ldr	r2, [pc, #116]	@ (8004908 <_free_r+0x90>)
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	b933      	cbnz	r3, 80048a4 <_free_r+0x2c>
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	6014      	str	r4, [r2, #0]
 800489a:	4628      	mov	r0, r5
 800489c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a0:	f000 b8dc 	b.w	8004a5c <__malloc_unlock>
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	d908      	bls.n	80048ba <_free_r+0x42>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	1821      	adds	r1, r4, r0
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf01      	itttt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	1809      	addeq	r1, r1, r0
 80048b6:	6021      	streq	r1, [r4, #0]
 80048b8:	e7ed      	b.n	8004896 <_free_r+0x1e>
 80048ba:	461a      	mov	r2, r3
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b10b      	cbz	r3, 80048c4 <_free_r+0x4c>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d9fa      	bls.n	80048ba <_free_r+0x42>
 80048c4:	6811      	ldr	r1, [r2, #0]
 80048c6:	1850      	adds	r0, r2, r1
 80048c8:	42a0      	cmp	r0, r4
 80048ca:	d10b      	bne.n	80048e4 <_free_r+0x6c>
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	4401      	add	r1, r0
 80048d0:	1850      	adds	r0, r2, r1
 80048d2:	4283      	cmp	r3, r0
 80048d4:	6011      	str	r1, [r2, #0]
 80048d6:	d1e0      	bne.n	800489a <_free_r+0x22>
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	6053      	str	r3, [r2, #4]
 80048de:	4408      	add	r0, r1
 80048e0:	6010      	str	r0, [r2, #0]
 80048e2:	e7da      	b.n	800489a <_free_r+0x22>
 80048e4:	d902      	bls.n	80048ec <_free_r+0x74>
 80048e6:	230c      	movs	r3, #12
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	e7d6      	b.n	800489a <_free_r+0x22>
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	1821      	adds	r1, r4, r0
 80048f0:	428b      	cmp	r3, r1
 80048f2:	bf04      	itt	eq
 80048f4:	6819      	ldreq	r1, [r3, #0]
 80048f6:	685b      	ldreq	r3, [r3, #4]
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	bf04      	itt	eq
 80048fc:	1809      	addeq	r1, r1, r0
 80048fe:	6021      	streq	r1, [r4, #0]
 8004900:	6054      	str	r4, [r2, #4]
 8004902:	e7ca      	b.n	800489a <_free_r+0x22>
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	200002ac 	.word	0x200002ac

0800490c <sbrk_aligned>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4e0f      	ldr	r6, [pc, #60]	@ (800494c <sbrk_aligned+0x40>)
 8004910:	460c      	mov	r4, r1
 8004912:	6831      	ldr	r1, [r6, #0]
 8004914:	4605      	mov	r5, r0
 8004916:	b911      	cbnz	r1, 800491e <sbrk_aligned+0x12>
 8004918:	f000 fe28 	bl	800556c <_sbrk_r>
 800491c:	6030      	str	r0, [r6, #0]
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fe23 	bl	800556c <_sbrk_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d103      	bne.n	8004932 <sbrk_aligned+0x26>
 800492a:	f04f 34ff 	mov.w	r4, #4294967295
 800492e:	4620      	mov	r0, r4
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	1cc4      	adds	r4, r0, #3
 8004934:	f024 0403 	bic.w	r4, r4, #3
 8004938:	42a0      	cmp	r0, r4
 800493a:	d0f8      	beq.n	800492e <sbrk_aligned+0x22>
 800493c:	1a21      	subs	r1, r4, r0
 800493e:	4628      	mov	r0, r5
 8004940:	f000 fe14 	bl	800556c <_sbrk_r>
 8004944:	3001      	adds	r0, #1
 8004946:	d1f2      	bne.n	800492e <sbrk_aligned+0x22>
 8004948:	e7ef      	b.n	800492a <sbrk_aligned+0x1e>
 800494a:	bf00      	nop
 800494c:	200002a8 	.word	0x200002a8

08004950 <_malloc_r>:
 8004950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004954:	1ccd      	adds	r5, r1, #3
 8004956:	f025 0503 	bic.w	r5, r5, #3
 800495a:	3508      	adds	r5, #8
 800495c:	2d0c      	cmp	r5, #12
 800495e:	bf38      	it	cc
 8004960:	250c      	movcc	r5, #12
 8004962:	2d00      	cmp	r5, #0
 8004964:	4606      	mov	r6, r0
 8004966:	db01      	blt.n	800496c <_malloc_r+0x1c>
 8004968:	42a9      	cmp	r1, r5
 800496a:	d904      	bls.n	8004976 <_malloc_r+0x26>
 800496c:	230c      	movs	r3, #12
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	2000      	movs	r0, #0
 8004972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a4c <_malloc_r+0xfc>
 800497a:	f000 f869 	bl	8004a50 <__malloc_lock>
 800497e:	f8d8 3000 	ldr.w	r3, [r8]
 8004982:	461c      	mov	r4, r3
 8004984:	bb44      	cbnz	r4, 80049d8 <_malloc_r+0x88>
 8004986:	4629      	mov	r1, r5
 8004988:	4630      	mov	r0, r6
 800498a:	f7ff ffbf 	bl	800490c <sbrk_aligned>
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	4604      	mov	r4, r0
 8004992:	d158      	bne.n	8004a46 <_malloc_r+0xf6>
 8004994:	f8d8 4000 	ldr.w	r4, [r8]
 8004998:	4627      	mov	r7, r4
 800499a:	2f00      	cmp	r7, #0
 800499c:	d143      	bne.n	8004a26 <_malloc_r+0xd6>
 800499e:	2c00      	cmp	r4, #0
 80049a0:	d04b      	beq.n	8004a3a <_malloc_r+0xea>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	4639      	mov	r1, r7
 80049a6:	4630      	mov	r0, r6
 80049a8:	eb04 0903 	add.w	r9, r4, r3
 80049ac:	f000 fdde 	bl	800556c <_sbrk_r>
 80049b0:	4581      	cmp	r9, r0
 80049b2:	d142      	bne.n	8004a3a <_malloc_r+0xea>
 80049b4:	6821      	ldr	r1, [r4, #0]
 80049b6:	1a6d      	subs	r5, r5, r1
 80049b8:	4629      	mov	r1, r5
 80049ba:	4630      	mov	r0, r6
 80049bc:	f7ff ffa6 	bl	800490c <sbrk_aligned>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d03a      	beq.n	8004a3a <_malloc_r+0xea>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	442b      	add	r3, r5
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	f8d8 3000 	ldr.w	r3, [r8]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	bb62      	cbnz	r2, 8004a2c <_malloc_r+0xdc>
 80049d2:	f8c8 7000 	str.w	r7, [r8]
 80049d6:	e00f      	b.n	80049f8 <_malloc_r+0xa8>
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	1b52      	subs	r2, r2, r5
 80049dc:	d420      	bmi.n	8004a20 <_malloc_r+0xd0>
 80049de:	2a0b      	cmp	r2, #11
 80049e0:	d917      	bls.n	8004a12 <_malloc_r+0xc2>
 80049e2:	1961      	adds	r1, r4, r5
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	6025      	str	r5, [r4, #0]
 80049e8:	bf18      	it	ne
 80049ea:	6059      	strne	r1, [r3, #4]
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	bf08      	it	eq
 80049f0:	f8c8 1000 	streq.w	r1, [r8]
 80049f4:	5162      	str	r2, [r4, r5]
 80049f6:	604b      	str	r3, [r1, #4]
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f82f 	bl	8004a5c <__malloc_unlock>
 80049fe:	f104 000b 	add.w	r0, r4, #11
 8004a02:	1d23      	adds	r3, r4, #4
 8004a04:	f020 0007 	bic.w	r0, r0, #7
 8004a08:	1ac2      	subs	r2, r0, r3
 8004a0a:	bf1c      	itt	ne
 8004a0c:	1a1b      	subne	r3, r3, r0
 8004a0e:	50a3      	strne	r3, [r4, r2]
 8004a10:	e7af      	b.n	8004972 <_malloc_r+0x22>
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	bf0c      	ite	eq
 8004a18:	f8c8 2000 	streq.w	r2, [r8]
 8004a1c:	605a      	strne	r2, [r3, #4]
 8004a1e:	e7eb      	b.n	80049f8 <_malloc_r+0xa8>
 8004a20:	4623      	mov	r3, r4
 8004a22:	6864      	ldr	r4, [r4, #4]
 8004a24:	e7ae      	b.n	8004984 <_malloc_r+0x34>
 8004a26:	463c      	mov	r4, r7
 8004a28:	687f      	ldr	r7, [r7, #4]
 8004a2a:	e7b6      	b.n	800499a <_malloc_r+0x4a>
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	d1fb      	bne.n	8004a2c <_malloc_r+0xdc>
 8004a34:	2300      	movs	r3, #0
 8004a36:	6053      	str	r3, [r2, #4]
 8004a38:	e7de      	b.n	80049f8 <_malloc_r+0xa8>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f000 f80c 	bl	8004a5c <__malloc_unlock>
 8004a44:	e794      	b.n	8004970 <_malloc_r+0x20>
 8004a46:	6005      	str	r5, [r0, #0]
 8004a48:	e7d6      	b.n	80049f8 <_malloc_r+0xa8>
 8004a4a:	bf00      	nop
 8004a4c:	200002ac 	.word	0x200002ac

08004a50 <__malloc_lock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	@ (8004a58 <__malloc_lock+0x8>)
 8004a52:	f7ff bf00 	b.w	8004856 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	200002a4 	.word	0x200002a4

08004a5c <__malloc_unlock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	@ (8004a64 <__malloc_unlock+0x8>)
 8004a5e:	f7ff befb 	b.w	8004858 <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	200002a4 	.word	0x200002a4

08004a68 <__ssputs_r>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	688e      	ldr	r6, [r1, #8]
 8004a6e:	461f      	mov	r7, r3
 8004a70:	42be      	cmp	r6, r7
 8004a72:	680b      	ldr	r3, [r1, #0]
 8004a74:	4682      	mov	sl, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4690      	mov	r8, r2
 8004a7a:	d82d      	bhi.n	8004ad8 <__ssputs_r+0x70>
 8004a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a84:	d026      	beq.n	8004ad4 <__ssputs_r+0x6c>
 8004a86:	6965      	ldr	r5, [r4, #20]
 8004a88:	6909      	ldr	r1, [r1, #16]
 8004a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a8e:	eba3 0901 	sub.w	r9, r3, r1
 8004a92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a96:	1c7b      	adds	r3, r7, #1
 8004a98:	444b      	add	r3, r9
 8004a9a:	106d      	asrs	r5, r5, #1
 8004a9c:	429d      	cmp	r5, r3
 8004a9e:	bf38      	it	cc
 8004aa0:	461d      	movcc	r5, r3
 8004aa2:	0553      	lsls	r3, r2, #21
 8004aa4:	d527      	bpl.n	8004af6 <__ssputs_r+0x8e>
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7ff ff52 	bl	8004950 <_malloc_r>
 8004aac:	4606      	mov	r6, r0
 8004aae:	b360      	cbz	r0, 8004b0a <__ssputs_r+0xa2>
 8004ab0:	6921      	ldr	r1, [r4, #16]
 8004ab2:	464a      	mov	r2, r9
 8004ab4:	f7ff fed1 	bl	800485a <memcpy>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	6126      	str	r6, [r4, #16]
 8004ac6:	6165      	str	r5, [r4, #20]
 8004ac8:	444e      	add	r6, r9
 8004aca:	eba5 0509 	sub.w	r5, r5, r9
 8004ace:	6026      	str	r6, [r4, #0]
 8004ad0:	60a5      	str	r5, [r4, #8]
 8004ad2:	463e      	mov	r6, r7
 8004ad4:	42be      	cmp	r6, r7
 8004ad6:	d900      	bls.n	8004ada <__ssputs_r+0x72>
 8004ad8:	463e      	mov	r6, r7
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	4632      	mov	r2, r6
 8004ade:	4641      	mov	r1, r8
 8004ae0:	f000 fd2a 	bl	8005538 <memmove>
 8004ae4:	68a3      	ldr	r3, [r4, #8]
 8004ae6:	1b9b      	subs	r3, r3, r6
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	4433      	add	r3, r6
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	2000      	movs	r0, #0
 8004af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af6:	462a      	mov	r2, r5
 8004af8:	f000 fd48 	bl	800558c <_realloc_r>
 8004afc:	4606      	mov	r6, r0
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d1e0      	bne.n	8004ac4 <__ssputs_r+0x5c>
 8004b02:	6921      	ldr	r1, [r4, #16]
 8004b04:	4650      	mov	r0, sl
 8004b06:	f7ff feb7 	bl	8004878 <_free_r>
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	f8ca 3000 	str.w	r3, [sl]
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	e7e9      	b.n	8004af2 <__ssputs_r+0x8a>
	...

08004b20 <_svfiprintf_r>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4698      	mov	r8, r3
 8004b26:	898b      	ldrh	r3, [r1, #12]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	b09d      	sub	sp, #116	@ 0x74
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	460d      	mov	r5, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	d510      	bpl.n	8004b56 <_svfiprintf_r+0x36>
 8004b34:	690b      	ldr	r3, [r1, #16]
 8004b36:	b973      	cbnz	r3, 8004b56 <_svfiprintf_r+0x36>
 8004b38:	2140      	movs	r1, #64	@ 0x40
 8004b3a:	f7ff ff09 	bl	8004950 <_malloc_r>
 8004b3e:	6028      	str	r0, [r5, #0]
 8004b40:	6128      	str	r0, [r5, #16]
 8004b42:	b930      	cbnz	r0, 8004b52 <_svfiprintf_r+0x32>
 8004b44:	230c      	movs	r3, #12
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b01d      	add	sp, #116	@ 0x74
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	2340      	movs	r3, #64	@ 0x40
 8004b54:	616b      	str	r3, [r5, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b64:	2330      	movs	r3, #48	@ 0x30
 8004b66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d04 <_svfiprintf_r+0x1e4>
 8004b6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b6e:	f04f 0901 	mov.w	r9, #1
 8004b72:	4623      	mov	r3, r4
 8004b74:	469a      	mov	sl, r3
 8004b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7a:	b10a      	cbz	r2, 8004b80 <_svfiprintf_r+0x60>
 8004b7c:	2a25      	cmp	r2, #37	@ 0x25
 8004b7e:	d1f9      	bne.n	8004b74 <_svfiprintf_r+0x54>
 8004b80:	ebba 0b04 	subs.w	fp, sl, r4
 8004b84:	d00b      	beq.n	8004b9e <_svfiprintf_r+0x7e>
 8004b86:	465b      	mov	r3, fp
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff ff6b 	bl	8004a68 <__ssputs_r>
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 80a7 	beq.w	8004ce6 <_svfiprintf_r+0x1c6>
 8004b98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b9a:	445a      	add	r2, fp
 8004b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 809f 	beq.w	8004ce6 <_svfiprintf_r+0x1c6>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb2:	f10a 0a01 	add.w	sl, sl, #1
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bc0:	4654      	mov	r4, sl
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc8:	484e      	ldr	r0, [pc, #312]	@ (8004d04 <_svfiprintf_r+0x1e4>)
 8004bca:	f7fb fb11 	bl	80001f0 <memchr>
 8004bce:	9a04      	ldr	r2, [sp, #16]
 8004bd0:	b9d8      	cbnz	r0, 8004c0a <_svfiprintf_r+0xea>
 8004bd2:	06d0      	lsls	r0, r2, #27
 8004bd4:	bf44      	itt	mi
 8004bd6:	2320      	movmi	r3, #32
 8004bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bdc:	0711      	lsls	r1, r2, #28
 8004bde:	bf44      	itt	mi
 8004be0:	232b      	movmi	r3, #43	@ 0x2b
 8004be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bec:	d015      	beq.n	8004c1a <_svfiprintf_r+0xfa>
 8004bee:	9a07      	ldr	r2, [sp, #28]
 8004bf0:	4654      	mov	r4, sl
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f04f 0c0a 	mov.w	ip, #10
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfe:	3b30      	subs	r3, #48	@ 0x30
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	d94b      	bls.n	8004c9c <_svfiprintf_r+0x17c>
 8004c04:	b1b0      	cbz	r0, 8004c34 <_svfiprintf_r+0x114>
 8004c06:	9207      	str	r2, [sp, #28]
 8004c08:	e014      	b.n	8004c34 <_svfiprintf_r+0x114>
 8004c0a:	eba0 0308 	sub.w	r3, r0, r8
 8004c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	46a2      	mov	sl, r4
 8004c18:	e7d2      	b.n	8004bc0 <_svfiprintf_r+0xa0>
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfbb      	ittet	lt
 8004c26:	425b      	neglt	r3, r3
 8004c28:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2c:	9307      	strge	r3, [sp, #28]
 8004c2e:	9307      	strlt	r3, [sp, #28]
 8004c30:	bfb8      	it	lt
 8004c32:	9204      	strlt	r2, [sp, #16]
 8004c34:	7823      	ldrb	r3, [r4, #0]
 8004c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c38:	d10a      	bne.n	8004c50 <_svfiprintf_r+0x130>
 8004c3a:	7863      	ldrb	r3, [r4, #1]
 8004c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c3e:	d132      	bne.n	8004ca6 <_svfiprintf_r+0x186>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	9203      	str	r2, [sp, #12]
 8004c48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c4c:	3402      	adds	r4, #2
 8004c4e:	9305      	str	r3, [sp, #20]
 8004c50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d14 <_svfiprintf_r+0x1f4>
 8004c54:	7821      	ldrb	r1, [r4, #0]
 8004c56:	2203      	movs	r2, #3
 8004c58:	4650      	mov	r0, sl
 8004c5a:	f7fb fac9 	bl	80001f0 <memchr>
 8004c5e:	b138      	cbz	r0, 8004c70 <_svfiprintf_r+0x150>
 8004c60:	9b04      	ldr	r3, [sp, #16]
 8004c62:	eba0 000a 	sub.w	r0, r0, sl
 8004c66:	2240      	movs	r2, #64	@ 0x40
 8004c68:	4082      	lsls	r2, r0
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	3401      	adds	r4, #1
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c74:	4824      	ldr	r0, [pc, #144]	@ (8004d08 <_svfiprintf_r+0x1e8>)
 8004c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c7a:	2206      	movs	r2, #6
 8004c7c:	f7fb fab8 	bl	80001f0 <memchr>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d036      	beq.n	8004cf2 <_svfiprintf_r+0x1d2>
 8004c84:	4b21      	ldr	r3, [pc, #132]	@ (8004d0c <_svfiprintf_r+0x1ec>)
 8004c86:	bb1b      	cbnz	r3, 8004cd0 <_svfiprintf_r+0x1b0>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	3307      	adds	r3, #7
 8004c8c:	f023 0307 	bic.w	r3, r3, #7
 8004c90:	3308      	adds	r3, #8
 8004c92:	9303      	str	r3, [sp, #12]
 8004c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c96:	4433      	add	r3, r6
 8004c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9a:	e76a      	b.n	8004b72 <_svfiprintf_r+0x52>
 8004c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	e7a8      	b.n	8004bf8 <_svfiprintf_r+0xd8>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	3401      	adds	r4, #1
 8004caa:	9305      	str	r3, [sp, #20]
 8004cac:	4619      	mov	r1, r3
 8004cae:	f04f 0c0a 	mov.w	ip, #10
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cb8:	3a30      	subs	r2, #48	@ 0x30
 8004cba:	2a09      	cmp	r2, #9
 8004cbc:	d903      	bls.n	8004cc6 <_svfiprintf_r+0x1a6>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0c6      	beq.n	8004c50 <_svfiprintf_r+0x130>
 8004cc2:	9105      	str	r1, [sp, #20]
 8004cc4:	e7c4      	b.n	8004c50 <_svfiprintf_r+0x130>
 8004cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cca:	4604      	mov	r4, r0
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e7f0      	b.n	8004cb2 <_svfiprintf_r+0x192>
 8004cd0:	ab03      	add	r3, sp, #12
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004d10 <_svfiprintf_r+0x1f0>)
 8004cd8:	a904      	add	r1, sp, #16
 8004cda:	4638      	mov	r0, r7
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	1c42      	adds	r2, r0, #1
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	d1d6      	bne.n	8004c94 <_svfiprintf_r+0x174>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	065b      	lsls	r3, r3, #25
 8004cea:	f53f af2d 	bmi.w	8004b48 <_svfiprintf_r+0x28>
 8004cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cf0:	e72c      	b.n	8004b4c <_svfiprintf_r+0x2c>
 8004cf2:	ab03      	add	r3, sp, #12
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	462a      	mov	r2, r5
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <_svfiprintf_r+0x1f0>)
 8004cfa:	a904      	add	r1, sp, #16
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	f000 f9bb 	bl	8005078 <_printf_i>
 8004d02:	e7ed      	b.n	8004ce0 <_svfiprintf_r+0x1c0>
 8004d04:	08005954 	.word	0x08005954
 8004d08:	0800595e 	.word	0x0800595e
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	08004a69 	.word	0x08004a69
 8004d14:	0800595a 	.word	0x0800595a

08004d18 <__sfputc_r>:
 8004d18:	6893      	ldr	r3, [r2, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	b410      	push	{r4}
 8004d20:	6093      	str	r3, [r2, #8]
 8004d22:	da08      	bge.n	8004d36 <__sfputc_r+0x1e>
 8004d24:	6994      	ldr	r4, [r2, #24]
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	db01      	blt.n	8004d2e <__sfputc_r+0x16>
 8004d2a:	290a      	cmp	r1, #10
 8004d2c:	d103      	bne.n	8004d36 <__sfputc_r+0x1e>
 8004d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d32:	f000 bb6d 	b.w	8005410 <__swbuf_r>
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	1c58      	adds	r0, r3, #1
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	7019      	strb	r1, [r3, #0]
 8004d3e:	4608      	mov	r0, r1
 8004d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <__sfputs_r>:
 8004d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d48:	4606      	mov	r6, r0
 8004d4a:	460f      	mov	r7, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	18d5      	adds	r5, r2, r3
 8004d50:	42ac      	cmp	r4, r5
 8004d52:	d101      	bne.n	8004d58 <__sfputs_r+0x12>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e007      	b.n	8004d68 <__sfputs_r+0x22>
 8004d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f7ff ffda 	bl	8004d18 <__sfputc_r>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d1f3      	bne.n	8004d50 <__sfputs_r+0xa>
 8004d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d6c <_vfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	460d      	mov	r5, r1
 8004d72:	b09d      	sub	sp, #116	@ 0x74
 8004d74:	4614      	mov	r4, r2
 8004d76:	4698      	mov	r8, r3
 8004d78:	4606      	mov	r6, r0
 8004d7a:	b118      	cbz	r0, 8004d84 <_vfiprintf_r+0x18>
 8004d7c:	6a03      	ldr	r3, [r0, #32]
 8004d7e:	b90b      	cbnz	r3, 8004d84 <_vfiprintf_r+0x18>
 8004d80:	f7ff fc44 	bl	800460c <__sinit>
 8004d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d405      	bmi.n	8004d96 <_vfiprintf_r+0x2a>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d402      	bmi.n	8004d96 <_vfiprintf_r+0x2a>
 8004d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d92:	f7ff fd60 	bl	8004856 <__retarget_lock_acquire_recursive>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	d501      	bpl.n	8004da0 <_vfiprintf_r+0x34>
 8004d9c:	692b      	ldr	r3, [r5, #16]
 8004d9e:	b99b      	cbnz	r3, 8004dc8 <_vfiprintf_r+0x5c>
 8004da0:	4629      	mov	r1, r5
 8004da2:	4630      	mov	r0, r6
 8004da4:	f000 fb72 	bl	800548c <__swsetup_r>
 8004da8:	b170      	cbz	r0, 8004dc8 <_vfiprintf_r+0x5c>
 8004daa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dac:	07dc      	lsls	r4, r3, #31
 8004dae:	d504      	bpl.n	8004dba <_vfiprintf_r+0x4e>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	b01d      	add	sp, #116	@ 0x74
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	89ab      	ldrh	r3, [r5, #12]
 8004dbc:	0598      	lsls	r0, r3, #22
 8004dbe:	d4f7      	bmi.n	8004db0 <_vfiprintf_r+0x44>
 8004dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dc2:	f7ff fd49 	bl	8004858 <__retarget_lock_release_recursive>
 8004dc6:	e7f3      	b.n	8004db0 <_vfiprintf_r+0x44>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd6:	2330      	movs	r3, #48	@ 0x30
 8004dd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f88 <_vfiprintf_r+0x21c>
 8004ddc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004de0:	f04f 0901 	mov.w	r9, #1
 8004de4:	4623      	mov	r3, r4
 8004de6:	469a      	mov	sl, r3
 8004de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dec:	b10a      	cbz	r2, 8004df2 <_vfiprintf_r+0x86>
 8004dee:	2a25      	cmp	r2, #37	@ 0x25
 8004df0:	d1f9      	bne.n	8004de6 <_vfiprintf_r+0x7a>
 8004df2:	ebba 0b04 	subs.w	fp, sl, r4
 8004df6:	d00b      	beq.n	8004e10 <_vfiprintf_r+0xa4>
 8004df8:	465b      	mov	r3, fp
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff ffa1 	bl	8004d46 <__sfputs_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	f000 80a7 	beq.w	8004f58 <_vfiprintf_r+0x1ec>
 8004e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e0c:	445a      	add	r2, fp
 8004e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e10:	f89a 3000 	ldrb.w	r3, [sl]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 809f 	beq.w	8004f58 <_vfiprintf_r+0x1ec>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e24:	f10a 0a01 	add.w	sl, sl, #1
 8004e28:	9304      	str	r3, [sp, #16]
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e32:	4654      	mov	r4, sl
 8004e34:	2205      	movs	r2, #5
 8004e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3a:	4853      	ldr	r0, [pc, #332]	@ (8004f88 <_vfiprintf_r+0x21c>)
 8004e3c:	f7fb f9d8 	bl	80001f0 <memchr>
 8004e40:	9a04      	ldr	r2, [sp, #16]
 8004e42:	b9d8      	cbnz	r0, 8004e7c <_vfiprintf_r+0x110>
 8004e44:	06d1      	lsls	r1, r2, #27
 8004e46:	bf44      	itt	mi
 8004e48:	2320      	movmi	r3, #32
 8004e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e4e:	0713      	lsls	r3, r2, #28
 8004e50:	bf44      	itt	mi
 8004e52:	232b      	movmi	r3, #43	@ 0x2b
 8004e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e58:	f89a 3000 	ldrb.w	r3, [sl]
 8004e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e5e:	d015      	beq.n	8004e8c <_vfiprintf_r+0x120>
 8004e60:	9a07      	ldr	r2, [sp, #28]
 8004e62:	4654      	mov	r4, sl
 8004e64:	2000      	movs	r0, #0
 8004e66:	f04f 0c0a 	mov.w	ip, #10
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e70:	3b30      	subs	r3, #48	@ 0x30
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	d94b      	bls.n	8004f0e <_vfiprintf_r+0x1a2>
 8004e76:	b1b0      	cbz	r0, 8004ea6 <_vfiprintf_r+0x13a>
 8004e78:	9207      	str	r2, [sp, #28]
 8004e7a:	e014      	b.n	8004ea6 <_vfiprintf_r+0x13a>
 8004e7c:	eba0 0308 	sub.w	r3, r0, r8
 8004e80:	fa09 f303 	lsl.w	r3, r9, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	46a2      	mov	sl, r4
 8004e8a:	e7d2      	b.n	8004e32 <_vfiprintf_r+0xc6>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d19      	adds	r1, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9103      	str	r1, [sp, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfbb      	ittet	lt
 8004e98:	425b      	neglt	r3, r3
 8004e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e9e:	9307      	strge	r3, [sp, #28]
 8004ea0:	9307      	strlt	r3, [sp, #28]
 8004ea2:	bfb8      	it	lt
 8004ea4:	9204      	strlt	r2, [sp, #16]
 8004ea6:	7823      	ldrb	r3, [r4, #0]
 8004ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eaa:	d10a      	bne.n	8004ec2 <_vfiprintf_r+0x156>
 8004eac:	7863      	ldrb	r3, [r4, #1]
 8004eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb0:	d132      	bne.n	8004f18 <_vfiprintf_r+0x1ac>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	1d1a      	adds	r2, r3, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	9203      	str	r2, [sp, #12]
 8004eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ebe:	3402      	adds	r4, #2
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f98 <_vfiprintf_r+0x22c>
 8004ec6:	7821      	ldrb	r1, [r4, #0]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4650      	mov	r0, sl
 8004ecc:	f7fb f990 	bl	80001f0 <memchr>
 8004ed0:	b138      	cbz	r0, 8004ee2 <_vfiprintf_r+0x176>
 8004ed2:	9b04      	ldr	r3, [sp, #16]
 8004ed4:	eba0 000a 	sub.w	r0, r0, sl
 8004ed8:	2240      	movs	r2, #64	@ 0x40
 8004eda:	4082      	lsls	r2, r0
 8004edc:	4313      	orrs	r3, r2
 8004ede:	3401      	adds	r4, #1
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee6:	4829      	ldr	r0, [pc, #164]	@ (8004f8c <_vfiprintf_r+0x220>)
 8004ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eec:	2206      	movs	r2, #6
 8004eee:	f7fb f97f 	bl	80001f0 <memchr>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d03f      	beq.n	8004f76 <_vfiprintf_r+0x20a>
 8004ef6:	4b26      	ldr	r3, [pc, #152]	@ (8004f90 <_vfiprintf_r+0x224>)
 8004ef8:	bb1b      	cbnz	r3, 8004f42 <_vfiprintf_r+0x1d6>
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	3308      	adds	r3, #8
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f08:	443b      	add	r3, r7
 8004f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f0c:	e76a      	b.n	8004de4 <_vfiprintf_r+0x78>
 8004f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f12:	460c      	mov	r4, r1
 8004f14:	2001      	movs	r0, #1
 8004f16:	e7a8      	b.n	8004e6a <_vfiprintf_r+0xfe>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	3401      	adds	r4, #1
 8004f1c:	9305      	str	r3, [sp, #20]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f04f 0c0a 	mov.w	ip, #10
 8004f24:	4620      	mov	r0, r4
 8004f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2a:	3a30      	subs	r2, #48	@ 0x30
 8004f2c:	2a09      	cmp	r2, #9
 8004f2e:	d903      	bls.n	8004f38 <_vfiprintf_r+0x1cc>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0c6      	beq.n	8004ec2 <_vfiprintf_r+0x156>
 8004f34:	9105      	str	r1, [sp, #20]
 8004f36:	e7c4      	b.n	8004ec2 <_vfiprintf_r+0x156>
 8004f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e7f0      	b.n	8004f24 <_vfiprintf_r+0x1b8>
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <_vfiprintf_r+0x228>)
 8004f4a:	a904      	add	r1, sp, #16
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f3af 8000 	nop.w
 8004f52:	4607      	mov	r7, r0
 8004f54:	1c78      	adds	r0, r7, #1
 8004f56:	d1d6      	bne.n	8004f06 <_vfiprintf_r+0x19a>
 8004f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f5a:	07d9      	lsls	r1, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_vfiprintf_r+0x1fe>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	059a      	lsls	r2, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_vfiprintf_r+0x1fe>
 8004f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f66:	f7ff fc77 	bl	8004858 <__retarget_lock_release_recursive>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	065b      	lsls	r3, r3, #25
 8004f6e:	f53f af1f 	bmi.w	8004db0 <_vfiprintf_r+0x44>
 8004f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f74:	e71e      	b.n	8004db4 <_vfiprintf_r+0x48>
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <_vfiprintf_r+0x228>)
 8004f7e:	a904      	add	r1, sp, #16
 8004f80:	4630      	mov	r0, r6
 8004f82:	f000 f879 	bl	8005078 <_printf_i>
 8004f86:	e7e4      	b.n	8004f52 <_vfiprintf_r+0x1e6>
 8004f88:	08005954 	.word	0x08005954
 8004f8c:	0800595e 	.word	0x0800595e
 8004f90:	00000000 	.word	0x00000000
 8004f94:	08004d47 	.word	0x08004d47
 8004f98:	0800595a 	.word	0x0800595a

08004f9c <_printf_common>:
 8004f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	4698      	mov	r8, r3
 8004fa4:	688a      	ldr	r2, [r1, #8]
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bfb8      	it	lt
 8004fb0:	4613      	movlt	r3, r2
 8004fb2:	6033      	str	r3, [r6, #0]
 8004fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fb8:	4607      	mov	r7, r0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	b10a      	cbz	r2, 8004fc2 <_printf_common+0x26>
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	0699      	lsls	r1, r3, #26
 8004fc6:	bf42      	ittt	mi
 8004fc8:	6833      	ldrmi	r3, [r6, #0]
 8004fca:	3302      	addmi	r3, #2
 8004fcc:	6033      	strmi	r3, [r6, #0]
 8004fce:	6825      	ldr	r5, [r4, #0]
 8004fd0:	f015 0506 	ands.w	r5, r5, #6
 8004fd4:	d106      	bne.n	8004fe4 <_printf_common+0x48>
 8004fd6:	f104 0a19 	add.w	sl, r4, #25
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	6832      	ldr	r2, [r6, #0]
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	42ab      	cmp	r3, r5
 8004fe2:	dc26      	bgt.n	8005032 <_printf_common+0x96>
 8004fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	3b00      	subs	r3, #0
 8004fec:	bf18      	it	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	0692      	lsls	r2, r2, #26
 8004ff2:	d42b      	bmi.n	800504c <_printf_common+0xb0>
 8004ff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c8      	blx	r9
 8004ffe:	3001      	adds	r0, #1
 8005000:	d01e      	beq.n	8005040 <_printf_common+0xa4>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	f003 0306 	and.w	r3, r3, #6
 800500a:	2b04      	cmp	r3, #4
 800500c:	bf02      	ittt	eq
 800500e:	68e5      	ldreq	r5, [r4, #12]
 8005010:	6833      	ldreq	r3, [r6, #0]
 8005012:	1aed      	subeq	r5, r5, r3
 8005014:	68a3      	ldr	r3, [r4, #8]
 8005016:	bf0c      	ite	eq
 8005018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800501c:	2500      	movne	r5, #0
 800501e:	4293      	cmp	r3, r2
 8005020:	bfc4      	itt	gt
 8005022:	1a9b      	subgt	r3, r3, r2
 8005024:	18ed      	addgt	r5, r5, r3
 8005026:	2600      	movs	r6, #0
 8005028:	341a      	adds	r4, #26
 800502a:	42b5      	cmp	r5, r6
 800502c:	d11a      	bne.n	8005064 <_printf_common+0xc8>
 800502e:	2000      	movs	r0, #0
 8005030:	e008      	b.n	8005044 <_printf_common+0xa8>
 8005032:	2301      	movs	r3, #1
 8005034:	4652      	mov	r2, sl
 8005036:	4641      	mov	r1, r8
 8005038:	4638      	mov	r0, r7
 800503a:	47c8      	blx	r9
 800503c:	3001      	adds	r0, #1
 800503e:	d103      	bne.n	8005048 <_printf_common+0xac>
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	3501      	adds	r5, #1
 800504a:	e7c6      	b.n	8004fda <_printf_common+0x3e>
 800504c:	18e1      	adds	r1, r4, r3
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	2030      	movs	r0, #48	@ 0x30
 8005052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005056:	4422      	add	r2, r4
 8005058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800505c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005060:	3302      	adds	r3, #2
 8005062:	e7c7      	b.n	8004ff4 <_printf_common+0x58>
 8005064:	2301      	movs	r3, #1
 8005066:	4622      	mov	r2, r4
 8005068:	4641      	mov	r1, r8
 800506a:	4638      	mov	r0, r7
 800506c:	47c8      	blx	r9
 800506e:	3001      	adds	r0, #1
 8005070:	d0e6      	beq.n	8005040 <_printf_common+0xa4>
 8005072:	3601      	adds	r6, #1
 8005074:	e7d9      	b.n	800502a <_printf_common+0x8e>
	...

08005078 <_printf_i>:
 8005078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800507c:	7e0f      	ldrb	r7, [r1, #24]
 800507e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005080:	2f78      	cmp	r7, #120	@ 0x78
 8005082:	4691      	mov	r9, r2
 8005084:	4680      	mov	r8, r0
 8005086:	460c      	mov	r4, r1
 8005088:	469a      	mov	sl, r3
 800508a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800508e:	d807      	bhi.n	80050a0 <_printf_i+0x28>
 8005090:	2f62      	cmp	r7, #98	@ 0x62
 8005092:	d80a      	bhi.n	80050aa <_printf_i+0x32>
 8005094:	2f00      	cmp	r7, #0
 8005096:	f000 80d2 	beq.w	800523e <_printf_i+0x1c6>
 800509a:	2f58      	cmp	r7, #88	@ 0x58
 800509c:	f000 80b9 	beq.w	8005212 <_printf_i+0x19a>
 80050a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050a8:	e03a      	b.n	8005120 <_printf_i+0xa8>
 80050aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050ae:	2b15      	cmp	r3, #21
 80050b0:	d8f6      	bhi.n	80050a0 <_printf_i+0x28>
 80050b2:	a101      	add	r1, pc, #4	@ (adr r1, 80050b8 <_printf_i+0x40>)
 80050b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b8:	08005111 	.word	0x08005111
 80050bc:	08005125 	.word	0x08005125
 80050c0:	080050a1 	.word	0x080050a1
 80050c4:	080050a1 	.word	0x080050a1
 80050c8:	080050a1 	.word	0x080050a1
 80050cc:	080050a1 	.word	0x080050a1
 80050d0:	08005125 	.word	0x08005125
 80050d4:	080050a1 	.word	0x080050a1
 80050d8:	080050a1 	.word	0x080050a1
 80050dc:	080050a1 	.word	0x080050a1
 80050e0:	080050a1 	.word	0x080050a1
 80050e4:	08005225 	.word	0x08005225
 80050e8:	0800514f 	.word	0x0800514f
 80050ec:	080051df 	.word	0x080051df
 80050f0:	080050a1 	.word	0x080050a1
 80050f4:	080050a1 	.word	0x080050a1
 80050f8:	08005247 	.word	0x08005247
 80050fc:	080050a1 	.word	0x080050a1
 8005100:	0800514f 	.word	0x0800514f
 8005104:	080050a1 	.word	0x080050a1
 8005108:	080050a1 	.word	0x080050a1
 800510c:	080051e7 	.word	0x080051e7
 8005110:	6833      	ldr	r3, [r6, #0]
 8005112:	1d1a      	adds	r2, r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6032      	str	r2, [r6, #0]
 8005118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800511c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005120:	2301      	movs	r3, #1
 8005122:	e09d      	b.n	8005260 <_printf_i+0x1e8>
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	6820      	ldr	r0, [r4, #0]
 8005128:	1d19      	adds	r1, r3, #4
 800512a:	6031      	str	r1, [r6, #0]
 800512c:	0606      	lsls	r6, r0, #24
 800512e:	d501      	bpl.n	8005134 <_printf_i+0xbc>
 8005130:	681d      	ldr	r5, [r3, #0]
 8005132:	e003      	b.n	800513c <_printf_i+0xc4>
 8005134:	0645      	lsls	r5, r0, #25
 8005136:	d5fb      	bpl.n	8005130 <_printf_i+0xb8>
 8005138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800513c:	2d00      	cmp	r5, #0
 800513e:	da03      	bge.n	8005148 <_printf_i+0xd0>
 8005140:	232d      	movs	r3, #45	@ 0x2d
 8005142:	426d      	negs	r5, r5
 8005144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005148:	4859      	ldr	r0, [pc, #356]	@ (80052b0 <_printf_i+0x238>)
 800514a:	230a      	movs	r3, #10
 800514c:	e011      	b.n	8005172 <_printf_i+0xfa>
 800514e:	6821      	ldr	r1, [r4, #0]
 8005150:	6833      	ldr	r3, [r6, #0]
 8005152:	0608      	lsls	r0, r1, #24
 8005154:	f853 5b04 	ldr.w	r5, [r3], #4
 8005158:	d402      	bmi.n	8005160 <_printf_i+0xe8>
 800515a:	0649      	lsls	r1, r1, #25
 800515c:	bf48      	it	mi
 800515e:	b2ad      	uxthmi	r5, r5
 8005160:	2f6f      	cmp	r7, #111	@ 0x6f
 8005162:	4853      	ldr	r0, [pc, #332]	@ (80052b0 <_printf_i+0x238>)
 8005164:	6033      	str	r3, [r6, #0]
 8005166:	bf14      	ite	ne
 8005168:	230a      	movne	r3, #10
 800516a:	2308      	moveq	r3, #8
 800516c:	2100      	movs	r1, #0
 800516e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005172:	6866      	ldr	r6, [r4, #4]
 8005174:	60a6      	str	r6, [r4, #8]
 8005176:	2e00      	cmp	r6, #0
 8005178:	bfa2      	ittt	ge
 800517a:	6821      	ldrge	r1, [r4, #0]
 800517c:	f021 0104 	bicge.w	r1, r1, #4
 8005180:	6021      	strge	r1, [r4, #0]
 8005182:	b90d      	cbnz	r5, 8005188 <_printf_i+0x110>
 8005184:	2e00      	cmp	r6, #0
 8005186:	d04b      	beq.n	8005220 <_printf_i+0x1a8>
 8005188:	4616      	mov	r6, r2
 800518a:	fbb5 f1f3 	udiv	r1, r5, r3
 800518e:	fb03 5711 	mls	r7, r3, r1, r5
 8005192:	5dc7      	ldrb	r7, [r0, r7]
 8005194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005198:	462f      	mov	r7, r5
 800519a:	42bb      	cmp	r3, r7
 800519c:	460d      	mov	r5, r1
 800519e:	d9f4      	bls.n	800518a <_printf_i+0x112>
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d10b      	bne.n	80051bc <_printf_i+0x144>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	07df      	lsls	r7, r3, #31
 80051a8:	d508      	bpl.n	80051bc <_printf_i+0x144>
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	6861      	ldr	r1, [r4, #4]
 80051ae:	4299      	cmp	r1, r3
 80051b0:	bfde      	ittt	le
 80051b2:	2330      	movle	r3, #48	@ 0x30
 80051b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051bc:	1b92      	subs	r2, r2, r6
 80051be:	6122      	str	r2, [r4, #16]
 80051c0:	f8cd a000 	str.w	sl, [sp]
 80051c4:	464b      	mov	r3, r9
 80051c6:	aa03      	add	r2, sp, #12
 80051c8:	4621      	mov	r1, r4
 80051ca:	4640      	mov	r0, r8
 80051cc:	f7ff fee6 	bl	8004f9c <_printf_common>
 80051d0:	3001      	adds	r0, #1
 80051d2:	d14a      	bne.n	800526a <_printf_i+0x1f2>
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	b004      	add	sp, #16
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f043 0320 	orr.w	r3, r3, #32
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	4833      	ldr	r0, [pc, #204]	@ (80052b4 <_printf_i+0x23c>)
 80051e8:	2778      	movs	r7, #120	@ 0x78
 80051ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	6831      	ldr	r1, [r6, #0]
 80051f2:	061f      	lsls	r7, r3, #24
 80051f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80051f8:	d402      	bmi.n	8005200 <_printf_i+0x188>
 80051fa:	065f      	lsls	r7, r3, #25
 80051fc:	bf48      	it	mi
 80051fe:	b2ad      	uxthmi	r5, r5
 8005200:	6031      	str	r1, [r6, #0]
 8005202:	07d9      	lsls	r1, r3, #31
 8005204:	bf44      	itt	mi
 8005206:	f043 0320 	orrmi.w	r3, r3, #32
 800520a:	6023      	strmi	r3, [r4, #0]
 800520c:	b11d      	cbz	r5, 8005216 <_printf_i+0x19e>
 800520e:	2310      	movs	r3, #16
 8005210:	e7ac      	b.n	800516c <_printf_i+0xf4>
 8005212:	4827      	ldr	r0, [pc, #156]	@ (80052b0 <_printf_i+0x238>)
 8005214:	e7e9      	b.n	80051ea <_printf_i+0x172>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f023 0320 	bic.w	r3, r3, #32
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	e7f6      	b.n	800520e <_printf_i+0x196>
 8005220:	4616      	mov	r6, r2
 8005222:	e7bd      	b.n	80051a0 <_printf_i+0x128>
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	6825      	ldr	r5, [r4, #0]
 8005228:	6961      	ldr	r1, [r4, #20]
 800522a:	1d18      	adds	r0, r3, #4
 800522c:	6030      	str	r0, [r6, #0]
 800522e:	062e      	lsls	r6, r5, #24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	d501      	bpl.n	8005238 <_printf_i+0x1c0>
 8005234:	6019      	str	r1, [r3, #0]
 8005236:	e002      	b.n	800523e <_printf_i+0x1c6>
 8005238:	0668      	lsls	r0, r5, #25
 800523a:	d5fb      	bpl.n	8005234 <_printf_i+0x1bc>
 800523c:	8019      	strh	r1, [r3, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	4616      	mov	r6, r2
 8005244:	e7bc      	b.n	80051c0 <_printf_i+0x148>
 8005246:	6833      	ldr	r3, [r6, #0]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	6032      	str	r2, [r6, #0]
 800524c:	681e      	ldr	r6, [r3, #0]
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	2100      	movs	r1, #0
 8005252:	4630      	mov	r0, r6
 8005254:	f7fa ffcc 	bl	80001f0 <memchr>
 8005258:	b108      	cbz	r0, 800525e <_printf_i+0x1e6>
 800525a:	1b80      	subs	r0, r0, r6
 800525c:	6060      	str	r0, [r4, #4]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	2300      	movs	r3, #0
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005268:	e7aa      	b.n	80051c0 <_printf_i+0x148>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	4632      	mov	r2, r6
 800526e:	4649      	mov	r1, r9
 8005270:	4640      	mov	r0, r8
 8005272:	47d0      	blx	sl
 8005274:	3001      	adds	r0, #1
 8005276:	d0ad      	beq.n	80051d4 <_printf_i+0x15c>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	079b      	lsls	r3, r3, #30
 800527c:	d413      	bmi.n	80052a6 <_printf_i+0x22e>
 800527e:	68e0      	ldr	r0, [r4, #12]
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	4298      	cmp	r0, r3
 8005284:	bfb8      	it	lt
 8005286:	4618      	movlt	r0, r3
 8005288:	e7a6      	b.n	80051d8 <_printf_i+0x160>
 800528a:	2301      	movs	r3, #1
 800528c:	4632      	mov	r2, r6
 800528e:	4649      	mov	r1, r9
 8005290:	4640      	mov	r0, r8
 8005292:	47d0      	blx	sl
 8005294:	3001      	adds	r0, #1
 8005296:	d09d      	beq.n	80051d4 <_printf_i+0x15c>
 8005298:	3501      	adds	r5, #1
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	9903      	ldr	r1, [sp, #12]
 800529e:	1a5b      	subs	r3, r3, r1
 80052a0:	42ab      	cmp	r3, r5
 80052a2:	dcf2      	bgt.n	800528a <_printf_i+0x212>
 80052a4:	e7eb      	b.n	800527e <_printf_i+0x206>
 80052a6:	2500      	movs	r5, #0
 80052a8:	f104 0619 	add.w	r6, r4, #25
 80052ac:	e7f5      	b.n	800529a <_printf_i+0x222>
 80052ae:	bf00      	nop
 80052b0:	08005965 	.word	0x08005965
 80052b4:	08005976 	.word	0x08005976

080052b8 <__sflush_r>:
 80052b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c0:	0716      	lsls	r6, r2, #28
 80052c2:	4605      	mov	r5, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	d454      	bmi.n	8005372 <__sflush_r+0xba>
 80052c8:	684b      	ldr	r3, [r1, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc02      	bgt.n	80052d4 <__sflush_r+0x1c>
 80052ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dd48      	ble.n	8005366 <__sflush_r+0xae>
 80052d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d045      	beq.n	8005366 <__sflush_r+0xae>
 80052da:	2300      	movs	r3, #0
 80052dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052e0:	682f      	ldr	r7, [r5, #0]
 80052e2:	6a21      	ldr	r1, [r4, #32]
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	d030      	beq.n	800534a <__sflush_r+0x92>
 80052e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	0759      	lsls	r1, r3, #29
 80052ee:	d505      	bpl.n	80052fc <__sflush_r+0x44>
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052f6:	b10b      	cbz	r3, 80052fc <__sflush_r+0x44>
 80052f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052fa:	1ad2      	subs	r2, r2, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005300:	6a21      	ldr	r1, [r4, #32]
 8005302:	4628      	mov	r0, r5
 8005304:	47b0      	blx	r6
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	d106      	bne.n	800531a <__sflush_r+0x62>
 800530c:	6829      	ldr	r1, [r5, #0]
 800530e:	291d      	cmp	r1, #29
 8005310:	d82b      	bhi.n	800536a <__sflush_r+0xb2>
 8005312:	4a2a      	ldr	r2, [pc, #168]	@ (80053bc <__sflush_r+0x104>)
 8005314:	410a      	asrs	r2, r1
 8005316:	07d6      	lsls	r6, r2, #31
 8005318:	d427      	bmi.n	800536a <__sflush_r+0xb2>
 800531a:	2200      	movs	r2, #0
 800531c:	6062      	str	r2, [r4, #4]
 800531e:	04d9      	lsls	r1, r3, #19
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	d504      	bpl.n	8005330 <__sflush_r+0x78>
 8005326:	1c42      	adds	r2, r0, #1
 8005328:	d101      	bne.n	800532e <__sflush_r+0x76>
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	b903      	cbnz	r3, 8005330 <__sflush_r+0x78>
 800532e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005332:	602f      	str	r7, [r5, #0]
 8005334:	b1b9      	cbz	r1, 8005366 <__sflush_r+0xae>
 8005336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800533a:	4299      	cmp	r1, r3
 800533c:	d002      	beq.n	8005344 <__sflush_r+0x8c>
 800533e:	4628      	mov	r0, r5
 8005340:	f7ff fa9a 	bl	8004878 <_free_r>
 8005344:	2300      	movs	r3, #0
 8005346:	6363      	str	r3, [r4, #52]	@ 0x34
 8005348:	e00d      	b.n	8005366 <__sflush_r+0xae>
 800534a:	2301      	movs	r3, #1
 800534c:	4628      	mov	r0, r5
 800534e:	47b0      	blx	r6
 8005350:	4602      	mov	r2, r0
 8005352:	1c50      	adds	r0, r2, #1
 8005354:	d1c9      	bne.n	80052ea <__sflush_r+0x32>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0c6      	beq.n	80052ea <__sflush_r+0x32>
 800535c:	2b1d      	cmp	r3, #29
 800535e:	d001      	beq.n	8005364 <__sflush_r+0xac>
 8005360:	2b16      	cmp	r3, #22
 8005362:	d11e      	bne.n	80053a2 <__sflush_r+0xea>
 8005364:	602f      	str	r7, [r5, #0]
 8005366:	2000      	movs	r0, #0
 8005368:	e022      	b.n	80053b0 <__sflush_r+0xf8>
 800536a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800536e:	b21b      	sxth	r3, r3
 8005370:	e01b      	b.n	80053aa <__sflush_r+0xf2>
 8005372:	690f      	ldr	r7, [r1, #16]
 8005374:	2f00      	cmp	r7, #0
 8005376:	d0f6      	beq.n	8005366 <__sflush_r+0xae>
 8005378:	0793      	lsls	r3, r2, #30
 800537a:	680e      	ldr	r6, [r1, #0]
 800537c:	bf08      	it	eq
 800537e:	694b      	ldreq	r3, [r1, #20]
 8005380:	600f      	str	r7, [r1, #0]
 8005382:	bf18      	it	ne
 8005384:	2300      	movne	r3, #0
 8005386:	eba6 0807 	sub.w	r8, r6, r7
 800538a:	608b      	str	r3, [r1, #8]
 800538c:	f1b8 0f00 	cmp.w	r8, #0
 8005390:	dde9      	ble.n	8005366 <__sflush_r+0xae>
 8005392:	6a21      	ldr	r1, [r4, #32]
 8005394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005396:	4643      	mov	r3, r8
 8005398:	463a      	mov	r2, r7
 800539a:	4628      	mov	r0, r5
 800539c:	47b0      	blx	r6
 800539e:	2800      	cmp	r0, #0
 80053a0:	dc08      	bgt.n	80053b4 <__sflush_r+0xfc>
 80053a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053aa:	81a3      	strh	r3, [r4, #12]
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b4:	4407      	add	r7, r0
 80053b6:	eba8 0800 	sub.w	r8, r8, r0
 80053ba:	e7e7      	b.n	800538c <__sflush_r+0xd4>
 80053bc:	dfbffffe 	.word	0xdfbffffe

080053c0 <_fflush_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b913      	cbnz	r3, 80053d0 <_fflush_r+0x10>
 80053ca:	2500      	movs	r5, #0
 80053cc:	4628      	mov	r0, r5
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	b118      	cbz	r0, 80053da <_fflush_r+0x1a>
 80053d2:	6a03      	ldr	r3, [r0, #32]
 80053d4:	b90b      	cbnz	r3, 80053da <_fflush_r+0x1a>
 80053d6:	f7ff f919 	bl	800460c <__sinit>
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f3      	beq.n	80053ca <_fflush_r+0xa>
 80053e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053e4:	07d0      	lsls	r0, r2, #31
 80053e6:	d404      	bmi.n	80053f2 <_fflush_r+0x32>
 80053e8:	0599      	lsls	r1, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_fflush_r+0x32>
 80053ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ee:	f7ff fa32 	bl	8004856 <__retarget_lock_acquire_recursive>
 80053f2:	4628      	mov	r0, r5
 80053f4:	4621      	mov	r1, r4
 80053f6:	f7ff ff5f 	bl	80052b8 <__sflush_r>
 80053fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053fc:	07da      	lsls	r2, r3, #31
 80053fe:	4605      	mov	r5, r0
 8005400:	d4e4      	bmi.n	80053cc <_fflush_r+0xc>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	d4e1      	bmi.n	80053cc <_fflush_r+0xc>
 8005408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800540a:	f7ff fa25 	bl	8004858 <__retarget_lock_release_recursive>
 800540e:	e7dd      	b.n	80053cc <_fflush_r+0xc>

08005410 <__swbuf_r>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	4614      	mov	r4, r2
 8005416:	4605      	mov	r5, r0
 8005418:	b118      	cbz	r0, 8005422 <__swbuf_r+0x12>
 800541a:	6a03      	ldr	r3, [r0, #32]
 800541c:	b90b      	cbnz	r3, 8005422 <__swbuf_r+0x12>
 800541e:	f7ff f8f5 	bl	800460c <__sinit>
 8005422:	69a3      	ldr	r3, [r4, #24]
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	071a      	lsls	r2, r3, #28
 800542a:	d501      	bpl.n	8005430 <__swbuf_r+0x20>
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	b943      	cbnz	r3, 8005442 <__swbuf_r+0x32>
 8005430:	4621      	mov	r1, r4
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f82a 	bl	800548c <__swsetup_r>
 8005438:	b118      	cbz	r0, 8005442 <__swbuf_r+0x32>
 800543a:	f04f 37ff 	mov.w	r7, #4294967295
 800543e:	4638      	mov	r0, r7
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	1a98      	subs	r0, r3, r2
 8005448:	6963      	ldr	r3, [r4, #20]
 800544a:	b2f6      	uxtb	r6, r6
 800544c:	4283      	cmp	r3, r0
 800544e:	4637      	mov	r7, r6
 8005450:	dc05      	bgt.n	800545e <__swbuf_r+0x4e>
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f7ff ffb3 	bl	80053c0 <_fflush_r>
 800545a:	2800      	cmp	r0, #0
 800545c:	d1ed      	bne.n	800543a <__swbuf_r+0x2a>
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	3b01      	subs	r3, #1
 8005462:	60a3      	str	r3, [r4, #8]
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	701e      	strb	r6, [r3, #0]
 800546c:	6962      	ldr	r2, [r4, #20]
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	429a      	cmp	r2, r3
 8005472:	d004      	beq.n	800547e <__swbuf_r+0x6e>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	07db      	lsls	r3, r3, #31
 8005478:	d5e1      	bpl.n	800543e <__swbuf_r+0x2e>
 800547a:	2e0a      	cmp	r6, #10
 800547c:	d1df      	bne.n	800543e <__swbuf_r+0x2e>
 800547e:	4621      	mov	r1, r4
 8005480:	4628      	mov	r0, r5
 8005482:	f7ff ff9d 	bl	80053c0 <_fflush_r>
 8005486:	2800      	cmp	r0, #0
 8005488:	d0d9      	beq.n	800543e <__swbuf_r+0x2e>
 800548a:	e7d6      	b.n	800543a <__swbuf_r+0x2a>

0800548c <__swsetup_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <__swsetup_r+0xa8>)
 8005490:	4605      	mov	r5, r0
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	460c      	mov	r4, r1
 8005496:	b118      	cbz	r0, 80054a0 <__swsetup_r+0x14>
 8005498:	6a03      	ldr	r3, [r0, #32]
 800549a:	b90b      	cbnz	r3, 80054a0 <__swsetup_r+0x14>
 800549c:	f7ff f8b6 	bl	800460c <__sinit>
 80054a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a4:	0719      	lsls	r1, r3, #28
 80054a6:	d422      	bmi.n	80054ee <__swsetup_r+0x62>
 80054a8:	06da      	lsls	r2, r3, #27
 80054aa:	d407      	bmi.n	80054bc <__swsetup_r+0x30>
 80054ac:	2209      	movs	r2, #9
 80054ae:	602a      	str	r2, [r5, #0]
 80054b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ba:	e033      	b.n	8005524 <__swsetup_r+0x98>
 80054bc:	0758      	lsls	r0, r3, #29
 80054be:	d512      	bpl.n	80054e6 <__swsetup_r+0x5a>
 80054c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054c2:	b141      	cbz	r1, 80054d6 <__swsetup_r+0x4a>
 80054c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054c8:	4299      	cmp	r1, r3
 80054ca:	d002      	beq.n	80054d2 <__swsetup_r+0x46>
 80054cc:	4628      	mov	r0, r5
 80054ce:	f7ff f9d3 	bl	8004878 <_free_r>
 80054d2:	2300      	movs	r3, #0
 80054d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	2300      	movs	r3, #0
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	b94b      	cbnz	r3, 8005506 <__swsetup_r+0x7a>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054fc:	d003      	beq.n	8005506 <__swsetup_r+0x7a>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f897 	bl	8005634 <__smakebuf_r>
 8005506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550a:	f013 0201 	ands.w	r2, r3, #1
 800550e:	d00a      	beq.n	8005526 <__swsetup_r+0x9a>
 8005510:	2200      	movs	r2, #0
 8005512:	60a2      	str	r2, [r4, #8]
 8005514:	6962      	ldr	r2, [r4, #20]
 8005516:	4252      	negs	r2, r2
 8005518:	61a2      	str	r2, [r4, #24]
 800551a:	6922      	ldr	r2, [r4, #16]
 800551c:	b942      	cbnz	r2, 8005530 <__swsetup_r+0xa4>
 800551e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005522:	d1c5      	bne.n	80054b0 <__swsetup_r+0x24>
 8005524:	bd38      	pop	{r3, r4, r5, pc}
 8005526:	0799      	lsls	r1, r3, #30
 8005528:	bf58      	it	pl
 800552a:	6962      	ldrpl	r2, [r4, #20]
 800552c:	60a2      	str	r2, [r4, #8]
 800552e:	e7f4      	b.n	800551a <__swsetup_r+0x8e>
 8005530:	2000      	movs	r0, #0
 8005532:	e7f7      	b.n	8005524 <__swsetup_r+0x98>
 8005534:	20000018 	.word	0x20000018

08005538 <memmove>:
 8005538:	4288      	cmp	r0, r1
 800553a:	b510      	push	{r4, lr}
 800553c:	eb01 0402 	add.w	r4, r1, r2
 8005540:	d902      	bls.n	8005548 <memmove+0x10>
 8005542:	4284      	cmp	r4, r0
 8005544:	4623      	mov	r3, r4
 8005546:	d807      	bhi.n	8005558 <memmove+0x20>
 8005548:	1e43      	subs	r3, r0, #1
 800554a:	42a1      	cmp	r1, r4
 800554c:	d008      	beq.n	8005560 <memmove+0x28>
 800554e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005556:	e7f8      	b.n	800554a <memmove+0x12>
 8005558:	4402      	add	r2, r0
 800555a:	4601      	mov	r1, r0
 800555c:	428a      	cmp	r2, r1
 800555e:	d100      	bne.n	8005562 <memmove+0x2a>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800556a:	e7f7      	b.n	800555c <memmove+0x24>

0800556c <_sbrk_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d06      	ldr	r5, [pc, #24]	@ (8005588 <_sbrk_r+0x1c>)
 8005570:	2300      	movs	r3, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	f7fb fbc8 	bl	8000d0c <_sbrk>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_sbrk_r+0x1a>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_sbrk_r+0x1a>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	200002a0 	.word	0x200002a0

0800558c <_realloc_r>:
 800558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	4680      	mov	r8, r0
 8005592:	4615      	mov	r5, r2
 8005594:	460c      	mov	r4, r1
 8005596:	b921      	cbnz	r1, 80055a2 <_realloc_r+0x16>
 8005598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800559c:	4611      	mov	r1, r2
 800559e:	f7ff b9d7 	b.w	8004950 <_malloc_r>
 80055a2:	b92a      	cbnz	r2, 80055b0 <_realloc_r+0x24>
 80055a4:	f7ff f968 	bl	8004878 <_free_r>
 80055a8:	2400      	movs	r4, #0
 80055aa:	4620      	mov	r0, r4
 80055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b0:	f000 f89e 	bl	80056f0 <_malloc_usable_size_r>
 80055b4:	4285      	cmp	r5, r0
 80055b6:	4606      	mov	r6, r0
 80055b8:	d802      	bhi.n	80055c0 <_realloc_r+0x34>
 80055ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055be:	d8f4      	bhi.n	80055aa <_realloc_r+0x1e>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4640      	mov	r0, r8
 80055c4:	f7ff f9c4 	bl	8004950 <_malloc_r>
 80055c8:	4607      	mov	r7, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d0ec      	beq.n	80055a8 <_realloc_r+0x1c>
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	462a      	mov	r2, r5
 80055d2:	4621      	mov	r1, r4
 80055d4:	bf28      	it	cs
 80055d6:	4632      	movcs	r2, r6
 80055d8:	f7ff f93f 	bl	800485a <memcpy>
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff f94a 	bl	8004878 <_free_r>
 80055e4:	463c      	mov	r4, r7
 80055e6:	e7e0      	b.n	80055aa <_realloc_r+0x1e>

080055e8 <__swhatbuf_r>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	460c      	mov	r4, r1
 80055ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f0:	2900      	cmp	r1, #0
 80055f2:	b096      	sub	sp, #88	@ 0x58
 80055f4:	4615      	mov	r5, r2
 80055f6:	461e      	mov	r6, r3
 80055f8:	da0d      	bge.n	8005616 <__swhatbuf_r+0x2e>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005600:	f04f 0100 	mov.w	r1, #0
 8005604:	bf14      	ite	ne
 8005606:	2340      	movne	r3, #64	@ 0x40
 8005608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800560c:	2000      	movs	r0, #0
 800560e:	6031      	str	r1, [r6, #0]
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	b016      	add	sp, #88	@ 0x58
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	466a      	mov	r2, sp
 8005618:	f000 f848 	bl	80056ac <_fstat_r>
 800561c:	2800      	cmp	r0, #0
 800561e:	dbec      	blt.n	80055fa <__swhatbuf_r+0x12>
 8005620:	9901      	ldr	r1, [sp, #4]
 8005622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800562a:	4259      	negs	r1, r3
 800562c:	4159      	adcs	r1, r3
 800562e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005632:	e7eb      	b.n	800560c <__swhatbuf_r+0x24>

08005634 <__smakebuf_r>:
 8005634:	898b      	ldrh	r3, [r1, #12]
 8005636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005638:	079d      	lsls	r5, r3, #30
 800563a:	4606      	mov	r6, r0
 800563c:	460c      	mov	r4, r1
 800563e:	d507      	bpl.n	8005650 <__smakebuf_r+0x1c>
 8005640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	2301      	movs	r3, #1
 800564a:	6163      	str	r3, [r4, #20]
 800564c:	b003      	add	sp, #12
 800564e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005650:	ab01      	add	r3, sp, #4
 8005652:	466a      	mov	r2, sp
 8005654:	f7ff ffc8 	bl	80055e8 <__swhatbuf_r>
 8005658:	9f00      	ldr	r7, [sp, #0]
 800565a:	4605      	mov	r5, r0
 800565c:	4639      	mov	r1, r7
 800565e:	4630      	mov	r0, r6
 8005660:	f7ff f976 	bl	8004950 <_malloc_r>
 8005664:	b948      	cbnz	r0, 800567a <__smakebuf_r+0x46>
 8005666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566a:	059a      	lsls	r2, r3, #22
 800566c:	d4ee      	bmi.n	800564c <__smakebuf_r+0x18>
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	f043 0302 	orr.w	r3, r3, #2
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	e7e2      	b.n	8005640 <__smakebuf_r+0xc>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	6020      	str	r0, [r4, #0]
 800567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800568a:	b15b      	cbz	r3, 80056a4 <__smakebuf_r+0x70>
 800568c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005690:	4630      	mov	r0, r6
 8005692:	f000 f81d 	bl	80056d0 <_isatty_r>
 8005696:	b128      	cbz	r0, 80056a4 <__smakebuf_r+0x70>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	431d      	orrs	r5, r3
 80056a8:	81a5      	strh	r5, [r4, #12]
 80056aa:	e7cf      	b.n	800564c <__smakebuf_r+0x18>

080056ac <_fstat_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d07      	ldr	r5, [pc, #28]	@ (80056cc <_fstat_r+0x20>)
 80056b0:	2300      	movs	r3, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	f7fb faff 	bl	8000cbc <_fstat>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	d102      	bne.n	80056c8 <_fstat_r+0x1c>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	b103      	cbz	r3, 80056c8 <_fstat_r+0x1c>
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	bd38      	pop	{r3, r4, r5, pc}
 80056ca:	bf00      	nop
 80056cc:	200002a0 	.word	0x200002a0

080056d0 <_isatty_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d06      	ldr	r5, [pc, #24]	@ (80056ec <_isatty_r+0x1c>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fb fafe 	bl	8000cdc <_isatty>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_isatty_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_isatty_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	200002a0 	.word	0x200002a0

080056f0 <_malloc_usable_size_r>:
 80056f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f4:	1f18      	subs	r0, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfbc      	itt	lt
 80056fa:	580b      	ldrlt	r3, [r1, r0]
 80056fc:	18c0      	addlt	r0, r0, r3
 80056fe:	4770      	bx	lr

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
