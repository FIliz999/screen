
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08005a6c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005a6c  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d549  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ef  00000000  00000000  000145e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000169d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017eae  00000000  00000000  00017638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f7d5  00000000  00000000  0002f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f981  00000000  00000000  0003ecbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ce63c  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000096b  00000000  00000000  000ce67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c18  00000000  00000000  000cefec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d2c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005744 	.word	0x08005744

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005744 	.word	0x08005744

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ILI9341_Init>:
static void DC_H(void);
static void LED_H(void);

// Initialization
void ILI9341_Init(SPI_HandleTypeDef hspi3)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b094      	sub	sp, #80	@ 0x50
 8000586:	af14      	add	r7, sp, #80	@ 0x50
 8000588:	f107 0c08 	add.w	ip, r7, #8
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Reset();
 8000590:	f000 fd50 	bl	8001034 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000594:	4668      	mov	r0, sp
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2248      	movs	r2, #72	@ 0x48
 800059c:	4619      	mov	r1, r3
 800059e:	f004 fa12 	bl	80049c6 <memcpy>
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a8:	f000 fd56 	bl	8001058 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB, hspi3);
 80005ac:	4668      	mov	r0, sp
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	224c      	movs	r2, #76	@ 0x4c
 80005b4:	4619      	mov	r1, r3
 80005b6:	f004 fa06 	bl	80049c6 <memcpy>
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005c0:	20cb      	movs	r0, #203	@ 0xcb
 80005c2:	f000 fd69 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x39, hspi3);
 80005c6:	4668      	mov	r0, sp
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	224c      	movs	r2, #76	@ 0x4c
 80005ce:	4619      	mov	r1, r3
 80005d0:	f004 f9f9 	bl	80049c6 <memcpy>
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005da:	2039      	movs	r0, #57	@ 0x39
 80005dc:	f000 fd7d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2C, hspi3);
 80005e0:	4668      	mov	r0, sp
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	224c      	movs	r2, #76	@ 0x4c
 80005e8:	4619      	mov	r1, r3
 80005ea:	f004 f9ec 	bl	80049c6 <memcpy>
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f4:	202c      	movs	r0, #44	@ 0x2c
 80005f6:	f000 fd70 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80005fa:	4668      	mov	r0, sp
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	224c      	movs	r2, #76	@ 0x4c
 8000602:	4619      	mov	r1, r3
 8000604:	f004 f9df 	bl	80049c6 <memcpy>
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fd63 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x34, hspi3);
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	224c      	movs	r2, #76	@ 0x4c
 800061c:	4619      	mov	r1, r3
 800061e:	f004 f9d2 	bl	80049c6 <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000628:	2034      	movs	r0, #52	@ 0x34
 800062a:	f000 fd56 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x02, hspi3);
 800062e:	4668      	mov	r0, sp
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	224c      	movs	r2, #76	@ 0x4c
 8000636:	4619      	mov	r1, r3
 8000638:	f004 f9c5 	bl	80049c6 <memcpy>
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fd49 	bl	80010da <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF, hspi3);
 8000648:	4668      	mov	r0, sp
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	f004 f9b8 	bl	80049c6 <memcpy>
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	20cf      	movs	r0, #207	@ 0xcf
 800065e:	f000 fd1b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	224c      	movs	r2, #76	@ 0x4c
 800066a:	4619      	mov	r1, r3
 800066c:	f004 f9ab 	bl	80049c6 <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fd2f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 800067c:	4668      	mov	r0, sp
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	f004 f99e 	bl	80049c6 <memcpy>
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000690:	20c1      	movs	r0, #193	@ 0xc1
 8000692:	f000 fd22 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x30, hspi3);
 8000696:	4668      	mov	r0, sp
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	224c      	movs	r2, #76	@ 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	f004 f991 	bl	80049c6 <memcpy>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006aa:	2030      	movs	r0, #48	@ 0x30
 80006ac:	f000 fd15 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8, hspi3);
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 f984 	bl	80049c6 <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c4:	20e8      	movs	r0, #232	@ 0xe8
 80006c6:	f000 fce7 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x85, hspi3);
 80006ca:	4668      	mov	r0, sp
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	224c      	movs	r2, #76	@ 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	f004 f977 	bl	80049c6 <memcpy>
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	2085      	movs	r0, #133	@ 0x85
 80006e0:	f000 fcfb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	4619      	mov	r1, r3
 80006ee:	f004 f96a 	bl	80049c6 <memcpy>
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fcee 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x78, hspi3);
 80006fe:	4668      	mov	r0, sp
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	224c      	movs	r2, #76	@ 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	f004 f95d 	bl	80049c6 <memcpy>
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fce1 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA, hspi3);
 8000718:	4668      	mov	r0, sp
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	224c      	movs	r2, #76	@ 0x4c
 8000720:	4619      	mov	r1, r3
 8000722:	f004 f950 	bl	80049c6 <memcpy>
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072c:	20ea      	movs	r0, #234	@ 0xea
 800072e:	f000 fcb3 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000732:	4668      	mov	r0, sp
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	224c      	movs	r2, #76	@ 0x4c
 800073a:	4619      	mov	r1, r3
 800073c:	f004 f943 	bl	80049c6 <memcpy>
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fcc7 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	4619      	mov	r1, r3
 8000756:	f004 f936 	bl	80049c6 <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fcba 	bl	80010da <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED, hspi3);
 8000766:	4668      	mov	r0, sp
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	224c      	movs	r2, #76	@ 0x4c
 800076e:	4619      	mov	r1, r3
 8000770:	f004 f929 	bl	80049c6 <memcpy>
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800077a:	20ed      	movs	r0, #237	@ 0xed
 800077c:	f000 fc8c 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x64, hspi3);
 8000780:	4668      	mov	r0, sp
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	f004 f91c 	bl	80049c6 <memcpy>
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000794:	2064      	movs	r0, #100	@ 0x64
 8000796:	f000 fca0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 800079a:	4668      	mov	r0, sp
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	224c      	movs	r2, #76	@ 0x4c
 80007a2:	4619      	mov	r1, r3
 80007a4:	f004 f90f 	bl	80049c6 <memcpy>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 fc93 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x12, hspi3);
 80007b4:	4668      	mov	r0, sp
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	4619      	mov	r1, r3
 80007be:	f004 f902 	bl	80049c6 <memcpy>
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c8:	2012      	movs	r0, #18
 80007ca:	f000 fc86 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x81, hspi3);
 80007ce:	4668      	mov	r0, sp
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	224c      	movs	r2, #76	@ 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f004 f8f5 	bl	80049c6 <memcpy>
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	2081      	movs	r0, #129	@ 0x81
 80007e4:	f000 fc79 	bl	80010da <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7, hspi3);
 80007e8:	4668      	mov	r0, sp
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	4619      	mov	r1, r3
 80007f2:	f004 f8e8 	bl	80049c6 <memcpy>
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fc:	20f7      	movs	r0, #247	@ 0xf7
 80007fe:	f000 fc4b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x20, hspi3);
 8000802:	4668      	mov	r0, sp
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	224c      	movs	r2, #76	@ 0x4c
 800080a:	4619      	mov	r1, r3
 800080c:	f004 f8db 	bl	80049c6 <memcpy>
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000816:	2020      	movs	r0, #32
 8000818:	f000 fc5f 	bl	80010da <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0, hspi3);
 800081c:	4668      	mov	r0, sp
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	4619      	mov	r1, r3
 8000826:	f004 f8ce 	bl	80049c6 <memcpy>
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000830:	20c0      	movs	r0, #192	@ 0xc0
 8000832:	f000 fc31 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8000836:	4668      	mov	r0, sp
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	224c      	movs	r2, #76	@ 0x4c
 800083e:	4619      	mov	r1, r3
 8000840:	f004 f8c1 	bl	80049c6 <memcpy>
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fc45 	bl	80010da <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1, hspi3);
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	f004 f8b4 	bl	80049c6 <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc17 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 800086a:	4668      	mov	r0, sp
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	224c      	movs	r2, #76	@ 0x4c
 8000872:	4619      	mov	r1, r3
 8000874:	f004 f8a7 	bl	80049c6 <memcpy>
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fc2b 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5, hspi3);
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	224c      	movs	r2, #76	@ 0x4c
 800088c:	4619      	mov	r1, r3
 800088e:	f004 f89a 	bl	80049c6 <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000898:	20c5      	movs	r0, #197	@ 0xc5
 800089a:	f000 fbfd 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x3E, hspi3);
 800089e:	4668      	mov	r0, sp
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	224c      	movs	r2, #76	@ 0x4c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f004 f88d 	bl	80049c6 <memcpy>
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b2:	203e      	movs	r0, #62	@ 0x3e
 80008b4:	f000 fc11 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x28, hspi3);
 80008b8:	4668      	mov	r0, sp
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f004 f880 	bl	80049c6 <memcpy>
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008cc:	2028      	movs	r0, #40	@ 0x28
 80008ce:	f000 fc04 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7, hspi3);
 80008d2:	4668      	mov	r0, sp
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	224c      	movs	r2, #76	@ 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	f004 f873 	bl	80049c6 <memcpy>
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e6:	20c7      	movs	r0, #199	@ 0xc7
 80008e8:	f000 fbd6 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x86, hspi3);
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	224c      	movs	r2, #76	@ 0x4c
 80008f4:	4619      	mov	r1, r3
 80008f6:	f004 f866 	bl	80049c6 <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000900:	2086      	movs	r0, #134	@ 0x86
 8000902:	f000 fbea 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36, hspi3);
 8000906:	4668      	mov	r0, sp
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	224c      	movs	r2, #76	@ 0x4c
 800090e:	4619      	mov	r1, r3
 8000910:	f004 f859 	bl	80049c6 <memcpy>
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091a:	2036      	movs	r0, #54	@ 0x36
 800091c:	f000 fbbc 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x48, hspi3);
 8000920:	4668      	mov	r0, sp
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	f004 f84c 	bl	80049c6 <memcpy>
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000934:	2048      	movs	r0, #72	@ 0x48
 8000936:	f000 fbd0 	bl	80010da <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A, hspi3);
 800093a:	4668      	mov	r0, sp
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	224c      	movs	r2, #76	@ 0x4c
 8000942:	4619      	mov	r1, r3
 8000944:	f004 f83f 	bl	80049c6 <memcpy>
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f000 fba2 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x55, hspi3);    //16bit
 8000954:	4668      	mov	r0, sp
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	224c      	movs	r2, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	f004 f832 	bl	80049c6 <memcpy>
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000968:	2055      	movs	r0, #85	@ 0x55
 800096a:	f000 fbb6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_REG(0xB1, hspi3);
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	224c      	movs	r2, #76	@ 0x4c
 8000976:	4619      	mov	r1, r3
 8000978:	f004 f825 	bl	80049c6 <memcpy>
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000982:	20b1      	movs	r0, #177	@ 0xb1
 8000984:	f000 fb88 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	f004 f818 	bl	80049c6 <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb9c 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x18, hspi3);
 80009a2:	4668      	mov	r0, sp
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	224c      	movs	r2, #76	@ 0x4c
 80009aa:	4619      	mov	r1, r3
 80009ac:	f004 f80b 	bl	80049c6 <memcpy>
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b6:	2018      	movs	r0, #24
 80009b8:	f000 fb8f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x01, hspi3);
	LCD_WR_DATA(0x00, hspi3);
	LCD_WR_DATA(0x20, hspi3); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6, hspi3);
 80009bc:	4668      	mov	r0, sp
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f003 fffe 	bl	80049c6 <memcpy>
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	20b6      	movs	r0, #182	@ 0xb6
 80009d2:	f000 fb61 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x08, hspi3);
 80009d6:	4668      	mov	r0, sp
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	224c      	movs	r2, #76	@ 0x4c
 80009de:	4619      	mov	r1, r3
 80009e0:	f003 fff1 	bl	80049c6 <memcpy>
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ea:	2008      	movs	r0, #8
 80009ec:	f000 fb75 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x82, hspi3);
 80009f0:	4668      	mov	r0, sp
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	224c      	movs	r2, #76	@ 0x4c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f003 ffe4 	bl	80049c6 <memcpy>
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a04:	2082      	movs	r0, #130	@ 0x82
 8000a06:	f000 fb68 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x27, hspi3);
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	224c      	movs	r2, #76	@ 0x4c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f003 ffd7 	bl	80049c6 <memcpy>
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1e:	2027      	movs	r0, #39	@ 0x27
 8000a20:	f000 fb5b 	bl	80010da <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2, hspi3);
 8000a24:	4668      	mov	r0, sp
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f003 ffca 	bl	80049c6 <memcpy>
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a38:	20f2      	movs	r0, #242	@ 0xf2
 8000a3a:	f000 fb2d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000a3e:	4668      	mov	r0, sp
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f003 ffbd 	bl	80049c6 <memcpy>
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fb41 	bl	80010da <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26, hspi3); //Gamma set
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	4619      	mov	r1, r3
 8000a62:	f003 ffb0 	bl	80049c6 <memcpy>
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a6c:	2026      	movs	r0, #38	@ 0x26
 8000a6e:	f000 fb13 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x01, hspi3); 	//Gamma Curve (G2.2)
 8000a72:	4668      	mov	r0, sp
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	224c      	movs	r2, #76	@ 0x4c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f003 ffa3 	bl	80049c6 <memcpy>
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb27 	bl	80010da <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0, hspi3);
 8000a8c:	4668      	mov	r0, sp
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	224c      	movs	r2, #76	@ 0x4c
 8000a94:	4619      	mov	r1, r3
 8000a96:	f003 ff96 	bl	80049c6 <memcpy>
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa0:	20e0      	movs	r0, #224	@ 0xe0
 8000aa2:	f000 faf9 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x0F, hspi3);
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	224c      	movs	r2, #76	@ 0x4c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f003 ff89 	bl	80049c6 <memcpy>
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 fb0d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	224c      	movs	r2, #76	@ 0x4c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f003 ff7c 	bl	80049c6 <memcpy>
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad4:	2031      	movs	r0, #49	@ 0x31
 8000ad6:	f000 fb00 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2B, hspi3);
 8000ada:	4668      	mov	r0, sp
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	224c      	movs	r2, #76	@ 0x4c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f003 ff6f 	bl	80049c6 <memcpy>
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aee:	202b      	movs	r0, #43	@ 0x2b
 8000af0:	f000 faf3 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000af4:	4668      	mov	r0, sp
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	224c      	movs	r2, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	f003 ff62 	bl	80049c6 <memcpy>
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f000 fae6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000b0e:	4668      	mov	r0, sp
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	224c      	movs	r2, #76	@ 0x4c
 8000b16:	4619      	mov	r1, r3
 8000b18:	f003 ff55 	bl	80049c6 <memcpy>
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b22:	200e      	movs	r0, #14
 8000b24:	f000 fad9 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000b28:	4668      	mov	r0, sp
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	224c      	movs	r2, #76	@ 0x4c
 8000b30:	4619      	mov	r1, r3
 8000b32:	f003 ff48 	bl	80049c6 <memcpy>
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 facc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x4E, hspi3);
 8000b42:	4668      	mov	r0, sp
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	224c      	movs	r2, #76	@ 0x4c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f003 ff3b 	bl	80049c6 <memcpy>
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b56:	204e      	movs	r0, #78	@ 0x4e
 8000b58:	f000 fabf 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xF1, hspi3);
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	f003 ff2e 	bl	80049c6 <memcpy>
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b70:	20f1      	movs	r0, #241	@ 0xf1
 8000b72:	f000 fab2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x37, hspi3);
 8000b76:	4668      	mov	r0, sp
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	224c      	movs	r2, #76	@ 0x4c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f003 ff21 	bl	80049c6 <memcpy>
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	2037      	movs	r0, #55	@ 0x37
 8000b8c:	f000 faa5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000b90:	4668      	mov	r0, sp
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	224c      	movs	r2, #76	@ 0x4c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f003 ff14 	bl	80049c6 <memcpy>
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f000 fa98 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x10, hspi3);
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	224c      	movs	r2, #76	@ 0x4c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f003 ff07 	bl	80049c6 <memcpy>
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 fa8b 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	224c      	movs	r2, #76	@ 0x4c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f003 fefa 	bl	80049c6 <memcpy>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fa7e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000bde:	4668      	mov	r0, sp
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	224c      	movs	r2, #76	@ 0x4c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f003 feed 	bl	80049c6 <memcpy>
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f000 fa71 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x09, hspi3);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	224c      	movs	r2, #76	@ 0x4c
 8000c00:	4619      	mov	r1, r3
 8000c02:	f003 fee0 	bl	80049c6 <memcpy>
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 fa64 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000c12:	4668      	mov	r0, sp
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	224c      	movs	r2, #76	@ 0x4c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f003 fed3 	bl	80049c6 <memcpy>
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fa57 	bl	80010da <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1, hspi3);
 8000c2c:	4668      	mov	r0, sp
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	4619      	mov	r1, r3
 8000c36:	f003 fec6 	bl	80049c6 <memcpy>
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	20e1      	movs	r0, #225	@ 0xe1
 8000c42:	f000 fa29 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000c46:	4668      	mov	r0, sp
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	224c      	movs	r2, #76	@ 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 feb9 	bl	80049c6 <memcpy>
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fa3d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000c60:	4668      	mov	r0, sp
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f003 feac 	bl	80049c6 <memcpy>
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	200e      	movs	r0, #14
 8000c76:	f000 fa30 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x14, hspi3);
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	224c      	movs	r2, #76	@ 0x4c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f003 fe9f 	bl	80049c6 <memcpy>
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f000 fa23 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000c94:	4668      	mov	r0, sp
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f003 fe92 	bl	80049c6 <memcpy>
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fa16 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x11, hspi3);
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	224c      	movs	r2, #76	@ 0x4c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f003 fe85 	bl	80049c6 <memcpy>
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc2:	2011      	movs	r0, #17
 8000cc4:	f000 fa09 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	224c      	movs	r2, #76	@ 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f003 fe78 	bl	80049c6 <memcpy>
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f000 f9fc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	224c      	movs	r2, #76	@ 0x4c
 8000cea:	4619      	mov	r1, r3
 8000cec:	f003 fe6b 	bl	80049c6 <memcpy>
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	2031      	movs	r0, #49	@ 0x31
 8000cf8:	f000 f9ef 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8000cfc:	4668      	mov	r0, sp
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	224c      	movs	r2, #76	@ 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f003 fe5e 	bl	80049c6 <memcpy>
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d10:	20c1      	movs	r0, #193	@ 0xc1
 8000d12:	f000 f9e2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x48, hspi3);
 8000d16:	4668      	mov	r0, sp
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	224c      	movs	r2, #76	@ 0x4c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f003 fe51 	bl	80049c6 <memcpy>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2a:	2048      	movs	r0, #72	@ 0x48
 8000d2c:	f000 f9d5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000d30:	4668      	mov	r0, sp
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	224c      	movs	r2, #76	@ 0x4c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fe44 	bl	80049c6 <memcpy>
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 f9c8 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	224c      	movs	r2, #76	@ 0x4c
 8000d52:	4619      	mov	r1, r3
 8000d54:	f003 fe37 	bl	80049c6 <memcpy>
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f9bb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000d64:	4668      	mov	r0, sp
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	224c      	movs	r2, #76	@ 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f003 fe2a 	bl	80049c6 <memcpy>
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f9ae 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	224c      	movs	r2, #76	@ 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f003 fe1d 	bl	80049c6 <memcpy>
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	2031      	movs	r0, #49	@ 0x31
 8000d94:	f000 f9a1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x36, hspi3);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	f003 fe10 	bl	80049c6 <memcpy>
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	2036      	movs	r0, #54	@ 0x36
 8000dae:	f000 f994 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	224c      	movs	r2, #76	@ 0x4c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f003 fe03 	bl	80049c6 <memcpy>
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f987 	bl	80010da <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11, hspi3);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f003 fdf6 	bl	80049c6 <memcpy>
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de0:	2011      	movs	r0, #17
 8000de2:	f000 f959 	bl	8001098 <LCD_WR_REG>

	HAL_Delay(120);
 8000de6:	2078      	movs	r0, #120	@ 0x78
 8000de8:	f001 f8d0 	bl	8001f8c <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29, hspi3);
 8000dec:	4668      	mov	r0, sp
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	224c      	movs	r2, #76	@ 0x4c
 8000df4:	4619      	mov	r1, r3
 8000df6:	f003 fde6 	bl	80049c6 <memcpy>
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	2029      	movs	r0, #41	@ 0x29
 8000e02:	f000 f949 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x2C, hspi3);
 8000e06:	4668      	mov	r0, sp
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	224c      	movs	r2, #76	@ 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f003 fdd9 	bl	80049c6 <memcpy>
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1a:	202c      	movs	r0, #44	@ 0x2c
 8000e1c:	f000 f95d 	bl	80010da <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 8000e20:	4668      	mov	r0, sp
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f003 fdcc 	bl	80049c6 <memcpy>
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fae7 	bl	8001408 <LCD_direction>

}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr

08000e46 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b097      	sub	sp, #92	@ 0x5c
 8000e4a:	af14      	add	r7, sp, #80	@ 0x50
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4623      	mov	r3, r4
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a, hspi3);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	224c      	movs	r2, #76	@ 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f003 fdaa 	bl	80049c6 <memcpy>
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	202a      	movs	r0, #42	@ 0x2a
 8000e7a:	f000 f90d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8, hspi3);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2dc      	uxtb	r4, r3
 8000e86:	4668      	mov	r0, sp
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	224c      	movs	r2, #76	@ 0x4c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f003 fd99 	bl	80049c6 <memcpy>
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 f91d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x, hspi3);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2dc      	uxtb	r4, r3
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	224c      	movs	r2, #76	@ 0x4c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f003 fd8a 	bl	80049c6 <memcpy>
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f000 f90e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8, hspi3);
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2dc      	uxtb	r4, r3
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	224c      	movs	r2, #76	@ 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f003 fd79 	bl	80049c6 <memcpy>
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f8fd 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x, hspi3);
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	b2dc      	uxtb	r4, r3
 8000ee4:	4668      	mov	r0, sp
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	224c      	movs	r2, #76	@ 0x4c
 8000eec:	4619      	mov	r1, r3
 8000eee:	f003 fd6a 	bl	80049c6 <memcpy>
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 f8ee 	bl	80010da <LCD_WR_DATA>

	LCD_WR_REG(0x2b, hspi3);
 8000efe:	4668      	mov	r0, sp
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	224c      	movs	r2, #76	@ 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f003 fd5d 	bl	80049c6 <memcpy>
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f12:	202b      	movs	r0, #43	@ 0x2b
 8000f14:	f000 f8c0 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8, hspi3);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	4668      	mov	r0, sp
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	224c      	movs	r2, #76	@ 0x4c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f003 fd4c 	bl	80049c6 <memcpy>
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 f8d0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y, hspi3);
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	b2dc      	uxtb	r4, r3
 8000f3e:	4668      	mov	r0, sp
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	224c      	movs	r2, #76	@ 0x4c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f003 fd3d 	bl	80049c6 <memcpy>
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f8c1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8, hspi3);
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2dc      	uxtb	r4, r3
 8000f60:	4668      	mov	r0, sp
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f003 fd2c 	bl	80049c6 <memcpy>
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 f8b0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y, hspi3);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2dc      	uxtb	r4, r3
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	224c      	movs	r2, #76	@ 0x4c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f003 fd1d 	bl	80049c6 <memcpy>
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f8a1 	bl	80010da <LCD_WR_DATA>

}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	b09a      	sub	sp, #104	@ 0x68
 8000fa8:	af16      	add	r7, sp, #88	@ 0x58
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fac:	4603      	mov	r3, r0
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	80bb      	strh	r3, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 8000fc8:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8000fcc:	88fe      	ldrh	r6, [r7, #6]
 8000fce:	88bd      	ldrh	r5, [r7, #4]
 8000fd0:	88fc      	ldrh	r4, [r7, #6]
 8000fd2:	4668      	mov	r0, sp
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	2258      	movs	r2, #88	@ 0x58
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f003 fcf3 	bl	80049c6 <memcpy>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4632      	mov	r2, r6
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff2d 	bl	8000e46 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c, hspi3);
 8000fec:	4668      	mov	r0, sp
 8000fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f003 fce6 	bl	80049c6 <memcpy>
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	202c      	movs	r0, #44	@ 0x2c
 8001002:	f000 f849 	bl	8001098 <LCD_WR_REG>
	DC_H();
 8001006:	f000 fabd 	bl	8001584 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	2202      	movs	r2, #2
 8001018:	f002 fc03 	bl	8003822 <HAL_SPI_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <ILI9341_WritePixel+0x86>
		Error_Handler();
 8001022:	f000 fcff 	bl	8001a24 <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr

08001034 <ILI9341_Reset>:
	__HAL_SPI_ENABLE(&hspi3);
#endif
}

void ILI9341_Reset(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	RESET_L();
 8001038:	f000 fa74 	bl	8001524 <RESET_L>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f000 ffa5 	bl	8001f8c <HAL_Delay>
	RESET_H();
 8001042:	f000 fa7b 	bl	800153c <RESET_H>
	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f000 ffa0 	bl	8001f8c <HAL_Delay>
	CS_L();
 800104c:	f000 fa82 	bl	8001554 <CS_L>
	LED_H();
 8001050:	f000 faa4 	bl	800159c <LED_H>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 8001058:	b084      	sub	sp, #16
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	f107 0c10 	add.w	ip, r7, #16
 8001064:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800106c:	f000 fa7e 	bl	800156c <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 8001070:	1df9      	adds	r1, r7, #7
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	2201      	movs	r2, #1
 8001078:	f107 0010 	add.w	r0, r7, #16
 800107c:	f002 fbd1 	bl	8003822 <HAL_SPI_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <ILI9341_SoftReset+0x32>
		Error_Handler();
 8001086:	f000 fccd 	bl	8001a24 <Error_Handler>
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data, SPI_HandleTypeDef hspi3)
{
 8001098:	b084      	sub	sp, #16
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4604      	mov	r4, r0
 80010a2:	f107 001c 	add.w	r0, r7, #28
 80010a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010aa:	4623      	mov	r3, r4
 80010ac:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80010ae:	f000 fa5d 	bl	800156c <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f107 001c 	add.w	r0, r7, #28
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f002 fbb0 	bl	8003822 <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <LCD_WR_REG+0x34>
		Error_Handler();
 80010c8:	f000 fcac 	bl	8001a24 <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr

080010da <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data, SPI_HandleTypeDef hspi3)
{
 80010da:	b084      	sub	sp, #16
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	f107 001c 	add.w	r0, r7, #28
 80010e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010ec:	4623      	mov	r3, r4
 80010ee:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80010f0:	f000 fa48 	bl	8001584 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	f107 001c 	add.w	r0, r7, #28
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	2201      	movs	r2, #1
 8001100:	f002 fb8f 	bl	8003822 <HAL_SPI_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <LCD_WR_DATA+0x34>
		Error_Handler();
 800110a:	f000 fc8b 	bl	8001a24 <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <ILI9341_InitWindowsWithFont>:
{
	spiDmaTransferComplete = 1;
}
*/

void ILI9341_InitWindowsWithFont(SPI_HandleTypeDef hspi3, uint16_t color){
 800111c:	b084      	sub	sp, #16
 800111e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001120:	b099      	sub	sp, #100	@ 0x64
 8001122:	af16      	add	r7, sp, #88	@ 0x58
 8001124:	f107 0420 	add.w	r4, r7, #32
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 800112c:	466b      	mov	r3, sp
 800112e:	f107 0120 	add.w	r1, r7, #32
 8001132:	2258      	movs	r2, #88	@ 0x58
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fc46 	bl	80049c6 <memcpy>
 800113a:	f240 133f 	movw	r3, #319	@ 0x13f
 800113e:	22ef      	movs	r2, #239	@ 0xef
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fe7f 	bl	8000e46 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001148:	2300      	movs	r3, #0
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	e01c      	b.n	8001188 <ILI9341_InitWindowsWithFont+0x6c>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	e013      	b.n	800117c <ILI9341_InitWindowsWithFont+0x60>
			ILI9341_WritePixel(x, y, color, hspi3);
 8001154:	f8b7 6078 	ldrh.w	r6, [r7, #120]	@ 0x78
 8001158:	88bd      	ldrh	r5, [r7, #4]
 800115a:	88fc      	ldrh	r4, [r7, #6]
 800115c:	4668      	mov	r0, sp
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2254      	movs	r2, #84	@ 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	f003 fc2e 	bl	80049c6 <memcpy>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	4632      	mov	r2, r6
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff15 	bl	8000fa0 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	80bb      	strh	r3, [r7, #4]
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2bef      	cmp	r3, #239	@ 0xef
 8001180:	d9e8      	bls.n	8001154 <ILI9341_InitWindowsWithFont+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800118e:	d3de      	bcc.n	800114e <ILI9341_InitWindowsWithFont+0x32>
		}
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bgcolor, SPI_HandleTypeDef hspi3) {
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b0a3      	sub	sp, #140	@ 0x8c
 80011a4:	af1a      	add	r7, sp, #104	@ 0x68
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	4603      	mov	r3, r0
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	4613      	mov	r3, r2
 80011bc:	803b      	strh	r3, [r7, #0]
	if (c < 32 || c > 126) {
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	d902      	bls.n	80011ca <ILI9341_DrawChar+0x2a>
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80011c8:	d901      	bls.n	80011ce <ILI9341_DrawChar+0x2e>
	        c = '?'; // Si le caractère n'est pas supporté
 80011ca:	233f      	movs	r3, #63	@ 0x3f
 80011cc:	70fb      	strb	r3, [r7, #3]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f1a3 0220 	sub.w	r2, r3, #32
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	4a3c      	ldr	r2, [pc, #240]	@ (80012cc <ILI9341_DrawChar+0x12c>)
 80011dc:	4413      	add	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 80011e0:	2307      	movs	r3, #7
 80011e2:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 80011e4:	231e      	movs	r3, #30
 80011e6:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e042      	b.n	8001274 <ILI9341_DrawChar+0xd4>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	e039      	b.n	8001268 <ILI9341_DrawChar+0xc8>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa42 f303 	asr.w	r3, r2, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <ILI9341_DrawChar+0x98>
				ILI9341_WritePixelsFullHeight(x, y, i, j, scaleX, scaleY, color, hspi3);
 800120c:	88bd      	ldrh	r5, [r7, #4]
 800120e:	88fc      	ldrh	r4, [r7, #6]
 8001210:	a803      	add	r0, sp, #12
 8001212:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001216:	2258      	movs	r2, #88	@ 0x58
 8001218:	4619      	mov	r1, r3
 800121a:	f003 fbd4 	bl	80049c6 <memcpy>
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4629      	mov	r1, r5
 8001230:	4620      	mov	r0, r4
 8001232:	f000 f89f 	bl	8001374 <ILI9341_WritePixelsFullHeight>
 8001236:	e014      	b.n	8001262 <ILI9341_DrawChar+0xc2>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, y, i, j, scaleX, scaleY, bgcolor, hspi3);
 8001238:	88bd      	ldrh	r5, [r7, #4]
 800123a:	88fc      	ldrh	r4, [r7, #6]
 800123c:	a803      	add	r0, sp, #12
 800123e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001242:	2258      	movs	r2, #88	@ 0x58
 8001244:	4619      	mov	r1, r3
 8001246:	f003 fbbe 	bl	80049c6 <memcpy>
 800124a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	4629      	mov	r1, r5
 800125c:	4620      	mov	r0, r4
 800125e:	f000 f889 	bl	8001374 <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	3301      	adds	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b04      	cmp	r3, #4
 800126c:	ddc2      	ble.n	80011f4 <ILI9341_DrawChar+0x54>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b07      	cmp	r3, #7
 8001278:	ddb9      	ble.n	80011ee <ILI9341_DrawChar+0x4e>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e01c      	b.n	80012ba <ILI9341_DrawChar+0x11a>
        ILI9341_WritePixel(x + 5, y + j, bgcolor, hspi3);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	3305      	adds	r3, #5
 8001284:	b29c      	uxth	r4, r3
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800128a:	b29a      	uxth	r2, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	b29d      	uxth	r5, r3
 8001292:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 8001294:	4668      	mov	r0, sp
 8001296:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129a:	2254      	movs	r2, #84	@ 0x54
 800129c:	4619      	mov	r1, r3
 800129e:	f003 fb92 	bl	80049c6 <memcpy>
 80012a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a4:	4632      	mov	r2, r6
 80012a6:	4629      	mov	r1, r5
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fe79 	bl	8000fa0 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 80012ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	75fb      	strb	r3, [r7, #23]
 80012ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	ddde      	ble.n	8001280 <ILI9341_DrawChar+0xe0>
    }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	@ 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	080057c8 	.word	0x080057c8

080012d0 <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str, uint16_t color, uint16_t bgcolor, SPI_HandleTypeDef hspi3) {
 80012d0:	b082      	sub	sp, #8
 80012d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d6:	b09c      	sub	sp, #112	@ 0x70
 80012d8:	af18      	add	r7, sp, #96	@ 0x60
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	803b      	strh	r3, [r7, #0]
	int cmpt = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
	uint16_t y = 20;
 80012ea:	2314      	movs	r3, #20
 80012ec:	813b      	strh	r3, [r7, #8]
	if (strlen(str) == 5)
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7fe ff76 	bl	80001e0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d130      	bne.n	800135c <ILI9341_InitDrawString+0x8c>
	{
		while (*str)
 80012fa:	e02a      	b.n	8001352 <ILI9341_InitDrawString+0x82>
		{
			uint16_t x = MARGE_NUMBERS_X;
 80012fc:	2305      	movs	r3, #5
 80012fe:	817b      	strh	r3, [r7, #10]
			if (cmpt != 0){
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <ILI9341_InitDrawString+0x46>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	b29b      	uxth	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	0192      	lsls	r2, r2, #6
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	3305      	adds	r3, #5
 8001314:	817b      	strh	r3, [r7, #10]
			}

			ILI9341_DrawChar(x, y, *str, color, bgcolor, hspi3);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	781e      	ldrb	r6, [r3, #0]
 800131a:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 800131e:	893d      	ldrh	r5, [r7, #8]
 8001320:	897c      	ldrh	r4, [r7, #10]
 8001322:	a801      	add	r0, sp, #4
 8001324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001328:	2258      	movs	r2, #88	@ 0x58
 800132a:	4619      	mov	r1, r3
 800132c:	f003 fb4b 	bl	80049c6 <memcpy>
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4643      	mov	r3, r8
 8001336:	4632      	mov	r2, r6
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff ff30 	bl	80011a0 <ILI9341_DrawChar>
			x += 6; // Largeur d'un caractère (8 pixels + 1 pixel de marge)
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	3306      	adds	r3, #6
 8001344:	817b      	strh	r3, [r7, #10]
			str++;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1d0      	bne.n	80012fc <ILI9341_InitDrawString+0x2c>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 800135a:	e002      	b.n	8001362 <ILI9341_InitDrawString+0x92>
		printf("Erreur le string est composé de plus de 5 éléments");
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <ILI9341_InitDrawString+0xa0>)
 800135e:	f003 f94f 	bl	8004600 <iprintf>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800136c:	b002      	add	sp, #8
 800136e:	4770      	bx	lr
 8001370:	0800575c 	.word	0x0800575c

08001374 <ILI9341_WritePixelsFullHeight>:

static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	b09d      	sub	sp, #116	@ 0x74
 8001378:	af16      	add	r7, sp, #88	@ 0x58
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4603      	mov	r3, r0
 8001380:	81fb      	strh	r3, [r7, #14]
 8001382:	460b      	mov	r3, r1
 8001384:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e034      	b.n	80013f6 <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	e02a      	b.n	80013e8 <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b29b      	uxth	r3, r3
 8001396:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001398:	fb12 f303 	smulbb	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29c      	uxth	r4, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013b2:	fb12 f303 	smulbb	r3, r2, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	89bb      	ldrh	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29d      	uxth	r5, r3
 80013c6:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 80013c8:	4668      	mov	r0, sp
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	2254      	movs	r2, #84	@ 0x54
 80013d0:	4619      	mov	r1, r3
 80013d2:	f003 faf8 	bl	80049c6 <memcpy>
 80013d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013d8:	4632      	mov	r2, r6
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fddf 	bl	8000fa0 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3301      	adds	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbd0      	blt.n	8001392 <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbc6      	blt.n	800138c <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001408 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8001408:	b084      	sub	sp, #16
 800140a:	b590      	push	{r4, r7, lr}
 800140c:	b097      	sub	sp, #92	@ 0x5c
 800140e:	af14      	add	r7, sp, #80	@ 0x50
 8001410:	4604      	mov	r4, r0
 8001412:	f107 001c 	add.w	r0, r7, #28
 8001416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800141a:	4623      	mov	r3, r4
 800141c:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d877      	bhi.n	8001514 <LCD_direction+0x10c>
 8001424:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <LCD_direction+0x24>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001473 	.word	0x08001473
 8001434:	080014a9 	.word	0x080014a9
 8001438:	080014df 	.word	0x080014df
	case ROTATE_0:
		LCD_WR_REG(0x36, hspi3);
 800143c:	4668      	mov	r0, sp
 800143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001442:	224c      	movs	r2, #76	@ 0x4c
 8001444:	4619      	mov	r1, r3
 8001446:	f003 fabe 	bl	80049c6 <memcpy>
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001450:	2036      	movs	r0, #54	@ 0x36
 8001452:	f7ff fe21 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x48, hspi3);
 8001456:	4668      	mov	r0, sp
 8001458:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145c:	224c      	movs	r2, #76	@ 0x4c
 800145e:	4619      	mov	r1, r3
 8001460:	f003 fab1 	bl	80049c6 <memcpy>
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146a:	2048      	movs	r0, #72	@ 0x48
 800146c:	f7ff fe35 	bl	80010da <LCD_WR_DATA>
		break;
 8001470:	e050      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_90:
		LCD_WR_REG(0x36, hspi3);
 8001472:	4668      	mov	r0, sp
 8001474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001478:	224c      	movs	r2, #76	@ 0x4c
 800147a:	4619      	mov	r1, r3
 800147c:	f003 faa3 	bl	80049c6 <memcpy>
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001486:	2036      	movs	r0, #54	@ 0x36
 8001488:	f7ff fe06 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x28, hspi3);
 800148c:	4668      	mov	r0, sp
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	224c      	movs	r2, #76	@ 0x4c
 8001494:	4619      	mov	r1, r3
 8001496:	f003 fa96 	bl	80049c6 <memcpy>
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a0:	2028      	movs	r0, #40	@ 0x28
 80014a2:	f7ff fe1a 	bl	80010da <LCD_WR_DATA>
		break;
 80014a6:	e035      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_180:
		LCD_WR_REG(0x36, hspi3);
 80014a8:	4668      	mov	r0, sp
 80014aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ae:	224c      	movs	r2, #76	@ 0x4c
 80014b0:	4619      	mov	r1, r3
 80014b2:	f003 fa88 	bl	80049c6 <memcpy>
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	2036      	movs	r0, #54	@ 0x36
 80014be:	f7ff fdeb 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x88, hspi3);
 80014c2:	4668      	mov	r0, sp
 80014c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c8:	224c      	movs	r2, #76	@ 0x4c
 80014ca:	4619      	mov	r1, r3
 80014cc:	f003 fa7b 	bl	80049c6 <memcpy>
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d6:	2088      	movs	r0, #136	@ 0x88
 80014d8:	f7ff fdff 	bl	80010da <LCD_WR_DATA>
		break;
 80014dc:	e01a      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_270:
		LCD_WR_REG(0x36, hspi3);
 80014de:	4668      	mov	r0, sp
 80014e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e4:	224c      	movs	r2, #76	@ 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	f003 fa6d 	bl	80049c6 <memcpy>
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f2:	2036      	movs	r0, #54	@ 0x36
 80014f4:	f7ff fdd0 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0xE8, hspi3);
 80014f8:	4668      	mov	r0, sp
 80014fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fe:	224c      	movs	r2, #76	@ 0x4c
 8001500:	4619      	mov	r1, r3
 8001502:	f003 fa60 	bl	80049c6 <memcpy>
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	20e8      	movs	r0, #232	@ 0xe8
 800150e:	f7ff fde4 	bl	80010da <LCD_WR_DATA>
		break;
 8001512:	bf00      	nop
	}
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800151e:	b004      	add	sp, #16
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <RESET_L>:

static void RESET_L(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2180      	movs	r1, #128	@ 0x80
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <RESET_L+0x14>)
 800152e:	f000 ffe7 	bl	8002500 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020400 	.word	0x40020400

0800153c <RESET_H>:

static void RESET_H(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2180      	movs	r1, #128	@ 0x80
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <RESET_H+0x14>)
 8001546:	f000 ffdb 	bl	8002500 <HAL_GPIO_WritePin>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400

08001554 <CS_L>:

static void CS_L(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <CS_L+0x14>)
 800155e:	f000 ffcf 	bl	8002500 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020400 	.word	0x40020400

0800156c <DC_L>:

static void DC_L(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001576:	4802      	ldr	r0, [pc, #8]	@ (8001580 <DC_L+0x14>)
 8001578:	f000 ffc2 	bl	8002500 <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40020400 	.word	0x40020400

08001584 <DC_H>:

static void DC_H(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158e:	4802      	ldr	r0, [pc, #8]	@ (8001598 <DC_H+0x14>)
 8001590:	f000 ffb6 	bl	8002500 <HAL_GPIO_WritePin>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020400 	.word	0x40020400

0800159c <LED_H>:

static void LED_H(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	b0a5      	sub	sp, #148	@ 0x94
 80015b0:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b2:	f000 fc79 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b6:	f000 f87f 	bl	80016b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ba:	f000 f9ab 	bl	8001914 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015be:	f000 f97f 	bl	80018c0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80015c2:	f000 f947 	bl	8001854 <MX_SPI3_Init>
  MX_RTC_Init();
 80015c6:	f000 f8e3 	bl	8001790 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(hspi3);  // Initialisation de l'écran ILI9341
 80015ca:	4c32      	ldr	r4, [pc, #200]	@ (8001694 <main+0xe8>)
 80015cc:	4668      	mov	r0, sp
 80015ce:	f104 0310 	add.w	r3, r4, #16
 80015d2:	2248      	movs	r2, #72	@ 0x48
 80015d4:	4619      	mov	r1, r3
 80015d6:	f003 f9f6 	bl	80049c6 <memcpy>
 80015da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015de:	f7fe ffcf 	bl	8000580 <ILI9341_Init>
  ILI9341_InitWindowsWithFont(hspi3, 0x0000);
 80015e2:	4c2c      	ldr	r4, [pc, #176]	@ (8001694 <main+0xe8>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80015e8:	4668      	mov	r0, sp
 80015ea:	f104 0310 	add.w	r3, r4, #16
 80015ee:	2248      	movs	r2, #72	@ 0x48
 80015f0:	4619      	mov	r1, r3
 80015f2:	f003 f9e8 	bl	80049c6 <memcpy>
 80015f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015fa:	f7ff fd8f 	bl	800111c <ILI9341_InitWindowsWithFont>
  uint16_t text_color = 0xFFFF; // Blanc
 80015fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001602:	86fb      	strh	r3, [r7, #54]	@ 0x36
  char timeChar[6];

  sprintf(timeChar, "%02d:%02d", (char)sTime.Hours, (char)sTime.Minutes);
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <main+0xec>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <main+0xec>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	f107 0018 	add.w	r0, r7, #24
 8001612:	4922      	ldr	r1, [pc, #136]	@ (800169c <main+0xf0>)
 8001614:	f003 f864 	bl	80046e0 <siprintf>
  ILI9341_InitDrawString(timeChar, text_color, 0x0000, hspi3);
 8001618:	4c1e      	ldr	r4, [pc, #120]	@ (8001694 <main+0xe8>)
 800161a:	8efe      	ldrh	r6, [r7, #54]	@ 0x36
 800161c:	f107 0518 	add.w	r5, r7, #24
 8001620:	4668      	mov	r0, sp
 8001622:	1d23      	adds	r3, r4, #4
 8001624:	2254      	movs	r2, #84	@ 0x54
 8001626:	4619      	mov	r1, r3
 8001628:	f003 f9cd 	bl	80049c6 <memcpy>
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	4631      	mov	r1, r6
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff fe4c 	bl	80012d0 <ILI9341_InitDrawString>

  RTC_TimeTypeDef currentTime;
  uint8_t lastMinutes = TIME_GetTime(&hrtc).Minutes;
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4918      	ldr	r1, [pc, #96]	@ (80016a0 <main+0xf4>)
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fbde 	bl	8001e00 <TIME_GetTime>
 8001644:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001648:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t lastSeconds = 0xFF;
 800164c:	23ff      	movs	r3, #255	@ 0xff
 800164e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  printf("RTC time\n");
 8001652:	4814      	ldr	r0, [pc, #80]	@ (80016a4 <main+0xf8>)
 8001654:	f003 f83c 	bl	80046d0 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001658:	2200      	movs	r2, #0
 800165a:	4913      	ldr	r1, [pc, #76]	@ (80016a8 <main+0xfc>)
 800165c:	4810      	ldr	r0, [pc, #64]	@ (80016a0 <main+0xf4>)
 800165e:	f001 fe0e 	bl	800327e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001662:	2200      	movs	r2, #0
 8001664:	4911      	ldr	r1, [pc, #68]	@ (80016ac <main+0x100>)
 8001666:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <main+0xf4>)
 8001668:	f001 feeb 	bl	8003442 <HAL_RTC_GetDate>
	printf("Date year %02d\n", 2000 + Date.Year);
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <main+0x100>)
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001674:	4619      	mov	r1, r3
 8001676:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <main+0x104>)
 8001678:	f002 ffc2 	bl	8004600 <iprintf>
	printf("Time %02d\n", Time.Seconds);
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <main+0xfc>)
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	4619      	mov	r1, r3
 8001682:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <main+0x108>)
 8001684:	f002 ffbc 	bl	8004600 <iprintf>
	HAL_Delay(500);
 8001688:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800168c:	f000 fc7e 	bl	8001f8c <HAL_Delay>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001690:	bf00      	nop
 8001692:	e7e1      	b.n	8001658 <main+0xac>
 8001694:	200000a4 	.word	0x200000a4
 8001698:	20000160 	.word	0x20000160
 800169c:	08005794 	.word	0x08005794
 80016a0:	20000084 	.word	0x20000084
 80016a4:	080057a0 	.word	0x080057a0
 80016a8:	20000148 	.word	0x20000148
 80016ac:	20000144 	.word	0x20000144
 80016b0:	080057ac 	.word	0x080057ac
 80016b4:	080057bc 	.word	0x080057bc

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	@ 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2230      	movs	r2, #48	@ 0x30
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 f902 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <SystemClock_Config+0xd0>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a28      	ldr	r2, [pc, #160]	@ (8001788 <SystemClock_Config+0xd0>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <SystemClock_Config+0xd0>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <SystemClock_Config+0xd4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <SystemClock_Config+0xd4>)
 8001702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <SystemClock_Config+0xd4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001714:	230a      	movs	r3, #10
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	2310      	movs	r3, #16
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001720:	2301      	movs	r3, #1
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001724:	2302      	movs	r3, #2
 8001726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001728:	2300      	movs	r3, #0
 800172a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800172c:	2310      	movs	r3, #16
 800172e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001730:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001736:	2304      	movs	r3, #4
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fef6 	bl	8002534 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800174e:	f000 f969 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f001 f958 	bl	8002a24 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800177a:	f000 f953 	bl	8001a24 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	@ 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017a8:	4b28      	ldr	r3, [pc, #160]	@ (800184c <MX_RTC_Init+0xbc>)
 80017aa:	4a29      	ldr	r2, [pc, #164]	@ (8001850 <MX_RTC_Init+0xc0>)
 80017ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <MX_RTC_Init+0xbc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017b4:	4b25      	ldr	r3, [pc, #148]	@ (800184c <MX_RTC_Init+0xbc>)
 80017b6:	227f      	movs	r2, #127	@ 0x7f
 80017b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <MX_RTC_Init+0xbc>)
 80017bc:	22ff      	movs	r2, #255	@ 0xff
 80017be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <MX_RTC_Init+0xbc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <MX_RTC_Init+0xbc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <MX_RTC_Init+0xbc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017d2:	481e      	ldr	r0, [pc, #120]	@ (800184c <MX_RTC_Init+0xbc>)
 80017d4:	f001 fc36 	bl	8003044 <HAL_RTC_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80017de:	f000 f921 	bl	8001a24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80017e2:	230a      	movs	r3, #10
 80017e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 24;
 80017e6:	2318      	movs	r3, #24
 80017e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 80017ea:	232d      	movs	r3, #45	@ 0x2d
 80017ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <MX_RTC_Init+0xbc>)
 80017fe:	f001 fca4 	bl	800314a <HAL_RTC_SetTime>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001808:	f000 f90c 	bl	8001a24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800180c:	2301      	movs	r3, #1
 800180e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001810:	2301      	movs	r3, #1
 8001812:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	480a      	ldr	r0, [pc, #40]	@ (800184c <MX_RTC_Init+0xbc>)
 8001824:	f001 fd89 	bl	800333a <HAL_RTC_SetDate>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800182e:	f000 f8f9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2029      	movs	r0, #41	@ 0x29
 8001838:	f000 fca7 	bl	800218a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800183c:	2029      	movs	r0, #41	@ 0x29
 800183e:	f000 fcc0 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000084 	.word	0x20000084
 8001850:	40002800 	.word	0x40002800

08001854 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <MX_SPI3_Init+0x64>)
 800185a:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <MX_SPI3_Init+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_SPI3_Init+0x64>)
 8001860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001864:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001866:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <MX_SPI3_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <MX_SPI3_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_SPI3_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <MX_SPI3_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_SPI3_Init+0x64>)
 8001880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001884:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001886:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_SPI3_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <MX_SPI3_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_SPI3_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001898:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <MX_SPI3_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_SPI3_Init+0x64>)
 80018a0:	220a      	movs	r2, #10
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <MX_SPI3_Init+0x64>)
 80018a6:	f001 ff33 	bl	8003710 <HAL_SPI_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80018b0:	f000 f8b8 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000a4 	.word	0x200000a4
 80018bc:	40003c00 	.word	0x40003c00

080018c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <MX_USART2_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018f8:	f002 f9b4 	bl	8003c64 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001902:	f000 f88f 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000fc 	.word	0x200000fc
 8001910:	40004400 	.word	0x40004400

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b2a      	ldr	r3, [pc, #168]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a29      	ldr	r2, [pc, #164]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_GPIO_Init+0xe0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2120      	movs	r1, #32
 800199e:	4816      	ldr	r0, [pc, #88]	@ (80019f8 <MX_GPIO_Init+0xe4>)
 80019a0:	f000 fdae 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80019aa:	4814      	ldr	r0, [pc, #80]	@ (80019fc <MX_GPIO_Init+0xe8>)
 80019ac:	f000 fda8 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019b0:	2320      	movs	r3, #32
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <MX_GPIO_Init+0xe4>)
 80019c8:	f000 fc16 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 80019cc:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_GPIO_Init+0xe8>)
 80019e6:	f000 fc07 	bl	80021f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	@ 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400

08001a00 <__io_putchar>:

int __io_putchar(int ch)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001a08:	1d39      	adds	r1, r7, #4
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <__io_putchar+0x20>)
 8001a12:	f002 f977 	bl	8003d04 <HAL_UART_Transmit>
	return ch;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200000fc 	.word	0x200000fc

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <Error_Handler+0x8>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a6e:	2007      	movs	r0, #7
 8001a70:	f000 fb80 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <HAL_RTC_MspInit+0x50>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f9d6 	bl	8002e64 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001abe:	f7ff ffb1 	bl	8001a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <HAL_RTC_MspInit+0x54>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40002800 	.word	0x40002800
 8001ad4:	42470e3c 	.word	0x42470e3c

08001ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a28      	ldr	r2, [pc, #160]	@ (8001b98 <HAL_SPI_MspInit+0xc0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d14a      	bne.n	8001b90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a18      	ldr	r2, [pc, #96]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_SPI_MspInit+0xc4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b60:	2306      	movs	r3, #6
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <HAL_SPI_MspInit+0xc8>)
 8001b6c:	f000 fb44 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b70:	2320      	movs	r3, #32
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b80:	2306      	movs	r3, #6
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <HAL_SPI_MspInit+0xcc>)
 8001b8c:	f000 fb34 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	@ 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40003c00 	.word	0x40003c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020400 	.word	0x40020400

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <HAL_UART_MspInit+0x84>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12b      	bne.n	8001c22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c02:	230c      	movs	r3, #12
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c12:	2307      	movs	r3, #7
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <HAL_UART_MspInit+0x8c>)
 8001c1e:	f000 faeb 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 f95d 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e00a      	b.n	8001cbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca8:	f3af 8000 	nop.w
 8001cac:	4601      	mov	r1, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf0      	blt.n	8001ca8 <_read+0x12>
  }

  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e009      	b.n	8001cf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60ba      	str	r2, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fe88 	bl	8001a00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbf1      	blt.n	8001ce2 <_write+0x12>
  }
  return len;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_close>:

int _close(int file)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d30:	605a      	str	r2, [r3, #4]
  return 0;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_isatty>:

int _isatty(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f002 fde4 	bl	800496c <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20020000 	.word	0x20020000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	2000015c 	.word	0x2000015c
 8001dd8:	200002c8 	.word	0x200002c8

08001ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <SystemInit+0x20>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <SystemInit+0x20>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <TIME_GetTime>:
    }
    //MX_RTC_SetAlarm(hrtc);
}

RTC_TimeTypeDef TIME_GetTime(RTC_HandleTypeDef *hrtc)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    /* Lire l'heure actuelle */
    if (HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	490a      	ldr	r1, [pc, #40]	@ (8001e38 <TIME_GetTime+0x38>)
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f001 fa35 	bl	800327e <HAL_RTC_GetTime>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <TIME_GetTime+0x1e>
        /* Gestion d'erreur */
        Error_Handler();
 8001e1a:	f7ff fe03 	bl	8001a24 <Error_Handler>
    }
    return sTime;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <TIME_GetTime+0x38>)
 8001e22:	461c      	mov	r4, r3
 8001e24:	4615      	mov	r5, r2
 8001e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	6023      	str	r3, [r4, #0]
}
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000160 	.word	0x20000160

08001e3c <RTC_Alarm_IRQHandler>:
        // Erreur de configuration de l'alarme
    }
}

/* Interruption RTC Alarm */
void RTC_Alarm_IRQHandler(RTC_HandleTypeDef *hrtc) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
    HAL_RTC_AlarmIRQHandler(hrtc);  // Appeler le gestionnaire d'interruption HAL
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f001 fb4b 	bl	80034e0 <HAL_RTC_AlarmIRQHandler>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e58:	f7ff ffc0 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e5c:	480c      	ldr	r0, [pc, #48]	@ (8001e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e5e:	490d      	ldr	r1, [pc, #52]	@ (8001e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e60:	4a0d      	ldr	r2, [pc, #52]	@ (8001e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f002 fd79 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff fb91 	bl	80015ac <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e98:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 8001e9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ea0:	200002c4 	.word	0x200002c4

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f94f 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff fda8 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f967 	bl	80021de <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f000 f92f 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000174 	.word	0x20000174

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000174 	.word	0x20000174

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <__NVIC_EnableIRQ+0x38>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff29 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff3e 	bl	800201c <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff8e 	bl	80020c8 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff31 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffa2 	bl	8002130 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	@ 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e159      	b.n	80024c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 8148 	bne.w	80024c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a2 	beq.w	80024c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b57      	ldr	r3, [pc, #348]	@ (80024e0 <HAL_GPIO_Init+0x2e8>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	4a56      	ldr	r2, [pc, #344]	@ (80024e0 <HAL_GPIO_Init+0x2e8>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800238c:	6453      	str	r3, [r2, #68]	@ 0x44
 800238e:	4b54      	ldr	r3, [pc, #336]	@ (80024e0 <HAL_GPIO_Init+0x2e8>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_GPIO_Init+0x2ec>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a49      	ldr	r2, [pc, #292]	@ (80024e8 <HAL_GPIO_Init+0x2f0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x202>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a48      	ldr	r2, [pc, #288]	@ (80024ec <HAL_GPIO_Init+0x2f4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x1fe>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a47      	ldr	r2, [pc, #284]	@ (80024f0 <HAL_GPIO_Init+0x2f8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x1fa>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a46      	ldr	r2, [pc, #280]	@ (80024f4 <HAL_GPIO_Init+0x2fc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x1f6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a45      	ldr	r2, [pc, #276]	@ (80024f8 <HAL_GPIO_Init+0x300>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x1f2>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x204>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x204>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x204>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x204>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x204>
 80023fa:	2300      	movs	r3, #0
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800240c:	4935      	ldr	r1, [pc, #212]	@ (80024e4 <HAL_GPIO_Init+0x2ec>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241a:	4b38      	ldr	r3, [pc, #224]	@ (80024fc <HAL_GPIO_Init+0x304>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243e:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <HAL_GPIO_Init+0x304>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <HAL_GPIO_Init+0x304>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002468:	4a24      	ldr	r2, [pc, #144]	@ (80024fc <HAL_GPIO_Init+0x304>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246e:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <HAL_GPIO_Init+0x304>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002492:	4a1a      	ldr	r2, [pc, #104]	@ (80024fc <HAL_GPIO_Init+0x304>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002498:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <HAL_GPIO_Init+0x304>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024bc:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <HAL_GPIO_Init+0x304>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	f67f aea2 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e267      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d075      	beq.n	800263e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002552:	4b88      	ldr	r3, [pc, #544]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d00c      	beq.n	8002578 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255e:	4b85      	ldr	r3, [pc, #532]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002566:	2b08      	cmp	r3, #8
 8002568:	d112      	bne.n	8002590 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256a:	4b82      	ldr	r3, [pc, #520]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002576:	d10b      	bne.n	8002590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	4b7e      	ldr	r3, [pc, #504]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05b      	beq.n	800263c <HAL_RCC_OscConfig+0x108>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d157      	bne.n	800263c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e242      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x74>
 800259a:	4b76      	ldr	r3, [pc, #472]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a75      	ldr	r2, [pc, #468]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xb0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x98>
 80025b2:	4b70      	ldr	r3, [pc, #448]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b6d      	ldr	r3, [pc, #436]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xb0>
 80025cc:	4b69      	ldr	r3, [pc, #420]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a68      	ldr	r2, [pc, #416]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b66      	ldr	r3, [pc, #408]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a65      	ldr	r2, [pc, #404]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fcc2 	bl	8001f74 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fcbe 	bl	8001f74 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e207      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b5b      	ldr	r3, [pc, #364]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xc0>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff fcae 	bl	8001f74 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fcaa 	bl	8001f74 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e1f3      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	4b51      	ldr	r3, [pc, #324]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0xe8>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d063      	beq.n	8002712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800264a:	4b4a      	ldr	r3, [pc, #296]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800265e:	2b08      	cmp	r3, #8
 8002660:	d11c      	bne.n	800269c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002662:	4b44      	ldr	r3, [pc, #272]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d116      	bne.n	800269c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	4b41      	ldr	r3, [pc, #260]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_RCC_OscConfig+0x152>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e1c7      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b3b      	ldr	r3, [pc, #236]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4937      	ldr	r1, [pc, #220]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	e03a      	b.n	8002712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a4:	4b34      	ldr	r3, [pc, #208]	@ (8002778 <HAL_RCC_OscConfig+0x244>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7ff fc63 	bl	8001f74 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7ff fc5f 	bl	8001f74 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1a8      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4925      	ldr	r1, [pc, #148]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b24      	ldr	r3, [pc, #144]	@ (8002778 <HAL_RCC_OscConfig+0x244>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7ff fc42 	bl	8001f74 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f4:	f7ff fc3e 	bl	8001f74 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e187      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d036      	beq.n	800278c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_RCC_OscConfig+0x248>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff fc22 	bl	8001f74 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff fc1e 	bl	8001f74 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e167      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_OscConfig+0x240>)
 8002748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x200>
 8002752:	e01b      	b.n	800278c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_OscConfig+0x248>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff fc0b 	bl	8001f74 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	e00e      	b.n	8002780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002762:	f7ff fc07 	bl	8001f74 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d907      	bls.n	8002780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e150      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
 8002774:	40023800 	.word	0x40023800
 8002778:	42470000 	.word	0x42470000
 800277c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ea      	bne.n	8002762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8097 	beq.w	80028c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b81      	ldr	r3, [pc, #516]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	4b7d      	ldr	r3, [pc, #500]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	4a7c      	ldr	r2, [pc, #496]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ba:	4b7a      	ldr	r3, [pc, #488]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b77      	ldr	r3, [pc, #476]	@ (80029a8 <HAL_RCC_OscConfig+0x474>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d118      	bne.n	8002808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d6:	4b74      	ldr	r3, [pc, #464]	@ (80029a8 <HAL_RCC_OscConfig+0x474>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a73      	ldr	r2, [pc, #460]	@ (80029a8 <HAL_RCC_OscConfig+0x474>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e2:	f7ff fbc7 	bl	8001f74 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7ff fbc3 	bl	8001f74 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e10c      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b6a      	ldr	r3, [pc, #424]	@ (80029a8 <HAL_RCC_OscConfig+0x474>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x2ea>
 8002810:	4b64      	ldr	r3, [pc, #400]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002814:	4a63      	ldr	r2, [pc, #396]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	@ 0x70
 800281c:	e01c      	b.n	8002858 <HAL_RCC_OscConfig+0x324>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x30c>
 8002826:	4b5f      	ldr	r3, [pc, #380]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a5e      	ldr	r2, [pc, #376]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
 8002832:	4b5c      	ldr	r3, [pc, #368]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002836:	4a5b      	ldr	r2, [pc, #364]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	@ 0x70
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0x324>
 8002840:	4b58      	ldr	r3, [pc, #352]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a57      	ldr	r2, [pc, #348]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
 800284c:	4b55      	ldr	r3, [pc, #340]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	4a54      	ldr	r2, [pc, #336]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7ff fb88 	bl	8001f74 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7ff fb84 	bl	8001f74 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0cb      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	4b49      	ldr	r3, [pc, #292]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ee      	beq.n	8002868 <HAL_RCC_OscConfig+0x334>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7ff fb72 	bl	8001f74 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7ff fb6e 	bl	8001f74 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0b5      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	4b3e      	ldr	r3, [pc, #248]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ee      	bne.n	8002894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b39      	ldr	r3, [pc, #228]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	4a38      	ldr	r2, [pc, #224]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a1 	beq.w	8002a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d2:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d05c      	beq.n	8002998 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d141      	bne.n	800296a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x478>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff fb42 	bl	8001f74 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7ff fb3e 	bl	8001f74 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e087      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	491b      	ldr	r1, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x478>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff fb17 	bl	8001f74 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff fb13 	bl	8001f74 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e05c      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x416>
 8002968:	e054      	b.n	8002a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x478>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fb00 	bl	8001f74 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7ff fafc 	bl	8001f74 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e045      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x470>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x444>
 8002996:	e03d      	b.n	8002a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e038      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40007000 	.word	0x40007000
 80029ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x4ec>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d028      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d121      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d11a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d111      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0cc      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b68      	ldr	r3, [pc, #416]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d90c      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b65      	ldr	r3, [pc, #404]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b63      	ldr	r3, [pc, #396]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b8      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a78:	4b59      	ldr	r3, [pc, #356]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a90:	4b53      	ldr	r3, [pc, #332]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	494d      	ldr	r1, [pc, #308]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d044      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d119      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e067      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b37      	ldr	r3, [pc, #220]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4934      	ldr	r1, [pc, #208]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b14:	f7ff fa2e 	bl	8001f74 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7ff fa2a 	bl	8001f74 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e04f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b44:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d20c      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e032      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4916      	ldr	r1, [pc, #88]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002baa:	f000 f821 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	490a      	ldr	r1, [pc, #40]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	5ccb      	ldrb	r3, [r1, r3]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f98e 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023c00 	.word	0x40023c00
 8002be0:	40023800 	.word	0x40023800
 8002be4:	080059a8 	.word	0x080059a8
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000004 	.word	0x20000004

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b094      	sub	sp, #80	@ 0x50
 8002bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c08:	4b79      	ldr	r3, [pc, #484]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d00d      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x40>
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	f200 80e1 	bhi.w	8002ddc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c22:	e0db      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b73      	ldr	r3, [pc, #460]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c28:	e0db      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c2a:	4b73      	ldr	r3, [pc, #460]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c2e:	e0d8      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c30:	4b6f      	ldr	r3, [pc, #444]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c46:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	099b      	lsrs	r3, r3, #6
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c62:	4622      	mov	r2, r4
 8002c64:	462b      	mov	r3, r5
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	0159      	lsls	r1, r3, #5
 8002c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c74:	0150      	lsls	r0, r2, #5
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	1a51      	subs	r1, r2, r1
 8002c7e:	6139      	str	r1, [r7, #16]
 8002c80:	4629      	mov	r1, r5
 8002c82:	eb63 0301 	sbc.w	r3, r3, r1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c94:	4659      	mov	r1, fp
 8002c96:	018b      	lsls	r3, r1, #6
 8002c98:	4651      	mov	r1, sl
 8002c9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	018a      	lsls	r2, r1, #6
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca8:	4659      	mov	r1, fp
 8002caa:	eb63 0901 	sbc.w	r9, r3, r1
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc2:	4690      	mov	r8, r2
 8002cc4:	4699      	mov	r9, r3
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	eb18 0303 	adds.w	r3, r8, r3
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	462b      	mov	r3, r5
 8002cd0:	eb49 0303 	adc.w	r3, r9, r3
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	024b      	lsls	r3, r1, #9
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cec:	4621      	mov	r1, r4
 8002cee:	024a      	lsls	r2, r1, #9
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d00:	f7fd fac6 	bl	8000290 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d0c:	e058      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	2200      	movs	r2, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	4611      	mov	r1, r2
 8002d1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d28:	4642      	mov	r2, r8
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	f04f 0000 	mov.w	r0, #0
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	0159      	lsls	r1, r3, #5
 8002d36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3a:	0150      	lsls	r0, r2, #5
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4641      	mov	r1, r8
 8002d42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d46:	4649      	mov	r1, r9
 8002d48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d60:	ebb2 040a 	subs.w	r4, r2, sl
 8002d64:	eb63 050b 	sbc.w	r5, r3, fp
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	00eb      	lsls	r3, r5, #3
 8002d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d76:	00e2      	lsls	r2, r4, #3
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	4643      	mov	r3, r8
 8002d7e:	18e3      	adds	r3, r4, r3
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	464b      	mov	r3, r9
 8002d84:	eb45 0303 	adc.w	r3, r5, r3
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d96:	4629      	mov	r1, r5
 8002d98:	028b      	lsls	r3, r1, #10
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da0:	4621      	mov	r1, r4
 8002da2:	028a      	lsls	r2, r1, #10
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002daa:	2200      	movs	r2, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	61fa      	str	r2, [r7, #28]
 8002db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db4:	f7fd fa6c 	bl	8000290 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dda:	e002      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3750      	adds	r7, #80	@ 0x50
 8002de8:	46bd      	mov	sp, r7
 8002dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	00f42400 	.word	0x00f42400
 8002df8:	007a1200 	.word	0x007a1200

08002dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e00:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000000 	.word	0x20000000

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e18:	f7ff fff0 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0a9b      	lsrs	r3, r3, #10
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	@ (8002e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	080059b8 	.word	0x080059b8

08002e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e40:	f7ff ffdc 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0b5b      	lsrs	r3, r3, #13
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	@ (8002e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	080059b8 	.word	0x080059b8

08002e64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d038      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e8c:	4b68      	ldr	r3, [pc, #416]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e92:	f7ff f86f 	bl	8001f74 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e9a:	f7ff f86b 	bl	8001f74 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0bd      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eac:	4b61      	ldr	r3, [pc, #388]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	495a      	ldr	r1, [pc, #360]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ed2:	4b57      	ldr	r3, [pc, #348]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7ff f84c 	bl	8001f74 <HAL_GetTick>
 8002edc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ee0:	f7ff f848 	bl	8001f74 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e09a      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ef2:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8083 	beq.w	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	4b48      	ldr	r3, [pc, #288]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	4a47      	ldr	r2, [pc, #284]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1c:	4b45      	ldr	r3, [pc, #276]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f28:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a42      	ldr	r2, [pc, #264]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f34:	f7ff f81e 	bl	8001f74 <HAL_GetTick>
 8002f38:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7ff f81a 	bl	8001f74 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e06c      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f5a:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02f      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d028      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f78:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f82:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f88:	4b2c      	ldr	r3, [pc, #176]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f8e:	4a29      	ldr	r2, [pc, #164]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f94:	4b27      	ldr	r3, [pc, #156]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d114      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe ffe8 	bl	8001f74 <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe ffe4 	bl	8001f74 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e034      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ee      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fec:	4911      	ldr	r1, [pc, #68]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
 8002ff2:	e005      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	4909      	ldr	r1, [pc, #36]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7d1a      	ldrb	r2, [r3, #20]
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003024:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	42470068 	.word	0x42470068
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000
 800303c:	42470e40 	.word	0x42470e40
 8003040:	424711e0 	.word	0x424711e0

08003044 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e073      	b.n	8003142 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7f5b      	ldrb	r3, [r3, #29]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe fd08 	bl	8001a80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	d055      	beq.n	8003130 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ca      	movs	r2, #202	@ 0xca
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2253      	movs	r2, #83	@ 0x53
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fa99 	bl	80035cc <RTC_EnterInitMode>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d12c      	bne.n	80030fe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80030b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030b6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68d2      	ldr	r2, [r2, #12]
 80030de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6919      	ldr	r1, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	041a      	lsls	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 faa0 	bl	800363a <RTC_ExitInitMode>
 80030fa:	4603      	mov	r3, r0
 80030fc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d110      	bne.n	8003126 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	22ff      	movs	r2, #255	@ 0xff
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
 800312e:	e001      	b.n	8003134 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	7f1b      	ldrb	r3, [r3, #28]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_RTC_SetTime+0x1c>
 8003162:	2302      	movs	r3, #2
 8003164:	e087      	b.n	8003276 <HAL_RTC_SetTime+0x12c>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2202      	movs	r2, #2
 8003170:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d126      	bne.n	80031c6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fa77 	bl	8003684 <RTC_ByteToBcd2>
 8003196:	4603      	mov	r3, r0
 8003198:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa70 	bl	8003684 <RTC_ByteToBcd2>
 80031a4:	4603      	mov	r3, r0
 80031a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031a8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	789b      	ldrb	r3, [r3, #2]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fa68 	bl	8003684 <RTC_ByteToBcd2>
 80031b4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e018      	b.n	80031f8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031e6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	22ca      	movs	r2, #202	@ 0xca
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2253      	movs	r2, #83	@ 0x53
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9df 	bl	80035cc <RTC_EnterInitMode>
 800320e:	4603      	mov	r3, r0
 8003210:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d120      	bne.n	800325a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003222:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003226:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003236:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f9f2 	bl	800363a <RTC_ExitInitMode>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	22ff      	movs	r2, #255	@ 0xff
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]

  return status;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
}
 8003276:	4618      	mov	r0, r3
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}

0800327e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032b0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	0d9b      	lsrs	r3, r3, #22
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11a      	bne.n	8003330 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f9de 	bl	80036c0 <RTC_Bcd2ToByte>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f9d5 	bl	80036c0 <RTC_Bcd2ToByte>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	789b      	ldrb	r3, [r3, #2]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f9cc 	bl	80036c0 <RTC_Bcd2ToByte>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800333a:	b590      	push	{r4, r7, lr}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	7f1b      	ldrb	r3, [r3, #28]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RTC_SetDate+0x1c>
 8003352:	2302      	movs	r3, #2
 8003354:	e071      	b.n	800343a <HAL_RTC_SetDate+0x100>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2202      	movs	r2, #2
 8003360:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10e      	bne.n	8003386 <HAL_RTC_SetDate+0x4c>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	785b      	ldrb	r3, [r3, #1]
 8003378:	f023 0310 	bic.w	r3, r3, #16
 800337c:	b2db      	uxtb	r3, r3
 800337e:	330a      	adds	r3, #10
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11c      	bne.n	80033c6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	78db      	ldrb	r3, [r3, #3]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f977 	bl	8003684 <RTC_ByteToBcd2>
 8003396:	4603      	mov	r3, r0
 8003398:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f970 	bl	8003684 <RTC_ByteToBcd2>
 80033a4:	4603      	mov	r3, r0
 80033a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	789b      	ldrb	r3, [r3, #2]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f968 	bl	8003684 <RTC_ByteToBcd2>
 80033b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e00e      	b.n	80033e4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	78db      	ldrb	r3, [r3, #3]
 80033ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033d2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80033d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	22ca      	movs	r2, #202	@ 0xca
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2253      	movs	r2, #83	@ 0x53
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f8e9 	bl	80035cc <RTC_EnterInitMode>
 80033fa:	4603      	mov	r3, r0
 80033fc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10c      	bne.n	800341e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800340e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003412:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f910 	bl	800363a <RTC_ExitInitMode>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	22ff      	movs	r2, #255	@ 0xff
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]

  return status;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
}
 800343a:	4618      	mov	r0, r3
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}

08003442 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800345c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003460:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	0b5b      	lsrs	r3, r3, #13
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11a      	bne.n	80034d6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f90b 	bl	80036c0 <RTC_Bcd2ToByte>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f902 	bl	80036c0 <RTC_Bcd2ToByte>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	789b      	ldrb	r3, [r3, #2]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f8f9 	bl	80036c0 <RTC_Bcd2ToByte>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80034e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <HAL_RTC_AlarmIRQHandler+0x88>)
 80034ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034ee:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800351c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f824 	bl	800356c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003550:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8d2 	bl	80036fc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	775a      	strb	r2, [r3, #29]
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40013c00 	.word	0x40013c00

0800356c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0d      	ldr	r2, [pc, #52]	@ (80035c8 <HAL_RTC_WaitForSynchro+0x48>)
 8003592:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003594:	f7fe fcee 	bl	8001f74 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800359a:	e009      	b.n	80035b0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800359c:	f7fe fcea 	bl	8001f74 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035aa:	d901      	bls.n	80035b0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e007      	b.n	80035c0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ee      	beq.n	800359c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	00013f5f 	.word	0x00013f5f

080035cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d122      	bne.n	8003630 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035fa:	f7fe fcbb 	bl	8001f74 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003600:	e00c      	b.n	800361c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003602:	f7fe fcb7 	bl	8001f74 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003610:	d904      	bls.n	800361c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <RTC_EnterInitMode+0x64>
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d1e8      	bne.n	8003602 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003654:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff8b 	bl	8003580 <HAL_RTC_WaitForSynchro>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003692:	e005      	b.n	80036a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	3b0a      	subs	r3, #10
 800369e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b09      	cmp	r3, #9
 80036a4:	d8f6      	bhi.n	8003694 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b2db      	uxtb	r3, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	b2db      	uxtb	r3, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07b      	b.n	800381a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003732:	d009      	beq.n	8003748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
 800373a:	e005      	b.n	8003748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe f9b8 	bl	8001ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800377e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037cc:	ea42 0103 	orr.w	r1, r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	f003 0104 	and.w	r1, r3, #4
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	f003 0210 	and.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b088      	sub	sp, #32
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003832:	f7fe fb9f 	bl	8001f74 <HAL_GetTick>
 8003836:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
 800384a:	e12a      	b.n	8003aa2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x36>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e122      	b.n	8003aa2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_SPI_Transmit+0x48>
 8003866:	2302      	movs	r3, #2
 8003868:	e11b      	b.n	8003aa2 <HAL_SPI_Transmit+0x280>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2203      	movs	r2, #3
 8003876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b8:	d10f      	bne.n	80038da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d007      	beq.n	80038f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003900:	d152      	bne.n	80039a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Transmit+0xee>
 800390a:	8b7b      	ldrh	r3, [r7, #26]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d145      	bne.n	800399c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003934:	e032      	b.n	800399c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b02      	cmp	r3, #2
 8003942:	d112      	bne.n	800396a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003968:	e018      	b.n	800399c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396a:	f7fe fb03 	bl	8001f74 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d803      	bhi.n	8003982 <HAL_SPI_Transmit+0x160>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d102      	bne.n	8003988 <HAL_SPI_Transmit+0x166>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e082      	b.n	8003aa2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1c7      	bne.n	8003936 <HAL_SPI_Transmit+0x114>
 80039a6:	e053      	b.n	8003a50 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_SPI_Transmit+0x194>
 80039b0:	8b7b      	ldrh	r3, [r7, #26]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d147      	bne.n	8003a46 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	7812      	ldrb	r2, [r2, #0]
 80039c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039dc:	e033      	b.n	8003a46 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d113      	bne.n	8003a14 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	7812      	ldrb	r2, [r2, #0]
 80039f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a12:	e018      	b.n	8003a46 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a14:	f7fe faae 	bl	8001f74 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d803      	bhi.n	8003a2c <HAL_SPI_Transmit+0x20a>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d102      	bne.n	8003a32 <HAL_SPI_Transmit+0x210>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e02d      	b.n	8003aa2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1c6      	bne.n	80039de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f8b1 	bl	8003bbc <SPI_EndRxTxTransaction>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003abc:	f7fe fa5a 	bl	8001f74 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003acc:	f7fe fa52 	bl	8001f74 <HAL_GetTick>
 8003ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad2:	4b39      	ldr	r3, [pc, #228]	@ (8003bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae2:	e054      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d050      	beq.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aec:	f7fe fa42 	bl	8001f74 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d902      	bls.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13d      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b1a:	d111      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b24:	d004      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2e:	d107      	bne.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b48:	d10f      	bne.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e017      	b.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4013      	ands	r3, r2
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d19b      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000000 	.word	0x20000000

08003bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff ff6a 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e032      	b.n	8003c54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bee:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <SPI_EndRxTxTransaction+0xa0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <SPI_EndRxTxTransaction+0xa4>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	0d5b      	lsrs	r3, r3, #21
 8003bfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0c:	d112      	bne.n	8003c34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	@ 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff47 	bl	8003aac <SPI_WaitFlagStateUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e00f      	b.n	8003c54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b80      	cmp	r3, #128	@ 0x80
 8003c4c:	d0f2      	beq.n	8003c34 <SPI_EndRxTxTransaction+0x78>
 8003c4e:	e000      	b.n	8003c52 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c50:	bf00      	nop
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	165e9f81 	.word	0x165e9f81

08003c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e042      	b.n	8003cfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd ff8c 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f973 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d175      	bne.n	8003e10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_UART_Transmit+0x2c>
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e06e      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	@ 0x21
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d42:	f7fe f917 	bl	8001f74 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5c:	d108      	bne.n	8003d70 <HAL_UART_Transmit+0x6c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e003      	b.n	8003d78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d78:	e02e      	b.n	8003dd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f848 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e03a      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	3302      	adds	r3, #2
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e007      	b.n	8003dca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1cb      	bne.n	8003d7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2140      	movs	r1, #64	@ 0x40
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f814 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e006      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	e03b      	b.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d037      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7fe f89e 	bl	8001f74 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e03a      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b80      	cmp	r3, #128	@ 0x80
 8003e60:	d020      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b40      	cmp	r3, #64	@ 0x40
 8003e66:	d01d      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d116      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f81d 	bl	8003ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2208      	movs	r2, #8
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e00f      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d0b4      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b095      	sub	sp, #84	@ 0x54
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ef4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e5      	bne.n	8003ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d119      	bne.n	8003f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 0310 	bic.w	r3, r3, #16
 8003f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f64:	61ba      	str	r2, [r7, #24]
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	613b      	str	r3, [r7, #16]
   return(result);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f86:	bf00      	nop
 8003f88:	3754      	adds	r7, #84	@ 0x54
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f98:	b0c0      	sub	sp, #256	@ 0x100
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	ea40 0301 	orr.w	r3, r0, r1
 8003fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fec:	f021 010c 	bic.w	r1, r1, #12
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400e:	6999      	ldr	r1, [r3, #24]
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	ea40 0301 	orr.w	r3, r0, r1
 800401a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8f      	ldr	r3, [pc, #572]	@ (8004260 <UART_SetConfig+0x2cc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <UART_SetConfig+0xa0>
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b8d      	ldr	r3, [pc, #564]	@ (8004264 <UART_SetConfig+0x2d0>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe ff02 	bl	8002e3c <HAL_RCC_GetPCLK2Freq>
 8004038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800403c:	e003      	b.n	8004046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7fe fee9 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8004042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004050:	f040 810c 	bne.w	800426c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800405e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	1891      	adds	r1, r2, r2
 800406c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800406e:	415b      	adcs	r3, r3
 8004070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004076:	4621      	mov	r1, r4
 8004078:	eb12 0801 	adds.w	r8, r2, r1
 800407c:	4629      	mov	r1, r5
 800407e:	eb43 0901 	adc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb49 0303 	adc.w	r3, r9, r3
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040c2:	460b      	mov	r3, r1
 80040c4:	18db      	adds	r3, r3, r3
 80040c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040c8:	4613      	mov	r3, r2
 80040ca:	eb42 0303 	adc.w	r3, r2, r3
 80040ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040d8:	f7fc f8da 	bl	8000290 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b61      	ldr	r3, [pc, #388]	@ (8004268 <UART_SetConfig+0x2d4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004104:	415b      	adcs	r3, r3
 8004106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800410c:	4641      	mov	r1, r8
 800410e:	eb12 0a01 	adds.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0b01 	adc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412c:	4692      	mov	sl, r2
 800412e:	469b      	mov	fp, r3
 8004130:	4643      	mov	r3, r8
 8004132:	eb1a 0303 	adds.w	r3, sl, r3
 8004136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800413a:	464b      	mov	r3, r9
 800413c:	eb4b 0303 	adc.w	r3, fp, r3
 8004140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	643b      	str	r3, [r7, #64]	@ 0x40
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	647b      	str	r3, [r7, #68]	@ 0x44
 8004166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800416a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800416e:	f7fc f88f 	bl	8000290 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4611      	mov	r1, r2
 8004178:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2301 	umull	r2, r3, r3, r1
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2264      	movs	r2, #100	@ 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	1acb      	subs	r3, r1, r3
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800418e:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <UART_SetConfig+0x2d4>)
 8004190:	fba3 2302 	umull	r2, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041b8:	415b      	adcs	r3, r3
 80041ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800420c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800422a:	f7fc f831 	bl	8000290 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <UART_SetConfig+0x2d4>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2164      	movs	r1, #100	@ 0x64
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	@ 0x32
 8004246:	4a08      	ldr	r2, [pc, #32]	@ (8004268 <UART_SetConfig+0x2d4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4422      	add	r2, r4
 800425a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800425c:	e106      	b.n	800446c <UART_SetConfig+0x4d8>
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800427a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	1891      	adds	r1, r2, r2
 8004284:	6239      	str	r1, [r7, #32]
 8004286:	415b      	adcs	r3, r3
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
 800428a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428e:	4641      	mov	r1, r8
 8004290:	1854      	adds	r4, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb43 0501 	adc.w	r5, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	00eb      	lsls	r3, r5, #3
 80042a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a6:	00e2      	lsls	r2, r4, #3
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	18e3      	adds	r3, r4, r3
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042b4:	464b      	mov	r3, r9
 80042b6:	eb45 0303 	adc.w	r3, r5, r3
 80042ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042da:	4629      	mov	r1, r5
 80042dc:	008b      	lsls	r3, r1, #2
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e4:	4621      	mov	r1, r4
 80042e6:	008a      	lsls	r2, r1, #2
 80042e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042ec:	f7fb ffd0 	bl	8000290 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b60      	ldr	r3, [pc, #384]	@ (8004478 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800430c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	415b      	adcs	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004320:	4641      	mov	r1, r8
 8004322:	1851      	adds	r1, r2, r1
 8004324:	6139      	str	r1, [r7, #16]
 8004326:	4649      	mov	r1, r9
 8004328:	414b      	adcs	r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004342:	4651      	mov	r1, sl
 8004344:	00ca      	lsls	r2, r1, #3
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	4603      	mov	r3, r0
 800434c:	4642      	mov	r2, r8
 800434e:	189b      	adds	r3, r3, r2
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800436a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004378:	4649      	mov	r1, r9
 800437a:	008b      	lsls	r3, r1, #2
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004382:	4641      	mov	r1, r8
 8004384:	008a      	lsls	r2, r1, #2
 8004386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800438a:	f7fb ff81 	bl	8000290 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b38      	ldr	r3, [pc, #224]	@ (8004478 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	@ 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	@ 0x32
 80043a8:	4a33      	ldr	r2, [pc, #204]	@ (8004478 <UART_SetConfig+0x4e4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b4:	441c      	add	r4, r3
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80043be:	677a      	str	r2, [r7, #116]	@ 0x74
 80043c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004406:	464b      	mov	r3, r9
 8004408:	460a      	mov	r2, r1
 800440a:	eb42 0303 	adc.w	r3, r2, r3
 800440e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	663b      	str	r3, [r7, #96]	@ 0x60
 800441a:	667a      	str	r2, [r7, #100]	@ 0x64
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800443a:	f7fb ff29 	bl	8000290 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <UART_SetConfig+0x4e4>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	@ 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	3332      	adds	r3, #50	@ 0x32
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <UART_SetConfig+0x4e4>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4422      	add	r2, r4
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <std>:
 800447c:	2300      	movs	r3, #0
 800447e:	b510      	push	{r4, lr}
 8004480:	4604      	mov	r4, r0
 8004482:	e9c0 3300 	strd	r3, r3, [r0]
 8004486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800448a:	6083      	str	r3, [r0, #8]
 800448c:	8181      	strh	r1, [r0, #12]
 800448e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004490:	81c2      	strh	r2, [r0, #14]
 8004492:	6183      	str	r3, [r0, #24]
 8004494:	4619      	mov	r1, r3
 8004496:	2208      	movs	r2, #8
 8004498:	305c      	adds	r0, #92	@ 0x5c
 800449a:	f000 fa19 	bl	80048d0 <memset>
 800449e:	4b0d      	ldr	r3, [pc, #52]	@ (80044d4 <std+0x58>)
 80044a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80044a2:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <std+0x5c>)
 80044a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044a6:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <std+0x60>)
 80044a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <std+0x64>)
 80044ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <std+0x68>)
 80044b0:	6224      	str	r4, [r4, #32]
 80044b2:	429c      	cmp	r4, r3
 80044b4:	d006      	beq.n	80044c4 <std+0x48>
 80044b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044ba:	4294      	cmp	r4, r2
 80044bc:	d002      	beq.n	80044c4 <std+0x48>
 80044be:	33d0      	adds	r3, #208	@ 0xd0
 80044c0:	429c      	cmp	r4, r3
 80044c2:	d105      	bne.n	80044d0 <std+0x54>
 80044c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044cc:	f000 ba78 	b.w	80049c0 <__retarget_lock_init_recursive>
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	08004721 	.word	0x08004721
 80044d8:	08004743 	.word	0x08004743
 80044dc:	0800477b 	.word	0x0800477b
 80044e0:	0800479f 	.word	0x0800479f
 80044e4:	20000178 	.word	0x20000178

080044e8 <stdio_exit_handler>:
 80044e8:	4a02      	ldr	r2, [pc, #8]	@ (80044f4 <stdio_exit_handler+0xc>)
 80044ea:	4903      	ldr	r1, [pc, #12]	@ (80044f8 <stdio_exit_handler+0x10>)
 80044ec:	4803      	ldr	r0, [pc, #12]	@ (80044fc <stdio_exit_handler+0x14>)
 80044ee:	f000 b869 	b.w	80045c4 <_fwalk_sglue>
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c
 80044f8:	0800552d 	.word	0x0800552d
 80044fc:	2000001c 	.word	0x2000001c

08004500 <cleanup_stdio>:
 8004500:	6841      	ldr	r1, [r0, #4]
 8004502:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <cleanup_stdio+0x34>)
 8004504:	4299      	cmp	r1, r3
 8004506:	b510      	push	{r4, lr}
 8004508:	4604      	mov	r4, r0
 800450a:	d001      	beq.n	8004510 <cleanup_stdio+0x10>
 800450c:	f001 f80e 	bl	800552c <_fflush_r>
 8004510:	68a1      	ldr	r1, [r4, #8]
 8004512:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <cleanup_stdio+0x38>)
 8004514:	4299      	cmp	r1, r3
 8004516:	d002      	beq.n	800451e <cleanup_stdio+0x1e>
 8004518:	4620      	mov	r0, r4
 800451a:	f001 f807 	bl	800552c <_fflush_r>
 800451e:	68e1      	ldr	r1, [r4, #12]
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <cleanup_stdio+0x3c>)
 8004522:	4299      	cmp	r1, r3
 8004524:	d004      	beq.n	8004530 <cleanup_stdio+0x30>
 8004526:	4620      	mov	r0, r4
 8004528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452c:	f000 bffe 	b.w	800552c <_fflush_r>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	bf00      	nop
 8004534:	20000178 	.word	0x20000178
 8004538:	200001e0 	.word	0x200001e0
 800453c:	20000248 	.word	0x20000248

08004540 <global_stdio_init.part.0>:
 8004540:	b510      	push	{r4, lr}
 8004542:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <global_stdio_init.part.0+0x30>)
 8004544:	4c0b      	ldr	r4, [pc, #44]	@ (8004574 <global_stdio_init.part.0+0x34>)
 8004546:	4a0c      	ldr	r2, [pc, #48]	@ (8004578 <global_stdio_init.part.0+0x38>)
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	4620      	mov	r0, r4
 800454c:	2200      	movs	r2, #0
 800454e:	2104      	movs	r1, #4
 8004550:	f7ff ff94 	bl	800447c <std>
 8004554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004558:	2201      	movs	r2, #1
 800455a:	2109      	movs	r1, #9
 800455c:	f7ff ff8e 	bl	800447c <std>
 8004560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004564:	2202      	movs	r2, #2
 8004566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456a:	2112      	movs	r1, #18
 800456c:	f7ff bf86 	b.w	800447c <std>
 8004570:	200002b0 	.word	0x200002b0
 8004574:	20000178 	.word	0x20000178
 8004578:	080044e9 	.word	0x080044e9

0800457c <__sfp_lock_acquire>:
 800457c:	4801      	ldr	r0, [pc, #4]	@ (8004584 <__sfp_lock_acquire+0x8>)
 800457e:	f000 ba20 	b.w	80049c2 <__retarget_lock_acquire_recursive>
 8004582:	bf00      	nop
 8004584:	200002b9 	.word	0x200002b9

08004588 <__sfp_lock_release>:
 8004588:	4801      	ldr	r0, [pc, #4]	@ (8004590 <__sfp_lock_release+0x8>)
 800458a:	f000 ba1b 	b.w	80049c4 <__retarget_lock_release_recursive>
 800458e:	bf00      	nop
 8004590:	200002b9 	.word	0x200002b9

08004594 <__sinit>:
 8004594:	b510      	push	{r4, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	f7ff fff0 	bl	800457c <__sfp_lock_acquire>
 800459c:	6a23      	ldr	r3, [r4, #32]
 800459e:	b11b      	cbz	r3, 80045a8 <__sinit+0x14>
 80045a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a4:	f7ff bff0 	b.w	8004588 <__sfp_lock_release>
 80045a8:	4b04      	ldr	r3, [pc, #16]	@ (80045bc <__sinit+0x28>)
 80045aa:	6223      	str	r3, [r4, #32]
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <__sinit+0x2c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f5      	bne.n	80045a0 <__sinit+0xc>
 80045b4:	f7ff ffc4 	bl	8004540 <global_stdio_init.part.0>
 80045b8:	e7f2      	b.n	80045a0 <__sinit+0xc>
 80045ba:	bf00      	nop
 80045bc:	08004501 	.word	0x08004501
 80045c0:	200002b0 	.word	0x200002b0

080045c4 <_fwalk_sglue>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	4607      	mov	r7, r0
 80045ca:	4688      	mov	r8, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	2600      	movs	r6, #0
 80045d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045d4:	f1b9 0901 	subs.w	r9, r9, #1
 80045d8:	d505      	bpl.n	80045e6 <_fwalk_sglue+0x22>
 80045da:	6824      	ldr	r4, [r4, #0]
 80045dc:	2c00      	cmp	r4, #0
 80045de:	d1f7      	bne.n	80045d0 <_fwalk_sglue+0xc>
 80045e0:	4630      	mov	r0, r6
 80045e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e6:	89ab      	ldrh	r3, [r5, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d907      	bls.n	80045fc <_fwalk_sglue+0x38>
 80045ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f0:	3301      	adds	r3, #1
 80045f2:	d003      	beq.n	80045fc <_fwalk_sglue+0x38>
 80045f4:	4629      	mov	r1, r5
 80045f6:	4638      	mov	r0, r7
 80045f8:	47c0      	blx	r8
 80045fa:	4306      	orrs	r6, r0
 80045fc:	3568      	adds	r5, #104	@ 0x68
 80045fe:	e7e9      	b.n	80045d4 <_fwalk_sglue+0x10>

08004600 <iprintf>:
 8004600:	b40f      	push	{r0, r1, r2, r3}
 8004602:	b507      	push	{r0, r1, r2, lr}
 8004604:	4906      	ldr	r1, [pc, #24]	@ (8004620 <iprintf+0x20>)
 8004606:	ab04      	add	r3, sp, #16
 8004608:	6808      	ldr	r0, [r1, #0]
 800460a:	f853 2b04 	ldr.w	r2, [r3], #4
 800460e:	6881      	ldr	r1, [r0, #8]
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	f000 fc61 	bl	8004ed8 <_vfiprintf_r>
 8004616:	b003      	add	sp, #12
 8004618:	f85d eb04 	ldr.w	lr, [sp], #4
 800461c:	b004      	add	sp, #16
 800461e:	4770      	bx	lr
 8004620:	20000018 	.word	0x20000018

08004624 <_puts_r>:
 8004624:	6a03      	ldr	r3, [r0, #32]
 8004626:	b570      	push	{r4, r5, r6, lr}
 8004628:	6884      	ldr	r4, [r0, #8]
 800462a:	4605      	mov	r5, r0
 800462c:	460e      	mov	r6, r1
 800462e:	b90b      	cbnz	r3, 8004634 <_puts_r+0x10>
 8004630:	f7ff ffb0 	bl	8004594 <__sinit>
 8004634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004636:	07db      	lsls	r3, r3, #31
 8004638:	d405      	bmi.n	8004646 <_puts_r+0x22>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	0598      	lsls	r0, r3, #22
 800463e:	d402      	bmi.n	8004646 <_puts_r+0x22>
 8004640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004642:	f000 f9be 	bl	80049c2 <__retarget_lock_acquire_recursive>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	0719      	lsls	r1, r3, #28
 800464a:	d502      	bpl.n	8004652 <_puts_r+0x2e>
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d135      	bne.n	80046be <_puts_r+0x9a>
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	f000 f8e5 	bl	8004824 <__swsetup_r>
 800465a:	b380      	cbz	r0, 80046be <_puts_r+0x9a>
 800465c:	f04f 35ff 	mov.w	r5, #4294967295
 8004660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004662:	07da      	lsls	r2, r3, #31
 8004664:	d405      	bmi.n	8004672 <_puts_r+0x4e>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	059b      	lsls	r3, r3, #22
 800466a:	d402      	bmi.n	8004672 <_puts_r+0x4e>
 800466c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800466e:	f000 f9a9 	bl	80049c4 <__retarget_lock_release_recursive>
 8004672:	4628      	mov	r0, r5
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	2b00      	cmp	r3, #0
 8004678:	da04      	bge.n	8004684 <_puts_r+0x60>
 800467a:	69a2      	ldr	r2, [r4, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	dc17      	bgt.n	80046b0 <_puts_r+0x8c>
 8004680:	290a      	cmp	r1, #10
 8004682:	d015      	beq.n	80046b0 <_puts_r+0x8c>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	6022      	str	r2, [r4, #0]
 800468a:	7019      	strb	r1, [r3, #0]
 800468c:	68a3      	ldr	r3, [r4, #8]
 800468e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004692:	3b01      	subs	r3, #1
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	2900      	cmp	r1, #0
 8004698:	d1ed      	bne.n	8004676 <_puts_r+0x52>
 800469a:	2b00      	cmp	r3, #0
 800469c:	da11      	bge.n	80046c2 <_puts_r+0x9e>
 800469e:	4622      	mov	r2, r4
 80046a0:	210a      	movs	r1, #10
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 f87f 	bl	80047a6 <__swbuf_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d0d7      	beq.n	800465c <_puts_r+0x38>
 80046ac:	250a      	movs	r5, #10
 80046ae:	e7d7      	b.n	8004660 <_puts_r+0x3c>
 80046b0:	4622      	mov	r2, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 f877 	bl	80047a6 <__swbuf_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d1e7      	bne.n	800468c <_puts_r+0x68>
 80046bc:	e7ce      	b.n	800465c <_puts_r+0x38>
 80046be:	3e01      	subs	r6, #1
 80046c0:	e7e4      	b.n	800468c <_puts_r+0x68>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	6022      	str	r2, [r4, #0]
 80046c8:	220a      	movs	r2, #10
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e7ee      	b.n	80046ac <_puts_r+0x88>
	...

080046d0 <puts>:
 80046d0:	4b02      	ldr	r3, [pc, #8]	@ (80046dc <puts+0xc>)
 80046d2:	4601      	mov	r1, r0
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	f7ff bfa5 	b.w	8004624 <_puts_r>
 80046da:	bf00      	nop
 80046dc:	20000018 	.word	0x20000018

080046e0 <siprintf>:
 80046e0:	b40e      	push	{r1, r2, r3}
 80046e2:	b500      	push	{lr}
 80046e4:	b09c      	sub	sp, #112	@ 0x70
 80046e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80046e8:	9002      	str	r0, [sp, #8]
 80046ea:	9006      	str	r0, [sp, #24]
 80046ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046f0:	4809      	ldr	r0, [pc, #36]	@ (8004718 <siprintf+0x38>)
 80046f2:	9107      	str	r1, [sp, #28]
 80046f4:	9104      	str	r1, [sp, #16]
 80046f6:	4909      	ldr	r1, [pc, #36]	@ (800471c <siprintf+0x3c>)
 80046f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046fc:	9105      	str	r1, [sp, #20]
 80046fe:	6800      	ldr	r0, [r0, #0]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	a902      	add	r1, sp, #8
 8004704:	f000 fac2 	bl	8004c8c <_svfiprintf_r>
 8004708:	9b02      	ldr	r3, [sp, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	b01c      	add	sp, #112	@ 0x70
 8004710:	f85d eb04 	ldr.w	lr, [sp], #4
 8004714:	b003      	add	sp, #12
 8004716:	4770      	bx	lr
 8004718:	20000018 	.word	0x20000018
 800471c:	ffff0208 	.word	0xffff0208

08004720 <__sread>:
 8004720:	b510      	push	{r4, lr}
 8004722:	460c      	mov	r4, r1
 8004724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004728:	f000 f8fc 	bl	8004924 <_read_r>
 800472c:	2800      	cmp	r0, #0
 800472e:	bfab      	itete	ge
 8004730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004732:	89a3      	ldrhlt	r3, [r4, #12]
 8004734:	181b      	addge	r3, r3, r0
 8004736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800473a:	bfac      	ite	ge
 800473c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800473e:	81a3      	strhlt	r3, [r4, #12]
 8004740:	bd10      	pop	{r4, pc}

08004742 <__swrite>:
 8004742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004746:	461f      	mov	r7, r3
 8004748:	898b      	ldrh	r3, [r1, #12]
 800474a:	05db      	lsls	r3, r3, #23
 800474c:	4605      	mov	r5, r0
 800474e:	460c      	mov	r4, r1
 8004750:	4616      	mov	r6, r2
 8004752:	d505      	bpl.n	8004760 <__swrite+0x1e>
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	2302      	movs	r3, #2
 800475a:	2200      	movs	r2, #0
 800475c:	f000 f8d0 	bl	8004900 <_lseek_r>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	4632      	mov	r2, r6
 800476e:	463b      	mov	r3, r7
 8004770:	4628      	mov	r0, r5
 8004772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004776:	f000 b8e7 	b.w	8004948 <_write_r>

0800477a <__sseek>:
 800477a:	b510      	push	{r4, lr}
 800477c:	460c      	mov	r4, r1
 800477e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004782:	f000 f8bd 	bl	8004900 <_lseek_r>
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	bf15      	itete	ne
 800478c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800478e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004796:	81a3      	strheq	r3, [r4, #12]
 8004798:	bf18      	it	ne
 800479a:	81a3      	strhne	r3, [r4, #12]
 800479c:	bd10      	pop	{r4, pc}

0800479e <__sclose>:
 800479e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a2:	f000 b89d 	b.w	80048e0 <_close_r>

080047a6 <__swbuf_r>:
 80047a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a8:	460e      	mov	r6, r1
 80047aa:	4614      	mov	r4, r2
 80047ac:	4605      	mov	r5, r0
 80047ae:	b118      	cbz	r0, 80047b8 <__swbuf_r+0x12>
 80047b0:	6a03      	ldr	r3, [r0, #32]
 80047b2:	b90b      	cbnz	r3, 80047b8 <__swbuf_r+0x12>
 80047b4:	f7ff feee 	bl	8004594 <__sinit>
 80047b8:	69a3      	ldr	r3, [r4, #24]
 80047ba:	60a3      	str	r3, [r4, #8]
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	071a      	lsls	r2, r3, #28
 80047c0:	d501      	bpl.n	80047c6 <__swbuf_r+0x20>
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	b943      	cbnz	r3, 80047d8 <__swbuf_r+0x32>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f82b 	bl	8004824 <__swsetup_r>
 80047ce:	b118      	cbz	r0, 80047d8 <__swbuf_r+0x32>
 80047d0:	f04f 37ff 	mov.w	r7, #4294967295
 80047d4:	4638      	mov	r0, r7
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	1a98      	subs	r0, r3, r2
 80047de:	6963      	ldr	r3, [r4, #20]
 80047e0:	b2f6      	uxtb	r6, r6
 80047e2:	4283      	cmp	r3, r0
 80047e4:	4637      	mov	r7, r6
 80047e6:	dc05      	bgt.n	80047f4 <__swbuf_r+0x4e>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 fe9e 	bl	800552c <_fflush_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d1ed      	bne.n	80047d0 <__swbuf_r+0x2a>
 80047f4:	68a3      	ldr	r3, [r4, #8]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	701e      	strb	r6, [r3, #0]
 8004802:	6962      	ldr	r2, [r4, #20]
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	429a      	cmp	r2, r3
 8004808:	d004      	beq.n	8004814 <__swbuf_r+0x6e>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d5e1      	bpl.n	80047d4 <__swbuf_r+0x2e>
 8004810:	2e0a      	cmp	r6, #10
 8004812:	d1df      	bne.n	80047d4 <__swbuf_r+0x2e>
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 fe88 	bl	800552c <_fflush_r>
 800481c:	2800      	cmp	r0, #0
 800481e:	d0d9      	beq.n	80047d4 <__swbuf_r+0x2e>
 8004820:	e7d6      	b.n	80047d0 <__swbuf_r+0x2a>
	...

08004824 <__swsetup_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <__swsetup_r+0xa8>)
 8004828:	4605      	mov	r5, r0
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	460c      	mov	r4, r1
 800482e:	b118      	cbz	r0, 8004838 <__swsetup_r+0x14>
 8004830:	6a03      	ldr	r3, [r0, #32]
 8004832:	b90b      	cbnz	r3, 8004838 <__swsetup_r+0x14>
 8004834:	f7ff feae 	bl	8004594 <__sinit>
 8004838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483c:	0719      	lsls	r1, r3, #28
 800483e:	d422      	bmi.n	8004886 <__swsetup_r+0x62>
 8004840:	06da      	lsls	r2, r3, #27
 8004842:	d407      	bmi.n	8004854 <__swsetup_r+0x30>
 8004844:	2209      	movs	r2, #9
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	e033      	b.n	80048bc <__swsetup_r+0x98>
 8004854:	0758      	lsls	r0, r3, #29
 8004856:	d512      	bpl.n	800487e <__swsetup_r+0x5a>
 8004858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800485a:	b141      	cbz	r1, 800486e <__swsetup_r+0x4a>
 800485c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004860:	4299      	cmp	r1, r3
 8004862:	d002      	beq.n	800486a <__swsetup_r+0x46>
 8004864:	4628      	mov	r0, r5
 8004866:	f000 f8bd 	bl	80049e4 <_free_r>
 800486a:	2300      	movs	r3, #0
 800486c:	6363      	str	r3, [r4, #52]	@ 0x34
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	2300      	movs	r3, #0
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	b94b      	cbnz	r3, 800489e <__swsetup_r+0x7a>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004894:	d003      	beq.n	800489e <__swsetup_r+0x7a>
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 fe95 	bl	80055c8 <__smakebuf_r>
 800489e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a2:	f013 0201 	ands.w	r2, r3, #1
 80048a6:	d00a      	beq.n	80048be <__swsetup_r+0x9a>
 80048a8:	2200      	movs	r2, #0
 80048aa:	60a2      	str	r2, [r4, #8]
 80048ac:	6962      	ldr	r2, [r4, #20]
 80048ae:	4252      	negs	r2, r2
 80048b0:	61a2      	str	r2, [r4, #24]
 80048b2:	6922      	ldr	r2, [r4, #16]
 80048b4:	b942      	cbnz	r2, 80048c8 <__swsetup_r+0xa4>
 80048b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048ba:	d1c5      	bne.n	8004848 <__swsetup_r+0x24>
 80048bc:	bd38      	pop	{r3, r4, r5, pc}
 80048be:	0799      	lsls	r1, r3, #30
 80048c0:	bf58      	it	pl
 80048c2:	6962      	ldrpl	r2, [r4, #20]
 80048c4:	60a2      	str	r2, [r4, #8]
 80048c6:	e7f4      	b.n	80048b2 <__swsetup_r+0x8e>
 80048c8:	2000      	movs	r0, #0
 80048ca:	e7f7      	b.n	80048bc <__swsetup_r+0x98>
 80048cc:	20000018 	.word	0x20000018

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <_close_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4d06      	ldr	r5, [pc, #24]	@ (80048fc <_close_r+0x1c>)
 80048e4:	2300      	movs	r3, #0
 80048e6:	4604      	mov	r4, r0
 80048e8:	4608      	mov	r0, r1
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	f7fd fa0c 	bl	8001d08 <_close>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d102      	bne.n	80048fa <_close_r+0x1a>
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	b103      	cbz	r3, 80048fa <_close_r+0x1a>
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	200002b4 	.word	0x200002b4

08004900 <_lseek_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d07      	ldr	r5, [pc, #28]	@ (8004920 <_lseek_r+0x20>)
 8004904:	4604      	mov	r4, r0
 8004906:	4608      	mov	r0, r1
 8004908:	4611      	mov	r1, r2
 800490a:	2200      	movs	r2, #0
 800490c:	602a      	str	r2, [r5, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	f7fd fa21 	bl	8001d56 <_lseek>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_lseek_r+0x1e>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_lseek_r+0x1e>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	200002b4 	.word	0x200002b4

08004924 <_read_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d07      	ldr	r5, [pc, #28]	@ (8004944 <_read_r+0x20>)
 8004928:	4604      	mov	r4, r0
 800492a:	4608      	mov	r0, r1
 800492c:	4611      	mov	r1, r2
 800492e:	2200      	movs	r2, #0
 8004930:	602a      	str	r2, [r5, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f7fd f9af 	bl	8001c96 <_read>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_read_r+0x1e>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_read_r+0x1e>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	200002b4 	.word	0x200002b4

08004948 <_write_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	@ (8004968 <_write_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fd f9ba 	bl	8001cd0 <_write>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_write_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_write_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	200002b4 	.word	0x200002b4

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	@ (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000018 	.word	0x20000018

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4d0d      	ldr	r5, [pc, #52]	@ (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	@ (80049b4 <__libc_init_array+0x3c>)
 800497e:	1b64      	subs	r4, r4, r5
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2600      	movs	r6, #0
 8004984:	42a6      	cmp	r6, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4d0b      	ldr	r5, [pc, #44]	@ (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	@ (80049bc <__libc_init_array+0x44>)
 800498c:	f000 feda 	bl	8005744 <_init>
 8004990:	1b64      	subs	r4, r4, r5
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2600      	movs	r6, #0
 8004996:	42a6      	cmp	r6, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a0:	4798      	blx	r3
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049aa:	4798      	blx	r3
 80049ac:	3601      	adds	r6, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	080059fc 	.word	0x080059fc
 80049b4:	080059fc 	.word	0x080059fc
 80049b8:	080059fc 	.word	0x080059fc
 80049bc:	08005a00 	.word	0x08005a00

080049c0 <__retarget_lock_init_recursive>:
 80049c0:	4770      	bx	lr

080049c2 <__retarget_lock_acquire_recursive>:
 80049c2:	4770      	bx	lr

080049c4 <__retarget_lock_release_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <memcpy>:
 80049c6:	440a      	add	r2, r1
 80049c8:	4291      	cmp	r1, r2
 80049ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80049ce:	d100      	bne.n	80049d2 <memcpy+0xc>
 80049d0:	4770      	bx	lr
 80049d2:	b510      	push	{r4, lr}
 80049d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049dc:	4291      	cmp	r1, r2
 80049de:	d1f9      	bne.n	80049d4 <memcpy+0xe>
 80049e0:	bd10      	pop	{r4, pc}
	...

080049e4 <_free_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4605      	mov	r5, r0
 80049e8:	2900      	cmp	r1, #0
 80049ea:	d041      	beq.n	8004a70 <_free_r+0x8c>
 80049ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f0:	1f0c      	subs	r4, r1, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfb8      	it	lt
 80049f6:	18e4      	addlt	r4, r4, r3
 80049f8:	f000 f8e0 	bl	8004bbc <__malloc_lock>
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <_free_r+0x90>)
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	b933      	cbnz	r3, 8004a10 <_free_r+0x2c>
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	6014      	str	r4, [r2, #0]
 8004a06:	4628      	mov	r0, r5
 8004a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a0c:	f000 b8dc 	b.w	8004bc8 <__malloc_unlock>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d908      	bls.n	8004a26 <_free_r+0x42>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	1821      	adds	r1, r4, r0
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	bf01      	itttt	eq
 8004a1c:	6819      	ldreq	r1, [r3, #0]
 8004a1e:	685b      	ldreq	r3, [r3, #4]
 8004a20:	1809      	addeq	r1, r1, r0
 8004a22:	6021      	streq	r1, [r4, #0]
 8004a24:	e7ed      	b.n	8004a02 <_free_r+0x1e>
 8004a26:	461a      	mov	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b10b      	cbz	r3, 8004a30 <_free_r+0x4c>
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d9fa      	bls.n	8004a26 <_free_r+0x42>
 8004a30:	6811      	ldr	r1, [r2, #0]
 8004a32:	1850      	adds	r0, r2, r1
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d10b      	bne.n	8004a50 <_free_r+0x6c>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	4401      	add	r1, r0
 8004a3c:	1850      	adds	r0, r2, r1
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	d1e0      	bne.n	8004a06 <_free_r+0x22>
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	6053      	str	r3, [r2, #4]
 8004a4a:	4408      	add	r0, r1
 8004a4c:	6010      	str	r0, [r2, #0]
 8004a4e:	e7da      	b.n	8004a06 <_free_r+0x22>
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x74>
 8004a52:	230c      	movs	r3, #12
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	e7d6      	b.n	8004a06 <_free_r+0x22>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	1821      	adds	r1, r4, r0
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf04      	itt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	bf04      	itt	eq
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6054      	str	r4, [r2, #4]
 8004a6e:	e7ca      	b.n	8004a06 <_free_r+0x22>
 8004a70:	bd38      	pop	{r3, r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	200002c0 	.word	0x200002c0

08004a78 <sbrk_aligned>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ab8 <sbrk_aligned+0x40>)
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	6831      	ldr	r1, [r6, #0]
 8004a80:	4605      	mov	r5, r0
 8004a82:	b911      	cbnz	r1, 8004a8a <sbrk_aligned+0x12>
 8004a84:	f000 fe18 	bl	80056b8 <_sbrk_r>
 8004a88:	6030      	str	r0, [r6, #0]
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 fe13 	bl	80056b8 <_sbrk_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d103      	bne.n	8004a9e <sbrk_aligned+0x26>
 8004a96:	f04f 34ff 	mov.w	r4, #4294967295
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}
 8004a9e:	1cc4      	adds	r4, r0, #3
 8004aa0:	f024 0403 	bic.w	r4, r4, #3
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d0f8      	beq.n	8004a9a <sbrk_aligned+0x22>
 8004aa8:	1a21      	subs	r1, r4, r0
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 fe04 	bl	80056b8 <_sbrk_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d1f2      	bne.n	8004a9a <sbrk_aligned+0x22>
 8004ab4:	e7ef      	b.n	8004a96 <sbrk_aligned+0x1e>
 8004ab6:	bf00      	nop
 8004ab8:	200002bc 	.word	0x200002bc

08004abc <_malloc_r>:
 8004abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac0:	1ccd      	adds	r5, r1, #3
 8004ac2:	f025 0503 	bic.w	r5, r5, #3
 8004ac6:	3508      	adds	r5, #8
 8004ac8:	2d0c      	cmp	r5, #12
 8004aca:	bf38      	it	cc
 8004acc:	250c      	movcc	r5, #12
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	db01      	blt.n	8004ad8 <_malloc_r+0x1c>
 8004ad4:	42a9      	cmp	r1, r5
 8004ad6:	d904      	bls.n	8004ae2 <_malloc_r+0x26>
 8004ad8:	230c      	movs	r3, #12
 8004ada:	6033      	str	r3, [r6, #0]
 8004adc:	2000      	movs	r0, #0
 8004ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bb8 <_malloc_r+0xfc>
 8004ae6:	f000 f869 	bl	8004bbc <__malloc_lock>
 8004aea:	f8d8 3000 	ldr.w	r3, [r8]
 8004aee:	461c      	mov	r4, r3
 8004af0:	bb44      	cbnz	r4, 8004b44 <_malloc_r+0x88>
 8004af2:	4629      	mov	r1, r5
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff ffbf 	bl	8004a78 <sbrk_aligned>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	4604      	mov	r4, r0
 8004afe:	d158      	bne.n	8004bb2 <_malloc_r+0xf6>
 8004b00:	f8d8 4000 	ldr.w	r4, [r8]
 8004b04:	4627      	mov	r7, r4
 8004b06:	2f00      	cmp	r7, #0
 8004b08:	d143      	bne.n	8004b92 <_malloc_r+0xd6>
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	d04b      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	4639      	mov	r1, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	eb04 0903 	add.w	r9, r4, r3
 8004b18:	f000 fdce 	bl	80056b8 <_sbrk_r>
 8004b1c:	4581      	cmp	r9, r0
 8004b1e:	d142      	bne.n	8004ba6 <_malloc_r+0xea>
 8004b20:	6821      	ldr	r1, [r4, #0]
 8004b22:	1a6d      	subs	r5, r5, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	4630      	mov	r0, r6
 8004b28:	f7ff ffa6 	bl	8004a78 <sbrk_aligned>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d03a      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	442b      	add	r3, r5
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	f8d8 3000 	ldr.w	r3, [r8]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	bb62      	cbnz	r2, 8004b98 <_malloc_r+0xdc>
 8004b3e:	f8c8 7000 	str.w	r7, [r8]
 8004b42:	e00f      	b.n	8004b64 <_malloc_r+0xa8>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	1b52      	subs	r2, r2, r5
 8004b48:	d420      	bmi.n	8004b8c <_malloc_r+0xd0>
 8004b4a:	2a0b      	cmp	r2, #11
 8004b4c:	d917      	bls.n	8004b7e <_malloc_r+0xc2>
 8004b4e:	1961      	adds	r1, r4, r5
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	6025      	str	r5, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	6059      	strne	r1, [r3, #4]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	bf08      	it	eq
 8004b5c:	f8c8 1000 	streq.w	r1, [r8]
 8004b60:	5162      	str	r2, [r4, r5]
 8004b62:	604b      	str	r3, [r1, #4]
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 f82f 	bl	8004bc8 <__malloc_unlock>
 8004b6a:	f104 000b 	add.w	r0, r4, #11
 8004b6e:	1d23      	adds	r3, r4, #4
 8004b70:	f020 0007 	bic.w	r0, r0, #7
 8004b74:	1ac2      	subs	r2, r0, r3
 8004b76:	bf1c      	itt	ne
 8004b78:	1a1b      	subne	r3, r3, r0
 8004b7a:	50a3      	strne	r3, [r4, r2]
 8004b7c:	e7af      	b.n	8004ade <_malloc_r+0x22>
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	bf0c      	ite	eq
 8004b84:	f8c8 2000 	streq.w	r2, [r8]
 8004b88:	605a      	strne	r2, [r3, #4]
 8004b8a:	e7eb      	b.n	8004b64 <_malloc_r+0xa8>
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	6864      	ldr	r4, [r4, #4]
 8004b90:	e7ae      	b.n	8004af0 <_malloc_r+0x34>
 8004b92:	463c      	mov	r4, r7
 8004b94:	687f      	ldr	r7, [r7, #4]
 8004b96:	e7b6      	b.n	8004b06 <_malloc_r+0x4a>
 8004b98:	461a      	mov	r2, r3
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d1fb      	bne.n	8004b98 <_malloc_r+0xdc>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6053      	str	r3, [r2, #4]
 8004ba4:	e7de      	b.n	8004b64 <_malloc_r+0xa8>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f80c 	bl	8004bc8 <__malloc_unlock>
 8004bb0:	e794      	b.n	8004adc <_malloc_r+0x20>
 8004bb2:	6005      	str	r5, [r0, #0]
 8004bb4:	e7d6      	b.n	8004b64 <_malloc_r+0xa8>
 8004bb6:	bf00      	nop
 8004bb8:	200002c0 	.word	0x200002c0

08004bbc <__malloc_lock>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	@ (8004bc4 <__malloc_lock+0x8>)
 8004bbe:	f7ff bf00 	b.w	80049c2 <__retarget_lock_acquire_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	200002b8 	.word	0x200002b8

08004bc8 <__malloc_unlock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__malloc_unlock+0x8>)
 8004bca:	f7ff befb 	b.w	80049c4 <__retarget_lock_release_recursive>
 8004bce:	bf00      	nop
 8004bd0:	200002b8 	.word	0x200002b8

08004bd4 <__ssputs_r>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	688e      	ldr	r6, [r1, #8]
 8004bda:	461f      	mov	r7, r3
 8004bdc:	42be      	cmp	r6, r7
 8004bde:	680b      	ldr	r3, [r1, #0]
 8004be0:	4682      	mov	sl, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	4690      	mov	r8, r2
 8004be6:	d82d      	bhi.n	8004c44 <__ssputs_r+0x70>
 8004be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bf0:	d026      	beq.n	8004c40 <__ssputs_r+0x6c>
 8004bf2:	6965      	ldr	r5, [r4, #20]
 8004bf4:	6909      	ldr	r1, [r1, #16]
 8004bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bfa:	eba3 0901 	sub.w	r9, r3, r1
 8004bfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c02:	1c7b      	adds	r3, r7, #1
 8004c04:	444b      	add	r3, r9
 8004c06:	106d      	asrs	r5, r5, #1
 8004c08:	429d      	cmp	r5, r3
 8004c0a:	bf38      	it	cc
 8004c0c:	461d      	movcc	r5, r3
 8004c0e:	0553      	lsls	r3, r2, #21
 8004c10:	d527      	bpl.n	8004c62 <__ssputs_r+0x8e>
 8004c12:	4629      	mov	r1, r5
 8004c14:	f7ff ff52 	bl	8004abc <_malloc_r>
 8004c18:	4606      	mov	r6, r0
 8004c1a:	b360      	cbz	r0, 8004c76 <__ssputs_r+0xa2>
 8004c1c:	6921      	ldr	r1, [r4, #16]
 8004c1e:	464a      	mov	r2, r9
 8004c20:	f7ff fed1 	bl	80049c6 <memcpy>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	6126      	str	r6, [r4, #16]
 8004c32:	6165      	str	r5, [r4, #20]
 8004c34:	444e      	add	r6, r9
 8004c36:	eba5 0509 	sub.w	r5, r5, r9
 8004c3a:	6026      	str	r6, [r4, #0]
 8004c3c:	60a5      	str	r5, [r4, #8]
 8004c3e:	463e      	mov	r6, r7
 8004c40:	42be      	cmp	r6, r7
 8004c42:	d900      	bls.n	8004c46 <__ssputs_r+0x72>
 8004c44:	463e      	mov	r6, r7
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	4632      	mov	r2, r6
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	f000 fcf8 	bl	8005640 <memmove>
 8004c50:	68a3      	ldr	r3, [r4, #8]
 8004c52:	1b9b      	subs	r3, r3, r6
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	4433      	add	r3, r6
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c62:	462a      	mov	r2, r5
 8004c64:	f000 fd38 	bl	80056d8 <_realloc_r>
 8004c68:	4606      	mov	r6, r0
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d1e0      	bne.n	8004c30 <__ssputs_r+0x5c>
 8004c6e:	6921      	ldr	r1, [r4, #16]
 8004c70:	4650      	mov	r0, sl
 8004c72:	f7ff feb7 	bl	80049e4 <_free_r>
 8004c76:	230c      	movs	r3, #12
 8004c78:	f8ca 3000 	str.w	r3, [sl]
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	e7e9      	b.n	8004c5e <__ssputs_r+0x8a>
	...

08004c8c <_svfiprintf_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	4698      	mov	r8, r3
 8004c92:	898b      	ldrh	r3, [r1, #12]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	b09d      	sub	sp, #116	@ 0x74
 8004c98:	4607      	mov	r7, r0
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	d510      	bpl.n	8004cc2 <_svfiprintf_r+0x36>
 8004ca0:	690b      	ldr	r3, [r1, #16]
 8004ca2:	b973      	cbnz	r3, 8004cc2 <_svfiprintf_r+0x36>
 8004ca4:	2140      	movs	r1, #64	@ 0x40
 8004ca6:	f7ff ff09 	bl	8004abc <_malloc_r>
 8004caa:	6028      	str	r0, [r5, #0]
 8004cac:	6128      	str	r0, [r5, #16]
 8004cae:	b930      	cbnz	r0, 8004cbe <_svfiprintf_r+0x32>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	b01d      	add	sp, #116	@ 0x74
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	2340      	movs	r3, #64	@ 0x40
 8004cc0:	616b      	str	r3, [r5, #20]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cd0:	2330      	movs	r3, #48	@ 0x30
 8004cd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e70 <_svfiprintf_r+0x1e4>
 8004cd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cda:	f04f 0901 	mov.w	r9, #1
 8004cde:	4623      	mov	r3, r4
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ce6:	b10a      	cbz	r2, 8004cec <_svfiprintf_r+0x60>
 8004ce8:	2a25      	cmp	r2, #37	@ 0x25
 8004cea:	d1f9      	bne.n	8004ce0 <_svfiprintf_r+0x54>
 8004cec:	ebba 0b04 	subs.w	fp, sl, r4
 8004cf0:	d00b      	beq.n	8004d0a <_svfiprintf_r+0x7e>
 8004cf2:	465b      	mov	r3, fp
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7ff ff6b 	bl	8004bd4 <__ssputs_r>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f000 80a7 	beq.w	8004e52 <_svfiprintf_r+0x1c6>
 8004d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d06:	445a      	add	r2, fp
 8004d08:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 809f 	beq.w	8004e52 <_svfiprintf_r+0x1c6>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d1e:	f10a 0a01 	add.w	sl, sl, #1
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	9307      	str	r3, [sp, #28]
 8004d26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d2c:	4654      	mov	r4, sl
 8004d2e:	2205      	movs	r2, #5
 8004d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d34:	484e      	ldr	r0, [pc, #312]	@ (8004e70 <_svfiprintf_r+0x1e4>)
 8004d36:	f7fb fa5b 	bl	80001f0 <memchr>
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	b9d8      	cbnz	r0, 8004d76 <_svfiprintf_r+0xea>
 8004d3e:	06d0      	lsls	r0, r2, #27
 8004d40:	bf44      	itt	mi
 8004d42:	2320      	movmi	r3, #32
 8004d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d48:	0711      	lsls	r1, r2, #28
 8004d4a:	bf44      	itt	mi
 8004d4c:	232b      	movmi	r3, #43	@ 0x2b
 8004d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d52:	f89a 3000 	ldrb.w	r3, [sl]
 8004d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d58:	d015      	beq.n	8004d86 <_svfiprintf_r+0xfa>
 8004d5a:	9a07      	ldr	r2, [sp, #28]
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f04f 0c0a 	mov.w	ip, #10
 8004d64:	4621      	mov	r1, r4
 8004d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d6a:	3b30      	subs	r3, #48	@ 0x30
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d94b      	bls.n	8004e08 <_svfiprintf_r+0x17c>
 8004d70:	b1b0      	cbz	r0, 8004da0 <_svfiprintf_r+0x114>
 8004d72:	9207      	str	r2, [sp, #28]
 8004d74:	e014      	b.n	8004da0 <_svfiprintf_r+0x114>
 8004d76:	eba0 0308 	sub.w	r3, r0, r8
 8004d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	46a2      	mov	sl, r4
 8004d84:	e7d2      	b.n	8004d2c <_svfiprintf_r+0xa0>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	9103      	str	r1, [sp, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfbb      	ittet	lt
 8004d92:	425b      	neglt	r3, r3
 8004d94:	f042 0202 	orrlt.w	r2, r2, #2
 8004d98:	9307      	strge	r3, [sp, #28]
 8004d9a:	9307      	strlt	r3, [sp, #28]
 8004d9c:	bfb8      	it	lt
 8004d9e:	9204      	strlt	r2, [sp, #16]
 8004da0:	7823      	ldrb	r3, [r4, #0]
 8004da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004da4:	d10a      	bne.n	8004dbc <_svfiprintf_r+0x130>
 8004da6:	7863      	ldrb	r3, [r4, #1]
 8004da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004daa:	d132      	bne.n	8004e12 <_svfiprintf_r+0x186>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	9203      	str	r2, [sp, #12]
 8004db4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004db8:	3402      	adds	r4, #2
 8004dba:	9305      	str	r3, [sp, #20]
 8004dbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e80 <_svfiprintf_r+0x1f4>
 8004dc0:	7821      	ldrb	r1, [r4, #0]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	4650      	mov	r0, sl
 8004dc6:	f7fb fa13 	bl	80001f0 <memchr>
 8004dca:	b138      	cbz	r0, 8004ddc <_svfiprintf_r+0x150>
 8004dcc:	9b04      	ldr	r3, [sp, #16]
 8004dce:	eba0 000a 	sub.w	r0, r0, sl
 8004dd2:	2240      	movs	r2, #64	@ 0x40
 8004dd4:	4082      	lsls	r2, r0
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	3401      	adds	r4, #1
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de0:	4824      	ldr	r0, [pc, #144]	@ (8004e74 <_svfiprintf_r+0x1e8>)
 8004de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004de6:	2206      	movs	r2, #6
 8004de8:	f7fb fa02 	bl	80001f0 <memchr>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d036      	beq.n	8004e5e <_svfiprintf_r+0x1d2>
 8004df0:	4b21      	ldr	r3, [pc, #132]	@ (8004e78 <_svfiprintf_r+0x1ec>)
 8004df2:	bb1b      	cbnz	r3, 8004e3c <_svfiprintf_r+0x1b0>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	3307      	adds	r3, #7
 8004df8:	f023 0307 	bic.w	r3, r3, #7
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	9303      	str	r3, [sp, #12]
 8004e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e02:	4433      	add	r3, r6
 8004e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e06:	e76a      	b.n	8004cde <_svfiprintf_r+0x52>
 8004e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7a8      	b.n	8004d64 <_svfiprintf_r+0xd8>
 8004e12:	2300      	movs	r3, #0
 8004e14:	3401      	adds	r4, #1
 8004e16:	9305      	str	r3, [sp, #20]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f04f 0c0a 	mov.w	ip, #10
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e24:	3a30      	subs	r2, #48	@ 0x30
 8004e26:	2a09      	cmp	r2, #9
 8004e28:	d903      	bls.n	8004e32 <_svfiprintf_r+0x1a6>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0c6      	beq.n	8004dbc <_svfiprintf_r+0x130>
 8004e2e:	9105      	str	r1, [sp, #20]
 8004e30:	e7c4      	b.n	8004dbc <_svfiprintf_r+0x130>
 8004e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e36:	4604      	mov	r4, r0
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e7f0      	b.n	8004e1e <_svfiprintf_r+0x192>
 8004e3c:	ab03      	add	r3, sp, #12
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	462a      	mov	r2, r5
 8004e42:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <_svfiprintf_r+0x1f0>)
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	4638      	mov	r0, r7
 8004e48:	f3af 8000 	nop.w
 8004e4c:	1c42      	adds	r2, r0, #1
 8004e4e:	4606      	mov	r6, r0
 8004e50:	d1d6      	bne.n	8004e00 <_svfiprintf_r+0x174>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	065b      	lsls	r3, r3, #25
 8004e56:	f53f af2d 	bmi.w	8004cb4 <_svfiprintf_r+0x28>
 8004e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e5c:	e72c      	b.n	8004cb8 <_svfiprintf_r+0x2c>
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <_svfiprintf_r+0x1f0>)
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f000 f9bb 	bl	80051e4 <_printf_i>
 8004e6e:	e7ed      	b.n	8004e4c <_svfiprintf_r+0x1c0>
 8004e70:	080059c0 	.word	0x080059c0
 8004e74:	080059ca 	.word	0x080059ca
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	08004bd5 	.word	0x08004bd5
 8004e80:	080059c6 	.word	0x080059c6

08004e84 <__sfputc_r>:
 8004e84:	6893      	ldr	r3, [r2, #8]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	b410      	push	{r4}
 8004e8c:	6093      	str	r3, [r2, #8]
 8004e8e:	da08      	bge.n	8004ea2 <__sfputc_r+0x1e>
 8004e90:	6994      	ldr	r4, [r2, #24]
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	db01      	blt.n	8004e9a <__sfputc_r+0x16>
 8004e96:	290a      	cmp	r1, #10
 8004e98:	d103      	bne.n	8004ea2 <__sfputc_r+0x1e>
 8004e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9e:	f7ff bc82 	b.w	80047a6 <__swbuf_r>
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	1c58      	adds	r0, r3, #1
 8004ea6:	6010      	str	r0, [r2, #0]
 8004ea8:	7019      	strb	r1, [r3, #0]
 8004eaa:	4608      	mov	r0, r1
 8004eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <__sfputs_r>:
 8004eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	460f      	mov	r7, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	18d5      	adds	r5, r2, r3
 8004ebc:	42ac      	cmp	r4, r5
 8004ebe:	d101      	bne.n	8004ec4 <__sfputs_r+0x12>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e007      	b.n	8004ed4 <__sfputs_r+0x22>
 8004ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec8:	463a      	mov	r2, r7
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7ff ffda 	bl	8004e84 <__sfputc_r>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d1f3      	bne.n	8004ebc <__sfputs_r+0xa>
 8004ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed8 <_vfiprintf_r>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	460d      	mov	r5, r1
 8004ede:	b09d      	sub	sp, #116	@ 0x74
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	b118      	cbz	r0, 8004ef0 <_vfiprintf_r+0x18>
 8004ee8:	6a03      	ldr	r3, [r0, #32]
 8004eea:	b90b      	cbnz	r3, 8004ef0 <_vfiprintf_r+0x18>
 8004eec:	f7ff fb52 	bl	8004594 <__sinit>
 8004ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ef2:	07d9      	lsls	r1, r3, #31
 8004ef4:	d405      	bmi.n	8004f02 <_vfiprintf_r+0x2a>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	059a      	lsls	r2, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_vfiprintf_r+0x2a>
 8004efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004efe:	f7ff fd60 	bl	80049c2 <__retarget_lock_acquire_recursive>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	071b      	lsls	r3, r3, #28
 8004f06:	d501      	bpl.n	8004f0c <_vfiprintf_r+0x34>
 8004f08:	692b      	ldr	r3, [r5, #16]
 8004f0a:	b99b      	cbnz	r3, 8004f34 <_vfiprintf_r+0x5c>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f7ff fc88 	bl	8004824 <__swsetup_r>
 8004f14:	b170      	cbz	r0, 8004f34 <_vfiprintf_r+0x5c>
 8004f16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f18:	07dc      	lsls	r4, r3, #31
 8004f1a:	d504      	bpl.n	8004f26 <_vfiprintf_r+0x4e>
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	b01d      	add	sp, #116	@ 0x74
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	0598      	lsls	r0, r3, #22
 8004f2a:	d4f7      	bmi.n	8004f1c <_vfiprintf_r+0x44>
 8004f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f2e:	f7ff fd49 	bl	80049c4 <__retarget_lock_release_recursive>
 8004f32:	e7f3      	b.n	8004f1c <_vfiprintf_r+0x44>
 8004f34:	2300      	movs	r3, #0
 8004f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f38:	2320      	movs	r3, #32
 8004f3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f42:	2330      	movs	r3, #48	@ 0x30
 8004f44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80050f4 <_vfiprintf_r+0x21c>
 8004f48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f4c:	f04f 0901 	mov.w	r9, #1
 8004f50:	4623      	mov	r3, r4
 8004f52:	469a      	mov	sl, r3
 8004f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f58:	b10a      	cbz	r2, 8004f5e <_vfiprintf_r+0x86>
 8004f5a:	2a25      	cmp	r2, #37	@ 0x25
 8004f5c:	d1f9      	bne.n	8004f52 <_vfiprintf_r+0x7a>
 8004f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f62:	d00b      	beq.n	8004f7c <_vfiprintf_r+0xa4>
 8004f64:	465b      	mov	r3, fp
 8004f66:	4622      	mov	r2, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7ff ffa1 	bl	8004eb2 <__sfputs_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	f000 80a7 	beq.w	80050c4 <_vfiprintf_r+0x1ec>
 8004f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f78:	445a      	add	r2, fp
 8004f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 809f 	beq.w	80050c4 <_vfiprintf_r+0x1ec>
 8004f86:	2300      	movs	r3, #0
 8004f88:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f90:	f10a 0a01 	add.w	sl, sl, #1
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	9307      	str	r3, [sp, #28]
 8004f98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f9e:	4654      	mov	r4, sl
 8004fa0:	2205      	movs	r2, #5
 8004fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa6:	4853      	ldr	r0, [pc, #332]	@ (80050f4 <_vfiprintf_r+0x21c>)
 8004fa8:	f7fb f922 	bl	80001f0 <memchr>
 8004fac:	9a04      	ldr	r2, [sp, #16]
 8004fae:	b9d8      	cbnz	r0, 8004fe8 <_vfiprintf_r+0x110>
 8004fb0:	06d1      	lsls	r1, r2, #27
 8004fb2:	bf44      	itt	mi
 8004fb4:	2320      	movmi	r3, #32
 8004fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fba:	0713      	lsls	r3, r2, #28
 8004fbc:	bf44      	itt	mi
 8004fbe:	232b      	movmi	r3, #43	@ 0x2b
 8004fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fca:	d015      	beq.n	8004ff8 <_vfiprintf_r+0x120>
 8004fcc:	9a07      	ldr	r2, [sp, #28]
 8004fce:	4654      	mov	r4, sl
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f04f 0c0a 	mov.w	ip, #10
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fdc:	3b30      	subs	r3, #48	@ 0x30
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	d94b      	bls.n	800507a <_vfiprintf_r+0x1a2>
 8004fe2:	b1b0      	cbz	r0, 8005012 <_vfiprintf_r+0x13a>
 8004fe4:	9207      	str	r2, [sp, #28]
 8004fe6:	e014      	b.n	8005012 <_vfiprintf_r+0x13a>
 8004fe8:	eba0 0308 	sub.w	r3, r0, r8
 8004fec:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	46a2      	mov	sl, r4
 8004ff6:	e7d2      	b.n	8004f9e <_vfiprintf_r+0xc6>
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	1d19      	adds	r1, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	9103      	str	r1, [sp, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	bfbb      	ittet	lt
 8005004:	425b      	neglt	r3, r3
 8005006:	f042 0202 	orrlt.w	r2, r2, #2
 800500a:	9307      	strge	r3, [sp, #28]
 800500c:	9307      	strlt	r3, [sp, #28]
 800500e:	bfb8      	it	lt
 8005010:	9204      	strlt	r2, [sp, #16]
 8005012:	7823      	ldrb	r3, [r4, #0]
 8005014:	2b2e      	cmp	r3, #46	@ 0x2e
 8005016:	d10a      	bne.n	800502e <_vfiprintf_r+0x156>
 8005018:	7863      	ldrb	r3, [r4, #1]
 800501a:	2b2a      	cmp	r3, #42	@ 0x2a
 800501c:	d132      	bne.n	8005084 <_vfiprintf_r+0x1ac>
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	1d1a      	adds	r2, r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	9203      	str	r2, [sp, #12]
 8005026:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800502a:	3402      	adds	r4, #2
 800502c:	9305      	str	r3, [sp, #20]
 800502e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005104 <_vfiprintf_r+0x22c>
 8005032:	7821      	ldrb	r1, [r4, #0]
 8005034:	2203      	movs	r2, #3
 8005036:	4650      	mov	r0, sl
 8005038:	f7fb f8da 	bl	80001f0 <memchr>
 800503c:	b138      	cbz	r0, 800504e <_vfiprintf_r+0x176>
 800503e:	9b04      	ldr	r3, [sp, #16]
 8005040:	eba0 000a 	sub.w	r0, r0, sl
 8005044:	2240      	movs	r2, #64	@ 0x40
 8005046:	4082      	lsls	r2, r0
 8005048:	4313      	orrs	r3, r2
 800504a:	3401      	adds	r4, #1
 800504c:	9304      	str	r3, [sp, #16]
 800504e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005052:	4829      	ldr	r0, [pc, #164]	@ (80050f8 <_vfiprintf_r+0x220>)
 8005054:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005058:	2206      	movs	r2, #6
 800505a:	f7fb f8c9 	bl	80001f0 <memchr>
 800505e:	2800      	cmp	r0, #0
 8005060:	d03f      	beq.n	80050e2 <_vfiprintf_r+0x20a>
 8005062:	4b26      	ldr	r3, [pc, #152]	@ (80050fc <_vfiprintf_r+0x224>)
 8005064:	bb1b      	cbnz	r3, 80050ae <_vfiprintf_r+0x1d6>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	3307      	adds	r3, #7
 800506a:	f023 0307 	bic.w	r3, r3, #7
 800506e:	3308      	adds	r3, #8
 8005070:	9303      	str	r3, [sp, #12]
 8005072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005074:	443b      	add	r3, r7
 8005076:	9309      	str	r3, [sp, #36]	@ 0x24
 8005078:	e76a      	b.n	8004f50 <_vfiprintf_r+0x78>
 800507a:	fb0c 3202 	mla	r2, ip, r2, r3
 800507e:	460c      	mov	r4, r1
 8005080:	2001      	movs	r0, #1
 8005082:	e7a8      	b.n	8004fd6 <_vfiprintf_r+0xfe>
 8005084:	2300      	movs	r3, #0
 8005086:	3401      	adds	r4, #1
 8005088:	9305      	str	r3, [sp, #20]
 800508a:	4619      	mov	r1, r3
 800508c:	f04f 0c0a 	mov.w	ip, #10
 8005090:	4620      	mov	r0, r4
 8005092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005096:	3a30      	subs	r2, #48	@ 0x30
 8005098:	2a09      	cmp	r2, #9
 800509a:	d903      	bls.n	80050a4 <_vfiprintf_r+0x1cc>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0c6      	beq.n	800502e <_vfiprintf_r+0x156>
 80050a0:	9105      	str	r1, [sp, #20]
 80050a2:	e7c4      	b.n	800502e <_vfiprintf_r+0x156>
 80050a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a8:	4604      	mov	r4, r0
 80050aa:	2301      	movs	r3, #1
 80050ac:	e7f0      	b.n	8005090 <_vfiprintf_r+0x1b8>
 80050ae:	ab03      	add	r3, sp, #12
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	462a      	mov	r2, r5
 80050b4:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <_vfiprintf_r+0x228>)
 80050b6:	a904      	add	r1, sp, #16
 80050b8:	4630      	mov	r0, r6
 80050ba:	f3af 8000 	nop.w
 80050be:	4607      	mov	r7, r0
 80050c0:	1c78      	adds	r0, r7, #1
 80050c2:	d1d6      	bne.n	8005072 <_vfiprintf_r+0x19a>
 80050c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	d405      	bmi.n	80050d6 <_vfiprintf_r+0x1fe>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	059a      	lsls	r2, r3, #22
 80050ce:	d402      	bmi.n	80050d6 <_vfiprintf_r+0x1fe>
 80050d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050d2:	f7ff fc77 	bl	80049c4 <__retarget_lock_release_recursive>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	065b      	lsls	r3, r3, #25
 80050da:	f53f af1f 	bmi.w	8004f1c <_vfiprintf_r+0x44>
 80050de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050e0:	e71e      	b.n	8004f20 <_vfiprintf_r+0x48>
 80050e2:	ab03      	add	r3, sp, #12
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	462a      	mov	r2, r5
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <_vfiprintf_r+0x228>)
 80050ea:	a904      	add	r1, sp, #16
 80050ec:	4630      	mov	r0, r6
 80050ee:	f000 f879 	bl	80051e4 <_printf_i>
 80050f2:	e7e4      	b.n	80050be <_vfiprintf_r+0x1e6>
 80050f4:	080059c0 	.word	0x080059c0
 80050f8:	080059ca 	.word	0x080059ca
 80050fc:	00000000 	.word	0x00000000
 8005100:	08004eb3 	.word	0x08004eb3
 8005104:	080059c6 	.word	0x080059c6

08005108 <_printf_common>:
 8005108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510c:	4616      	mov	r6, r2
 800510e:	4698      	mov	r8, r3
 8005110:	688a      	ldr	r2, [r1, #8]
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005118:	4293      	cmp	r3, r2
 800511a:	bfb8      	it	lt
 800511c:	4613      	movlt	r3, r2
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005124:	4607      	mov	r7, r0
 8005126:	460c      	mov	r4, r1
 8005128:	b10a      	cbz	r2, 800512e <_printf_common+0x26>
 800512a:	3301      	adds	r3, #1
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	0699      	lsls	r1, r3, #26
 8005132:	bf42      	ittt	mi
 8005134:	6833      	ldrmi	r3, [r6, #0]
 8005136:	3302      	addmi	r3, #2
 8005138:	6033      	strmi	r3, [r6, #0]
 800513a:	6825      	ldr	r5, [r4, #0]
 800513c:	f015 0506 	ands.w	r5, r5, #6
 8005140:	d106      	bne.n	8005150 <_printf_common+0x48>
 8005142:	f104 0a19 	add.w	sl, r4, #25
 8005146:	68e3      	ldr	r3, [r4, #12]
 8005148:	6832      	ldr	r2, [r6, #0]
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ab      	cmp	r3, r5
 800514e:	dc26      	bgt.n	800519e <_printf_common+0x96>
 8005150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	3b00      	subs	r3, #0
 8005158:	bf18      	it	ne
 800515a:	2301      	movne	r3, #1
 800515c:	0692      	lsls	r2, r2, #26
 800515e:	d42b      	bmi.n	80051b8 <_printf_common+0xb0>
 8005160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005164:	4641      	mov	r1, r8
 8005166:	4638      	mov	r0, r7
 8005168:	47c8      	blx	r9
 800516a:	3001      	adds	r0, #1
 800516c:	d01e      	beq.n	80051ac <_printf_common+0xa4>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6922      	ldr	r2, [r4, #16]
 8005172:	f003 0306 	and.w	r3, r3, #6
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf02      	ittt	eq
 800517a:	68e5      	ldreq	r5, [r4, #12]
 800517c:	6833      	ldreq	r3, [r6, #0]
 800517e:	1aed      	subeq	r5, r5, r3
 8005180:	68a3      	ldr	r3, [r4, #8]
 8005182:	bf0c      	ite	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	2500      	movne	r5, #0
 800518a:	4293      	cmp	r3, r2
 800518c:	bfc4      	itt	gt
 800518e:	1a9b      	subgt	r3, r3, r2
 8005190:	18ed      	addgt	r5, r5, r3
 8005192:	2600      	movs	r6, #0
 8005194:	341a      	adds	r4, #26
 8005196:	42b5      	cmp	r5, r6
 8005198:	d11a      	bne.n	80051d0 <_printf_common+0xc8>
 800519a:	2000      	movs	r0, #0
 800519c:	e008      	b.n	80051b0 <_printf_common+0xa8>
 800519e:	2301      	movs	r3, #1
 80051a0:	4652      	mov	r2, sl
 80051a2:	4641      	mov	r1, r8
 80051a4:	4638      	mov	r0, r7
 80051a6:	47c8      	blx	r9
 80051a8:	3001      	adds	r0, #1
 80051aa:	d103      	bne.n	80051b4 <_printf_common+0xac>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b4:	3501      	adds	r5, #1
 80051b6:	e7c6      	b.n	8005146 <_printf_common+0x3e>
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	2030      	movs	r0, #48	@ 0x30
 80051be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051c2:	4422      	add	r2, r4
 80051c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051cc:	3302      	adds	r3, #2
 80051ce:	e7c7      	b.n	8005160 <_printf_common+0x58>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4622      	mov	r2, r4
 80051d4:	4641      	mov	r1, r8
 80051d6:	4638      	mov	r0, r7
 80051d8:	47c8      	blx	r9
 80051da:	3001      	adds	r0, #1
 80051dc:	d0e6      	beq.n	80051ac <_printf_common+0xa4>
 80051de:	3601      	adds	r6, #1
 80051e0:	e7d9      	b.n	8005196 <_printf_common+0x8e>
	...

080051e4 <_printf_i>:
 80051e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	7e0f      	ldrb	r7, [r1, #24]
 80051ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051ec:	2f78      	cmp	r7, #120	@ 0x78
 80051ee:	4691      	mov	r9, r2
 80051f0:	4680      	mov	r8, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	469a      	mov	sl, r3
 80051f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051fa:	d807      	bhi.n	800520c <_printf_i+0x28>
 80051fc:	2f62      	cmp	r7, #98	@ 0x62
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x32>
 8005200:	2f00      	cmp	r7, #0
 8005202:	f000 80d2 	beq.w	80053aa <_printf_i+0x1c6>
 8005206:	2f58      	cmp	r7, #88	@ 0x58
 8005208:	f000 80b9 	beq.w	800537e <_printf_i+0x19a>
 800520c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005214:	e03a      	b.n	800528c <_printf_i+0xa8>
 8005216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800521a:	2b15      	cmp	r3, #21
 800521c:	d8f6      	bhi.n	800520c <_printf_i+0x28>
 800521e:	a101      	add	r1, pc, #4	@ (adr r1, 8005224 <_printf_i+0x40>)
 8005220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005224:	0800527d 	.word	0x0800527d
 8005228:	08005291 	.word	0x08005291
 800522c:	0800520d 	.word	0x0800520d
 8005230:	0800520d 	.word	0x0800520d
 8005234:	0800520d 	.word	0x0800520d
 8005238:	0800520d 	.word	0x0800520d
 800523c:	08005291 	.word	0x08005291
 8005240:	0800520d 	.word	0x0800520d
 8005244:	0800520d 	.word	0x0800520d
 8005248:	0800520d 	.word	0x0800520d
 800524c:	0800520d 	.word	0x0800520d
 8005250:	08005391 	.word	0x08005391
 8005254:	080052bb 	.word	0x080052bb
 8005258:	0800534b 	.word	0x0800534b
 800525c:	0800520d 	.word	0x0800520d
 8005260:	0800520d 	.word	0x0800520d
 8005264:	080053b3 	.word	0x080053b3
 8005268:	0800520d 	.word	0x0800520d
 800526c:	080052bb 	.word	0x080052bb
 8005270:	0800520d 	.word	0x0800520d
 8005274:	0800520d 	.word	0x0800520d
 8005278:	08005353 	.word	0x08005353
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800528c:	2301      	movs	r3, #1
 800528e:	e09d      	b.n	80053cc <_printf_i+0x1e8>
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	6031      	str	r1, [r6, #0]
 8005298:	0606      	lsls	r6, r0, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xbc>
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	e003      	b.n	80052a8 <_printf_i+0xc4>
 80052a0:	0645      	lsls	r5, r0, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xb8>
 80052a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	da03      	bge.n	80052b4 <_printf_i+0xd0>
 80052ac:	232d      	movs	r3, #45	@ 0x2d
 80052ae:	426d      	negs	r5, r5
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b4:	4859      	ldr	r0, [pc, #356]	@ (800541c <_printf_i+0x238>)
 80052b6:	230a      	movs	r3, #10
 80052b8:	e011      	b.n	80052de <_printf_i+0xfa>
 80052ba:	6821      	ldr	r1, [r4, #0]
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	0608      	lsls	r0, r1, #24
 80052c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c4:	d402      	bmi.n	80052cc <_printf_i+0xe8>
 80052c6:	0649      	lsls	r1, r1, #25
 80052c8:	bf48      	it	mi
 80052ca:	b2ad      	uxthmi	r5, r5
 80052cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ce:	4853      	ldr	r0, [pc, #332]	@ (800541c <_printf_i+0x238>)
 80052d0:	6033      	str	r3, [r6, #0]
 80052d2:	bf14      	ite	ne
 80052d4:	230a      	movne	r3, #10
 80052d6:	2308      	moveq	r3, #8
 80052d8:	2100      	movs	r1, #0
 80052da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052de:	6866      	ldr	r6, [r4, #4]
 80052e0:	60a6      	str	r6, [r4, #8]
 80052e2:	2e00      	cmp	r6, #0
 80052e4:	bfa2      	ittt	ge
 80052e6:	6821      	ldrge	r1, [r4, #0]
 80052e8:	f021 0104 	bicge.w	r1, r1, #4
 80052ec:	6021      	strge	r1, [r4, #0]
 80052ee:	b90d      	cbnz	r5, 80052f4 <_printf_i+0x110>
 80052f0:	2e00      	cmp	r6, #0
 80052f2:	d04b      	beq.n	800538c <_printf_i+0x1a8>
 80052f4:	4616      	mov	r6, r2
 80052f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80052fa:	fb03 5711 	mls	r7, r3, r1, r5
 80052fe:	5dc7      	ldrb	r7, [r0, r7]
 8005300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005304:	462f      	mov	r7, r5
 8005306:	42bb      	cmp	r3, r7
 8005308:	460d      	mov	r5, r1
 800530a:	d9f4      	bls.n	80052f6 <_printf_i+0x112>
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10b      	bne.n	8005328 <_printf_i+0x144>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07df      	lsls	r7, r3, #31
 8005314:	d508      	bpl.n	8005328 <_printf_i+0x144>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4299      	cmp	r1, r3
 800531c:	bfde      	ittt	le
 800531e:	2330      	movle	r3, #48	@ 0x30
 8005320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005328:	1b92      	subs	r2, r2, r6
 800532a:	6122      	str	r2, [r4, #16]
 800532c:	f8cd a000 	str.w	sl, [sp]
 8005330:	464b      	mov	r3, r9
 8005332:	aa03      	add	r2, sp, #12
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fee6 	bl	8005108 <_printf_common>
 800533c:	3001      	adds	r0, #1
 800533e:	d14a      	bne.n	80053d6 <_printf_i+0x1f2>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	b004      	add	sp, #16
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	4833      	ldr	r0, [pc, #204]	@ (8005420 <_printf_i+0x23c>)
 8005354:	2778      	movs	r7, #120	@ 0x78
 8005356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6831      	ldr	r1, [r6, #0]
 800535e:	061f      	lsls	r7, r3, #24
 8005360:	f851 5b04 	ldr.w	r5, [r1], #4
 8005364:	d402      	bmi.n	800536c <_printf_i+0x188>
 8005366:	065f      	lsls	r7, r3, #25
 8005368:	bf48      	it	mi
 800536a:	b2ad      	uxthmi	r5, r5
 800536c:	6031      	str	r1, [r6, #0]
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	bf44      	itt	mi
 8005372:	f043 0320 	orrmi.w	r3, r3, #32
 8005376:	6023      	strmi	r3, [r4, #0]
 8005378:	b11d      	cbz	r5, 8005382 <_printf_i+0x19e>
 800537a:	2310      	movs	r3, #16
 800537c:	e7ac      	b.n	80052d8 <_printf_i+0xf4>
 800537e:	4827      	ldr	r0, [pc, #156]	@ (800541c <_printf_i+0x238>)
 8005380:	e7e9      	b.n	8005356 <_printf_i+0x172>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	e7f6      	b.n	800537a <_printf_i+0x196>
 800538c:	4616      	mov	r6, r2
 800538e:	e7bd      	b.n	800530c <_printf_i+0x128>
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	1d18      	adds	r0, r3, #4
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	062e      	lsls	r6, r5, #24
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	d501      	bpl.n	80053a4 <_printf_i+0x1c0>
 80053a0:	6019      	str	r1, [r3, #0]
 80053a2:	e002      	b.n	80053aa <_printf_i+0x1c6>
 80053a4:	0668      	lsls	r0, r5, #25
 80053a6:	d5fb      	bpl.n	80053a0 <_printf_i+0x1bc>
 80053a8:	8019      	strh	r1, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	4616      	mov	r6, r2
 80053b0:	e7bc      	b.n	800532c <_printf_i+0x148>
 80053b2:	6833      	ldr	r3, [r6, #0]
 80053b4:	1d1a      	adds	r2, r3, #4
 80053b6:	6032      	str	r2, [r6, #0]
 80053b8:	681e      	ldr	r6, [r3, #0]
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	2100      	movs	r1, #0
 80053be:	4630      	mov	r0, r6
 80053c0:	f7fa ff16 	bl	80001f0 <memchr>
 80053c4:	b108      	cbz	r0, 80053ca <_printf_i+0x1e6>
 80053c6:	1b80      	subs	r0, r0, r6
 80053c8:	6060      	str	r0, [r4, #4]
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	e7aa      	b.n	800532c <_printf_i+0x148>
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	4632      	mov	r2, r6
 80053da:	4649      	mov	r1, r9
 80053dc:	4640      	mov	r0, r8
 80053de:	47d0      	blx	sl
 80053e0:	3001      	adds	r0, #1
 80053e2:	d0ad      	beq.n	8005340 <_printf_i+0x15c>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	079b      	lsls	r3, r3, #30
 80053e8:	d413      	bmi.n	8005412 <_printf_i+0x22e>
 80053ea:	68e0      	ldr	r0, [r4, #12]
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	4298      	cmp	r0, r3
 80053f0:	bfb8      	it	lt
 80053f2:	4618      	movlt	r0, r3
 80053f4:	e7a6      	b.n	8005344 <_printf_i+0x160>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4632      	mov	r2, r6
 80053fa:	4649      	mov	r1, r9
 80053fc:	4640      	mov	r0, r8
 80053fe:	47d0      	blx	sl
 8005400:	3001      	adds	r0, #1
 8005402:	d09d      	beq.n	8005340 <_printf_i+0x15c>
 8005404:	3501      	adds	r5, #1
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	9903      	ldr	r1, [sp, #12]
 800540a:	1a5b      	subs	r3, r3, r1
 800540c:	42ab      	cmp	r3, r5
 800540e:	dcf2      	bgt.n	80053f6 <_printf_i+0x212>
 8005410:	e7eb      	b.n	80053ea <_printf_i+0x206>
 8005412:	2500      	movs	r5, #0
 8005414:	f104 0619 	add.w	r6, r4, #25
 8005418:	e7f5      	b.n	8005406 <_printf_i+0x222>
 800541a:	bf00      	nop
 800541c:	080059d1 	.word	0x080059d1
 8005420:	080059e2 	.word	0x080059e2

08005424 <__sflush_r>:
 8005424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542c:	0716      	lsls	r6, r2, #28
 800542e:	4605      	mov	r5, r0
 8005430:	460c      	mov	r4, r1
 8005432:	d454      	bmi.n	80054de <__sflush_r+0xba>
 8005434:	684b      	ldr	r3, [r1, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc02      	bgt.n	8005440 <__sflush_r+0x1c>
 800543a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	dd48      	ble.n	80054d2 <__sflush_r+0xae>
 8005440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005442:	2e00      	cmp	r6, #0
 8005444:	d045      	beq.n	80054d2 <__sflush_r+0xae>
 8005446:	2300      	movs	r3, #0
 8005448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800544c:	682f      	ldr	r7, [r5, #0]
 800544e:	6a21      	ldr	r1, [r4, #32]
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	d030      	beq.n	80054b6 <__sflush_r+0x92>
 8005454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	0759      	lsls	r1, r3, #29
 800545a:	d505      	bpl.n	8005468 <__sflush_r+0x44>
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005462:	b10b      	cbz	r3, 8005468 <__sflush_r+0x44>
 8005464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800546c:	6a21      	ldr	r1, [r4, #32]
 800546e:	4628      	mov	r0, r5
 8005470:	47b0      	blx	r6
 8005472:	1c43      	adds	r3, r0, #1
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	d106      	bne.n	8005486 <__sflush_r+0x62>
 8005478:	6829      	ldr	r1, [r5, #0]
 800547a:	291d      	cmp	r1, #29
 800547c:	d82b      	bhi.n	80054d6 <__sflush_r+0xb2>
 800547e:	4a2a      	ldr	r2, [pc, #168]	@ (8005528 <__sflush_r+0x104>)
 8005480:	410a      	asrs	r2, r1
 8005482:	07d6      	lsls	r6, r2, #31
 8005484:	d427      	bmi.n	80054d6 <__sflush_r+0xb2>
 8005486:	2200      	movs	r2, #0
 8005488:	6062      	str	r2, [r4, #4]
 800548a:	04d9      	lsls	r1, r3, #19
 800548c:	6922      	ldr	r2, [r4, #16]
 800548e:	6022      	str	r2, [r4, #0]
 8005490:	d504      	bpl.n	800549c <__sflush_r+0x78>
 8005492:	1c42      	adds	r2, r0, #1
 8005494:	d101      	bne.n	800549a <__sflush_r+0x76>
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	b903      	cbnz	r3, 800549c <__sflush_r+0x78>
 800549a:	6560      	str	r0, [r4, #84]	@ 0x54
 800549c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800549e:	602f      	str	r7, [r5, #0]
 80054a0:	b1b9      	cbz	r1, 80054d2 <__sflush_r+0xae>
 80054a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054a6:	4299      	cmp	r1, r3
 80054a8:	d002      	beq.n	80054b0 <__sflush_r+0x8c>
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7ff fa9a 	bl	80049e4 <_free_r>
 80054b0:	2300      	movs	r3, #0
 80054b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80054b4:	e00d      	b.n	80054d2 <__sflush_r+0xae>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b0      	blx	r6
 80054bc:	4602      	mov	r2, r0
 80054be:	1c50      	adds	r0, r2, #1
 80054c0:	d1c9      	bne.n	8005456 <__sflush_r+0x32>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0c6      	beq.n	8005456 <__sflush_r+0x32>
 80054c8:	2b1d      	cmp	r3, #29
 80054ca:	d001      	beq.n	80054d0 <__sflush_r+0xac>
 80054cc:	2b16      	cmp	r3, #22
 80054ce:	d11e      	bne.n	800550e <__sflush_r+0xea>
 80054d0:	602f      	str	r7, [r5, #0]
 80054d2:	2000      	movs	r0, #0
 80054d4:	e022      	b.n	800551c <__sflush_r+0xf8>
 80054d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054da:	b21b      	sxth	r3, r3
 80054dc:	e01b      	b.n	8005516 <__sflush_r+0xf2>
 80054de:	690f      	ldr	r7, [r1, #16]
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	d0f6      	beq.n	80054d2 <__sflush_r+0xae>
 80054e4:	0793      	lsls	r3, r2, #30
 80054e6:	680e      	ldr	r6, [r1, #0]
 80054e8:	bf08      	it	eq
 80054ea:	694b      	ldreq	r3, [r1, #20]
 80054ec:	600f      	str	r7, [r1, #0]
 80054ee:	bf18      	it	ne
 80054f0:	2300      	movne	r3, #0
 80054f2:	eba6 0807 	sub.w	r8, r6, r7
 80054f6:	608b      	str	r3, [r1, #8]
 80054f8:	f1b8 0f00 	cmp.w	r8, #0
 80054fc:	dde9      	ble.n	80054d2 <__sflush_r+0xae>
 80054fe:	6a21      	ldr	r1, [r4, #32]
 8005500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005502:	4643      	mov	r3, r8
 8005504:	463a      	mov	r2, r7
 8005506:	4628      	mov	r0, r5
 8005508:	47b0      	blx	r6
 800550a:	2800      	cmp	r0, #0
 800550c:	dc08      	bgt.n	8005520 <__sflush_r+0xfc>
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005520:	4407      	add	r7, r0
 8005522:	eba8 0800 	sub.w	r8, r8, r0
 8005526:	e7e7      	b.n	80054f8 <__sflush_r+0xd4>
 8005528:	dfbffffe 	.word	0xdfbffffe

0800552c <_fflush_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	690b      	ldr	r3, [r1, #16]
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	b913      	cbnz	r3, 800553c <_fflush_r+0x10>
 8005536:	2500      	movs	r5, #0
 8005538:	4628      	mov	r0, r5
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	b118      	cbz	r0, 8005546 <_fflush_r+0x1a>
 800553e:	6a03      	ldr	r3, [r0, #32]
 8005540:	b90b      	cbnz	r3, 8005546 <_fflush_r+0x1a>
 8005542:	f7ff f827 	bl	8004594 <__sinit>
 8005546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f3      	beq.n	8005536 <_fflush_r+0xa>
 800554e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005550:	07d0      	lsls	r0, r2, #31
 8005552:	d404      	bmi.n	800555e <_fflush_r+0x32>
 8005554:	0599      	lsls	r1, r3, #22
 8005556:	d402      	bmi.n	800555e <_fflush_r+0x32>
 8005558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800555a:	f7ff fa32 	bl	80049c2 <__retarget_lock_acquire_recursive>
 800555e:	4628      	mov	r0, r5
 8005560:	4621      	mov	r1, r4
 8005562:	f7ff ff5f 	bl	8005424 <__sflush_r>
 8005566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005568:	07da      	lsls	r2, r3, #31
 800556a:	4605      	mov	r5, r0
 800556c:	d4e4      	bmi.n	8005538 <_fflush_r+0xc>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	059b      	lsls	r3, r3, #22
 8005572:	d4e1      	bmi.n	8005538 <_fflush_r+0xc>
 8005574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005576:	f7ff fa25 	bl	80049c4 <__retarget_lock_release_recursive>
 800557a:	e7dd      	b.n	8005538 <_fflush_r+0xc>

0800557c <__swhatbuf_r>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	2900      	cmp	r1, #0
 8005586:	b096      	sub	sp, #88	@ 0x58
 8005588:	4615      	mov	r5, r2
 800558a:	461e      	mov	r6, r3
 800558c:	da0d      	bge.n	80055aa <__swhatbuf_r+0x2e>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	bf14      	ite	ne
 800559a:	2340      	movne	r3, #64	@ 0x40
 800559c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055a0:	2000      	movs	r0, #0
 80055a2:	6031      	str	r1, [r6, #0]
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	b016      	add	sp, #88	@ 0x58
 80055a8:	bd70      	pop	{r4, r5, r6, pc}
 80055aa:	466a      	mov	r2, sp
 80055ac:	f000 f862 	bl	8005674 <_fstat_r>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	dbec      	blt.n	800558e <__swhatbuf_r+0x12>
 80055b4:	9901      	ldr	r1, [sp, #4]
 80055b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055be:	4259      	negs	r1, r3
 80055c0:	4159      	adcs	r1, r3
 80055c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055c6:	e7eb      	b.n	80055a0 <__swhatbuf_r+0x24>

080055c8 <__smakebuf_r>:
 80055c8:	898b      	ldrh	r3, [r1, #12]
 80055ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055cc:	079d      	lsls	r5, r3, #30
 80055ce:	4606      	mov	r6, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	d507      	bpl.n	80055e4 <__smakebuf_r+0x1c>
 80055d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	2301      	movs	r3, #1
 80055de:	6163      	str	r3, [r4, #20]
 80055e0:	b003      	add	sp, #12
 80055e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e4:	ab01      	add	r3, sp, #4
 80055e6:	466a      	mov	r2, sp
 80055e8:	f7ff ffc8 	bl	800557c <__swhatbuf_r>
 80055ec:	9f00      	ldr	r7, [sp, #0]
 80055ee:	4605      	mov	r5, r0
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7ff fa62 	bl	8004abc <_malloc_r>
 80055f8:	b948      	cbnz	r0, 800560e <__smakebuf_r+0x46>
 80055fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fe:	059a      	lsls	r2, r3, #22
 8005600:	d4ee      	bmi.n	80055e0 <__smakebuf_r+0x18>
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	f043 0302 	orr.w	r3, r3, #2
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	e7e2      	b.n	80055d4 <__smakebuf_r+0xc>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	6020      	str	r0, [r4, #0]
 8005612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800561e:	b15b      	cbz	r3, 8005638 <__smakebuf_r+0x70>
 8005620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005624:	4630      	mov	r0, r6
 8005626:	f000 f837 	bl	8005698 <_isatty_r>
 800562a:	b128      	cbz	r0, 8005638 <__smakebuf_r+0x70>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	431d      	orrs	r5, r3
 800563c:	81a5      	strh	r5, [r4, #12]
 800563e:	e7cf      	b.n	80055e0 <__smakebuf_r+0x18>

08005640 <memmove>:
 8005640:	4288      	cmp	r0, r1
 8005642:	b510      	push	{r4, lr}
 8005644:	eb01 0402 	add.w	r4, r1, r2
 8005648:	d902      	bls.n	8005650 <memmove+0x10>
 800564a:	4284      	cmp	r4, r0
 800564c:	4623      	mov	r3, r4
 800564e:	d807      	bhi.n	8005660 <memmove+0x20>
 8005650:	1e43      	subs	r3, r0, #1
 8005652:	42a1      	cmp	r1, r4
 8005654:	d008      	beq.n	8005668 <memmove+0x28>
 8005656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800565e:	e7f8      	b.n	8005652 <memmove+0x12>
 8005660:	4402      	add	r2, r0
 8005662:	4601      	mov	r1, r0
 8005664:	428a      	cmp	r2, r1
 8005666:	d100      	bne.n	800566a <memmove+0x2a>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800566e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005672:	e7f7      	b.n	8005664 <memmove+0x24>

08005674 <_fstat_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d07      	ldr	r5, [pc, #28]	@ (8005694 <_fstat_r+0x20>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f7fc fb4d 	bl	8001d20 <_fstat>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d102      	bne.n	8005690 <_fstat_r+0x1c>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	b103      	cbz	r3, 8005690 <_fstat_r+0x1c>
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	200002b4 	.word	0x200002b4

08005698 <_isatty_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d06      	ldr	r5, [pc, #24]	@ (80056b4 <_isatty_r+0x1c>)
 800569c:	2300      	movs	r3, #0
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fc fb4c 	bl	8001d40 <_isatty>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_isatty_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_isatty_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	200002b4 	.word	0x200002b4

080056b8 <_sbrk_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d06      	ldr	r5, [pc, #24]	@ (80056d4 <_sbrk_r+0x1c>)
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fc fb54 	bl	8001d70 <_sbrk>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_sbrk_r+0x1a>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_sbrk_r+0x1a>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	200002b4 	.word	0x200002b4

080056d8 <_realloc_r>:
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	4680      	mov	r8, r0
 80056de:	4615      	mov	r5, r2
 80056e0:	460c      	mov	r4, r1
 80056e2:	b921      	cbnz	r1, 80056ee <_realloc_r+0x16>
 80056e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056e8:	4611      	mov	r1, r2
 80056ea:	f7ff b9e7 	b.w	8004abc <_malloc_r>
 80056ee:	b92a      	cbnz	r2, 80056fc <_realloc_r+0x24>
 80056f0:	f7ff f978 	bl	80049e4 <_free_r>
 80056f4:	2400      	movs	r4, #0
 80056f6:	4620      	mov	r0, r4
 80056f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fc:	f000 f81a 	bl	8005734 <_malloc_usable_size_r>
 8005700:	4285      	cmp	r5, r0
 8005702:	4606      	mov	r6, r0
 8005704:	d802      	bhi.n	800570c <_realloc_r+0x34>
 8005706:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800570a:	d8f4      	bhi.n	80056f6 <_realloc_r+0x1e>
 800570c:	4629      	mov	r1, r5
 800570e:	4640      	mov	r0, r8
 8005710:	f7ff f9d4 	bl	8004abc <_malloc_r>
 8005714:	4607      	mov	r7, r0
 8005716:	2800      	cmp	r0, #0
 8005718:	d0ec      	beq.n	80056f4 <_realloc_r+0x1c>
 800571a:	42b5      	cmp	r5, r6
 800571c:	462a      	mov	r2, r5
 800571e:	4621      	mov	r1, r4
 8005720:	bf28      	it	cs
 8005722:	4632      	movcs	r2, r6
 8005724:	f7ff f94f 	bl	80049c6 <memcpy>
 8005728:	4621      	mov	r1, r4
 800572a:	4640      	mov	r0, r8
 800572c:	f7ff f95a 	bl	80049e4 <_free_r>
 8005730:	463c      	mov	r4, r7
 8005732:	e7e0      	b.n	80056f6 <_realloc_r+0x1e>

08005734 <_malloc_usable_size_r>:
 8005734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005738:	1f18      	subs	r0, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfbc      	itt	lt
 800573e:	580b      	ldrlt	r3, [r1, r0]
 8005740:	18c0      	addlt	r0, r0, r3
 8005742:	4770      	bx	lr

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
