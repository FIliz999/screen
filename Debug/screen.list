
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08003e9c  08003e9c  00004e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004100  08004100  00005100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004108  08004108  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800410c  0800410c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004110  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000068  08004178  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004178  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072c2  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001836  00000000  00000000  0000d35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016bb0  00000000  00000000  0000f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009178  00000000  00000000  00025ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00088fdd  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b8045  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000059e  00000000  00000000  000b8088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025c4  00000000  00000000  000b8628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000babec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e84 	.word	0x08003e84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003e84 	.word	0x08003e84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ILI9341_Init>:
static void DC_H(void);
static void LED_H(void);

// Initialization
void ILI9341_Init(SPI_HandleTypeDef hspi3)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b094      	sub	sp, #80	@ 0x50
 8000586:	af14      	add	r7, sp, #80	@ 0x50
 8000588:	f107 0c08 	add.w	ip, r7, #8
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Reset();
 8000590:	f000 fd50 	bl	8001034 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000594:	4668      	mov	r0, sp
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2248      	movs	r2, #72	@ 0x48
 800059c:	4619      	mov	r1, r3
 800059e:	f002 fec6 	bl	800332e <memcpy>
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a8:	f000 fd56 	bl	8001058 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB, hspi3);
 80005ac:	4668      	mov	r0, sp
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	224c      	movs	r2, #76	@ 0x4c
 80005b4:	4619      	mov	r1, r3
 80005b6:	f002 feba 	bl	800332e <memcpy>
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005c0:	20cb      	movs	r0, #203	@ 0xcb
 80005c2:	f000 fd69 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x39, hspi3);
 80005c6:	4668      	mov	r0, sp
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	224c      	movs	r2, #76	@ 0x4c
 80005ce:	4619      	mov	r1, r3
 80005d0:	f002 fead 	bl	800332e <memcpy>
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005da:	2039      	movs	r0, #57	@ 0x39
 80005dc:	f000 fd7d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2C, hspi3);
 80005e0:	4668      	mov	r0, sp
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	224c      	movs	r2, #76	@ 0x4c
 80005e8:	4619      	mov	r1, r3
 80005ea:	f002 fea0 	bl	800332e <memcpy>
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f4:	202c      	movs	r0, #44	@ 0x2c
 80005f6:	f000 fd70 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80005fa:	4668      	mov	r0, sp
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	224c      	movs	r2, #76	@ 0x4c
 8000602:	4619      	mov	r1, r3
 8000604:	f002 fe93 	bl	800332e <memcpy>
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fd63 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x34, hspi3);
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	224c      	movs	r2, #76	@ 0x4c
 800061c:	4619      	mov	r1, r3
 800061e:	f002 fe86 	bl	800332e <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000628:	2034      	movs	r0, #52	@ 0x34
 800062a:	f000 fd56 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x02, hspi3);
 800062e:	4668      	mov	r0, sp
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	224c      	movs	r2, #76	@ 0x4c
 8000636:	4619      	mov	r1, r3
 8000638:	f002 fe79 	bl	800332e <memcpy>
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fd49 	bl	80010da <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF, hspi3);
 8000648:	4668      	mov	r0, sp
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	f002 fe6c 	bl	800332e <memcpy>
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	20cf      	movs	r0, #207	@ 0xcf
 800065e:	f000 fd1b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	224c      	movs	r2, #76	@ 0x4c
 800066a:	4619      	mov	r1, r3
 800066c:	f002 fe5f 	bl	800332e <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fd2f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 800067c:	4668      	mov	r0, sp
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	f002 fe52 	bl	800332e <memcpy>
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000690:	20c1      	movs	r0, #193	@ 0xc1
 8000692:	f000 fd22 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x30, hspi3);
 8000696:	4668      	mov	r0, sp
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	224c      	movs	r2, #76	@ 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	f002 fe45 	bl	800332e <memcpy>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006aa:	2030      	movs	r0, #48	@ 0x30
 80006ac:	f000 fd15 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8, hspi3);
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	4619      	mov	r1, r3
 80006ba:	f002 fe38 	bl	800332e <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c4:	20e8      	movs	r0, #232	@ 0xe8
 80006c6:	f000 fce7 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x85, hspi3);
 80006ca:	4668      	mov	r0, sp
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	224c      	movs	r2, #76	@ 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	f002 fe2b 	bl	800332e <memcpy>
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	2085      	movs	r0, #133	@ 0x85
 80006e0:	f000 fcfb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	4619      	mov	r1, r3
 80006ee:	f002 fe1e 	bl	800332e <memcpy>
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fcee 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x78, hspi3);
 80006fe:	4668      	mov	r0, sp
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	224c      	movs	r2, #76	@ 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	f002 fe11 	bl	800332e <memcpy>
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fce1 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA, hspi3);
 8000718:	4668      	mov	r0, sp
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	224c      	movs	r2, #76	@ 0x4c
 8000720:	4619      	mov	r1, r3
 8000722:	f002 fe04 	bl	800332e <memcpy>
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072c:	20ea      	movs	r0, #234	@ 0xea
 800072e:	f000 fcb3 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000732:	4668      	mov	r0, sp
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	224c      	movs	r2, #76	@ 0x4c
 800073a:	4619      	mov	r1, r3
 800073c:	f002 fdf7 	bl	800332e <memcpy>
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fcc7 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	4619      	mov	r1, r3
 8000756:	f002 fdea 	bl	800332e <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fcba 	bl	80010da <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED, hspi3);
 8000766:	4668      	mov	r0, sp
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	224c      	movs	r2, #76	@ 0x4c
 800076e:	4619      	mov	r1, r3
 8000770:	f002 fddd 	bl	800332e <memcpy>
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800077a:	20ed      	movs	r0, #237	@ 0xed
 800077c:	f000 fc8c 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x64, hspi3);
 8000780:	4668      	mov	r0, sp
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	f002 fdd0 	bl	800332e <memcpy>
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000794:	2064      	movs	r0, #100	@ 0x64
 8000796:	f000 fca0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 800079a:	4668      	mov	r0, sp
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	224c      	movs	r2, #76	@ 0x4c
 80007a2:	4619      	mov	r1, r3
 80007a4:	f002 fdc3 	bl	800332e <memcpy>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 fc93 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x12, hspi3);
 80007b4:	4668      	mov	r0, sp
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	4619      	mov	r1, r3
 80007be:	f002 fdb6 	bl	800332e <memcpy>
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c8:	2012      	movs	r0, #18
 80007ca:	f000 fc86 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x81, hspi3);
 80007ce:	4668      	mov	r0, sp
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	224c      	movs	r2, #76	@ 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f002 fda9 	bl	800332e <memcpy>
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	2081      	movs	r0, #129	@ 0x81
 80007e4:	f000 fc79 	bl	80010da <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7, hspi3);
 80007e8:	4668      	mov	r0, sp
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	4619      	mov	r1, r3
 80007f2:	f002 fd9c 	bl	800332e <memcpy>
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fc:	20f7      	movs	r0, #247	@ 0xf7
 80007fe:	f000 fc4b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x20, hspi3);
 8000802:	4668      	mov	r0, sp
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	224c      	movs	r2, #76	@ 0x4c
 800080a:	4619      	mov	r1, r3
 800080c:	f002 fd8f 	bl	800332e <memcpy>
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000816:	2020      	movs	r0, #32
 8000818:	f000 fc5f 	bl	80010da <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0, hspi3);
 800081c:	4668      	mov	r0, sp
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	4619      	mov	r1, r3
 8000826:	f002 fd82 	bl	800332e <memcpy>
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000830:	20c0      	movs	r0, #192	@ 0xc0
 8000832:	f000 fc31 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8000836:	4668      	mov	r0, sp
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	224c      	movs	r2, #76	@ 0x4c
 800083e:	4619      	mov	r1, r3
 8000840:	f002 fd75 	bl	800332e <memcpy>
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fc45 	bl	80010da <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1, hspi3);
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	f002 fd68 	bl	800332e <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc17 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 800086a:	4668      	mov	r0, sp
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	224c      	movs	r2, #76	@ 0x4c
 8000872:	4619      	mov	r1, r3
 8000874:	f002 fd5b 	bl	800332e <memcpy>
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fc2b 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5, hspi3);
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	224c      	movs	r2, #76	@ 0x4c
 800088c:	4619      	mov	r1, r3
 800088e:	f002 fd4e 	bl	800332e <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000898:	20c5      	movs	r0, #197	@ 0xc5
 800089a:	f000 fbfd 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x3E, hspi3);
 800089e:	4668      	mov	r0, sp
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	224c      	movs	r2, #76	@ 0x4c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f002 fd41 	bl	800332e <memcpy>
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b2:	203e      	movs	r0, #62	@ 0x3e
 80008b4:	f000 fc11 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x28, hspi3);
 80008b8:	4668      	mov	r0, sp
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f002 fd34 	bl	800332e <memcpy>
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008cc:	2028      	movs	r0, #40	@ 0x28
 80008ce:	f000 fc04 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7, hspi3);
 80008d2:	4668      	mov	r0, sp
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	224c      	movs	r2, #76	@ 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	f002 fd27 	bl	800332e <memcpy>
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e6:	20c7      	movs	r0, #199	@ 0xc7
 80008e8:	f000 fbd6 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x86, hspi3);
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	224c      	movs	r2, #76	@ 0x4c
 80008f4:	4619      	mov	r1, r3
 80008f6:	f002 fd1a 	bl	800332e <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000900:	2086      	movs	r0, #134	@ 0x86
 8000902:	f000 fbea 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36, hspi3);
 8000906:	4668      	mov	r0, sp
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	224c      	movs	r2, #76	@ 0x4c
 800090e:	4619      	mov	r1, r3
 8000910:	f002 fd0d 	bl	800332e <memcpy>
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091a:	2036      	movs	r0, #54	@ 0x36
 800091c:	f000 fbbc 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x48, hspi3);
 8000920:	4668      	mov	r0, sp
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	f002 fd00 	bl	800332e <memcpy>
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000934:	2048      	movs	r0, #72	@ 0x48
 8000936:	f000 fbd0 	bl	80010da <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A, hspi3);
 800093a:	4668      	mov	r0, sp
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	224c      	movs	r2, #76	@ 0x4c
 8000942:	4619      	mov	r1, r3
 8000944:	f002 fcf3 	bl	800332e <memcpy>
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f000 fba2 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x55, hspi3);    //16bit
 8000954:	4668      	mov	r0, sp
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	224c      	movs	r2, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	f002 fce6 	bl	800332e <memcpy>
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000968:	2055      	movs	r0, #85	@ 0x55
 800096a:	f000 fbb6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_REG(0xB1, hspi3);
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	224c      	movs	r2, #76	@ 0x4c
 8000976:	4619      	mov	r1, r3
 8000978:	f002 fcd9 	bl	800332e <memcpy>
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000982:	20b1      	movs	r0, #177	@ 0xb1
 8000984:	f000 fb88 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	f002 fccc 	bl	800332e <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb9c 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x18, hspi3);
 80009a2:	4668      	mov	r0, sp
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	224c      	movs	r2, #76	@ 0x4c
 80009aa:	4619      	mov	r1, r3
 80009ac:	f002 fcbf 	bl	800332e <memcpy>
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b6:	2018      	movs	r0, #24
 80009b8:	f000 fb8f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x01, hspi3);
	LCD_WR_DATA(0x00, hspi3);
	LCD_WR_DATA(0x20, hspi3); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6, hspi3);
 80009bc:	4668      	mov	r0, sp
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f002 fcb2 	bl	800332e <memcpy>
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	20b6      	movs	r0, #182	@ 0xb6
 80009d2:	f000 fb61 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x08, hspi3);
 80009d6:	4668      	mov	r0, sp
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	224c      	movs	r2, #76	@ 0x4c
 80009de:	4619      	mov	r1, r3
 80009e0:	f002 fca5 	bl	800332e <memcpy>
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ea:	2008      	movs	r0, #8
 80009ec:	f000 fb75 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x82, hspi3);
 80009f0:	4668      	mov	r0, sp
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	224c      	movs	r2, #76	@ 0x4c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f002 fc98 	bl	800332e <memcpy>
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a04:	2082      	movs	r0, #130	@ 0x82
 8000a06:	f000 fb68 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x27, hspi3);
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	224c      	movs	r2, #76	@ 0x4c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f002 fc8b 	bl	800332e <memcpy>
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1e:	2027      	movs	r0, #39	@ 0x27
 8000a20:	f000 fb5b 	bl	80010da <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2, hspi3);
 8000a24:	4668      	mov	r0, sp
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f002 fc7e 	bl	800332e <memcpy>
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a38:	20f2      	movs	r0, #242	@ 0xf2
 8000a3a:	f000 fb2d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000a3e:	4668      	mov	r0, sp
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f002 fc71 	bl	800332e <memcpy>
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fb41 	bl	80010da <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26, hspi3); //Gamma set
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	4619      	mov	r1, r3
 8000a62:	f002 fc64 	bl	800332e <memcpy>
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a6c:	2026      	movs	r0, #38	@ 0x26
 8000a6e:	f000 fb13 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x01, hspi3); 	//Gamma Curve (G2.2)
 8000a72:	4668      	mov	r0, sp
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	224c      	movs	r2, #76	@ 0x4c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f002 fc57 	bl	800332e <memcpy>
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb27 	bl	80010da <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0, hspi3);
 8000a8c:	4668      	mov	r0, sp
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	224c      	movs	r2, #76	@ 0x4c
 8000a94:	4619      	mov	r1, r3
 8000a96:	f002 fc4a 	bl	800332e <memcpy>
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa0:	20e0      	movs	r0, #224	@ 0xe0
 8000aa2:	f000 faf9 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x0F, hspi3);
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	224c      	movs	r2, #76	@ 0x4c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f002 fc3d 	bl	800332e <memcpy>
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 fb0d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	224c      	movs	r2, #76	@ 0x4c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f002 fc30 	bl	800332e <memcpy>
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad4:	2031      	movs	r0, #49	@ 0x31
 8000ad6:	f000 fb00 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2B, hspi3);
 8000ada:	4668      	mov	r0, sp
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	224c      	movs	r2, #76	@ 0x4c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f002 fc23 	bl	800332e <memcpy>
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aee:	202b      	movs	r0, #43	@ 0x2b
 8000af0:	f000 faf3 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000af4:	4668      	mov	r0, sp
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	224c      	movs	r2, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	f002 fc16 	bl	800332e <memcpy>
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f000 fae6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000b0e:	4668      	mov	r0, sp
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	224c      	movs	r2, #76	@ 0x4c
 8000b16:	4619      	mov	r1, r3
 8000b18:	f002 fc09 	bl	800332e <memcpy>
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b22:	200e      	movs	r0, #14
 8000b24:	f000 fad9 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000b28:	4668      	mov	r0, sp
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	224c      	movs	r2, #76	@ 0x4c
 8000b30:	4619      	mov	r1, r3
 8000b32:	f002 fbfc 	bl	800332e <memcpy>
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 facc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x4E, hspi3);
 8000b42:	4668      	mov	r0, sp
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	224c      	movs	r2, #76	@ 0x4c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f002 fbef 	bl	800332e <memcpy>
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b56:	204e      	movs	r0, #78	@ 0x4e
 8000b58:	f000 fabf 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xF1, hspi3);
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	f002 fbe2 	bl	800332e <memcpy>
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b70:	20f1      	movs	r0, #241	@ 0xf1
 8000b72:	f000 fab2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x37, hspi3);
 8000b76:	4668      	mov	r0, sp
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	224c      	movs	r2, #76	@ 0x4c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f002 fbd5 	bl	800332e <memcpy>
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	2037      	movs	r0, #55	@ 0x37
 8000b8c:	f000 faa5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000b90:	4668      	mov	r0, sp
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	224c      	movs	r2, #76	@ 0x4c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f002 fbc8 	bl	800332e <memcpy>
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f000 fa98 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x10, hspi3);
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	224c      	movs	r2, #76	@ 0x4c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f002 fbbb 	bl	800332e <memcpy>
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 fa8b 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	224c      	movs	r2, #76	@ 0x4c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f002 fbae 	bl	800332e <memcpy>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fa7e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000bde:	4668      	mov	r0, sp
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	224c      	movs	r2, #76	@ 0x4c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f002 fba1 	bl	800332e <memcpy>
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f000 fa71 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x09, hspi3);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	224c      	movs	r2, #76	@ 0x4c
 8000c00:	4619      	mov	r1, r3
 8000c02:	f002 fb94 	bl	800332e <memcpy>
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 fa64 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000c12:	4668      	mov	r0, sp
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	224c      	movs	r2, #76	@ 0x4c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f002 fb87 	bl	800332e <memcpy>
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fa57 	bl	80010da <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1, hspi3);
 8000c2c:	4668      	mov	r0, sp
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	4619      	mov	r1, r3
 8000c36:	f002 fb7a 	bl	800332e <memcpy>
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	20e1      	movs	r0, #225	@ 0xe1
 8000c42:	f000 fa29 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000c46:	4668      	mov	r0, sp
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	224c      	movs	r2, #76	@ 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f002 fb6d 	bl	800332e <memcpy>
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fa3d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000c60:	4668      	mov	r0, sp
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f002 fb60 	bl	800332e <memcpy>
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	200e      	movs	r0, #14
 8000c76:	f000 fa30 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x14, hspi3);
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	224c      	movs	r2, #76	@ 0x4c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f002 fb53 	bl	800332e <memcpy>
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f000 fa23 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000c94:	4668      	mov	r0, sp
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f002 fb46 	bl	800332e <memcpy>
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fa16 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x11, hspi3);
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	224c      	movs	r2, #76	@ 0x4c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f002 fb39 	bl	800332e <memcpy>
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc2:	2011      	movs	r0, #17
 8000cc4:	f000 fa09 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	224c      	movs	r2, #76	@ 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f002 fb2c 	bl	800332e <memcpy>
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f000 f9fc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	224c      	movs	r2, #76	@ 0x4c
 8000cea:	4619      	mov	r1, r3
 8000cec:	f002 fb1f 	bl	800332e <memcpy>
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	2031      	movs	r0, #49	@ 0x31
 8000cf8:	f000 f9ef 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8000cfc:	4668      	mov	r0, sp
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	224c      	movs	r2, #76	@ 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f002 fb12 	bl	800332e <memcpy>
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d10:	20c1      	movs	r0, #193	@ 0xc1
 8000d12:	f000 f9e2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x48, hspi3);
 8000d16:	4668      	mov	r0, sp
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	224c      	movs	r2, #76	@ 0x4c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f002 fb05 	bl	800332e <memcpy>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2a:	2048      	movs	r0, #72	@ 0x48
 8000d2c:	f000 f9d5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000d30:	4668      	mov	r0, sp
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	224c      	movs	r2, #76	@ 0x4c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f002 faf8 	bl	800332e <memcpy>
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 f9c8 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	224c      	movs	r2, #76	@ 0x4c
 8000d52:	4619      	mov	r1, r3
 8000d54:	f002 faeb 	bl	800332e <memcpy>
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f9bb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000d64:	4668      	mov	r0, sp
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	224c      	movs	r2, #76	@ 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f002 fade 	bl	800332e <memcpy>
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f9ae 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	224c      	movs	r2, #76	@ 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f002 fad1 	bl	800332e <memcpy>
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	2031      	movs	r0, #49	@ 0x31
 8000d94:	f000 f9a1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x36, hspi3);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	f002 fac4 	bl	800332e <memcpy>
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	2036      	movs	r0, #54	@ 0x36
 8000dae:	f000 f994 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	224c      	movs	r2, #76	@ 0x4c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f002 fab7 	bl	800332e <memcpy>
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f987 	bl	80010da <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11, hspi3);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f002 faaa 	bl	800332e <memcpy>
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de0:	2011      	movs	r0, #17
 8000de2:	f000 f959 	bl	8001098 <LCD_WR_REG>

	HAL_Delay(120);
 8000de6:	2078      	movs	r0, #120	@ 0x78
 8000de8:	f000 ff58 	bl	8001c9c <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29, hspi3);
 8000dec:	4668      	mov	r0, sp
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	224c      	movs	r2, #76	@ 0x4c
 8000df4:	4619      	mov	r1, r3
 8000df6:	f002 fa9a 	bl	800332e <memcpy>
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	2029      	movs	r0, #41	@ 0x29
 8000e02:	f000 f949 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x2C, hspi3);
 8000e06:	4668      	mov	r0, sp
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	224c      	movs	r2, #76	@ 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f002 fa8d 	bl	800332e <memcpy>
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1a:	202c      	movs	r0, #44	@ 0x2c
 8000e1c:	f000 f95d 	bl	80010da <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 8000e20:	4668      	mov	r0, sp
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f002 fa80 	bl	800332e <memcpy>
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fae7 	bl	8001408 <LCD_direction>

}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr

08000e46 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b097      	sub	sp, #92	@ 0x5c
 8000e4a:	af14      	add	r7, sp, #80	@ 0x50
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4623      	mov	r3, r4
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a, hspi3);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	224c      	movs	r2, #76	@ 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f002 fa5e 	bl	800332e <memcpy>
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	202a      	movs	r0, #42	@ 0x2a
 8000e7a:	f000 f90d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8, hspi3);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2dc      	uxtb	r4, r3
 8000e86:	4668      	mov	r0, sp
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	224c      	movs	r2, #76	@ 0x4c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f002 fa4d 	bl	800332e <memcpy>
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 f91d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x, hspi3);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2dc      	uxtb	r4, r3
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	224c      	movs	r2, #76	@ 0x4c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f002 fa3e 	bl	800332e <memcpy>
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f000 f90e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8, hspi3);
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2dc      	uxtb	r4, r3
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	224c      	movs	r2, #76	@ 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f002 fa2d 	bl	800332e <memcpy>
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f8fd 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x, hspi3);
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	b2dc      	uxtb	r4, r3
 8000ee4:	4668      	mov	r0, sp
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	224c      	movs	r2, #76	@ 0x4c
 8000eec:	4619      	mov	r1, r3
 8000eee:	f002 fa1e 	bl	800332e <memcpy>
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 f8ee 	bl	80010da <LCD_WR_DATA>

	LCD_WR_REG(0x2b, hspi3);
 8000efe:	4668      	mov	r0, sp
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	224c      	movs	r2, #76	@ 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f002 fa11 	bl	800332e <memcpy>
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f12:	202b      	movs	r0, #43	@ 0x2b
 8000f14:	f000 f8c0 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8, hspi3);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	4668      	mov	r0, sp
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	224c      	movs	r2, #76	@ 0x4c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f002 fa00 	bl	800332e <memcpy>
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 f8d0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y, hspi3);
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	b2dc      	uxtb	r4, r3
 8000f3e:	4668      	mov	r0, sp
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	224c      	movs	r2, #76	@ 0x4c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f002 f9f1 	bl	800332e <memcpy>
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f8c1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8, hspi3);
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2dc      	uxtb	r4, r3
 8000f60:	4668      	mov	r0, sp
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f002 f9e0 	bl	800332e <memcpy>
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 f8b0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y, hspi3);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2dc      	uxtb	r4, r3
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	224c      	movs	r2, #76	@ 0x4c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f002 f9d1 	bl	800332e <memcpy>
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f8a1 	bl	80010da <LCD_WR_DATA>

}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	b09a      	sub	sp, #104	@ 0x68
 8000fa8:	af16      	add	r7, sp, #88	@ 0x58
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fac:	4603      	mov	r3, r0
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	80bb      	strh	r3, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 8000fc8:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8000fcc:	88fe      	ldrh	r6, [r7, #6]
 8000fce:	88bd      	ldrh	r5, [r7, #4]
 8000fd0:	88fc      	ldrh	r4, [r7, #6]
 8000fd2:	4668      	mov	r0, sp
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	2258      	movs	r2, #88	@ 0x58
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f002 f9a7 	bl	800332e <memcpy>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4632      	mov	r2, r6
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff2d 	bl	8000e46 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c, hspi3);
 8000fec:	4668      	mov	r0, sp
 8000fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 f99a 	bl	800332e <memcpy>
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	202c      	movs	r0, #44	@ 0x2c
 8001002:	f000 f849 	bl	8001098 <LCD_WR_REG>
	DC_H();
 8001006:	f000 fabd 	bl	8001584 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	2202      	movs	r2, #2
 8001018:	f001 fdd5 	bl	8002bc6 <HAL_SPI_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <ILI9341_WritePixel+0x86>
		Error_Handler();
 8001022:	f000 fc25 	bl	8001870 <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr

08001034 <ILI9341_Reset>:
	__HAL_SPI_ENABLE(&hspi3);
#endif
}

void ILI9341_Reset(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	RESET_L();
 8001038:	f000 fa74 	bl	8001524 <RESET_L>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f000 fe2d 	bl	8001c9c <HAL_Delay>
	RESET_H();
 8001042:	f000 fa7b 	bl	800153c <RESET_H>
	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f000 fe28 	bl	8001c9c <HAL_Delay>
	CS_L();
 800104c:	f000 fa82 	bl	8001554 <CS_L>
	LED_H();
 8001050:	f000 faa4 	bl	800159c <LED_H>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 8001058:	b084      	sub	sp, #16
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	f107 0c10 	add.w	ip, r7, #16
 8001064:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800106c:	f000 fa7e 	bl	800156c <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 8001070:	1df9      	adds	r1, r7, #7
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	2201      	movs	r2, #1
 8001078:	f107 0010 	add.w	r0, r7, #16
 800107c:	f001 fda3 	bl	8002bc6 <HAL_SPI_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <ILI9341_SoftReset+0x32>
		Error_Handler();
 8001086:	f000 fbf3 	bl	8001870 <Error_Handler>
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data, SPI_HandleTypeDef hspi3)
{
 8001098:	b084      	sub	sp, #16
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4604      	mov	r4, r0
 80010a2:	f107 001c 	add.w	r0, r7, #28
 80010a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010aa:	4623      	mov	r3, r4
 80010ac:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80010ae:	f000 fa5d 	bl	800156c <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f107 001c 	add.w	r0, r7, #28
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f001 fd82 	bl	8002bc6 <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <LCD_WR_REG+0x34>
		Error_Handler();
 80010c8:	f000 fbd2 	bl	8001870 <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr

080010da <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data, SPI_HandleTypeDef hspi3)
{
 80010da:	b084      	sub	sp, #16
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	f107 001c 	add.w	r0, r7, #28
 80010e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010ec:	4623      	mov	r3, r4
 80010ee:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80010f0:	f000 fa48 	bl	8001584 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	f107 001c 	add.w	r0, r7, #28
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	2201      	movs	r2, #1
 8001100:	f001 fd61 	bl	8002bc6 <HAL_SPI_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <LCD_WR_DATA+0x34>
		Error_Handler();
 800110a:	f000 fbb1 	bl	8001870 <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <ILI9341_InitWindowsWithFont>:
{
	spiDmaTransferComplete = 1;
}
*/

void ILI9341_InitWindowsWithFont(SPI_HandleTypeDef hspi3, uint16_t color){
 800111c:	b084      	sub	sp, #16
 800111e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001120:	b099      	sub	sp, #100	@ 0x64
 8001122:	af16      	add	r7, sp, #88	@ 0x58
 8001124:	f107 0420 	add.w	r4, r7, #32
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 800112c:	466b      	mov	r3, sp
 800112e:	f107 0120 	add.w	r1, r7, #32
 8001132:	2258      	movs	r2, #88	@ 0x58
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f8fa 	bl	800332e <memcpy>
 800113a:	f240 133f 	movw	r3, #319	@ 0x13f
 800113e:	22ef      	movs	r2, #239	@ 0xef
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fe7f 	bl	8000e46 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001148:	2300      	movs	r3, #0
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	e01c      	b.n	8001188 <ILI9341_InitWindowsWithFont+0x6c>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	e013      	b.n	800117c <ILI9341_InitWindowsWithFont+0x60>
			ILI9341_WritePixel(x, y, color, hspi3);
 8001154:	f8b7 6078 	ldrh.w	r6, [r7, #120]	@ 0x78
 8001158:	88bd      	ldrh	r5, [r7, #4]
 800115a:	88fc      	ldrh	r4, [r7, #6]
 800115c:	4668      	mov	r0, sp
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2254      	movs	r2, #84	@ 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	f002 f8e2 	bl	800332e <memcpy>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	4632      	mov	r2, r6
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff15 	bl	8000fa0 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	80bb      	strh	r3, [r7, #4]
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2bef      	cmp	r3, #239	@ 0xef
 8001180:	d9e8      	bls.n	8001154 <ILI9341_InitWindowsWithFont+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800118e:	d3de      	bcc.n	800114e <ILI9341_InitWindowsWithFont+0x32>
		}
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bgcolor, SPI_HandleTypeDef hspi3) {
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b0a3      	sub	sp, #140	@ 0x8c
 80011a4:	af1a      	add	r7, sp, #104	@ 0x68
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	4603      	mov	r3, r0
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	4613      	mov	r3, r2
 80011bc:	803b      	strh	r3, [r7, #0]
	if (c < 32 || c > 126) {
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	d902      	bls.n	80011ca <ILI9341_DrawChar+0x2a>
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80011c8:	d901      	bls.n	80011ce <ILI9341_DrawChar+0x2e>
	        c = '?'; // Si le caractère n'est pas supporté
 80011ca:	233f      	movs	r3, #63	@ 0x3f
 80011cc:	70fb      	strb	r3, [r7, #3]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f1a3 0220 	sub.w	r2, r3, #32
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	4a3c      	ldr	r2, [pc, #240]	@ (80012cc <ILI9341_DrawChar+0x12c>)
 80011dc:	4413      	add	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 80011e0:	2307      	movs	r3, #7
 80011e2:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 80011e4:	231e      	movs	r3, #30
 80011e6:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e042      	b.n	8001274 <ILI9341_DrawChar+0xd4>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	e039      	b.n	8001268 <ILI9341_DrawChar+0xc8>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa42 f303 	asr.w	r3, r2, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <ILI9341_DrawChar+0x98>
				ILI9341_WritePixelsFullHeight(x, y, i, j, scaleX, scaleY, color, hspi3);
 800120c:	88bd      	ldrh	r5, [r7, #4]
 800120e:	88fc      	ldrh	r4, [r7, #6]
 8001210:	a803      	add	r0, sp, #12
 8001212:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001216:	2258      	movs	r2, #88	@ 0x58
 8001218:	4619      	mov	r1, r3
 800121a:	f002 f888 	bl	800332e <memcpy>
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4629      	mov	r1, r5
 8001230:	4620      	mov	r0, r4
 8001232:	f000 f89f 	bl	8001374 <ILI9341_WritePixelsFullHeight>
 8001236:	e014      	b.n	8001262 <ILI9341_DrawChar+0xc2>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, y, i, j, scaleX, scaleY, bgcolor, hspi3);
 8001238:	88bd      	ldrh	r5, [r7, #4]
 800123a:	88fc      	ldrh	r4, [r7, #6]
 800123c:	a803      	add	r0, sp, #12
 800123e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001242:	2258      	movs	r2, #88	@ 0x58
 8001244:	4619      	mov	r1, r3
 8001246:	f002 f872 	bl	800332e <memcpy>
 800124a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	4629      	mov	r1, r5
 800125c:	4620      	mov	r0, r4
 800125e:	f000 f889 	bl	8001374 <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	3301      	adds	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b04      	cmp	r3, #4
 800126c:	ddc2      	ble.n	80011f4 <ILI9341_DrawChar+0x54>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b07      	cmp	r3, #7
 8001278:	ddb9      	ble.n	80011ee <ILI9341_DrawChar+0x4e>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e01c      	b.n	80012ba <ILI9341_DrawChar+0x11a>
        ILI9341_WritePixel(x + 5, y + j, bgcolor, hspi3);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	3305      	adds	r3, #5
 8001284:	b29c      	uxth	r4, r3
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800128a:	b29a      	uxth	r2, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	b29d      	uxth	r5, r3
 8001292:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 8001294:	4668      	mov	r0, sp
 8001296:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129a:	2254      	movs	r2, #84	@ 0x54
 800129c:	4619      	mov	r1, r3
 800129e:	f002 f846 	bl	800332e <memcpy>
 80012a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a4:	4632      	mov	r2, r6
 80012a6:	4629      	mov	r1, r5
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fe79 	bl	8000fa0 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 80012ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	75fb      	strb	r3, [r7, #23]
 80012ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	ddde      	ble.n	8001280 <ILI9341_DrawChar+0xe0>
    }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	@ 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	08003edc 	.word	0x08003edc

080012d0 <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str, uint16_t color, uint16_t bgcolor, SPI_HandleTypeDef hspi3) {
 80012d0:	b082      	sub	sp, #8
 80012d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d6:	b09c      	sub	sp, #112	@ 0x70
 80012d8:	af18      	add	r7, sp, #96	@ 0x60
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	803b      	strh	r3, [r7, #0]
	int cmpt = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
	uint16_t y = 20;
 80012ea:	2314      	movs	r3, #20
 80012ec:	813b      	strh	r3, [r7, #8]
	if (strlen(str) == 5)
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7fe ff76 	bl	80001e0 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d130      	bne.n	800135c <ILI9341_InitDrawString+0x8c>
	{
		while (*str)
 80012fa:	e02a      	b.n	8001352 <ILI9341_InitDrawString+0x82>
		{
			uint16_t x = MARGE_NUMBERS_X;
 80012fc:	2305      	movs	r3, #5
 80012fe:	817b      	strh	r3, [r7, #10]
			if (cmpt != 0){
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <ILI9341_InitDrawString+0x46>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	b29b      	uxth	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	0192      	lsls	r2, r2, #6
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	3305      	adds	r3, #5
 8001314:	817b      	strh	r3, [r7, #10]
			}

			ILI9341_DrawChar(x, y, *str, color, bgcolor, hspi3);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	781e      	ldrb	r6, [r3, #0]
 800131a:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 800131e:	893d      	ldrh	r5, [r7, #8]
 8001320:	897c      	ldrh	r4, [r7, #10]
 8001322:	a801      	add	r0, sp, #4
 8001324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001328:	2258      	movs	r2, #88	@ 0x58
 800132a:	4619      	mov	r1, r3
 800132c:	f001 ffff 	bl	800332e <memcpy>
 8001330:	883b      	ldrh	r3, [r7, #0]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4643      	mov	r3, r8
 8001336:	4632      	mov	r2, r6
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff ff30 	bl	80011a0 <ILI9341_DrawChar>
			x += 6; // Largeur d'un caractère (8 pixels + 1 pixel de marge)
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	3306      	adds	r3, #6
 8001344:	817b      	strh	r3, [r7, #10]
			str++;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1d0      	bne.n	80012fc <ILI9341_InitDrawString+0x2c>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 800135a:	e002      	b.n	8001362 <ILI9341_InitDrawString+0x92>
		printf("Erreur le string est composé de plus de 5 éléments");
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <ILI9341_InitDrawString+0xa0>)
 800135e:	f001 ff15 	bl	800318c <iprintf>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800136c:	b002      	add	sp, #8
 800136e:	4770      	bx	lr
 8001370:	08003e9c 	.word	0x08003e9c

08001374 <ILI9341_WritePixelsFullHeight>:

static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	b09d      	sub	sp, #116	@ 0x74
 8001378:	af16      	add	r7, sp, #88	@ 0x58
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4603      	mov	r3, r0
 8001380:	81fb      	strh	r3, [r7, #14]
 8001382:	460b      	mov	r3, r1
 8001384:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e034      	b.n	80013f6 <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	e02a      	b.n	80013e8 <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b29b      	uxth	r3, r3
 8001396:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001398:	fb12 f303 	smulbb	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29c      	uxth	r4, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013b2:	fb12 f303 	smulbb	r3, r2, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	89bb      	ldrh	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29d      	uxth	r5, r3
 80013c6:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 80013c8:	4668      	mov	r0, sp
 80013ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ce:	2254      	movs	r2, #84	@ 0x54
 80013d0:	4619      	mov	r1, r3
 80013d2:	f001 ffac 	bl	800332e <memcpy>
 80013d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013d8:	4632      	mov	r2, r6
 80013da:	4629      	mov	r1, r5
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fddf 	bl	8000fa0 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3301      	adds	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbd0      	blt.n	8001392 <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbc6      	blt.n	800138c <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001408 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8001408:	b084      	sub	sp, #16
 800140a:	b590      	push	{r4, r7, lr}
 800140c:	b097      	sub	sp, #92	@ 0x5c
 800140e:	af14      	add	r7, sp, #80	@ 0x50
 8001410:	4604      	mov	r4, r0
 8001412:	f107 001c 	add.w	r0, r7, #28
 8001416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800141a:	4623      	mov	r3, r4
 800141c:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d877      	bhi.n	8001514 <LCD_direction+0x10c>
 8001424:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <LCD_direction+0x24>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001473 	.word	0x08001473
 8001434:	080014a9 	.word	0x080014a9
 8001438:	080014df 	.word	0x080014df
	case ROTATE_0:
		LCD_WR_REG(0x36, hspi3);
 800143c:	4668      	mov	r0, sp
 800143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001442:	224c      	movs	r2, #76	@ 0x4c
 8001444:	4619      	mov	r1, r3
 8001446:	f001 ff72 	bl	800332e <memcpy>
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001450:	2036      	movs	r0, #54	@ 0x36
 8001452:	f7ff fe21 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x48, hspi3);
 8001456:	4668      	mov	r0, sp
 8001458:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145c:	224c      	movs	r2, #76	@ 0x4c
 800145e:	4619      	mov	r1, r3
 8001460:	f001 ff65 	bl	800332e <memcpy>
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146a:	2048      	movs	r0, #72	@ 0x48
 800146c:	f7ff fe35 	bl	80010da <LCD_WR_DATA>
		break;
 8001470:	e050      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_90:
		LCD_WR_REG(0x36, hspi3);
 8001472:	4668      	mov	r0, sp
 8001474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001478:	224c      	movs	r2, #76	@ 0x4c
 800147a:	4619      	mov	r1, r3
 800147c:	f001 ff57 	bl	800332e <memcpy>
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001486:	2036      	movs	r0, #54	@ 0x36
 8001488:	f7ff fe06 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x28, hspi3);
 800148c:	4668      	mov	r0, sp
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	224c      	movs	r2, #76	@ 0x4c
 8001494:	4619      	mov	r1, r3
 8001496:	f001 ff4a 	bl	800332e <memcpy>
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a0:	2028      	movs	r0, #40	@ 0x28
 80014a2:	f7ff fe1a 	bl	80010da <LCD_WR_DATA>
		break;
 80014a6:	e035      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_180:
		LCD_WR_REG(0x36, hspi3);
 80014a8:	4668      	mov	r0, sp
 80014aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ae:	224c      	movs	r2, #76	@ 0x4c
 80014b0:	4619      	mov	r1, r3
 80014b2:	f001 ff3c 	bl	800332e <memcpy>
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	2036      	movs	r0, #54	@ 0x36
 80014be:	f7ff fdeb 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x88, hspi3);
 80014c2:	4668      	mov	r0, sp
 80014c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c8:	224c      	movs	r2, #76	@ 0x4c
 80014ca:	4619      	mov	r1, r3
 80014cc:	f001 ff2f 	bl	800332e <memcpy>
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d6:	2088      	movs	r0, #136	@ 0x88
 80014d8:	f7ff fdff 	bl	80010da <LCD_WR_DATA>
		break;
 80014dc:	e01a      	b.n	8001514 <LCD_direction+0x10c>
	case ROTATE_270:
		LCD_WR_REG(0x36, hspi3);
 80014de:	4668      	mov	r0, sp
 80014e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e4:	224c      	movs	r2, #76	@ 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	f001 ff21 	bl	800332e <memcpy>
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f2:	2036      	movs	r0, #54	@ 0x36
 80014f4:	f7ff fdd0 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0xE8, hspi3);
 80014f8:	4668      	mov	r0, sp
 80014fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fe:	224c      	movs	r2, #76	@ 0x4c
 8001500:	4619      	mov	r1, r3
 8001502:	f001 ff14 	bl	800332e <memcpy>
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150c:	20e8      	movs	r0, #232	@ 0xe8
 800150e:	f7ff fde4 	bl	80010da <LCD_WR_DATA>
		break;
 8001512:	bf00      	nop
	}
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800151e:	b004      	add	sp, #16
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <RESET_L>:

static void RESET_L(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2180      	movs	r1, #128	@ 0x80
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <RESET_L+0x14>)
 800152e:	f000 fe43 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020400 	.word	0x40020400

0800153c <RESET_H>:

static void RESET_H(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2180      	movs	r1, #128	@ 0x80
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <RESET_H+0x14>)
 8001546:	f000 fe37 	bl	80021b8 <HAL_GPIO_WritePin>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400

08001554 <CS_L>:

static void CS_L(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <CS_L+0x14>)
 800155e:	f000 fe2b 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020400 	.word	0x40020400

0800156c <DC_L>:

static void DC_L(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001576:	4802      	ldr	r0, [pc, #8]	@ (8001580 <DC_L+0x14>)
 8001578:	f000 fe1e 	bl	80021b8 <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40020400 	.word	0x40020400

08001584 <DC_H>:

static void DC_H(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158e:	4802      	ldr	r0, [pc, #8]	@ (8001598 <DC_H+0x14>)
 8001590:	f000 fe12 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020400 	.word	0x40020400

0800159c <LED_H>:

static void LED_H(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b098      	sub	sp, #96	@ 0x60
 80015b0:	af16      	add	r7, sp, #88	@ 0x58
    /* MCU Configuration */
    HAL_Init();
 80015b2:	f000 fb01 	bl	8001bb8 <HAL_Init>

    SystemClock_Config();
 80015b6:	f000 f835 	bl	8001624 <SystemClock_Config>
    MX_GPIO_Init();
 80015ba:	f000 f8d3 	bl	8001764 <MX_GPIO_Init>
    MX_SPI3_Init();  // Initialisation SPI1 pour la communication avec l'écran
 80015be:	f000 f89b 	bl	80016f8 <MX_SPI3_Init>

    ILI9341_Init(hspi3);  // Initialisation de l'écran ILI9341
 80015c2:	4c16      	ldr	r4, [pc, #88]	@ (800161c <main+0x70>)
 80015c4:	4668      	mov	r0, sp
 80015c6:	f104 0310 	add.w	r3, r4, #16
 80015ca:	2248      	movs	r2, #72	@ 0x48
 80015cc:	4619      	mov	r1, r3
 80015ce:	f001 feae 	bl	800332e <memcpy>
 80015d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015d6:	f7fe ffd3 	bl	8000580 <ILI9341_Init>
    ILI9341_InitWindowsWithFont(hspi3, 0x0000);
 80015da:	4c10      	ldr	r4, [pc, #64]	@ (800161c <main+0x70>)
 80015dc:	2300      	movs	r3, #0
 80015de:	9312      	str	r3, [sp, #72]	@ 0x48
 80015e0:	4668      	mov	r0, sp
 80015e2:	f104 0310 	add.w	r3, r4, #16
 80015e6:	2248      	movs	r2, #72	@ 0x48
 80015e8:	4619      	mov	r1, r3
 80015ea:	f001 fea0 	bl	800332e <memcpy>
 80015ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015f2:	f7ff fd93 	bl	800111c <ILI9341_InitWindowsWithFont>

    // Affiche "AAAAAA" au centre de l'écran
    uint16_t text_color = 0xFFFF; // Blanc
 80015f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015fa:	80fb      	strh	r3, [r7, #6]
    ILI9341_InitDrawString("00:15", text_color, 0x0000, hspi3);
 80015fc:	4c07      	ldr	r4, [pc, #28]	@ (800161c <main+0x70>)
 80015fe:	88fd      	ldrh	r5, [r7, #6]
 8001600:	4668      	mov	r0, sp
 8001602:	1d23      	adds	r3, r4, #4
 8001604:	2254      	movs	r2, #84	@ 0x54
 8001606:	4619      	mov	r1, r3
 8001608:	f001 fe91 	bl	800332e <memcpy>
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	4629      	mov	r1, r5
 8001612:	4803      	ldr	r0, [pc, #12]	@ (8001620 <main+0x74>)
 8001614:	f7ff fe5c 	bl	80012d0 <ILI9341_InitDrawString>

    while (1) {
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <main+0x6c>
 800161c:	20000084 	.word	0x20000084
 8001620:	08003ed4 	.word	0x08003ed4

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	@ 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	@ 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f001 fdff 	bl	8003236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <SystemClock_Config+0xcc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	4a27      	ldr	r2, [pc, #156]	@ (80016f0 <SystemClock_Config+0xcc>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
 8001658:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <SystemClock_Config+0xcc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <SystemClock_Config+0xd0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a21      	ldr	r2, [pc, #132]	@ (80016f4 <SystemClock_Config+0xd0>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <SystemClock_Config+0xd0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001694:	2310      	movs	r3, #16
 8001696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800169e:	2304      	movs	r3, #4
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a2:	2304      	movs	r3, #4
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fd9e 	bl	80021ec <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016b6:	f000 f8db 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	230f      	movs	r3, #15
 80016bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016be:	2302      	movs	r3, #2
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2102      	movs	r1, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 f800 	bl	80026dc <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016e2:	f000 f8c5 	bl	8001870 <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3750      	adds	r7, #80	@ 0x50
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_SPI3_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <MX_SPI3_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <MX_SPI3_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_SPI3_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <MX_SPI3_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_SPI3_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <MX_SPI3_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <MX_SPI3_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001728:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MX_SPI3_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <MX_SPI3_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <MX_SPI3_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <MX_SPI3_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <MX_SPI3_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	@ (800175c <MX_SPI3_Init+0x64>)
 800174a:	f001 f9b3 	bl	8002ab4 <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 f88c 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000084 	.word	0x20000084
 8001760:	40003c00 	.word	0x40003c00

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <MX_GPIO_Init+0xfc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a37      	ldr	r2, [pc, #220]	@ (8001860 <MX_GPIO_Init+0xfc>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <MX_GPIO_Init+0xfc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b31      	ldr	r3, [pc, #196]	@ (8001860 <MX_GPIO_Init+0xfc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a30      	ldr	r2, [pc, #192]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <MX_GPIO_Init+0xfc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2120      	movs	r1, #32
 80017ee:	481d      	ldr	r0, [pc, #116]	@ (8001864 <MX_GPIO_Init+0x100>)
 80017f0:	f000 fce2 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80017fa:	481b      	ldr	r0, [pc, #108]	@ (8001868 <MX_GPIO_Init+0x104>)
 80017fc:	f000 fcdc 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001806:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4815      	ldr	r0, [pc, #84]	@ (800186c <MX_GPIO_Init+0x108>)
 8001818:	f000 fb4a 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181c:	2320      	movs	r3, #32
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	@ (8001864 <MX_GPIO_Init+0x100>)
 8001834:	f000 fb3c 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001838:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_GPIO_Init+0x104>)
 8001852:	f000 fb2d 	bl	8001eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	@ 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <Error_Handler+0x8>

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_MspInit+0x4c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <HAL_MspInit+0x4c>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <HAL_MspInit+0x4c>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ba:	2007      	movs	r0, #7
 80018bc:	f000 fac4 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a28      	ldr	r2, [pc, #160]	@ (800198c <HAL_SPI_MspInit+0xc0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d14a      	bne.n	8001984 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a26      	ldr	r2, [pc, #152]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 80018f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_SPI_MspInit+0xc4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001954:	2306      	movs	r3, #6
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	@ (8001994 <HAL_SPI_MspInit+0xc8>)
 8001960:	f000 faa6 	bl	8001eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001964:	2320      	movs	r3, #32
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001974:	2306      	movs	r3, #6
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	@ (8001998 <HAL_SPI_MspInit+0xcc>)
 8001980:	f000 fa96 	bl	8001eb0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40003c00 	.word	0x40003c00
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020400 	.word	0x40020400

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 f933 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00a      	b.n	8001a22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0c:	f3af 8000 	nop.w
 8001a10:	4601      	mov	r1, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	b2ca      	uxtb	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbf0      	blt.n	8001a0c <_read+0x12>
  }

  return len;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e009      	b.n	8001a5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbf1      	blt.n	8001a46 <_write+0x12>
  }
  return len;
 8001a62:	687b      	ldr	r3, [r7, #4]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_close>:

int _close(int file)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a94:	605a      	str	r2, [r3, #4]
  return 0;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_isatty>:

int _isatty(int file)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f001 fbe6 	bl	80032d4 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20020000 	.word	0x20020000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	200000dc 	.word	0x200000dc
 8001b3c:	20000230 	.word	0x20000230

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b68:	f7ff ffea 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f001 fba5 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff fd09 	bl	80015ac <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ba8:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 8001bac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001bb0:	20000230 	.word	0x20000230

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f931 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fe46 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f93b 	bl	8001e96 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f911 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	@ (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	200000e0 	.word	0x200000e0

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200000e0 	.word	0x200000e0

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff47 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff5c 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffb0 	bl	8001e04 <SysTick_Config>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e159      	b.n	8002180 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 8148 	bne.w	800217a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a2 	beq.w	800217a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b57      	ldr	r3, [pc, #348]	@ (8002198 <HAL_GPIO_Init+0x2e8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_GPIO_Init+0x2e8>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002044:	6453      	str	r3, [r2, #68]	@ 0x44
 8002046:	4b54      	ldr	r3, [pc, #336]	@ (8002198 <HAL_GPIO_Init+0x2e8>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_GPIO_Init+0x2ec>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a49      	ldr	r2, [pc, #292]	@ (80021a0 <HAL_GPIO_Init+0x2f0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x202>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a48      	ldr	r2, [pc, #288]	@ (80021a4 <HAL_GPIO_Init+0x2f4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x1fe>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a47      	ldr	r2, [pc, #284]	@ (80021a8 <HAL_GPIO_Init+0x2f8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x1fa>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a46      	ldr	r2, [pc, #280]	@ (80021ac <HAL_GPIO_Init+0x2fc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x1f6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a45      	ldr	r2, [pc, #276]	@ (80021b0 <HAL_GPIO_Init+0x300>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x1f2>
 800209e:	2304      	movs	r3, #4
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x204>
 80020b2:	2300      	movs	r3, #0
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f002 0203 	and.w	r2, r2, #3
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	4093      	lsls	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c4:	4935      	ldr	r1, [pc, #212]	@ (800219c <HAL_GPIO_Init+0x2ec>)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d2:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f6:	4a2f      	ldr	r2, [pc, #188]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020fc:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002120:	4a24      	ldr	r2, [pc, #144]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002126:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800214a:	4a1a      	ldr	r2, [pc, #104]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002174:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <HAL_GPIO_Init+0x304>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	f67f aea2 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3724      	adds	r7, #36	@ 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40013800 	.word	0x40013800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40013c00 	.word	0x40013c00

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e267      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d075      	beq.n	80022f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800220a:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d00c      	beq.n	8002230 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b85      	ldr	r3, [pc, #532]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800221e:	2b08      	cmp	r3, #8
 8002220:	d112      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002222:	4b82      	ldr	r3, [pc, #520]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800222e:	d10b      	bne.n	8002248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	4b7e      	ldr	r3, [pc, #504]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d05b      	beq.n	80022f4 <HAL_RCC_OscConfig+0x108>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d157      	bne.n	80022f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e242      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0x74>
 8002252:	4b76      	ldr	r3, [pc, #472]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a75      	ldr	r2, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e01d      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x98>
 800226a:	4b70      	ldr	r3, [pc, #448]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6f      	ldr	r2, [pc, #444]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6c      	ldr	r2, [pc, #432]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0xb0>
 8002284:	4b69      	ldr	r3, [pc, #420]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a68      	ldr	r2, [pc, #416]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800228a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b66      	ldr	r3, [pc, #408]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a65      	ldr	r2, [pc, #404]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff fcee 	bl	8001c84 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff fcea 	bl	8001c84 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	@ 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e207      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b5b      	ldr	r3, [pc, #364]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xc0>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fcda 	bl	8001c84 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fcd6 	bl	8001c84 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	@ 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1f3      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	4b51      	ldr	r3, [pc, #324]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0xe8>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002302:	4b4a      	ldr	r3, [pc, #296]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b47      	ldr	r3, [pc, #284]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002316:	2b08      	cmp	r3, #8
 8002318:	d11c      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231a:	4b44      	ldr	r3, [pc, #272]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1c7      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4937      	ldr	r1, [pc, #220]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	e03a      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	4b34      	ldr	r3, [pc, #208]	@ (8002430 <HAL_RCC_OscConfig+0x244>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff fc8f 	bl	8001c84 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff fc8b 	bl	8001c84 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e1a8      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4925      	ldr	r1, [pc, #148]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <HAL_RCC_OscConfig+0x244>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff fc6e 	bl	8001c84 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ac:	f7ff fc6a 	bl	8001c84 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e187      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d036      	beq.n	8002444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_RCC_OscConfig+0x248>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff fc4e 	bl	8001c84 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff fc4a 	bl	8001c84 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e167      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_RCC_OscConfig+0x240>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x200>
 800240a:	e01b      	b.n	8002444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_OscConfig+0x248>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fc37 	bl	8001c84 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	e00e      	b.n	8002438 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7ff fc33 	bl	8001c84 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d907      	bls.n	8002438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e150      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	42470000 	.word	0x42470000
 8002434:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	4b88      	ldr	r3, [pc, #544]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1ea      	bne.n	800241a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8097 	beq.w	8002580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b81      	ldr	r3, [pc, #516]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b7d      	ldr	r3, [pc, #500]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	4a7c      	ldr	r2, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	@ 0x40
 8002472:	4b7a      	ldr	r3, [pc, #488]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b77      	ldr	r3, [pc, #476]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b74      	ldr	r3, [pc, #464]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a73      	ldr	r2, [pc, #460]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7ff fbf3 	bl	8001c84 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7ff fbef 	bl	8001c84 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e10c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_OscConfig+0x474>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2ea>
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024cc:	4a63      	ldr	r2, [pc, #396]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x30c>
 80024de:	4b5f      	ldr	r3, [pc, #380]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e2:	4a5e      	ldr	r2, [pc, #376]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	4a5b      	ldr	r2, [pc, #364]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0x324>
 80024f8:	4b58      	ldr	r3, [pc, #352]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fc:	4a57      	ldr	r2, [pc, #348]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6713      	str	r3, [r2, #112]	@ 0x70
 8002504:	4b55      	ldr	r3, [pc, #340]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	4a54      	ldr	r2, [pc, #336]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7ff fbb4 	bl	8001c84 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7ff fbb0 	bl	8001c84 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0cb      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ee      	beq.n	8002520 <HAL_RCC_OscConfig+0x334>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7ff fb9e 	bl	8001c84 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7ff fb9a 	bl	8001c84 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0b5      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002562:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ee      	bne.n	800254c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b39      	ldr	r3, [pc, #228]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	4a38      	ldr	r2, [pc, #224]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a1 	beq.w	80026cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d05c      	beq.n	8002650 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d141      	bne.n	8002622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_RCC_OscConfig+0x478>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb6e 	bl	8001c84 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fb6a 	bl	8001c84 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e087      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b27      	ldr	r3, [pc, #156]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	3b01      	subs	r3, #1
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	491b      	ldr	r1, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x478>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff fb43 	bl	8001c84 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff fb3f 	bl	8001c84 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e05c      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x416>
 8002620:	e054      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_RCC_OscConfig+0x478>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff fb2c 	bl	8001c84 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff fb28 	bl	8001c84 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e045      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_RCC_OscConfig+0x470>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x444>
 800264e:	e03d      	b.n	80026cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e038      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x4ec>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d028      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d121      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d11a      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002698:	4013      	ands	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800269e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	3b01      	subs	r3, #1
 80026b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0cc      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d90c      	bls.n	8002718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d044      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b3f      	ldr	r3, [pc, #252]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e067      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4934      	ldr	r1, [pc, #208]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7ff fa5a 	bl	8001c84 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7ff fa56 	bl	8001c84 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e04f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b25      	ldr	r3, [pc, #148]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d20c      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b22      	ldr	r3, [pc, #136]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f9ba 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	080040bc 	.word	0x080040bc
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b094      	sub	sp, #80	@ 0x50
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b79      	ldr	r3, [pc, #484]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80e1 	bhi.w	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e0db      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b73      	ldr	r3, [pc, #460]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e0:	e0db      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e6:	e0d8      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002908:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	633b      	str	r3, [r7, #48]	@ 0x30
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	@ 0x34
 8002916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4621      	mov	r1, r4
 8002934:	1a51      	subs	r1, r2, r1
 8002936:	6139      	str	r1, [r7, #16]
 8002938:	4629      	mov	r1, r5
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	018b      	lsls	r3, r1, #6
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002956:	4651      	mov	r1, sl
 8002958:	018a      	lsls	r2, r1, #6
 800295a:	4651      	mov	r1, sl
 800295c:	ebb2 0801 	subs.w	r8, r2, r1
 8002960:	4659      	mov	r1, fp
 8002962:	eb63 0901 	sbc.w	r9, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb18 0303 	adds.w	r3, r8, r3
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	462b      	mov	r3, r5
 8002988:	eb49 0303 	adc.w	r3, r9, r3
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299a:	4629      	mov	r1, r5
 800299c:	024b      	lsls	r3, r1, #9
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a4:	4621      	mov	r1, r4
 80029a6:	024a      	lsls	r2, r1, #9
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029b8:	f7fd fc6a 	bl	8000290 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b38      	ldr	r3, [pc, #224]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	2200      	movs	r2, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	4611      	mov	r1, r2
 80029d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
 80029dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0159      	lsls	r1, r3, #5
 80029ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f2:	0150      	lsls	r0, r2, #5
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4641      	mov	r1, r8
 80029fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a18:	ebb2 040a 	subs.w	r4, r2, sl
 8002a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	00eb      	lsls	r3, r5, #3
 8002a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	4614      	mov	r4, r2
 8002a32:	461d      	mov	r5, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	18e3      	adds	r3, r4, r3
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	eb45 0303 	adc.w	r3, r5, r3
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	028b      	lsls	r3, r1, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a58:	4621      	mov	r1, r4
 8002a5a:	028a      	lsls	r2, r1, #10
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	61fa      	str	r2, [r7, #28]
 8002a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6c:	f7fd fc10 	bl	8000290 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3750      	adds	r7, #80	@ 0x50
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07b      	b.n	8002bbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ad6:	d009      	beq.n	8002aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
 8002ade:	e005      	b.n	8002aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fee0 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	f003 0104 	and.w	r1, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	f003 0210 	and.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b088      	sub	sp, #32
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd6:	f7ff f855 	bl	8001c84 <HAL_GetTick>
 8002bda:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d001      	beq.n	8002bf0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
 8002bee:	e12a      	b.n	8002e46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Transmit+0x36>
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e122      	b.n	8002e46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_SPI_Transmit+0x48>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e11b      	b.n	8002e46 <HAL_SPI_Transmit+0x280>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c5c:	d10f      	bne.n	8002c7e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	2b40      	cmp	r3, #64	@ 0x40
 8002c8a:	d007      	beq.n	8002c9c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ca4:	d152      	bne.n	8002d4c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_SPI_Transmit+0xee>
 8002cae:	8b7b      	ldrh	r3, [r7, #26]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d145      	bne.n	8002d40 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cd8:	e032      	b.n	8002d40 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d112      	bne.n	8002d0e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	1c9a      	adds	r2, r3, #2
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d0c:	e018      	b.n	8002d40 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d0e:	f7fe ffb9 	bl	8001c84 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d803      	bhi.n	8002d26 <HAL_SPI_Transmit+0x160>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d102      	bne.n	8002d2c <HAL_SPI_Transmit+0x166>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e082      	b.n	8002e46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1c7      	bne.n	8002cda <HAL_SPI_Transmit+0x114>
 8002d4a:	e053      	b.n	8002df4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_SPI_Transmit+0x194>
 8002d54:	8b7b      	ldrh	r3, [r7, #26]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d147      	bne.n	8002dea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	7812      	ldrb	r2, [r2, #0]
 8002d66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d80:	e033      	b.n	8002dea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d113      	bne.n	8002db8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	7812      	ldrb	r2, [r2, #0]
 8002d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002db6:	e018      	b.n	8002dea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002db8:	f7fe ff64 	bl	8001c84 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d803      	bhi.n	8002dd0 <HAL_SPI_Transmit+0x20a>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d102      	bne.n	8002dd6 <HAL_SPI_Transmit+0x210>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e02d      	b.n	8002e46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1c6      	bne.n	8002d82 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	6839      	ldr	r1, [r7, #0]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f8b1 	bl	8002f60 <SPI_EndRxTxTransaction>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e60:	f7fe ff10 	bl	8001c84 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e70:	f7fe ff08 	bl	8001c84 <HAL_GetTick>
 8002e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e76:	4b39      	ldr	r3, [pc, #228]	@ (8002f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	0d1b      	lsrs	r3, r3, #20
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	fb02 f303 	mul.w	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e86:	e054      	b.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d050      	beq.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e90:	f7fe fef8 	bl	8001c84 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d902      	bls.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d13d      	bne.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ebe:	d111      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec8:	d004      	beq.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed2:	d107      	bne.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eec:	d10f      	bne.n	8002f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e017      	b.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d19b      	bne.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2201      	movs	r2, #1
 8002f74:	2102      	movs	r1, #2
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff ff6a 	bl	8002e50 <SPI_WaitFlagStateUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e032      	b.n	8002ff8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f92:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <SPI_EndRxTxTransaction+0xa0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <SPI_EndRxTxTransaction+0xa4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0d5b      	lsrs	r3, r3, #21
 8002f9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fb0:	d112      	bne.n	8002fd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2180      	movs	r1, #128	@ 0x80
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff ff47 	bl	8002e50 <SPI_WaitFlagStateUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d016      	beq.n	8002ff6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e00f      	b.n	8002ff8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	2b80      	cmp	r3, #128	@ 0x80
 8002ff0:	d0f2      	beq.n	8002fd8 <SPI_EndRxTxTransaction+0x78>
 8002ff2:	e000      	b.n	8002ff6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ff4:	bf00      	nop
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000000 	.word	0x20000000
 8003004:	165e9f81 	.word	0x165e9f81

08003008 <std>:
 8003008:	2300      	movs	r3, #0
 800300a:	b510      	push	{r4, lr}
 800300c:	4604      	mov	r4, r0
 800300e:	e9c0 3300 	strd	r3, r3, [r0]
 8003012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003016:	6083      	str	r3, [r0, #8]
 8003018:	8181      	strh	r1, [r0, #12]
 800301a:	6643      	str	r3, [r0, #100]	@ 0x64
 800301c:	81c2      	strh	r2, [r0, #14]
 800301e:	6183      	str	r3, [r0, #24]
 8003020:	4619      	mov	r1, r3
 8003022:	2208      	movs	r2, #8
 8003024:	305c      	adds	r0, #92	@ 0x5c
 8003026:	f000 f906 	bl	8003236 <memset>
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <std+0x58>)
 800302c:	6263      	str	r3, [r4, #36]	@ 0x24
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <std+0x5c>)
 8003030:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <std+0x60>)
 8003034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <std+0x64>)
 8003038:	6323      	str	r3, [r4, #48]	@ 0x30
 800303a:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <std+0x68>)
 800303c:	6224      	str	r4, [r4, #32]
 800303e:	429c      	cmp	r4, r3
 8003040:	d006      	beq.n	8003050 <std+0x48>
 8003042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003046:	4294      	cmp	r4, r2
 8003048:	d002      	beq.n	8003050 <std+0x48>
 800304a:	33d0      	adds	r3, #208	@ 0xd0
 800304c:	429c      	cmp	r4, r3
 800304e:	d105      	bne.n	800305c <std+0x54>
 8003050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003058:	f000 b966 	b.w	8003328 <__retarget_lock_init_recursive>
 800305c:	bd10      	pop	{r4, pc}
 800305e:	bf00      	nop
 8003060:	080031b1 	.word	0x080031b1
 8003064:	080031d3 	.word	0x080031d3
 8003068:	0800320b 	.word	0x0800320b
 800306c:	0800322f 	.word	0x0800322f
 8003070:	200000e4 	.word	0x200000e4

08003074 <stdio_exit_handler>:
 8003074:	4a02      	ldr	r2, [pc, #8]	@ (8003080 <stdio_exit_handler+0xc>)
 8003076:	4903      	ldr	r1, [pc, #12]	@ (8003084 <stdio_exit_handler+0x10>)
 8003078:	4803      	ldr	r0, [pc, #12]	@ (8003088 <stdio_exit_handler+0x14>)
 800307a:	f000 b869 	b.w	8003150 <_fwalk_sglue>
 800307e:	bf00      	nop
 8003080:	2000000c 	.word	0x2000000c
 8003084:	08003be5 	.word	0x08003be5
 8003088:	2000001c 	.word	0x2000001c

0800308c <cleanup_stdio>:
 800308c:	6841      	ldr	r1, [r0, #4]
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <cleanup_stdio+0x34>)
 8003090:	4299      	cmp	r1, r3
 8003092:	b510      	push	{r4, lr}
 8003094:	4604      	mov	r4, r0
 8003096:	d001      	beq.n	800309c <cleanup_stdio+0x10>
 8003098:	f000 fda4 	bl	8003be4 <_fflush_r>
 800309c:	68a1      	ldr	r1, [r4, #8]
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <cleanup_stdio+0x38>)
 80030a0:	4299      	cmp	r1, r3
 80030a2:	d002      	beq.n	80030aa <cleanup_stdio+0x1e>
 80030a4:	4620      	mov	r0, r4
 80030a6:	f000 fd9d 	bl	8003be4 <_fflush_r>
 80030aa:	68e1      	ldr	r1, [r4, #12]
 80030ac:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <cleanup_stdio+0x3c>)
 80030ae:	4299      	cmp	r1, r3
 80030b0:	d004      	beq.n	80030bc <cleanup_stdio+0x30>
 80030b2:	4620      	mov	r0, r4
 80030b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030b8:	f000 bd94 	b.w	8003be4 <_fflush_r>
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	bf00      	nop
 80030c0:	200000e4 	.word	0x200000e4
 80030c4:	2000014c 	.word	0x2000014c
 80030c8:	200001b4 	.word	0x200001b4

080030cc <global_stdio_init.part.0>:
 80030cc:	b510      	push	{r4, lr}
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <global_stdio_init.part.0+0x30>)
 80030d0:	4c0b      	ldr	r4, [pc, #44]	@ (8003100 <global_stdio_init.part.0+0x34>)
 80030d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <global_stdio_init.part.0+0x38>)
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4620      	mov	r0, r4
 80030d8:	2200      	movs	r2, #0
 80030da:	2104      	movs	r1, #4
 80030dc:	f7ff ff94 	bl	8003008 <std>
 80030e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80030e4:	2201      	movs	r2, #1
 80030e6:	2109      	movs	r1, #9
 80030e8:	f7ff ff8e 	bl	8003008 <std>
 80030ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80030f0:	2202      	movs	r2, #2
 80030f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f6:	2112      	movs	r1, #18
 80030f8:	f7ff bf86 	b.w	8003008 <std>
 80030fc:	2000021c 	.word	0x2000021c
 8003100:	200000e4 	.word	0x200000e4
 8003104:	08003075 	.word	0x08003075

08003108 <__sfp_lock_acquire>:
 8003108:	4801      	ldr	r0, [pc, #4]	@ (8003110 <__sfp_lock_acquire+0x8>)
 800310a:	f000 b90e 	b.w	800332a <__retarget_lock_acquire_recursive>
 800310e:	bf00      	nop
 8003110:	20000225 	.word	0x20000225

08003114 <__sfp_lock_release>:
 8003114:	4801      	ldr	r0, [pc, #4]	@ (800311c <__sfp_lock_release+0x8>)
 8003116:	f000 b909 	b.w	800332c <__retarget_lock_release_recursive>
 800311a:	bf00      	nop
 800311c:	20000225 	.word	0x20000225

08003120 <__sinit>:
 8003120:	b510      	push	{r4, lr}
 8003122:	4604      	mov	r4, r0
 8003124:	f7ff fff0 	bl	8003108 <__sfp_lock_acquire>
 8003128:	6a23      	ldr	r3, [r4, #32]
 800312a:	b11b      	cbz	r3, 8003134 <__sinit+0x14>
 800312c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003130:	f7ff bff0 	b.w	8003114 <__sfp_lock_release>
 8003134:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <__sinit+0x28>)
 8003136:	6223      	str	r3, [r4, #32]
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <__sinit+0x2c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f5      	bne.n	800312c <__sinit+0xc>
 8003140:	f7ff ffc4 	bl	80030cc <global_stdio_init.part.0>
 8003144:	e7f2      	b.n	800312c <__sinit+0xc>
 8003146:	bf00      	nop
 8003148:	0800308d 	.word	0x0800308d
 800314c:	2000021c 	.word	0x2000021c

08003150 <_fwalk_sglue>:
 8003150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003154:	4607      	mov	r7, r0
 8003156:	4688      	mov	r8, r1
 8003158:	4614      	mov	r4, r2
 800315a:	2600      	movs	r6, #0
 800315c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003160:	f1b9 0901 	subs.w	r9, r9, #1
 8003164:	d505      	bpl.n	8003172 <_fwalk_sglue+0x22>
 8003166:	6824      	ldr	r4, [r4, #0]
 8003168:	2c00      	cmp	r4, #0
 800316a:	d1f7      	bne.n	800315c <_fwalk_sglue+0xc>
 800316c:	4630      	mov	r0, r6
 800316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003172:	89ab      	ldrh	r3, [r5, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d907      	bls.n	8003188 <_fwalk_sglue+0x38>
 8003178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800317c:	3301      	adds	r3, #1
 800317e:	d003      	beq.n	8003188 <_fwalk_sglue+0x38>
 8003180:	4629      	mov	r1, r5
 8003182:	4638      	mov	r0, r7
 8003184:	47c0      	blx	r8
 8003186:	4306      	orrs	r6, r0
 8003188:	3568      	adds	r5, #104	@ 0x68
 800318a:	e7e9      	b.n	8003160 <_fwalk_sglue+0x10>

0800318c <iprintf>:
 800318c:	b40f      	push	{r0, r1, r2, r3}
 800318e:	b507      	push	{r0, r1, r2, lr}
 8003190:	4906      	ldr	r1, [pc, #24]	@ (80031ac <iprintf+0x20>)
 8003192:	ab04      	add	r3, sp, #16
 8003194:	6808      	ldr	r0, [r1, #0]
 8003196:	f853 2b04 	ldr.w	r2, [r3], #4
 800319a:	6881      	ldr	r1, [r0, #8]
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	f000 f9f7 	bl	8003590 <_vfiprintf_r>
 80031a2:	b003      	add	sp, #12
 80031a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a8:	b004      	add	sp, #16
 80031aa:	4770      	bx	lr
 80031ac:	20000018 	.word	0x20000018

080031b0 <__sread>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	460c      	mov	r4, r1
 80031b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b8:	f000 f868 	bl	800328c <_read_r>
 80031bc:	2800      	cmp	r0, #0
 80031be:	bfab      	itete	ge
 80031c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031c2:	89a3      	ldrhlt	r3, [r4, #12]
 80031c4:	181b      	addge	r3, r3, r0
 80031c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031ca:	bfac      	ite	ge
 80031cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031ce:	81a3      	strhlt	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__swrite>:
 80031d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	461f      	mov	r7, r3
 80031d8:	898b      	ldrh	r3, [r1, #12]
 80031da:	05db      	lsls	r3, r3, #23
 80031dc:	4605      	mov	r5, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	4616      	mov	r6, r2
 80031e2:	d505      	bpl.n	80031f0 <__swrite+0x1e>
 80031e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e8:	2302      	movs	r3, #2
 80031ea:	2200      	movs	r2, #0
 80031ec:	f000 f83c 	bl	8003268 <_lseek_r>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031fa:	81a3      	strh	r3, [r4, #12]
 80031fc:	4632      	mov	r2, r6
 80031fe:	463b      	mov	r3, r7
 8003200:	4628      	mov	r0, r5
 8003202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003206:	f000 b853 	b.w	80032b0 <_write_r>

0800320a <__sseek>:
 800320a:	b510      	push	{r4, lr}
 800320c:	460c      	mov	r4, r1
 800320e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003212:	f000 f829 	bl	8003268 <_lseek_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	bf15      	itete	ne
 800321c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800321e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003226:	81a3      	strheq	r3, [r4, #12]
 8003228:	bf18      	it	ne
 800322a:	81a3      	strhne	r3, [r4, #12]
 800322c:	bd10      	pop	{r4, pc}

0800322e <__sclose>:
 800322e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003232:	f000 b809 	b.w	8003248 <_close_r>

08003236 <memset>:
 8003236:	4402      	add	r2, r0
 8003238:	4603      	mov	r3, r0
 800323a:	4293      	cmp	r3, r2
 800323c:	d100      	bne.n	8003240 <memset+0xa>
 800323e:	4770      	bx	lr
 8003240:	f803 1b01 	strb.w	r1, [r3], #1
 8003244:	e7f9      	b.n	800323a <memset+0x4>
	...

08003248 <_close_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	4d06      	ldr	r5, [pc, #24]	@ (8003264 <_close_r+0x1c>)
 800324c:	2300      	movs	r3, #0
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	f7fe fc0a 	bl	8001a6c <_close>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_close_r+0x1a>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b103      	cbz	r3, 8003262 <_close_r+0x1a>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000220 	.word	0x20000220

08003268 <_lseek_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4d07      	ldr	r5, [pc, #28]	@ (8003288 <_lseek_r+0x20>)
 800326c:	4604      	mov	r4, r0
 800326e:	4608      	mov	r0, r1
 8003270:	4611      	mov	r1, r2
 8003272:	2200      	movs	r2, #0
 8003274:	602a      	str	r2, [r5, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f7fe fc1f 	bl	8001aba <_lseek>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_lseek_r+0x1e>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	b103      	cbz	r3, 8003286 <_lseek_r+0x1e>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	20000220 	.word	0x20000220

0800328c <_read_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4d07      	ldr	r5, [pc, #28]	@ (80032ac <_read_r+0x20>)
 8003290:	4604      	mov	r4, r0
 8003292:	4608      	mov	r0, r1
 8003294:	4611      	mov	r1, r2
 8003296:	2200      	movs	r2, #0
 8003298:	602a      	str	r2, [r5, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	f7fe fbad 	bl	80019fa <_read>
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d102      	bne.n	80032aa <_read_r+0x1e>
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	b103      	cbz	r3, 80032aa <_read_r+0x1e>
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	20000220 	.word	0x20000220

080032b0 <_write_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	4d07      	ldr	r5, [pc, #28]	@ (80032d0 <_write_r+0x20>)
 80032b4:	4604      	mov	r4, r0
 80032b6:	4608      	mov	r0, r1
 80032b8:	4611      	mov	r1, r2
 80032ba:	2200      	movs	r2, #0
 80032bc:	602a      	str	r2, [r5, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	f7fe fbb8 	bl	8001a34 <_write>
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	d102      	bne.n	80032ce <_write_r+0x1e>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	b103      	cbz	r3, 80032ce <_write_r+0x1e>
 80032cc:	6023      	str	r3, [r4, #0]
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
 80032d0:	20000220 	.word	0x20000220

080032d4 <__errno>:
 80032d4:	4b01      	ldr	r3, [pc, #4]	@ (80032dc <__errno+0x8>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000018 	.word	0x20000018

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003318 <__libc_init_array+0x38>)
 80032e4:	4c0d      	ldr	r4, [pc, #52]	@ (800331c <__libc_init_array+0x3c>)
 80032e6:	1b64      	subs	r4, r4, r5
 80032e8:	10a4      	asrs	r4, r4, #2
 80032ea:	2600      	movs	r6, #0
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003320 <__libc_init_array+0x40>)
 80032f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003324 <__libc_init_array+0x44>)
 80032f4:	f000 fdc6 	bl	8003e84 <_init>
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	2600      	movs	r6, #0
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f855 3b04 	ldr.w	r3, [r5], #4
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08004108 	.word	0x08004108
 800331c:	08004108 	.word	0x08004108
 8003320:	08004108 	.word	0x08004108
 8003324:	0800410c 	.word	0x0800410c

08003328 <__retarget_lock_init_recursive>:
 8003328:	4770      	bx	lr

0800332a <__retarget_lock_acquire_recursive>:
 800332a:	4770      	bx	lr

0800332c <__retarget_lock_release_recursive>:
 800332c:	4770      	bx	lr

0800332e <memcpy>:
 800332e:	440a      	add	r2, r1
 8003330:	4291      	cmp	r1, r2
 8003332:	f100 33ff 	add.w	r3, r0, #4294967295
 8003336:	d100      	bne.n	800333a <memcpy+0xc>
 8003338:	4770      	bx	lr
 800333a:	b510      	push	{r4, lr}
 800333c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003344:	4291      	cmp	r1, r2
 8003346:	d1f9      	bne.n	800333c <memcpy+0xe>
 8003348:	bd10      	pop	{r4, pc}
	...

0800334c <_free_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	2900      	cmp	r1, #0
 8003352:	d041      	beq.n	80033d8 <_free_r+0x8c>
 8003354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003358:	1f0c      	subs	r4, r1, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	18e4      	addlt	r4, r4, r3
 8003360:	f000 f8e0 	bl	8003524 <__malloc_lock>
 8003364:	4a1d      	ldr	r2, [pc, #116]	@ (80033dc <_free_r+0x90>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	b933      	cbnz	r3, 8003378 <_free_r+0x2c>
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6014      	str	r4, [r2, #0]
 800336e:	4628      	mov	r0, r5
 8003370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003374:	f000 b8dc 	b.w	8003530 <__malloc_unlock>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d908      	bls.n	800338e <_free_r+0x42>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	1821      	adds	r1, r4, r0
 8003380:	428b      	cmp	r3, r1
 8003382:	bf01      	itttt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	1809      	addeq	r1, r1, r0
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	e7ed      	b.n	800336a <_free_r+0x1e>
 800338e:	461a      	mov	r2, r3
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b10b      	cbz	r3, 8003398 <_free_r+0x4c>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d9fa      	bls.n	800338e <_free_r+0x42>
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	1850      	adds	r0, r2, r1
 800339c:	42a0      	cmp	r0, r4
 800339e:	d10b      	bne.n	80033b8 <_free_r+0x6c>
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	4401      	add	r1, r0
 80033a4:	1850      	adds	r0, r2, r1
 80033a6:	4283      	cmp	r3, r0
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	d1e0      	bne.n	800336e <_free_r+0x22>
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	6053      	str	r3, [r2, #4]
 80033b2:	4408      	add	r0, r1
 80033b4:	6010      	str	r0, [r2, #0]
 80033b6:	e7da      	b.n	800336e <_free_r+0x22>
 80033b8:	d902      	bls.n	80033c0 <_free_r+0x74>
 80033ba:	230c      	movs	r3, #12
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	e7d6      	b.n	800336e <_free_r+0x22>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf04      	itt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	6063      	str	r3, [r4, #4]
 80033ce:	bf04      	itt	eq
 80033d0:	1809      	addeq	r1, r1, r0
 80033d2:	6021      	streq	r1, [r4, #0]
 80033d4:	6054      	str	r4, [r2, #4]
 80033d6:	e7ca      	b.n	800336e <_free_r+0x22>
 80033d8:	bd38      	pop	{r3, r4, r5, pc}
 80033da:	bf00      	nop
 80033dc:	2000022c 	.word	0x2000022c

080033e0 <sbrk_aligned>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003420 <sbrk_aligned+0x40>)
 80033e4:	460c      	mov	r4, r1
 80033e6:	6831      	ldr	r1, [r6, #0]
 80033e8:	4605      	mov	r5, r0
 80033ea:	b911      	cbnz	r1, 80033f2 <sbrk_aligned+0x12>
 80033ec:	f000 fcb6 	bl	8003d5c <_sbrk_r>
 80033f0:	6030      	str	r0, [r6, #0]
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 fcb1 	bl	8003d5c <_sbrk_r>
 80033fa:	1c43      	adds	r3, r0, #1
 80033fc:	d103      	bne.n	8003406 <sbrk_aligned+0x26>
 80033fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003402:	4620      	mov	r0, r4
 8003404:	bd70      	pop	{r4, r5, r6, pc}
 8003406:	1cc4      	adds	r4, r0, #3
 8003408:	f024 0403 	bic.w	r4, r4, #3
 800340c:	42a0      	cmp	r0, r4
 800340e:	d0f8      	beq.n	8003402 <sbrk_aligned+0x22>
 8003410:	1a21      	subs	r1, r4, r0
 8003412:	4628      	mov	r0, r5
 8003414:	f000 fca2 	bl	8003d5c <_sbrk_r>
 8003418:	3001      	adds	r0, #1
 800341a:	d1f2      	bne.n	8003402 <sbrk_aligned+0x22>
 800341c:	e7ef      	b.n	80033fe <sbrk_aligned+0x1e>
 800341e:	bf00      	nop
 8003420:	20000228 	.word	0x20000228

08003424 <_malloc_r>:
 8003424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003428:	1ccd      	adds	r5, r1, #3
 800342a:	f025 0503 	bic.w	r5, r5, #3
 800342e:	3508      	adds	r5, #8
 8003430:	2d0c      	cmp	r5, #12
 8003432:	bf38      	it	cc
 8003434:	250c      	movcc	r5, #12
 8003436:	2d00      	cmp	r5, #0
 8003438:	4606      	mov	r6, r0
 800343a:	db01      	blt.n	8003440 <_malloc_r+0x1c>
 800343c:	42a9      	cmp	r1, r5
 800343e:	d904      	bls.n	800344a <_malloc_r+0x26>
 8003440:	230c      	movs	r3, #12
 8003442:	6033      	str	r3, [r6, #0]
 8003444:	2000      	movs	r0, #0
 8003446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800344a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003520 <_malloc_r+0xfc>
 800344e:	f000 f869 	bl	8003524 <__malloc_lock>
 8003452:	f8d8 3000 	ldr.w	r3, [r8]
 8003456:	461c      	mov	r4, r3
 8003458:	bb44      	cbnz	r4, 80034ac <_malloc_r+0x88>
 800345a:	4629      	mov	r1, r5
 800345c:	4630      	mov	r0, r6
 800345e:	f7ff ffbf 	bl	80033e0 <sbrk_aligned>
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	4604      	mov	r4, r0
 8003466:	d158      	bne.n	800351a <_malloc_r+0xf6>
 8003468:	f8d8 4000 	ldr.w	r4, [r8]
 800346c:	4627      	mov	r7, r4
 800346e:	2f00      	cmp	r7, #0
 8003470:	d143      	bne.n	80034fa <_malloc_r+0xd6>
 8003472:	2c00      	cmp	r4, #0
 8003474:	d04b      	beq.n	800350e <_malloc_r+0xea>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	4639      	mov	r1, r7
 800347a:	4630      	mov	r0, r6
 800347c:	eb04 0903 	add.w	r9, r4, r3
 8003480:	f000 fc6c 	bl	8003d5c <_sbrk_r>
 8003484:	4581      	cmp	r9, r0
 8003486:	d142      	bne.n	800350e <_malloc_r+0xea>
 8003488:	6821      	ldr	r1, [r4, #0]
 800348a:	1a6d      	subs	r5, r5, r1
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f7ff ffa6 	bl	80033e0 <sbrk_aligned>
 8003494:	3001      	adds	r0, #1
 8003496:	d03a      	beq.n	800350e <_malloc_r+0xea>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	442b      	add	r3, r5
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	f8d8 3000 	ldr.w	r3, [r8]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	bb62      	cbnz	r2, 8003500 <_malloc_r+0xdc>
 80034a6:	f8c8 7000 	str.w	r7, [r8]
 80034aa:	e00f      	b.n	80034cc <_malloc_r+0xa8>
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	1b52      	subs	r2, r2, r5
 80034b0:	d420      	bmi.n	80034f4 <_malloc_r+0xd0>
 80034b2:	2a0b      	cmp	r2, #11
 80034b4:	d917      	bls.n	80034e6 <_malloc_r+0xc2>
 80034b6:	1961      	adds	r1, r4, r5
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	6025      	str	r5, [r4, #0]
 80034bc:	bf18      	it	ne
 80034be:	6059      	strne	r1, [r3, #4]
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	bf08      	it	eq
 80034c4:	f8c8 1000 	streq.w	r1, [r8]
 80034c8:	5162      	str	r2, [r4, r5]
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	4630      	mov	r0, r6
 80034ce:	f000 f82f 	bl	8003530 <__malloc_unlock>
 80034d2:	f104 000b 	add.w	r0, r4, #11
 80034d6:	1d23      	adds	r3, r4, #4
 80034d8:	f020 0007 	bic.w	r0, r0, #7
 80034dc:	1ac2      	subs	r2, r0, r3
 80034de:	bf1c      	itt	ne
 80034e0:	1a1b      	subne	r3, r3, r0
 80034e2:	50a3      	strne	r3, [r4, r2]
 80034e4:	e7af      	b.n	8003446 <_malloc_r+0x22>
 80034e6:	6862      	ldr	r2, [r4, #4]
 80034e8:	42a3      	cmp	r3, r4
 80034ea:	bf0c      	ite	eq
 80034ec:	f8c8 2000 	streq.w	r2, [r8]
 80034f0:	605a      	strne	r2, [r3, #4]
 80034f2:	e7eb      	b.n	80034cc <_malloc_r+0xa8>
 80034f4:	4623      	mov	r3, r4
 80034f6:	6864      	ldr	r4, [r4, #4]
 80034f8:	e7ae      	b.n	8003458 <_malloc_r+0x34>
 80034fa:	463c      	mov	r4, r7
 80034fc:	687f      	ldr	r7, [r7, #4]
 80034fe:	e7b6      	b.n	800346e <_malloc_r+0x4a>
 8003500:	461a      	mov	r2, r3
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	42a3      	cmp	r3, r4
 8003506:	d1fb      	bne.n	8003500 <_malloc_r+0xdc>
 8003508:	2300      	movs	r3, #0
 800350a:	6053      	str	r3, [r2, #4]
 800350c:	e7de      	b.n	80034cc <_malloc_r+0xa8>
 800350e:	230c      	movs	r3, #12
 8003510:	6033      	str	r3, [r6, #0]
 8003512:	4630      	mov	r0, r6
 8003514:	f000 f80c 	bl	8003530 <__malloc_unlock>
 8003518:	e794      	b.n	8003444 <_malloc_r+0x20>
 800351a:	6005      	str	r5, [r0, #0]
 800351c:	e7d6      	b.n	80034cc <_malloc_r+0xa8>
 800351e:	bf00      	nop
 8003520:	2000022c 	.word	0x2000022c

08003524 <__malloc_lock>:
 8003524:	4801      	ldr	r0, [pc, #4]	@ (800352c <__malloc_lock+0x8>)
 8003526:	f7ff bf00 	b.w	800332a <__retarget_lock_acquire_recursive>
 800352a:	bf00      	nop
 800352c:	20000224 	.word	0x20000224

08003530 <__malloc_unlock>:
 8003530:	4801      	ldr	r0, [pc, #4]	@ (8003538 <__malloc_unlock+0x8>)
 8003532:	f7ff befb 	b.w	800332c <__retarget_lock_release_recursive>
 8003536:	bf00      	nop
 8003538:	20000224 	.word	0x20000224

0800353c <__sfputc_r>:
 800353c:	6893      	ldr	r3, [r2, #8]
 800353e:	3b01      	subs	r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	b410      	push	{r4}
 8003544:	6093      	str	r3, [r2, #8]
 8003546:	da08      	bge.n	800355a <__sfputc_r+0x1e>
 8003548:	6994      	ldr	r4, [r2, #24]
 800354a:	42a3      	cmp	r3, r4
 800354c:	db01      	blt.n	8003552 <__sfputc_r+0x16>
 800354e:	290a      	cmp	r1, #10
 8003550:	d103      	bne.n	800355a <__sfputc_r+0x1e>
 8003552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003556:	f000 bb6d 	b.w	8003c34 <__swbuf_r>
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	1c58      	adds	r0, r3, #1
 800355e:	6010      	str	r0, [r2, #0]
 8003560:	7019      	strb	r1, [r3, #0]
 8003562:	4608      	mov	r0, r1
 8003564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003568:	4770      	bx	lr

0800356a <__sfputs_r>:
 800356a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356c:	4606      	mov	r6, r0
 800356e:	460f      	mov	r7, r1
 8003570:	4614      	mov	r4, r2
 8003572:	18d5      	adds	r5, r2, r3
 8003574:	42ac      	cmp	r4, r5
 8003576:	d101      	bne.n	800357c <__sfputs_r+0x12>
 8003578:	2000      	movs	r0, #0
 800357a:	e007      	b.n	800358c <__sfputs_r+0x22>
 800357c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003580:	463a      	mov	r2, r7
 8003582:	4630      	mov	r0, r6
 8003584:	f7ff ffda 	bl	800353c <__sfputc_r>
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d1f3      	bne.n	8003574 <__sfputs_r+0xa>
 800358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003590 <_vfiprintf_r>:
 8003590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	460d      	mov	r5, r1
 8003596:	b09d      	sub	sp, #116	@ 0x74
 8003598:	4614      	mov	r4, r2
 800359a:	4698      	mov	r8, r3
 800359c:	4606      	mov	r6, r0
 800359e:	b118      	cbz	r0, 80035a8 <_vfiprintf_r+0x18>
 80035a0:	6a03      	ldr	r3, [r0, #32]
 80035a2:	b90b      	cbnz	r3, 80035a8 <_vfiprintf_r+0x18>
 80035a4:	f7ff fdbc 	bl	8003120 <__sinit>
 80035a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035aa:	07d9      	lsls	r1, r3, #31
 80035ac:	d405      	bmi.n	80035ba <_vfiprintf_r+0x2a>
 80035ae:	89ab      	ldrh	r3, [r5, #12]
 80035b0:	059a      	lsls	r2, r3, #22
 80035b2:	d402      	bmi.n	80035ba <_vfiprintf_r+0x2a>
 80035b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035b6:	f7ff feb8 	bl	800332a <__retarget_lock_acquire_recursive>
 80035ba:	89ab      	ldrh	r3, [r5, #12]
 80035bc:	071b      	lsls	r3, r3, #28
 80035be:	d501      	bpl.n	80035c4 <_vfiprintf_r+0x34>
 80035c0:	692b      	ldr	r3, [r5, #16]
 80035c2:	b99b      	cbnz	r3, 80035ec <_vfiprintf_r+0x5c>
 80035c4:	4629      	mov	r1, r5
 80035c6:	4630      	mov	r0, r6
 80035c8:	f000 fb72 	bl	8003cb0 <__swsetup_r>
 80035cc:	b170      	cbz	r0, 80035ec <_vfiprintf_r+0x5c>
 80035ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035d0:	07dc      	lsls	r4, r3, #31
 80035d2:	d504      	bpl.n	80035de <_vfiprintf_r+0x4e>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	b01d      	add	sp, #116	@ 0x74
 80035da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	0598      	lsls	r0, r3, #22
 80035e2:	d4f7      	bmi.n	80035d4 <_vfiprintf_r+0x44>
 80035e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035e6:	f7ff fea1 	bl	800332c <__retarget_lock_release_recursive>
 80035ea:	e7f3      	b.n	80035d4 <_vfiprintf_r+0x44>
 80035ec:	2300      	movs	r3, #0
 80035ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80035f0:	2320      	movs	r3, #32
 80035f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035fa:	2330      	movs	r3, #48	@ 0x30
 80035fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80037ac <_vfiprintf_r+0x21c>
 8003600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003604:	f04f 0901 	mov.w	r9, #1
 8003608:	4623      	mov	r3, r4
 800360a:	469a      	mov	sl, r3
 800360c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003610:	b10a      	cbz	r2, 8003616 <_vfiprintf_r+0x86>
 8003612:	2a25      	cmp	r2, #37	@ 0x25
 8003614:	d1f9      	bne.n	800360a <_vfiprintf_r+0x7a>
 8003616:	ebba 0b04 	subs.w	fp, sl, r4
 800361a:	d00b      	beq.n	8003634 <_vfiprintf_r+0xa4>
 800361c:	465b      	mov	r3, fp
 800361e:	4622      	mov	r2, r4
 8003620:	4629      	mov	r1, r5
 8003622:	4630      	mov	r0, r6
 8003624:	f7ff ffa1 	bl	800356a <__sfputs_r>
 8003628:	3001      	adds	r0, #1
 800362a:	f000 80a7 	beq.w	800377c <_vfiprintf_r+0x1ec>
 800362e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003630:	445a      	add	r2, fp
 8003632:	9209      	str	r2, [sp, #36]	@ 0x24
 8003634:	f89a 3000 	ldrb.w	r3, [sl]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 809f 	beq.w	800377c <_vfiprintf_r+0x1ec>
 800363e:	2300      	movs	r3, #0
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003648:	f10a 0a01 	add.w	sl, sl, #1
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	9307      	str	r3, [sp, #28]
 8003650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003654:	931a      	str	r3, [sp, #104]	@ 0x68
 8003656:	4654      	mov	r4, sl
 8003658:	2205      	movs	r2, #5
 800365a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365e:	4853      	ldr	r0, [pc, #332]	@ (80037ac <_vfiprintf_r+0x21c>)
 8003660:	f7fc fdc6 	bl	80001f0 <memchr>
 8003664:	9a04      	ldr	r2, [sp, #16]
 8003666:	b9d8      	cbnz	r0, 80036a0 <_vfiprintf_r+0x110>
 8003668:	06d1      	lsls	r1, r2, #27
 800366a:	bf44      	itt	mi
 800366c:	2320      	movmi	r3, #32
 800366e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003672:	0713      	lsls	r3, r2, #28
 8003674:	bf44      	itt	mi
 8003676:	232b      	movmi	r3, #43	@ 0x2b
 8003678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800367c:	f89a 3000 	ldrb.w	r3, [sl]
 8003680:	2b2a      	cmp	r3, #42	@ 0x2a
 8003682:	d015      	beq.n	80036b0 <_vfiprintf_r+0x120>
 8003684:	9a07      	ldr	r2, [sp, #28]
 8003686:	4654      	mov	r4, sl
 8003688:	2000      	movs	r0, #0
 800368a:	f04f 0c0a 	mov.w	ip, #10
 800368e:	4621      	mov	r1, r4
 8003690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003694:	3b30      	subs	r3, #48	@ 0x30
 8003696:	2b09      	cmp	r3, #9
 8003698:	d94b      	bls.n	8003732 <_vfiprintf_r+0x1a2>
 800369a:	b1b0      	cbz	r0, 80036ca <_vfiprintf_r+0x13a>
 800369c:	9207      	str	r2, [sp, #28]
 800369e:	e014      	b.n	80036ca <_vfiprintf_r+0x13a>
 80036a0:	eba0 0308 	sub.w	r3, r0, r8
 80036a4:	fa09 f303 	lsl.w	r3, r9, r3
 80036a8:	4313      	orrs	r3, r2
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	46a2      	mov	sl, r4
 80036ae:	e7d2      	b.n	8003656 <_vfiprintf_r+0xc6>
 80036b0:	9b03      	ldr	r3, [sp, #12]
 80036b2:	1d19      	adds	r1, r3, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	9103      	str	r1, [sp, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bfbb      	ittet	lt
 80036bc:	425b      	neglt	r3, r3
 80036be:	f042 0202 	orrlt.w	r2, r2, #2
 80036c2:	9307      	strge	r3, [sp, #28]
 80036c4:	9307      	strlt	r3, [sp, #28]
 80036c6:	bfb8      	it	lt
 80036c8:	9204      	strlt	r2, [sp, #16]
 80036ca:	7823      	ldrb	r3, [r4, #0]
 80036cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80036ce:	d10a      	bne.n	80036e6 <_vfiprintf_r+0x156>
 80036d0:	7863      	ldrb	r3, [r4, #1]
 80036d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d4:	d132      	bne.n	800373c <_vfiprintf_r+0x1ac>
 80036d6:	9b03      	ldr	r3, [sp, #12]
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	9203      	str	r2, [sp, #12]
 80036de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036e2:	3402      	adds	r4, #2
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80037bc <_vfiprintf_r+0x22c>
 80036ea:	7821      	ldrb	r1, [r4, #0]
 80036ec:	2203      	movs	r2, #3
 80036ee:	4650      	mov	r0, sl
 80036f0:	f7fc fd7e 	bl	80001f0 <memchr>
 80036f4:	b138      	cbz	r0, 8003706 <_vfiprintf_r+0x176>
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	eba0 000a 	sub.w	r0, r0, sl
 80036fc:	2240      	movs	r2, #64	@ 0x40
 80036fe:	4082      	lsls	r2, r0
 8003700:	4313      	orrs	r3, r2
 8003702:	3401      	adds	r4, #1
 8003704:	9304      	str	r3, [sp, #16]
 8003706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370a:	4829      	ldr	r0, [pc, #164]	@ (80037b0 <_vfiprintf_r+0x220>)
 800370c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003710:	2206      	movs	r2, #6
 8003712:	f7fc fd6d 	bl	80001f0 <memchr>
 8003716:	2800      	cmp	r0, #0
 8003718:	d03f      	beq.n	800379a <_vfiprintf_r+0x20a>
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <_vfiprintf_r+0x224>)
 800371c:	bb1b      	cbnz	r3, 8003766 <_vfiprintf_r+0x1d6>
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	3307      	adds	r3, #7
 8003722:	f023 0307 	bic.w	r3, r3, #7
 8003726:	3308      	adds	r3, #8
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800372c:	443b      	add	r3, r7
 800372e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003730:	e76a      	b.n	8003608 <_vfiprintf_r+0x78>
 8003732:	fb0c 3202 	mla	r2, ip, r2, r3
 8003736:	460c      	mov	r4, r1
 8003738:	2001      	movs	r0, #1
 800373a:	e7a8      	b.n	800368e <_vfiprintf_r+0xfe>
 800373c:	2300      	movs	r3, #0
 800373e:	3401      	adds	r4, #1
 8003740:	9305      	str	r3, [sp, #20]
 8003742:	4619      	mov	r1, r3
 8003744:	f04f 0c0a 	mov.w	ip, #10
 8003748:	4620      	mov	r0, r4
 800374a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800374e:	3a30      	subs	r2, #48	@ 0x30
 8003750:	2a09      	cmp	r2, #9
 8003752:	d903      	bls.n	800375c <_vfiprintf_r+0x1cc>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0c6      	beq.n	80036e6 <_vfiprintf_r+0x156>
 8003758:	9105      	str	r1, [sp, #20]
 800375a:	e7c4      	b.n	80036e6 <_vfiprintf_r+0x156>
 800375c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003760:	4604      	mov	r4, r0
 8003762:	2301      	movs	r3, #1
 8003764:	e7f0      	b.n	8003748 <_vfiprintf_r+0x1b8>
 8003766:	ab03      	add	r3, sp, #12
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	462a      	mov	r2, r5
 800376c:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <_vfiprintf_r+0x228>)
 800376e:	a904      	add	r1, sp, #16
 8003770:	4630      	mov	r0, r6
 8003772:	f3af 8000 	nop.w
 8003776:	4607      	mov	r7, r0
 8003778:	1c78      	adds	r0, r7, #1
 800377a:	d1d6      	bne.n	800372a <_vfiprintf_r+0x19a>
 800377c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800377e:	07d9      	lsls	r1, r3, #31
 8003780:	d405      	bmi.n	800378e <_vfiprintf_r+0x1fe>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	059a      	lsls	r2, r3, #22
 8003786:	d402      	bmi.n	800378e <_vfiprintf_r+0x1fe>
 8003788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800378a:	f7ff fdcf 	bl	800332c <__retarget_lock_release_recursive>
 800378e:	89ab      	ldrh	r3, [r5, #12]
 8003790:	065b      	lsls	r3, r3, #25
 8003792:	f53f af1f 	bmi.w	80035d4 <_vfiprintf_r+0x44>
 8003796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003798:	e71e      	b.n	80035d8 <_vfiprintf_r+0x48>
 800379a:	ab03      	add	r3, sp, #12
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	462a      	mov	r2, r5
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <_vfiprintf_r+0x228>)
 80037a2:	a904      	add	r1, sp, #16
 80037a4:	4630      	mov	r0, r6
 80037a6:	f000 f879 	bl	800389c <_printf_i>
 80037aa:	e7e4      	b.n	8003776 <_vfiprintf_r+0x1e6>
 80037ac:	080040cc 	.word	0x080040cc
 80037b0:	080040d6 	.word	0x080040d6
 80037b4:	00000000 	.word	0x00000000
 80037b8:	0800356b 	.word	0x0800356b
 80037bc:	080040d2 	.word	0x080040d2

080037c0 <_printf_common>:
 80037c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c4:	4616      	mov	r6, r2
 80037c6:	4698      	mov	r8, r3
 80037c8:	688a      	ldr	r2, [r1, #8]
 80037ca:	690b      	ldr	r3, [r1, #16]
 80037cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bfb8      	it	lt
 80037d4:	4613      	movlt	r3, r2
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037dc:	4607      	mov	r7, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	b10a      	cbz	r2, 80037e6 <_printf_common+0x26>
 80037e2:	3301      	adds	r3, #1
 80037e4:	6033      	str	r3, [r6, #0]
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	0699      	lsls	r1, r3, #26
 80037ea:	bf42      	ittt	mi
 80037ec:	6833      	ldrmi	r3, [r6, #0]
 80037ee:	3302      	addmi	r3, #2
 80037f0:	6033      	strmi	r3, [r6, #0]
 80037f2:	6825      	ldr	r5, [r4, #0]
 80037f4:	f015 0506 	ands.w	r5, r5, #6
 80037f8:	d106      	bne.n	8003808 <_printf_common+0x48>
 80037fa:	f104 0a19 	add.w	sl, r4, #25
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	6832      	ldr	r2, [r6, #0]
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	42ab      	cmp	r3, r5
 8003806:	dc26      	bgt.n	8003856 <_printf_common+0x96>
 8003808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	3b00      	subs	r3, #0
 8003810:	bf18      	it	ne
 8003812:	2301      	movne	r3, #1
 8003814:	0692      	lsls	r2, r2, #26
 8003816:	d42b      	bmi.n	8003870 <_printf_common+0xb0>
 8003818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800381c:	4641      	mov	r1, r8
 800381e:	4638      	mov	r0, r7
 8003820:	47c8      	blx	r9
 8003822:	3001      	adds	r0, #1
 8003824:	d01e      	beq.n	8003864 <_printf_common+0xa4>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	6922      	ldr	r2, [r4, #16]
 800382a:	f003 0306 	and.w	r3, r3, #6
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf02      	ittt	eq
 8003832:	68e5      	ldreq	r5, [r4, #12]
 8003834:	6833      	ldreq	r3, [r6, #0]
 8003836:	1aed      	subeq	r5, r5, r3
 8003838:	68a3      	ldr	r3, [r4, #8]
 800383a:	bf0c      	ite	eq
 800383c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003840:	2500      	movne	r5, #0
 8003842:	4293      	cmp	r3, r2
 8003844:	bfc4      	itt	gt
 8003846:	1a9b      	subgt	r3, r3, r2
 8003848:	18ed      	addgt	r5, r5, r3
 800384a:	2600      	movs	r6, #0
 800384c:	341a      	adds	r4, #26
 800384e:	42b5      	cmp	r5, r6
 8003850:	d11a      	bne.n	8003888 <_printf_common+0xc8>
 8003852:	2000      	movs	r0, #0
 8003854:	e008      	b.n	8003868 <_printf_common+0xa8>
 8003856:	2301      	movs	r3, #1
 8003858:	4652      	mov	r2, sl
 800385a:	4641      	mov	r1, r8
 800385c:	4638      	mov	r0, r7
 800385e:	47c8      	blx	r9
 8003860:	3001      	adds	r0, #1
 8003862:	d103      	bne.n	800386c <_printf_common+0xac>
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386c:	3501      	adds	r5, #1
 800386e:	e7c6      	b.n	80037fe <_printf_common+0x3e>
 8003870:	18e1      	adds	r1, r4, r3
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	2030      	movs	r0, #48	@ 0x30
 8003876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800387a:	4422      	add	r2, r4
 800387c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003884:	3302      	adds	r3, #2
 8003886:	e7c7      	b.n	8003818 <_printf_common+0x58>
 8003888:	2301      	movs	r3, #1
 800388a:	4622      	mov	r2, r4
 800388c:	4641      	mov	r1, r8
 800388e:	4638      	mov	r0, r7
 8003890:	47c8      	blx	r9
 8003892:	3001      	adds	r0, #1
 8003894:	d0e6      	beq.n	8003864 <_printf_common+0xa4>
 8003896:	3601      	adds	r6, #1
 8003898:	e7d9      	b.n	800384e <_printf_common+0x8e>
	...

0800389c <_printf_i>:
 800389c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	7e0f      	ldrb	r7, [r1, #24]
 80038a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038a4:	2f78      	cmp	r7, #120	@ 0x78
 80038a6:	4691      	mov	r9, r2
 80038a8:	4680      	mov	r8, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	469a      	mov	sl, r3
 80038ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038b2:	d807      	bhi.n	80038c4 <_printf_i+0x28>
 80038b4:	2f62      	cmp	r7, #98	@ 0x62
 80038b6:	d80a      	bhi.n	80038ce <_printf_i+0x32>
 80038b8:	2f00      	cmp	r7, #0
 80038ba:	f000 80d2 	beq.w	8003a62 <_printf_i+0x1c6>
 80038be:	2f58      	cmp	r7, #88	@ 0x58
 80038c0:	f000 80b9 	beq.w	8003a36 <_printf_i+0x19a>
 80038c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038cc:	e03a      	b.n	8003944 <_printf_i+0xa8>
 80038ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038d2:	2b15      	cmp	r3, #21
 80038d4:	d8f6      	bhi.n	80038c4 <_printf_i+0x28>
 80038d6:	a101      	add	r1, pc, #4	@ (adr r1, 80038dc <_printf_i+0x40>)
 80038d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038dc:	08003935 	.word	0x08003935
 80038e0:	08003949 	.word	0x08003949
 80038e4:	080038c5 	.word	0x080038c5
 80038e8:	080038c5 	.word	0x080038c5
 80038ec:	080038c5 	.word	0x080038c5
 80038f0:	080038c5 	.word	0x080038c5
 80038f4:	08003949 	.word	0x08003949
 80038f8:	080038c5 	.word	0x080038c5
 80038fc:	080038c5 	.word	0x080038c5
 8003900:	080038c5 	.word	0x080038c5
 8003904:	080038c5 	.word	0x080038c5
 8003908:	08003a49 	.word	0x08003a49
 800390c:	08003973 	.word	0x08003973
 8003910:	08003a03 	.word	0x08003a03
 8003914:	080038c5 	.word	0x080038c5
 8003918:	080038c5 	.word	0x080038c5
 800391c:	08003a6b 	.word	0x08003a6b
 8003920:	080038c5 	.word	0x080038c5
 8003924:	08003973 	.word	0x08003973
 8003928:	080038c5 	.word	0x080038c5
 800392c:	080038c5 	.word	0x080038c5
 8003930:	08003a0b 	.word	0x08003a0b
 8003934:	6833      	ldr	r3, [r6, #0]
 8003936:	1d1a      	adds	r2, r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6032      	str	r2, [r6, #0]
 800393c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003944:	2301      	movs	r3, #1
 8003946:	e09d      	b.n	8003a84 <_printf_i+0x1e8>
 8003948:	6833      	ldr	r3, [r6, #0]
 800394a:	6820      	ldr	r0, [r4, #0]
 800394c:	1d19      	adds	r1, r3, #4
 800394e:	6031      	str	r1, [r6, #0]
 8003950:	0606      	lsls	r6, r0, #24
 8003952:	d501      	bpl.n	8003958 <_printf_i+0xbc>
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	e003      	b.n	8003960 <_printf_i+0xc4>
 8003958:	0645      	lsls	r5, r0, #25
 800395a:	d5fb      	bpl.n	8003954 <_printf_i+0xb8>
 800395c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003960:	2d00      	cmp	r5, #0
 8003962:	da03      	bge.n	800396c <_printf_i+0xd0>
 8003964:	232d      	movs	r3, #45	@ 0x2d
 8003966:	426d      	negs	r5, r5
 8003968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800396c:	4859      	ldr	r0, [pc, #356]	@ (8003ad4 <_printf_i+0x238>)
 800396e:	230a      	movs	r3, #10
 8003970:	e011      	b.n	8003996 <_printf_i+0xfa>
 8003972:	6821      	ldr	r1, [r4, #0]
 8003974:	6833      	ldr	r3, [r6, #0]
 8003976:	0608      	lsls	r0, r1, #24
 8003978:	f853 5b04 	ldr.w	r5, [r3], #4
 800397c:	d402      	bmi.n	8003984 <_printf_i+0xe8>
 800397e:	0649      	lsls	r1, r1, #25
 8003980:	bf48      	it	mi
 8003982:	b2ad      	uxthmi	r5, r5
 8003984:	2f6f      	cmp	r7, #111	@ 0x6f
 8003986:	4853      	ldr	r0, [pc, #332]	@ (8003ad4 <_printf_i+0x238>)
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	bf14      	ite	ne
 800398c:	230a      	movne	r3, #10
 800398e:	2308      	moveq	r3, #8
 8003990:	2100      	movs	r1, #0
 8003992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003996:	6866      	ldr	r6, [r4, #4]
 8003998:	60a6      	str	r6, [r4, #8]
 800399a:	2e00      	cmp	r6, #0
 800399c:	bfa2      	ittt	ge
 800399e:	6821      	ldrge	r1, [r4, #0]
 80039a0:	f021 0104 	bicge.w	r1, r1, #4
 80039a4:	6021      	strge	r1, [r4, #0]
 80039a6:	b90d      	cbnz	r5, 80039ac <_printf_i+0x110>
 80039a8:	2e00      	cmp	r6, #0
 80039aa:	d04b      	beq.n	8003a44 <_printf_i+0x1a8>
 80039ac:	4616      	mov	r6, r2
 80039ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80039b2:	fb03 5711 	mls	r7, r3, r1, r5
 80039b6:	5dc7      	ldrb	r7, [r0, r7]
 80039b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039bc:	462f      	mov	r7, r5
 80039be:	42bb      	cmp	r3, r7
 80039c0:	460d      	mov	r5, r1
 80039c2:	d9f4      	bls.n	80039ae <_printf_i+0x112>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d10b      	bne.n	80039e0 <_printf_i+0x144>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	07df      	lsls	r7, r3, #31
 80039cc:	d508      	bpl.n	80039e0 <_printf_i+0x144>
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	6861      	ldr	r1, [r4, #4]
 80039d2:	4299      	cmp	r1, r3
 80039d4:	bfde      	ittt	le
 80039d6:	2330      	movle	r3, #48	@ 0x30
 80039d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039e0:	1b92      	subs	r2, r2, r6
 80039e2:	6122      	str	r2, [r4, #16]
 80039e4:	f8cd a000 	str.w	sl, [sp]
 80039e8:	464b      	mov	r3, r9
 80039ea:	aa03      	add	r2, sp, #12
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fee6 	bl	80037c0 <_printf_common>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d14a      	bne.n	8003a8e <_printf_i+0x1f2>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	b004      	add	sp, #16
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f043 0320 	orr.w	r3, r3, #32
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	4833      	ldr	r0, [pc, #204]	@ (8003ad8 <_printf_i+0x23c>)
 8003a0c:	2778      	movs	r7, #120	@ 0x78
 8003a0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	6831      	ldr	r1, [r6, #0]
 8003a16:	061f      	lsls	r7, r3, #24
 8003a18:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a1c:	d402      	bmi.n	8003a24 <_printf_i+0x188>
 8003a1e:	065f      	lsls	r7, r3, #25
 8003a20:	bf48      	it	mi
 8003a22:	b2ad      	uxthmi	r5, r5
 8003a24:	6031      	str	r1, [r6, #0]
 8003a26:	07d9      	lsls	r1, r3, #31
 8003a28:	bf44      	itt	mi
 8003a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a2e:	6023      	strmi	r3, [r4, #0]
 8003a30:	b11d      	cbz	r5, 8003a3a <_printf_i+0x19e>
 8003a32:	2310      	movs	r3, #16
 8003a34:	e7ac      	b.n	8003990 <_printf_i+0xf4>
 8003a36:	4827      	ldr	r0, [pc, #156]	@ (8003ad4 <_printf_i+0x238>)
 8003a38:	e7e9      	b.n	8003a0e <_printf_i+0x172>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	f023 0320 	bic.w	r3, r3, #32
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	e7f6      	b.n	8003a32 <_printf_i+0x196>
 8003a44:	4616      	mov	r6, r2
 8003a46:	e7bd      	b.n	80039c4 <_printf_i+0x128>
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	6825      	ldr	r5, [r4, #0]
 8003a4c:	6961      	ldr	r1, [r4, #20]
 8003a4e:	1d18      	adds	r0, r3, #4
 8003a50:	6030      	str	r0, [r6, #0]
 8003a52:	062e      	lsls	r6, r5, #24
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	d501      	bpl.n	8003a5c <_printf_i+0x1c0>
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <_printf_i+0x1c6>
 8003a5c:	0668      	lsls	r0, r5, #25
 8003a5e:	d5fb      	bpl.n	8003a58 <_printf_i+0x1bc>
 8003a60:	8019      	strh	r1, [r3, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	6123      	str	r3, [r4, #16]
 8003a66:	4616      	mov	r6, r2
 8003a68:	e7bc      	b.n	80039e4 <_printf_i+0x148>
 8003a6a:	6833      	ldr	r3, [r6, #0]
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	6032      	str	r2, [r6, #0]
 8003a70:	681e      	ldr	r6, [r3, #0]
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7fc fbba 	bl	80001f0 <memchr>
 8003a7c:	b108      	cbz	r0, 8003a82 <_printf_i+0x1e6>
 8003a7e:	1b80      	subs	r0, r0, r6
 8003a80:	6060      	str	r0, [r4, #4]
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a8c:	e7aa      	b.n	80039e4 <_printf_i+0x148>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	4632      	mov	r2, r6
 8003a92:	4649      	mov	r1, r9
 8003a94:	4640      	mov	r0, r8
 8003a96:	47d0      	blx	sl
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d0ad      	beq.n	80039f8 <_printf_i+0x15c>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	079b      	lsls	r3, r3, #30
 8003aa0:	d413      	bmi.n	8003aca <_printf_i+0x22e>
 8003aa2:	68e0      	ldr	r0, [r4, #12]
 8003aa4:	9b03      	ldr	r3, [sp, #12]
 8003aa6:	4298      	cmp	r0, r3
 8003aa8:	bfb8      	it	lt
 8003aaa:	4618      	movlt	r0, r3
 8003aac:	e7a6      	b.n	80039fc <_printf_i+0x160>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	47d0      	blx	sl
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d09d      	beq.n	80039f8 <_printf_i+0x15c>
 8003abc:	3501      	adds	r5, #1
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	9903      	ldr	r1, [sp, #12]
 8003ac2:	1a5b      	subs	r3, r3, r1
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dcf2      	bgt.n	8003aae <_printf_i+0x212>
 8003ac8:	e7eb      	b.n	8003aa2 <_printf_i+0x206>
 8003aca:	2500      	movs	r5, #0
 8003acc:	f104 0619 	add.w	r6, r4, #25
 8003ad0:	e7f5      	b.n	8003abe <_printf_i+0x222>
 8003ad2:	bf00      	nop
 8003ad4:	080040dd 	.word	0x080040dd
 8003ad8:	080040ee 	.word	0x080040ee

08003adc <__sflush_r>:
 8003adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae4:	0716      	lsls	r6, r2, #28
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	d454      	bmi.n	8003b96 <__sflush_r+0xba>
 8003aec:	684b      	ldr	r3, [r1, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	dc02      	bgt.n	8003af8 <__sflush_r+0x1c>
 8003af2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	dd48      	ble.n	8003b8a <__sflush_r+0xae>
 8003af8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003afa:	2e00      	cmp	r6, #0
 8003afc:	d045      	beq.n	8003b8a <__sflush_r+0xae>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b04:	682f      	ldr	r7, [r5, #0]
 8003b06:	6a21      	ldr	r1, [r4, #32]
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	d030      	beq.n	8003b6e <__sflush_r+0x92>
 8003b0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	0759      	lsls	r1, r3, #29
 8003b12:	d505      	bpl.n	8003b20 <__sflush_r+0x44>
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b1a:	b10b      	cbz	r3, 8003b20 <__sflush_r+0x44>
 8003b1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b24:	6a21      	ldr	r1, [r4, #32]
 8003b26:	4628      	mov	r0, r5
 8003b28:	47b0      	blx	r6
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	d106      	bne.n	8003b3e <__sflush_r+0x62>
 8003b30:	6829      	ldr	r1, [r5, #0]
 8003b32:	291d      	cmp	r1, #29
 8003b34:	d82b      	bhi.n	8003b8e <__sflush_r+0xb2>
 8003b36:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <__sflush_r+0x104>)
 8003b38:	410a      	asrs	r2, r1
 8003b3a:	07d6      	lsls	r6, r2, #31
 8003b3c:	d427      	bmi.n	8003b8e <__sflush_r+0xb2>
 8003b3e:	2200      	movs	r2, #0
 8003b40:	6062      	str	r2, [r4, #4]
 8003b42:	04d9      	lsls	r1, r3, #19
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	6022      	str	r2, [r4, #0]
 8003b48:	d504      	bpl.n	8003b54 <__sflush_r+0x78>
 8003b4a:	1c42      	adds	r2, r0, #1
 8003b4c:	d101      	bne.n	8003b52 <__sflush_r+0x76>
 8003b4e:	682b      	ldr	r3, [r5, #0]
 8003b50:	b903      	cbnz	r3, 8003b54 <__sflush_r+0x78>
 8003b52:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b56:	602f      	str	r7, [r5, #0]
 8003b58:	b1b9      	cbz	r1, 8003b8a <__sflush_r+0xae>
 8003b5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b5e:	4299      	cmp	r1, r3
 8003b60:	d002      	beq.n	8003b68 <__sflush_r+0x8c>
 8003b62:	4628      	mov	r0, r5
 8003b64:	f7ff fbf2 	bl	800334c <_free_r>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b6c:	e00d      	b.n	8003b8a <__sflush_r+0xae>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b0      	blx	r6
 8003b74:	4602      	mov	r2, r0
 8003b76:	1c50      	adds	r0, r2, #1
 8003b78:	d1c9      	bne.n	8003b0e <__sflush_r+0x32>
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0c6      	beq.n	8003b0e <__sflush_r+0x32>
 8003b80:	2b1d      	cmp	r3, #29
 8003b82:	d001      	beq.n	8003b88 <__sflush_r+0xac>
 8003b84:	2b16      	cmp	r3, #22
 8003b86:	d11e      	bne.n	8003bc6 <__sflush_r+0xea>
 8003b88:	602f      	str	r7, [r5, #0]
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e022      	b.n	8003bd4 <__sflush_r+0xf8>
 8003b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b92:	b21b      	sxth	r3, r3
 8003b94:	e01b      	b.n	8003bce <__sflush_r+0xf2>
 8003b96:	690f      	ldr	r7, [r1, #16]
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	d0f6      	beq.n	8003b8a <__sflush_r+0xae>
 8003b9c:	0793      	lsls	r3, r2, #30
 8003b9e:	680e      	ldr	r6, [r1, #0]
 8003ba0:	bf08      	it	eq
 8003ba2:	694b      	ldreq	r3, [r1, #20]
 8003ba4:	600f      	str	r7, [r1, #0]
 8003ba6:	bf18      	it	ne
 8003ba8:	2300      	movne	r3, #0
 8003baa:	eba6 0807 	sub.w	r8, r6, r7
 8003bae:	608b      	str	r3, [r1, #8]
 8003bb0:	f1b8 0f00 	cmp.w	r8, #0
 8003bb4:	dde9      	ble.n	8003b8a <__sflush_r+0xae>
 8003bb6:	6a21      	ldr	r1, [r4, #32]
 8003bb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003bba:	4643      	mov	r3, r8
 8003bbc:	463a      	mov	r2, r7
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b0      	blx	r6
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	dc08      	bgt.n	8003bd8 <__sflush_r+0xfc>
 8003bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd8:	4407      	add	r7, r0
 8003bda:	eba8 0800 	sub.w	r8, r8, r0
 8003bde:	e7e7      	b.n	8003bb0 <__sflush_r+0xd4>
 8003be0:	dfbffffe 	.word	0xdfbffffe

08003be4 <_fflush_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	4605      	mov	r5, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b913      	cbnz	r3, 8003bf4 <_fflush_r+0x10>
 8003bee:	2500      	movs	r5, #0
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	b118      	cbz	r0, 8003bfe <_fflush_r+0x1a>
 8003bf6:	6a03      	ldr	r3, [r0, #32]
 8003bf8:	b90b      	cbnz	r3, 8003bfe <_fflush_r+0x1a>
 8003bfa:	f7ff fa91 	bl	8003120 <__sinit>
 8003bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f3      	beq.n	8003bee <_fflush_r+0xa>
 8003c06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c08:	07d0      	lsls	r0, r2, #31
 8003c0a:	d404      	bmi.n	8003c16 <_fflush_r+0x32>
 8003c0c:	0599      	lsls	r1, r3, #22
 8003c0e:	d402      	bmi.n	8003c16 <_fflush_r+0x32>
 8003c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c12:	f7ff fb8a 	bl	800332a <__retarget_lock_acquire_recursive>
 8003c16:	4628      	mov	r0, r5
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f7ff ff5f 	bl	8003adc <__sflush_r>
 8003c1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c20:	07da      	lsls	r2, r3, #31
 8003c22:	4605      	mov	r5, r0
 8003c24:	d4e4      	bmi.n	8003bf0 <_fflush_r+0xc>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	059b      	lsls	r3, r3, #22
 8003c2a:	d4e1      	bmi.n	8003bf0 <_fflush_r+0xc>
 8003c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c2e:	f7ff fb7d 	bl	800332c <__retarget_lock_release_recursive>
 8003c32:	e7dd      	b.n	8003bf0 <_fflush_r+0xc>

08003c34 <__swbuf_r>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	460e      	mov	r6, r1
 8003c38:	4614      	mov	r4, r2
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	b118      	cbz	r0, 8003c46 <__swbuf_r+0x12>
 8003c3e:	6a03      	ldr	r3, [r0, #32]
 8003c40:	b90b      	cbnz	r3, 8003c46 <__swbuf_r+0x12>
 8003c42:	f7ff fa6d 	bl	8003120 <__sinit>
 8003c46:	69a3      	ldr	r3, [r4, #24]
 8003c48:	60a3      	str	r3, [r4, #8]
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	071a      	lsls	r2, r3, #28
 8003c4e:	d501      	bpl.n	8003c54 <__swbuf_r+0x20>
 8003c50:	6923      	ldr	r3, [r4, #16]
 8003c52:	b943      	cbnz	r3, 8003c66 <__swbuf_r+0x32>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f82a 	bl	8003cb0 <__swsetup_r>
 8003c5c:	b118      	cbz	r0, 8003c66 <__swbuf_r+0x32>
 8003c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8003c62:	4638      	mov	r0, r7
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	1a98      	subs	r0, r3, r2
 8003c6c:	6963      	ldr	r3, [r4, #20]
 8003c6e:	b2f6      	uxtb	r6, r6
 8003c70:	4283      	cmp	r3, r0
 8003c72:	4637      	mov	r7, r6
 8003c74:	dc05      	bgt.n	8003c82 <__swbuf_r+0x4e>
 8003c76:	4621      	mov	r1, r4
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f7ff ffb3 	bl	8003be4 <_fflush_r>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1ed      	bne.n	8003c5e <__swbuf_r+0x2a>
 8003c82:	68a3      	ldr	r3, [r4, #8]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60a3      	str	r3, [r4, #8]
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	6022      	str	r2, [r4, #0]
 8003c8e:	701e      	strb	r6, [r3, #0]
 8003c90:	6962      	ldr	r2, [r4, #20]
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d004      	beq.n	8003ca2 <__swbuf_r+0x6e>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	07db      	lsls	r3, r3, #31
 8003c9c:	d5e1      	bpl.n	8003c62 <__swbuf_r+0x2e>
 8003c9e:	2e0a      	cmp	r6, #10
 8003ca0:	d1df      	bne.n	8003c62 <__swbuf_r+0x2e>
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7ff ff9d 	bl	8003be4 <_fflush_r>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d0d9      	beq.n	8003c62 <__swbuf_r+0x2e>
 8003cae:	e7d6      	b.n	8003c5e <__swbuf_r+0x2a>

08003cb0 <__swsetup_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4b29      	ldr	r3, [pc, #164]	@ (8003d58 <__swsetup_r+0xa8>)
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	460c      	mov	r4, r1
 8003cba:	b118      	cbz	r0, 8003cc4 <__swsetup_r+0x14>
 8003cbc:	6a03      	ldr	r3, [r0, #32]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <__swsetup_r+0x14>
 8003cc0:	f7ff fa2e 	bl	8003120 <__sinit>
 8003cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cc8:	0719      	lsls	r1, r3, #28
 8003cca:	d422      	bmi.n	8003d12 <__swsetup_r+0x62>
 8003ccc:	06da      	lsls	r2, r3, #27
 8003cce:	d407      	bmi.n	8003ce0 <__swsetup_r+0x30>
 8003cd0:	2209      	movs	r2, #9
 8003cd2:	602a      	str	r2, [r5, #0]
 8003cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	f04f 30ff 	mov.w	r0, #4294967295
 8003cde:	e033      	b.n	8003d48 <__swsetup_r+0x98>
 8003ce0:	0758      	lsls	r0, r3, #29
 8003ce2:	d512      	bpl.n	8003d0a <__swsetup_r+0x5a>
 8003ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ce6:	b141      	cbz	r1, 8003cfa <__swsetup_r+0x4a>
 8003ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cec:	4299      	cmp	r1, r3
 8003cee:	d002      	beq.n	8003cf6 <__swsetup_r+0x46>
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7ff fb2b 	bl	800334c <_free_r>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	2300      	movs	r3, #0
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	b94b      	cbnz	r3, 8003d2a <__swsetup_r+0x7a>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d20:	d003      	beq.n	8003d2a <__swsetup_r+0x7a>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f84f 	bl	8003dc8 <__smakebuf_r>
 8003d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2e:	f013 0201 	ands.w	r2, r3, #1
 8003d32:	d00a      	beq.n	8003d4a <__swsetup_r+0x9a>
 8003d34:	2200      	movs	r2, #0
 8003d36:	60a2      	str	r2, [r4, #8]
 8003d38:	6962      	ldr	r2, [r4, #20]
 8003d3a:	4252      	negs	r2, r2
 8003d3c:	61a2      	str	r2, [r4, #24]
 8003d3e:	6922      	ldr	r2, [r4, #16]
 8003d40:	b942      	cbnz	r2, 8003d54 <__swsetup_r+0xa4>
 8003d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d46:	d1c5      	bne.n	8003cd4 <__swsetup_r+0x24>
 8003d48:	bd38      	pop	{r3, r4, r5, pc}
 8003d4a:	0799      	lsls	r1, r3, #30
 8003d4c:	bf58      	it	pl
 8003d4e:	6962      	ldrpl	r2, [r4, #20]
 8003d50:	60a2      	str	r2, [r4, #8]
 8003d52:	e7f4      	b.n	8003d3e <__swsetup_r+0x8e>
 8003d54:	2000      	movs	r0, #0
 8003d56:	e7f7      	b.n	8003d48 <__swsetup_r+0x98>
 8003d58:	20000018 	.word	0x20000018

08003d5c <_sbrk_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d06      	ldr	r5, [pc, #24]	@ (8003d78 <_sbrk_r+0x1c>)
 8003d60:	2300      	movs	r3, #0
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	f7fd feb4 	bl	8001ad4 <_sbrk>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_sbrk_r+0x1a>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_sbrk_r+0x1a>
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	20000220 	.word	0x20000220

08003d7c <__swhatbuf_r>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	460c      	mov	r4, r1
 8003d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d84:	2900      	cmp	r1, #0
 8003d86:	b096      	sub	sp, #88	@ 0x58
 8003d88:	4615      	mov	r5, r2
 8003d8a:	461e      	mov	r6, r3
 8003d8c:	da0d      	bge.n	8003daa <__swhatbuf_r+0x2e>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2340      	movne	r3, #64	@ 0x40
 8003d9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003da0:	2000      	movs	r0, #0
 8003da2:	6031      	str	r1, [r6, #0]
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	b016      	add	sp, #88	@ 0x58
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	466a      	mov	r2, sp
 8003dac:	f000 f848 	bl	8003e40 <_fstat_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	dbec      	blt.n	8003d8e <__swhatbuf_r+0x12>
 8003db4:	9901      	ldr	r1, [sp, #4]
 8003db6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003dba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003dbe:	4259      	negs	r1, r3
 8003dc0:	4159      	adcs	r1, r3
 8003dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dc6:	e7eb      	b.n	8003da0 <__swhatbuf_r+0x24>

08003dc8 <__smakebuf_r>:
 8003dc8:	898b      	ldrh	r3, [r1, #12]
 8003dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dcc:	079d      	lsls	r5, r3, #30
 8003dce:	4606      	mov	r6, r0
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	d507      	bpl.n	8003de4 <__smakebuf_r+0x1c>
 8003dd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	6163      	str	r3, [r4, #20]
 8003de0:	b003      	add	sp, #12
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de4:	ab01      	add	r3, sp, #4
 8003de6:	466a      	mov	r2, sp
 8003de8:	f7ff ffc8 	bl	8003d7c <__swhatbuf_r>
 8003dec:	9f00      	ldr	r7, [sp, #0]
 8003dee:	4605      	mov	r5, r0
 8003df0:	4639      	mov	r1, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff fb16 	bl	8003424 <_malloc_r>
 8003df8:	b948      	cbnz	r0, 8003e0e <__smakebuf_r+0x46>
 8003dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfe:	059a      	lsls	r2, r3, #22
 8003e00:	d4ee      	bmi.n	8003de0 <__smakebuf_r+0x18>
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	f043 0302 	orr.w	r3, r3, #2
 8003e0a:	81a3      	strh	r3, [r4, #12]
 8003e0c:	e7e2      	b.n	8003dd4 <__smakebuf_r+0xc>
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	6020      	str	r0, [r4, #0]
 8003e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	9b01      	ldr	r3, [sp, #4]
 8003e1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e1e:	b15b      	cbz	r3, 8003e38 <__smakebuf_r+0x70>
 8003e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e24:	4630      	mov	r0, r6
 8003e26:	f000 f81d 	bl	8003e64 <_isatty_r>
 8003e2a:	b128      	cbz	r0, 8003e38 <__smakebuf_r+0x70>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	431d      	orrs	r5, r3
 8003e3c:	81a5      	strh	r5, [r4, #12]
 8003e3e:	e7cf      	b.n	8003de0 <__smakebuf_r+0x18>

08003e40 <_fstat_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d07      	ldr	r5, [pc, #28]	@ (8003e60 <_fstat_r+0x20>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4604      	mov	r4, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	f7fd fe19 	bl	8001a84 <_fstat>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	d102      	bne.n	8003e5c <_fstat_r+0x1c>
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	b103      	cbz	r3, 8003e5c <_fstat_r+0x1c>
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	bd38      	pop	{r3, r4, r5, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000220 	.word	0x20000220

08003e64 <_isatty_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d06      	ldr	r5, [pc, #24]	@ (8003e80 <_isatty_r+0x1c>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fd fe18 	bl	8001aa4 <_isatty>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_isatty_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_isatty_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000220 	.word	0x20000220

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr
