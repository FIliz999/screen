
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b50  08005b50  00006b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b58  08005b58  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00006b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08005bc8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005bc8  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d601  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d0  00000000  00000000  00014699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00016a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017eb9  00000000  00000000  000176e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f81d  00000000  00000000  0002f5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f9c6  00000000  00000000  0003edbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ce784  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000985  00000000  00000000  000ce7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c84  00000000  00000000  000cf14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d2dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058b0 	.word	0x080058b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080058b0 	.word	0x080058b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ILI9341_Init>:
static void LED_H(void);
static void change(int x, uint8_t time, SPI_HandleTypeDef hspi3);

// Initialization
void ILI9341_Init(SPI_HandleTypeDef hspi3)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b094      	sub	sp, #80	@ 0x50
 8000586:	af14      	add	r7, sp, #80	@ 0x50
 8000588:	f107 0c08 	add.w	ip, r7, #8
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Reset();
 8000590:	f000 fd50 	bl	8001034 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000594:	4668      	mov	r0, sp
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2248      	movs	r2, #72	@ 0x48
 800059c:	4619      	mov	r1, r3
 800059e:	f004 fac8 	bl	8004b32 <memcpy>
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a8:	f000 fd56 	bl	8001058 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB, hspi3);
 80005ac:	4668      	mov	r0, sp
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	224c      	movs	r2, #76	@ 0x4c
 80005b4:	4619      	mov	r1, r3
 80005b6:	f004 fabc 	bl	8004b32 <memcpy>
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005c0:	20cb      	movs	r0, #203	@ 0xcb
 80005c2:	f000 fd69 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x39, hspi3);
 80005c6:	4668      	mov	r0, sp
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	224c      	movs	r2, #76	@ 0x4c
 80005ce:	4619      	mov	r1, r3
 80005d0:	f004 faaf 	bl	8004b32 <memcpy>
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005da:	2039      	movs	r0, #57	@ 0x39
 80005dc:	f000 fd7d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2C, hspi3);
 80005e0:	4668      	mov	r0, sp
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	224c      	movs	r2, #76	@ 0x4c
 80005e8:	4619      	mov	r1, r3
 80005ea:	f004 faa2 	bl	8004b32 <memcpy>
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f4:	202c      	movs	r0, #44	@ 0x2c
 80005f6:	f000 fd70 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80005fa:	4668      	mov	r0, sp
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	224c      	movs	r2, #76	@ 0x4c
 8000602:	4619      	mov	r1, r3
 8000604:	f004 fa95 	bl	8004b32 <memcpy>
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fd63 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x34, hspi3);
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	224c      	movs	r2, #76	@ 0x4c
 800061c:	4619      	mov	r1, r3
 800061e:	f004 fa88 	bl	8004b32 <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000628:	2034      	movs	r0, #52	@ 0x34
 800062a:	f000 fd56 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x02, hspi3);
 800062e:	4668      	mov	r0, sp
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	224c      	movs	r2, #76	@ 0x4c
 8000636:	4619      	mov	r1, r3
 8000638:	f004 fa7b 	bl	8004b32 <memcpy>
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fd49 	bl	80010da <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF, hspi3);
 8000648:	4668      	mov	r0, sp
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	f004 fa6e 	bl	8004b32 <memcpy>
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	20cf      	movs	r0, #207	@ 0xcf
 800065e:	f000 fd1b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	224c      	movs	r2, #76	@ 0x4c
 800066a:	4619      	mov	r1, r3
 800066c:	f004 fa61 	bl	8004b32 <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fd2f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 800067c:	4668      	mov	r0, sp
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	f004 fa54 	bl	8004b32 <memcpy>
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000690:	20c1      	movs	r0, #193	@ 0xc1
 8000692:	f000 fd22 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x30, hspi3);
 8000696:	4668      	mov	r0, sp
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	224c      	movs	r2, #76	@ 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	f004 fa47 	bl	8004b32 <memcpy>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006aa:	2030      	movs	r0, #48	@ 0x30
 80006ac:	f000 fd15 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8, hspi3);
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fa3a 	bl	8004b32 <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c4:	20e8      	movs	r0, #232	@ 0xe8
 80006c6:	f000 fce7 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x85, hspi3);
 80006ca:	4668      	mov	r0, sp
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	224c      	movs	r2, #76	@ 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	f004 fa2d 	bl	8004b32 <memcpy>
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	2085      	movs	r0, #133	@ 0x85
 80006e0:	f000 fcfb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	4619      	mov	r1, r3
 80006ee:	f004 fa20 	bl	8004b32 <memcpy>
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fcee 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x78, hspi3);
 80006fe:	4668      	mov	r0, sp
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	224c      	movs	r2, #76	@ 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	f004 fa13 	bl	8004b32 <memcpy>
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fce1 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA, hspi3);
 8000718:	4668      	mov	r0, sp
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	224c      	movs	r2, #76	@ 0x4c
 8000720:	4619      	mov	r1, r3
 8000722:	f004 fa06 	bl	8004b32 <memcpy>
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072c:	20ea      	movs	r0, #234	@ 0xea
 800072e:	f000 fcb3 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000732:	4668      	mov	r0, sp
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	224c      	movs	r2, #76	@ 0x4c
 800073a:	4619      	mov	r1, r3
 800073c:	f004 f9f9 	bl	8004b32 <memcpy>
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fcc7 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	4619      	mov	r1, r3
 8000756:	f004 f9ec 	bl	8004b32 <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fcba 	bl	80010da <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED, hspi3);
 8000766:	4668      	mov	r0, sp
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	224c      	movs	r2, #76	@ 0x4c
 800076e:	4619      	mov	r1, r3
 8000770:	f004 f9df 	bl	8004b32 <memcpy>
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800077a:	20ed      	movs	r0, #237	@ 0xed
 800077c:	f000 fc8c 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x64, hspi3);
 8000780:	4668      	mov	r0, sp
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	f004 f9d2 	bl	8004b32 <memcpy>
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000794:	2064      	movs	r0, #100	@ 0x64
 8000796:	f000 fca0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 800079a:	4668      	mov	r0, sp
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	224c      	movs	r2, #76	@ 0x4c
 80007a2:	4619      	mov	r1, r3
 80007a4:	f004 f9c5 	bl	8004b32 <memcpy>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 fc93 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x12, hspi3);
 80007b4:	4668      	mov	r0, sp
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	4619      	mov	r1, r3
 80007be:	f004 f9b8 	bl	8004b32 <memcpy>
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c8:	2012      	movs	r0, #18
 80007ca:	f000 fc86 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x81, hspi3);
 80007ce:	4668      	mov	r0, sp
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	224c      	movs	r2, #76	@ 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f004 f9ab 	bl	8004b32 <memcpy>
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	2081      	movs	r0, #129	@ 0x81
 80007e4:	f000 fc79 	bl	80010da <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7, hspi3);
 80007e8:	4668      	mov	r0, sp
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	4619      	mov	r1, r3
 80007f2:	f004 f99e 	bl	8004b32 <memcpy>
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fc:	20f7      	movs	r0, #247	@ 0xf7
 80007fe:	f000 fc4b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x20, hspi3);
 8000802:	4668      	mov	r0, sp
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	224c      	movs	r2, #76	@ 0x4c
 800080a:	4619      	mov	r1, r3
 800080c:	f004 f991 	bl	8004b32 <memcpy>
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000816:	2020      	movs	r0, #32
 8000818:	f000 fc5f 	bl	80010da <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0, hspi3);
 800081c:	4668      	mov	r0, sp
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	4619      	mov	r1, r3
 8000826:	f004 f984 	bl	8004b32 <memcpy>
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000830:	20c0      	movs	r0, #192	@ 0xc0
 8000832:	f000 fc31 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8000836:	4668      	mov	r0, sp
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	224c      	movs	r2, #76	@ 0x4c
 800083e:	4619      	mov	r1, r3
 8000840:	f004 f977 	bl	8004b32 <memcpy>
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fc45 	bl	80010da <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1, hspi3);
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	f004 f96a 	bl	8004b32 <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc17 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 800086a:	4668      	mov	r0, sp
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	224c      	movs	r2, #76	@ 0x4c
 8000872:	4619      	mov	r1, r3
 8000874:	f004 f95d 	bl	8004b32 <memcpy>
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fc2b 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5, hspi3);
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	224c      	movs	r2, #76	@ 0x4c
 800088c:	4619      	mov	r1, r3
 800088e:	f004 f950 	bl	8004b32 <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000898:	20c5      	movs	r0, #197	@ 0xc5
 800089a:	f000 fbfd 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x3E, hspi3);
 800089e:	4668      	mov	r0, sp
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	224c      	movs	r2, #76	@ 0x4c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f004 f943 	bl	8004b32 <memcpy>
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b2:	203e      	movs	r0, #62	@ 0x3e
 80008b4:	f000 fc11 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x28, hspi3);
 80008b8:	4668      	mov	r0, sp
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f004 f936 	bl	8004b32 <memcpy>
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008cc:	2028      	movs	r0, #40	@ 0x28
 80008ce:	f000 fc04 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7, hspi3);
 80008d2:	4668      	mov	r0, sp
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	224c      	movs	r2, #76	@ 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	f004 f929 	bl	8004b32 <memcpy>
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e6:	20c7      	movs	r0, #199	@ 0xc7
 80008e8:	f000 fbd6 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x86, hspi3);
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	224c      	movs	r2, #76	@ 0x4c
 80008f4:	4619      	mov	r1, r3
 80008f6:	f004 f91c 	bl	8004b32 <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000900:	2086      	movs	r0, #134	@ 0x86
 8000902:	f000 fbea 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36, hspi3);
 8000906:	4668      	mov	r0, sp
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	224c      	movs	r2, #76	@ 0x4c
 800090e:	4619      	mov	r1, r3
 8000910:	f004 f90f 	bl	8004b32 <memcpy>
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091a:	2036      	movs	r0, #54	@ 0x36
 800091c:	f000 fbbc 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x48, hspi3);
 8000920:	4668      	mov	r0, sp
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	f004 f902 	bl	8004b32 <memcpy>
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000934:	2048      	movs	r0, #72	@ 0x48
 8000936:	f000 fbd0 	bl	80010da <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A, hspi3);
 800093a:	4668      	mov	r0, sp
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	224c      	movs	r2, #76	@ 0x4c
 8000942:	4619      	mov	r1, r3
 8000944:	f004 f8f5 	bl	8004b32 <memcpy>
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f000 fba2 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x55, hspi3);    //16bit
 8000954:	4668      	mov	r0, sp
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	224c      	movs	r2, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	f004 f8e8 	bl	8004b32 <memcpy>
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000968:	2055      	movs	r0, #85	@ 0x55
 800096a:	f000 fbb6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_REG(0xB1, hspi3);
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	224c      	movs	r2, #76	@ 0x4c
 8000976:	4619      	mov	r1, r3
 8000978:	f004 f8db 	bl	8004b32 <memcpy>
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000982:	20b1      	movs	r0, #177	@ 0xb1
 8000984:	f000 fb88 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	f004 f8ce 	bl	8004b32 <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb9c 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x18, hspi3);
 80009a2:	4668      	mov	r0, sp
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	224c      	movs	r2, #76	@ 0x4c
 80009aa:	4619      	mov	r1, r3
 80009ac:	f004 f8c1 	bl	8004b32 <memcpy>
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b6:	2018      	movs	r0, #24
 80009b8:	f000 fb8f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x01, hspi3);
	LCD_WR_DATA(0x00, hspi3);
	LCD_WR_DATA(0x20, hspi3); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6, hspi3);
 80009bc:	4668      	mov	r0, sp
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f004 f8b4 	bl	8004b32 <memcpy>
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	20b6      	movs	r0, #182	@ 0xb6
 80009d2:	f000 fb61 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x08, hspi3);
 80009d6:	4668      	mov	r0, sp
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	224c      	movs	r2, #76	@ 0x4c
 80009de:	4619      	mov	r1, r3
 80009e0:	f004 f8a7 	bl	8004b32 <memcpy>
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ea:	2008      	movs	r0, #8
 80009ec:	f000 fb75 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x82, hspi3);
 80009f0:	4668      	mov	r0, sp
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	224c      	movs	r2, #76	@ 0x4c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f004 f89a 	bl	8004b32 <memcpy>
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a04:	2082      	movs	r0, #130	@ 0x82
 8000a06:	f000 fb68 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x27, hspi3);
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	224c      	movs	r2, #76	@ 0x4c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f004 f88d 	bl	8004b32 <memcpy>
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1e:	2027      	movs	r0, #39	@ 0x27
 8000a20:	f000 fb5b 	bl	80010da <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2, hspi3);
 8000a24:	4668      	mov	r0, sp
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f004 f880 	bl	8004b32 <memcpy>
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a38:	20f2      	movs	r0, #242	@ 0xf2
 8000a3a:	f000 fb2d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000a3e:	4668      	mov	r0, sp
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f004 f873 	bl	8004b32 <memcpy>
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fb41 	bl	80010da <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26, hspi3); //Gamma set
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	4619      	mov	r1, r3
 8000a62:	f004 f866 	bl	8004b32 <memcpy>
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a6c:	2026      	movs	r0, #38	@ 0x26
 8000a6e:	f000 fb13 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x01, hspi3); 	//Gamma Curve (G2.2)
 8000a72:	4668      	mov	r0, sp
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	224c      	movs	r2, #76	@ 0x4c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f004 f859 	bl	8004b32 <memcpy>
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb27 	bl	80010da <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0, hspi3);
 8000a8c:	4668      	mov	r0, sp
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	224c      	movs	r2, #76	@ 0x4c
 8000a94:	4619      	mov	r1, r3
 8000a96:	f004 f84c 	bl	8004b32 <memcpy>
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa0:	20e0      	movs	r0, #224	@ 0xe0
 8000aa2:	f000 faf9 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x0F, hspi3);
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	224c      	movs	r2, #76	@ 0x4c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f004 f83f 	bl	8004b32 <memcpy>
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 fb0d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	224c      	movs	r2, #76	@ 0x4c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f004 f832 	bl	8004b32 <memcpy>
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad4:	2031      	movs	r0, #49	@ 0x31
 8000ad6:	f000 fb00 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2B, hspi3);
 8000ada:	4668      	mov	r0, sp
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	224c      	movs	r2, #76	@ 0x4c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f004 f825 	bl	8004b32 <memcpy>
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aee:	202b      	movs	r0, #43	@ 0x2b
 8000af0:	f000 faf3 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000af4:	4668      	mov	r0, sp
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	224c      	movs	r2, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	f004 f818 	bl	8004b32 <memcpy>
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f000 fae6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000b0e:	4668      	mov	r0, sp
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	224c      	movs	r2, #76	@ 0x4c
 8000b16:	4619      	mov	r1, r3
 8000b18:	f004 f80b 	bl	8004b32 <memcpy>
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b22:	200e      	movs	r0, #14
 8000b24:	f000 fad9 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000b28:	4668      	mov	r0, sp
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	224c      	movs	r2, #76	@ 0x4c
 8000b30:	4619      	mov	r1, r3
 8000b32:	f003 fffe 	bl	8004b32 <memcpy>
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 facc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x4E, hspi3);
 8000b42:	4668      	mov	r0, sp
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	224c      	movs	r2, #76	@ 0x4c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f003 fff1 	bl	8004b32 <memcpy>
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b56:	204e      	movs	r0, #78	@ 0x4e
 8000b58:	f000 fabf 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xF1, hspi3);
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	f003 ffe4 	bl	8004b32 <memcpy>
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b70:	20f1      	movs	r0, #241	@ 0xf1
 8000b72:	f000 fab2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x37, hspi3);
 8000b76:	4668      	mov	r0, sp
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	224c      	movs	r2, #76	@ 0x4c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f003 ffd7 	bl	8004b32 <memcpy>
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	2037      	movs	r0, #55	@ 0x37
 8000b8c:	f000 faa5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000b90:	4668      	mov	r0, sp
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	224c      	movs	r2, #76	@ 0x4c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f003 ffca 	bl	8004b32 <memcpy>
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f000 fa98 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x10, hspi3);
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	224c      	movs	r2, #76	@ 0x4c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f003 ffbd 	bl	8004b32 <memcpy>
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 fa8b 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	224c      	movs	r2, #76	@ 0x4c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f003 ffb0 	bl	8004b32 <memcpy>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fa7e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000bde:	4668      	mov	r0, sp
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	224c      	movs	r2, #76	@ 0x4c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f003 ffa3 	bl	8004b32 <memcpy>
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f000 fa71 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x09, hspi3);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	224c      	movs	r2, #76	@ 0x4c
 8000c00:	4619      	mov	r1, r3
 8000c02:	f003 ff96 	bl	8004b32 <memcpy>
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 fa64 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000c12:	4668      	mov	r0, sp
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	224c      	movs	r2, #76	@ 0x4c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f003 ff89 	bl	8004b32 <memcpy>
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fa57 	bl	80010da <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1, hspi3);
 8000c2c:	4668      	mov	r0, sp
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	4619      	mov	r1, r3
 8000c36:	f003 ff7c 	bl	8004b32 <memcpy>
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	20e1      	movs	r0, #225	@ 0xe1
 8000c42:	f000 fa29 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000c46:	4668      	mov	r0, sp
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	224c      	movs	r2, #76	@ 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 ff6f 	bl	8004b32 <memcpy>
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fa3d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000c60:	4668      	mov	r0, sp
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f003 ff62 	bl	8004b32 <memcpy>
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	200e      	movs	r0, #14
 8000c76:	f000 fa30 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x14, hspi3);
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	224c      	movs	r2, #76	@ 0x4c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f003 ff55 	bl	8004b32 <memcpy>
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f000 fa23 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000c94:	4668      	mov	r0, sp
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f003 ff48 	bl	8004b32 <memcpy>
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fa16 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x11, hspi3);
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	224c      	movs	r2, #76	@ 0x4c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f003 ff3b 	bl	8004b32 <memcpy>
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc2:	2011      	movs	r0, #17
 8000cc4:	f000 fa09 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	224c      	movs	r2, #76	@ 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f003 ff2e 	bl	8004b32 <memcpy>
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f000 f9fc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	224c      	movs	r2, #76	@ 0x4c
 8000cea:	4619      	mov	r1, r3
 8000cec:	f003 ff21 	bl	8004b32 <memcpy>
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	2031      	movs	r0, #49	@ 0x31
 8000cf8:	f000 f9ef 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8000cfc:	4668      	mov	r0, sp
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	224c      	movs	r2, #76	@ 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f003 ff14 	bl	8004b32 <memcpy>
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d10:	20c1      	movs	r0, #193	@ 0xc1
 8000d12:	f000 f9e2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x48, hspi3);
 8000d16:	4668      	mov	r0, sp
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	224c      	movs	r2, #76	@ 0x4c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f003 ff07 	bl	8004b32 <memcpy>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2a:	2048      	movs	r0, #72	@ 0x48
 8000d2c:	f000 f9d5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000d30:	4668      	mov	r0, sp
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	224c      	movs	r2, #76	@ 0x4c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fefa 	bl	8004b32 <memcpy>
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 f9c8 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	224c      	movs	r2, #76	@ 0x4c
 8000d52:	4619      	mov	r1, r3
 8000d54:	f003 feed 	bl	8004b32 <memcpy>
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f9bb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000d64:	4668      	mov	r0, sp
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	224c      	movs	r2, #76	@ 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f003 fee0 	bl	8004b32 <memcpy>
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f9ae 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	224c      	movs	r2, #76	@ 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f003 fed3 	bl	8004b32 <memcpy>
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	2031      	movs	r0, #49	@ 0x31
 8000d94:	f000 f9a1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x36, hspi3);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	f003 fec6 	bl	8004b32 <memcpy>
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	2036      	movs	r0, #54	@ 0x36
 8000dae:	f000 f994 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	224c      	movs	r2, #76	@ 0x4c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f003 feb9 	bl	8004b32 <memcpy>
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f987 	bl	80010da <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11, hspi3);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f003 feac 	bl	8004b32 <memcpy>
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de0:	2011      	movs	r0, #17
 8000de2:	f000 f959 	bl	8001098 <LCD_WR_REG>

	HAL_Delay(120);
 8000de6:	2078      	movs	r0, #120	@ 0x78
 8000de8:	f001 f986 	bl	80020f8 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29, hspi3);
 8000dec:	4668      	mov	r0, sp
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	224c      	movs	r2, #76	@ 0x4c
 8000df4:	4619      	mov	r1, r3
 8000df6:	f003 fe9c 	bl	8004b32 <memcpy>
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	2029      	movs	r0, #41	@ 0x29
 8000e02:	f000 f949 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x2C, hspi3);
 8000e06:	4668      	mov	r0, sp
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	224c      	movs	r2, #76	@ 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f003 fe8f 	bl	8004b32 <memcpy>
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1a:	202c      	movs	r0, #44	@ 0x2c
 8000e1c:	f000 f95d 	bl	80010da <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 8000e20:	4668      	mov	r0, sp
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f003 fe82 	bl	8004b32 <memcpy>
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fbb9 	bl	80015ac <LCD_direction>

}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr

08000e46 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b097      	sub	sp, #92	@ 0x5c
 8000e4a:	af14      	add	r7, sp, #80	@ 0x50
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4623      	mov	r3, r4
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a, hspi3);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	224c      	movs	r2, #76	@ 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f003 fe60 	bl	8004b32 <memcpy>
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	202a      	movs	r0, #42	@ 0x2a
 8000e7a:	f000 f90d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8, hspi3);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2dc      	uxtb	r4, r3
 8000e86:	4668      	mov	r0, sp
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	224c      	movs	r2, #76	@ 0x4c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f003 fe4f 	bl	8004b32 <memcpy>
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 f91d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x, hspi3);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2dc      	uxtb	r4, r3
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	224c      	movs	r2, #76	@ 0x4c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f003 fe40 	bl	8004b32 <memcpy>
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f000 f90e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8, hspi3);
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2dc      	uxtb	r4, r3
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	224c      	movs	r2, #76	@ 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f003 fe2f 	bl	8004b32 <memcpy>
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f8fd 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x, hspi3);
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	b2dc      	uxtb	r4, r3
 8000ee4:	4668      	mov	r0, sp
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	224c      	movs	r2, #76	@ 0x4c
 8000eec:	4619      	mov	r1, r3
 8000eee:	f003 fe20 	bl	8004b32 <memcpy>
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 f8ee 	bl	80010da <LCD_WR_DATA>

	LCD_WR_REG(0x2b, hspi3);
 8000efe:	4668      	mov	r0, sp
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	224c      	movs	r2, #76	@ 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f003 fe13 	bl	8004b32 <memcpy>
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f12:	202b      	movs	r0, #43	@ 0x2b
 8000f14:	f000 f8c0 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8, hspi3);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	4668      	mov	r0, sp
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	224c      	movs	r2, #76	@ 0x4c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f003 fe02 	bl	8004b32 <memcpy>
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 f8d0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y, hspi3);
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	b2dc      	uxtb	r4, r3
 8000f3e:	4668      	mov	r0, sp
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	224c      	movs	r2, #76	@ 0x4c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f003 fdf3 	bl	8004b32 <memcpy>
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f8c1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8, hspi3);
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2dc      	uxtb	r4, r3
 8000f60:	4668      	mov	r0, sp
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f003 fde2 	bl	8004b32 <memcpy>
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 f8b0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y, hspi3);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2dc      	uxtb	r4, r3
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	224c      	movs	r2, #76	@ 0x4c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f003 fdd3 	bl	8004b32 <memcpy>
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f8a1 	bl	80010da <LCD_WR_DATA>

}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	b09a      	sub	sp, #104	@ 0x68
 8000fa8:	af16      	add	r7, sp, #88	@ 0x58
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fac:	4603      	mov	r3, r0
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	80bb      	strh	r3, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 8000fc8:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8000fcc:	88fe      	ldrh	r6, [r7, #6]
 8000fce:	88bd      	ldrh	r5, [r7, #4]
 8000fd0:	88fc      	ldrh	r4, [r7, #6]
 8000fd2:	4668      	mov	r0, sp
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	2258      	movs	r2, #88	@ 0x58
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f003 fda9 	bl	8004b32 <memcpy>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4632      	mov	r2, r6
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff2d 	bl	8000e46 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c, hspi3);
 8000fec:	4668      	mov	r0, sp
 8000fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f003 fd9c 	bl	8004b32 <memcpy>
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	202c      	movs	r0, #44	@ 0x2c
 8001002:	f000 f849 	bl	8001098 <LCD_WR_REG>
	DC_H();
 8001006:	f000 fb8f 	bl	8001728 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	2202      	movs	r2, #2
 8001018:	f002 fcb9 	bl	800398e <HAL_SPI_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <ILI9341_WritePixel+0x86>
		Error_Handler();
 8001022:	f000 fdd3 	bl	8001bcc <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr

08001034 <ILI9341_Reset>:
	__HAL_SPI_ENABLE(&hspi3);
#endif
}

void ILI9341_Reset(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	RESET_L();
 8001038:	f000 fb46 	bl	80016c8 <RESET_L>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 f85b 	bl	80020f8 <HAL_Delay>
	RESET_H();
 8001042:	f000 fb4d 	bl	80016e0 <RESET_H>
	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f001 f856 	bl	80020f8 <HAL_Delay>
	CS_L();
 800104c:	f000 fb54 	bl	80016f8 <CS_L>
	LED_H();
 8001050:	f000 fb76 	bl	8001740 <LED_H>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 8001058:	b084      	sub	sp, #16
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	f107 0c10 	add.w	ip, r7, #16
 8001064:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800106c:	f000 fb50 	bl	8001710 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 8001070:	1df9      	adds	r1, r7, #7
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	2201      	movs	r2, #1
 8001078:	f107 0010 	add.w	r0, r7, #16
 800107c:	f002 fc87 	bl	800398e <HAL_SPI_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <ILI9341_SoftReset+0x32>
		Error_Handler();
 8001086:	f000 fda1 	bl	8001bcc <Error_Handler>
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data, SPI_HandleTypeDef hspi3)
{
 8001098:	b084      	sub	sp, #16
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4604      	mov	r4, r0
 80010a2:	f107 001c 	add.w	r0, r7, #28
 80010a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010aa:	4623      	mov	r3, r4
 80010ac:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80010ae:	f000 fb2f 	bl	8001710 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f107 001c 	add.w	r0, r7, #28
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f002 fc66 	bl	800398e <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <LCD_WR_REG+0x34>
		Error_Handler();
 80010c8:	f000 fd80 	bl	8001bcc <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr

080010da <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data, SPI_HandleTypeDef hspi3)
{
 80010da:	b084      	sub	sp, #16
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	f107 001c 	add.w	r0, r7, #28
 80010e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010ec:	4623      	mov	r3, r4
 80010ee:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80010f0:	f000 fb1a 	bl	8001728 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	f107 001c 	add.w	r0, r7, #28
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	2201      	movs	r2, #1
 8001100:	f002 fc45 	bl	800398e <HAL_SPI_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <LCD_WR_DATA+0x34>
		Error_Handler();
 800110a:	f000 fd5f 	bl	8001bcc <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <ILI9341_InitWindowsWithFont>:
	HAL_SPI_Transmit_DMA(&hspi3, pData, Size*2 );
	//HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)pData, Size );
	while(spiDmaTransferComplete == 0);
}

void ILI9341_InitWindowsWithFont(SPI_HandleTypeDef hspi3, uint16_t color){
 800111c:	b084      	sub	sp, #16
 800111e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001120:	b099      	sub	sp, #100	@ 0x64
 8001122:	af16      	add	r7, sp, #88	@ 0x58
 8001124:	f107 0420 	add.w	r4, r7, #32
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 800112c:	466b      	mov	r3, sp
 800112e:	f107 0120 	add.w	r1, r7, #32
 8001132:	2258      	movs	r2, #88	@ 0x58
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fcfc 	bl	8004b32 <memcpy>
 800113a:	f240 133f 	movw	r3, #319	@ 0x13f
 800113e:	22ef      	movs	r2, #239	@ 0xef
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fe7f 	bl	8000e46 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001148:	2300      	movs	r3, #0
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	e01c      	b.n	8001188 <ILI9341_InitWindowsWithFont+0x6c>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	e013      	b.n	800117c <ILI9341_InitWindowsWithFont+0x60>
			ILI9341_WritePixel(x, y, color, hspi3);
 8001154:	f8b7 6078 	ldrh.w	r6, [r7, #120]	@ 0x78
 8001158:	88bd      	ldrh	r5, [r7, #4]
 800115a:	88fc      	ldrh	r4, [r7, #6]
 800115c:	4668      	mov	r0, sp
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2254      	movs	r2, #84	@ 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	f003 fce4 	bl	8004b32 <memcpy>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	4632      	mov	r2, r6
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff15 	bl	8000fa0 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	80bb      	strh	r3, [r7, #4]
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2bef      	cmp	r3, #239	@ 0xef
 8001180:	d9e8      	bls.n	8001154 <ILI9341_InitWindowsWithFont+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800118e:	d3de      	bcc.n	800114e <ILI9341_InitWindowsWithFont+0x32>
		}
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, char c, SPI_HandleTypeDef hspi3) {
 80011a0:	b082      	sub	sp, #8
 80011a2:	b5b0      	push	{r4, r5, r7, lr}
 80011a4:	b0a2      	sub	sp, #136	@ 0x88
 80011a6:	af1a      	add	r7, sp, #104	@ 0x68
 80011a8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80011ac:	e884 000c 	stmia.w	r4, {r2, r3}
 80011b0:	4603      	mov	r3, r0
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	460b      	mov	r3, r1
 80011b6:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) {
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2b1f      	cmp	r3, #31
 80011bc:	d902      	bls.n	80011c4 <ILI9341_DrawChar+0x24>
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80011c2:	d901      	bls.n	80011c8 <ILI9341_DrawChar+0x28>
	        c = '?'; // Si le caractère n'est pas supporté
 80011c4:	233f      	movs	r3, #63	@ 0x3f
 80011c6:	717b      	strb	r3, [r7, #5]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	f1a3 0220 	sub.w	r2, r3, #32
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	4a3c      	ldr	r2, [pc, #240]	@ (80012c8 <ILI9341_DrawChar+0x128>)
 80011d6:	4413      	add	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 80011da:	2307      	movs	r3, #7
 80011dc:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 80011de:	231e      	movs	r3, #30
 80011e0:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e041      	b.n	800126c <ILI9341_DrawChar+0xcc>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	e038      	b.n	8001260 <ILI9341_DrawChar+0xc0>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	fa42 f303 	asr.w	r3, r2, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <ILI9341_DrawChar+0x92>
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0xFFFF, hspi3);
 8001206:	88fc      	ldrh	r4, [r7, #6]
 8001208:	ab03      	add	r3, sp, #12
 800120a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800120e:	2258      	movs	r2, #88	@ 0x58
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fc8e 	bl	8004b32 <memcpy>
 8001216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	2114      	movs	r1, #20
 800122a:	4620      	mov	r0, r4
 800122c:	f000 f974 	bl	8001518 <ILI9341_WritePixelsFullHeight>
 8001230:	e013      	b.n	800125a <ILI9341_DrawChar+0xba>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0x0000, hspi3);
 8001232:	88fc      	ldrh	r4, [r7, #6]
 8001234:	ab03      	add	r3, sp, #12
 8001236:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800123a:	2258      	movs	r2, #88	@ 0x58
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc78 	bl	8004b32 <memcpy>
 8001242:	2300      	movs	r3, #0
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	89bb      	ldrh	r3, [r7, #12]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	2114      	movs	r1, #20
 8001254:	4620      	mov	r0, r4
 8001256:	f000 f95f 	bl	8001518 <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	3301      	adds	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b04      	cmp	r3, #4
 8001264:	ddc3      	ble.n	80011ee <ILI9341_DrawChar+0x4e>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b07      	cmp	r3, #7
 8001270:	ddba      	ble.n	80011e8 <ILI9341_DrawChar+0x48>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e01a      	b.n	80012ae <ILI9341_DrawChar+0x10e>
        ILI9341_WritePixel(x + 5, Y_CHAR + j, 0x0000, hspi3);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	3305      	adds	r3, #5
 800127c:	b29c      	uxth	r4, r3
 800127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3314      	adds	r3, #20
 8001286:	b29d      	uxth	r5, r3
 8001288:	4668      	mov	r0, sp
 800128a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800128e:	2254      	movs	r2, #84	@ 0x54
 8001290:	4619      	mov	r1, r3
 8001292:	f003 fc4e 	bl	8004b32 <memcpy>
 8001296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001298:	2200      	movs	r2, #0
 800129a:	4629      	mov	r1, r5
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff fe7f 	bl	8000fa0 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 80012a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	75fb      	strb	r3, [r7, #23]
 80012ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	dde0      	ble.n	8001278 <ILI9341_DrawChar+0xd8>
    }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	08005924 	.word	0x08005924

080012cc <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str, SPI_HandleTypeDef hspi3) {
 80012cc:	b084      	sub	sp, #16
 80012ce:	b5b0      	push	{r4, r5, r7, lr}
 80012d0:	b098      	sub	sp, #96	@ 0x60
 80012d2:	af14      	add	r7, sp, #80	@ 0x50
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80012da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int cmpt = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	uint16_t x = MARGE_NUMBERS_X;
 80012e2:	2305      	movs	r3, #5
 80012e4:	817b      	strh	r3, [r7, #10]
	if (strlen(str) == 5)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7fe ff7a 	bl	80001e0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d127      	bne.n	8001342 <ILI9341_InitDrawString+0x76>
	{
		while (*str)
 80012f2:	e021      	b.n	8001338 <ILI9341_InitDrawString+0x6c>
		{
			if (cmpt != 0){
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <ILI9341_InitDrawString+0x3e>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	0192      	lsls	r2, r2, #6
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	b29b      	uxth	r3, r3
 8001306:	3305      	adds	r3, #5
 8001308:	817b      	strh	r3, [r7, #10]
			}
			ILI9341_DrawChar(x, *str, hspi3);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781d      	ldrb	r5, [r3, #0]
 800130e:	897c      	ldrh	r4, [r7, #10]
 8001310:	4668      	mov	r0, sp
 8001312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001316:	2250      	movs	r2, #80	@ 0x50
 8001318:	4619      	mov	r1, r3
 800131a:	f003 fc0a 	bl	8004b32 <memcpy>
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	cb0c      	ldmia	r3, {r2, r3}
 8001324:	4629      	mov	r1, r5
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff ff3a 	bl	80011a0 <ILI9341_DrawChar>
			str++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1d9      	bne.n	80012f4 <ILI9341_InitDrawString+0x28>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 8001340:	e002      	b.n	8001348 <ILI9341_InitDrawString+0x7c>
		printf("Erreur le string est composé de plus de 5 éléments");
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <ILI9341_InitDrawString+0x8c>)
 8001344:	f003 fa12 	bl	800476c <iprintf>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001352:	b004      	add	sp, #16
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	080058c8 	.word	0x080058c8

0800135c <changeTime>:

void changeTime(RTC_TimeTypeDef Time, SPI_HandleTypeDef hspi3)
{
 800135c:	b084      	sub	sp, #16
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b097      	sub	sp, #92	@ 0x5c
 8001362:	af14      	add	r7, sp, #80	@ 0x50
 8001364:	f107 0418 	add.w	r4, r7, #24
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Time.Minutes == 00)
 800136c:	7e7b      	ldrb	r3, [r7, #25]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d15f      	bne.n	8001432 <changeTime+0xd6>
	{
		uint8_t diz = Time.Hours / 10; // Get the dizaines
 8001372:	7e3b      	ldrb	r3, [r7, #24]
 8001374:	4a54      	ldr	r2, [pc, #336]	@ (80014c8 <changeTime+0x16c>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	08db      	lsrs	r3, r3, #3
 800137c:	717b      	strb	r3, [r7, #5]
		uint8_t unite = Time.Hours % 10; // get unités
 800137e:	7e3a      	ldrb	r2, [r7, #24]
 8001380:	4b51      	ldr	r3, [pc, #324]	@ (80014c8 <changeTime+0x16c>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	08d9      	lsrs	r1, r3, #3
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	713b      	strb	r3, [r7, #4]
		if (unite != 0)
 8001394:	793b      	ldrb	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00f      	beq.n	80013ba <changeTime+0x5e>
		{
			change(X_UNIT_HOUR, unite, hspi3);
 800139a:	793c      	ldrb	r4, [r7, #4]
 800139c:	4668      	mov	r0, sp
 800139e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013a2:	2250      	movs	r2, #80	@ 0x50
 80013a4:	4619      	mov	r1, r3
 80013a6:	f003 fbc4 	bl	8004b32 <memcpy>
 80013aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ae:	cb0c      	ldmia	r3, {r2, r3}
 80013b0:	4621      	mov	r1, r4
 80013b2:	2044      	movs	r0, #68	@ 0x44
 80013b4:	f000 f88a 	bl	80014cc <change>
 80013b8:	e01d      	b.n	80013f6 <changeTime+0x9a>
		}
		else
		{
			change(X_DIX_HOUR, diz, hspi3);
 80013ba:	797c      	ldrb	r4, [r7, #5]
 80013bc:	4668      	mov	r0, sp
 80013be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013c2:	2250      	movs	r2, #80	@ 0x50
 80013c4:	4619      	mov	r1, r3
 80013c6:	f003 fbb4 	bl	8004b32 <memcpy>
 80013ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ce:	cb0c      	ldmia	r3, {r2, r3}
 80013d0:	4621      	mov	r1, r4
 80013d2:	2005      	movs	r0, #5
 80013d4:	f000 f87a 	bl	80014cc <change>
			change(X_UNIT_HOUR, unite, hspi3);
 80013d8:	793c      	ldrb	r4, [r7, #4]
 80013da:	4668      	mov	r0, sp
 80013dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013e0:	2250      	movs	r2, #80	@ 0x50
 80013e2:	4619      	mov	r1, r3
 80013e4:	f003 fba5 	bl	8004b32 <memcpy>
 80013e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ec:	cb0c      	ldmia	r3, {r2, r3}
 80013ee:	4621      	mov	r1, r4
 80013f0:	2044      	movs	r0, #68	@ 0x44
 80013f2:	f000 f86b 	bl	80014cc <change>
		}
		// Il faut modifier l'unité et la dizaine des minutes
		change(X_DIX_MIN, 0, hspi3);
 80013f6:	4668      	mov	r0, sp
 80013f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013fc:	2250      	movs	r2, #80	@ 0x50
 80013fe:	4619      	mov	r1, r3
 8001400:	f003 fb97 	bl	8004b32 <memcpy>
 8001404:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001408:	cb0c      	ldmia	r3, {r2, r3}
 800140a:	2100      	movs	r1, #0
 800140c:	20c2      	movs	r0, #194	@ 0xc2
 800140e:	f000 f85d 	bl	80014cc <change>
		change(X_UNIT_MIN, 0, hspi3);
 8001412:	4668      	mov	r0, sp
 8001414:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001418:	2250      	movs	r2, #80	@ 0x50
 800141a:	4619      	mov	r1, r3
 800141c:	f003 fb89 	bl	8004b32 <memcpy>
 8001420:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001424:	cb0c      	ldmia	r3, {r2, r3}
 8001426:	2100      	movs	r1, #0
 8001428:	f240 1001 	movw	r0, #257	@ 0x101
 800142c:	f000 f84e 	bl	80014cc <change>
			change(X_DIX_MIN, diz, hspi3);
			change(X_UNIT_MIN, unite, hspi3);
		}

	}
}
 8001430:	e043      	b.n	80014ba <changeTime+0x15e>
		uint8_t diz = Time.Minutes / 10; // Get the dizaines
 8001432:	7e7b      	ldrb	r3, [r7, #25]
 8001434:	4a24      	ldr	r2, [pc, #144]	@ (80014c8 <changeTime+0x16c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	71fb      	strb	r3, [r7, #7]
		uint8_t unite = Time.Minutes % 10; // get unités
 800143e:	7e7a      	ldrb	r2, [r7, #25]
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <changeTime+0x16c>)
 8001442:	fba3 1302 	umull	r1, r3, r3, r2
 8001446:	08d9      	lsrs	r1, r3, #3
 8001448:	460b      	mov	r3, r1
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	71bb      	strb	r3, [r7, #6]
		if (unite != 0)
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d010      	beq.n	800147c <changeTime+0x120>
			change(X_UNIT_MIN, unite, hspi3);
 800145a:	79bc      	ldrb	r4, [r7, #6]
 800145c:	4668      	mov	r0, sp
 800145e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001462:	2250      	movs	r2, #80	@ 0x50
 8001464:	4619      	mov	r1, r3
 8001466:	f003 fb64 	bl	8004b32 <memcpy>
 800146a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800146e:	cb0c      	ldmia	r3, {r2, r3}
 8001470:	4621      	mov	r1, r4
 8001472:	f240 1001 	movw	r0, #257	@ 0x101
 8001476:	f000 f829 	bl	80014cc <change>
}
 800147a:	e01e      	b.n	80014ba <changeTime+0x15e>
			change(X_DIX_MIN, diz, hspi3);
 800147c:	79fc      	ldrb	r4, [r7, #7]
 800147e:	4668      	mov	r0, sp
 8001480:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001484:	2250      	movs	r2, #80	@ 0x50
 8001486:	4619      	mov	r1, r3
 8001488:	f003 fb53 	bl	8004b32 <memcpy>
 800148c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001490:	cb0c      	ldmia	r3, {r2, r3}
 8001492:	4621      	mov	r1, r4
 8001494:	20c2      	movs	r0, #194	@ 0xc2
 8001496:	f000 f819 	bl	80014cc <change>
			change(X_UNIT_MIN, unite, hspi3);
 800149a:	79bc      	ldrb	r4, [r7, #6]
 800149c:	4668      	mov	r0, sp
 800149e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014a2:	2250      	movs	r2, #80	@ 0x50
 80014a4:	4619      	mov	r1, r3
 80014a6:	f003 fb44 	bl	8004b32 <memcpy>
 80014aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ae:	cb0c      	ldmia	r3, {r2, r3}
 80014b0:	4621      	mov	r1, r4
 80014b2:	f240 1001 	movw	r0, #257	@ 0x101
 80014b6:	f000 f809 	bl	80014cc <change>
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014c4:	b004      	add	sp, #16
 80014c6:	4770      	bx	lr
 80014c8:	cccccccd 	.word	0xcccccccd

080014cc <change>:

static void change(int x, uint8_t time, SPI_HandleTypeDef hspi3)
{
 80014cc:	b082      	sub	sp, #8
 80014ce:	b5b0      	push	{r4, r5, r7, lr}
 80014d0:	b098      	sub	sp, #96	@ 0x60
 80014d2:	af14      	add	r7, sp, #80	@ 0x50
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	f107 0020 	add.w	r0, r7, #32
 80014da:	e880 000c 	stmia.w	r0, {r2, r3}
 80014de:	460b      	mov	r3, r1
 80014e0:	70fb      	strb	r3, [r7, #3]
	char caractere = time + '0';  // Conversion en caractère
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	3330      	adds	r3, #48	@ 0x30
 80014e6:	73fb      	strb	r3, [r7, #15]
	ILI9341_DrawChar(x, caractere, hspi3);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	b29c      	uxth	r4, r3
 80014ec:	7bfd      	ldrb	r5, [r7, #15]
 80014ee:	4668      	mov	r0, sp
 80014f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f4:	2250      	movs	r2, #80	@ 0x50
 80014f6:	4619      	mov	r1, r3
 80014f8:	f003 fb1b 	bl	8004b32 <memcpy>
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	cb0c      	ldmia	r3, {r2, r3}
 8001502:	4629      	mov	r1, r5
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fe4b 	bl	80011a0 <ILI9341_DrawChar>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001514:	b002      	add	sp, #8
 8001516:	4770      	bx	lr

08001518 <ILI9341_WritePixelsFullHeight>:


static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b09d      	sub	sp, #116	@ 0x74
 800151c:	af16      	add	r7, sp, #88	@ 0x58
 800151e:	60ba      	str	r2, [r7, #8]
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4603      	mov	r3, r0
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	460b      	mov	r3, r1
 8001528:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e034      	b.n	800159a <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	e02a      	b.n	800158c <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	b29b      	uxth	r3, r3
 800153a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800153c:	fb12 f303 	smulbb	r3, r2, r3
 8001540:	b29a      	uxth	r2, r3
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29c      	uxth	r4, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	b29b      	uxth	r3, r3
 8001554:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001556:	fb12 f303 	smulbb	r3, r2, r3
 800155a:	b29a      	uxth	r2, r3
 800155c:	89bb      	ldrh	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	b29a      	uxth	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4413      	add	r3, r2
 8001568:	b29d      	uxth	r5, r3
 800156a:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 800156c:	4668      	mov	r0, sp
 800156e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001572:	2254      	movs	r2, #84	@ 0x54
 8001574:	4619      	mov	r1, r3
 8001576:	f003 fadc 	bl	8004b32 <memcpy>
 800157a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800157c:	4632      	mov	r2, r6
 800157e:	4629      	mov	r1, r5
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff fd0d 	bl	8000fa0 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3301      	adds	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbd0      	blt.n	8001536 <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbc6      	blt.n	8001530 <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ac <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 80015ac:	b084      	sub	sp, #16
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b097      	sub	sp, #92	@ 0x5c
 80015b2:	af14      	add	r7, sp, #80	@ 0x50
 80015b4:	4604      	mov	r4, r0
 80015b6:	f107 001c 	add.w	r0, r7, #28
 80015ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80015be:	4623      	mov	r3, r4
 80015c0:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d877      	bhi.n	80016b8 <LCD_direction+0x10c>
 80015c8:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <LCD_direction+0x24>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	08001617 	.word	0x08001617
 80015d8:	0800164d 	.word	0x0800164d
 80015dc:	08001683 	.word	0x08001683
	case ROTATE_0:
		LCD_WR_REG(0x36, hspi3);
 80015e0:	4668      	mov	r0, sp
 80015e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e6:	224c      	movs	r2, #76	@ 0x4c
 80015e8:	4619      	mov	r1, r3
 80015ea:	f003 faa2 	bl	8004b32 <memcpy>
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f4:	2036      	movs	r0, #54	@ 0x36
 80015f6:	f7ff fd4f 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x48, hspi3);
 80015fa:	4668      	mov	r0, sp
 80015fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001600:	224c      	movs	r2, #76	@ 0x4c
 8001602:	4619      	mov	r1, r3
 8001604:	f003 fa95 	bl	8004b32 <memcpy>
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	2048      	movs	r0, #72	@ 0x48
 8001610:	f7ff fd63 	bl	80010da <LCD_WR_DATA>
		break;
 8001614:	e050      	b.n	80016b8 <LCD_direction+0x10c>
	case ROTATE_90:
		LCD_WR_REG(0x36, hspi3);
 8001616:	4668      	mov	r0, sp
 8001618:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161c:	224c      	movs	r2, #76	@ 0x4c
 800161e:	4619      	mov	r1, r3
 8001620:	f003 fa87 	bl	8004b32 <memcpy>
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162a:	2036      	movs	r0, #54	@ 0x36
 800162c:	f7ff fd34 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x28, hspi3);
 8001630:	4668      	mov	r0, sp
 8001632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001636:	224c      	movs	r2, #76	@ 0x4c
 8001638:	4619      	mov	r1, r3
 800163a:	f003 fa7a 	bl	8004b32 <memcpy>
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001644:	2028      	movs	r0, #40	@ 0x28
 8001646:	f7ff fd48 	bl	80010da <LCD_WR_DATA>
		break;
 800164a:	e035      	b.n	80016b8 <LCD_direction+0x10c>
	case ROTATE_180:
		LCD_WR_REG(0x36, hspi3);
 800164c:	4668      	mov	r0, sp
 800164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001652:	224c      	movs	r2, #76	@ 0x4c
 8001654:	4619      	mov	r1, r3
 8001656:	f003 fa6c 	bl	8004b32 <memcpy>
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001660:	2036      	movs	r0, #54	@ 0x36
 8001662:	f7ff fd19 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x88, hspi3);
 8001666:	4668      	mov	r0, sp
 8001668:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800166c:	224c      	movs	r2, #76	@ 0x4c
 800166e:	4619      	mov	r1, r3
 8001670:	f003 fa5f 	bl	8004b32 <memcpy>
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167a:	2088      	movs	r0, #136	@ 0x88
 800167c:	f7ff fd2d 	bl	80010da <LCD_WR_DATA>
		break;
 8001680:	e01a      	b.n	80016b8 <LCD_direction+0x10c>
	case ROTATE_270:
		LCD_WR_REG(0x36, hspi3);
 8001682:	4668      	mov	r0, sp
 8001684:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001688:	224c      	movs	r2, #76	@ 0x4c
 800168a:	4619      	mov	r1, r3
 800168c:	f003 fa51 	bl	8004b32 <memcpy>
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001696:	2036      	movs	r0, #54	@ 0x36
 8001698:	f7ff fcfe 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0xE8, hspi3);
 800169c:	4668      	mov	r0, sp
 800169e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a2:	224c      	movs	r2, #76	@ 0x4c
 80016a4:	4619      	mov	r1, r3
 80016a6:	f003 fa44 	bl	8004b32 <memcpy>
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b0:	20e8      	movs	r0, #232	@ 0xe8
 80016b2:	f7ff fd12 	bl	80010da <LCD_WR_DATA>
		break;
 80016b6:	bf00      	nop
	}
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016c2:	b004      	add	sp, #16
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <RESET_L>:

static void RESET_L(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <RESET_L+0x14>)
 80016d2:	f000 ffcb 	bl	800266c <HAL_GPIO_WritePin>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020400 	.word	0x40020400

080016e0 <RESET_H>:

static void RESET_H(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2180      	movs	r1, #128	@ 0x80
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <RESET_H+0x14>)
 80016ea:	f000 ffbf 	bl	800266c <HAL_GPIO_WritePin>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020400 	.word	0x40020400

080016f8 <CS_L>:

static void CS_L(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2140      	movs	r1, #64	@ 0x40
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <CS_L+0x14>)
 8001702:	f000 ffb3 	bl	800266c <HAL_GPIO_WritePin>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020400 	.word	0x40020400

08001710 <DC_L>:

static void DC_L(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171a:	4802      	ldr	r0, [pc, #8]	@ (8001724 <DC_L+0x14>)
 800171c:	f000 ffa6 	bl	800266c <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40020400 	.word	0x40020400

08001728 <DC_H>:

static void DC_H(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001732:	4802      	ldr	r0, [pc, #8]	@ (800173c <DC_H+0x14>)
 8001734:	f000 ff9a 	bl	800266c <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020400 	.word	0x40020400

08001740 <LED_H>:

static void LED_H(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b09c      	sub	sp, #112	@ 0x70
 8001754:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001756:	f000 fc5d 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175a:	f000 f881 	bl	8001860 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175e:	f000 f9ad 	bl	8001abc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001762:	f000 f981 	bl	8001a68 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001766:	f000 f949 	bl	80019fc <MX_SPI3_Init>
  MX_RTC_Init();
 800176a:	f000 f8e5 	bl	8001938 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(hspi3);  // Initialisation de l'écran ILI9341
 800176e:	4c35      	ldr	r4, [pc, #212]	@ (8001844 <main+0xf4>)
 8001770:	4668      	mov	r0, sp
 8001772:	f104 0310 	add.w	r3, r4, #16
 8001776:	2248      	movs	r2, #72	@ 0x48
 8001778:	4619      	mov	r1, r3
 800177a:	f003 f9da 	bl	8004b32 <memcpy>
 800177e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001782:	f7fe fefd 	bl	8000580 <ILI9341_Init>
  ILI9341_InitWindowsWithFont(hspi3, 0x0000);
 8001786:	4c2f      	ldr	r4, [pc, #188]	@ (8001844 <main+0xf4>)
 8001788:	2300      	movs	r3, #0
 800178a:	9312      	str	r3, [sp, #72]	@ 0x48
 800178c:	4668      	mov	r0, sp
 800178e:	f104 0310 	add.w	r3, r4, #16
 8001792:	2248      	movs	r2, #72	@ 0x48
 8001794:	4619      	mov	r1, r3
 8001796:	f003 f9cc 	bl	8004b32 <memcpy>
 800179a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800179e:	f7ff fcbd 	bl	800111c <ILI9341_InitWindowsWithFont>
  uint16_t text_color = 0xFFFF; // Blanc
 80017a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a6:	81bb      	strh	r3, [r7, #12]
  char timeChar[6];
  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80017a8:	2200      	movs	r2, #0
 80017aa:	4927      	ldr	r1, [pc, #156]	@ (8001848 <main+0xf8>)
 80017ac:	4827      	ldr	r0, [pc, #156]	@ (800184c <main+0xfc>)
 80017ae:	f001 fe1c 	bl	80033ea <HAL_RTC_GetTime>

  sprintf(timeChar, "%02d:%02d", (char)Time.Hours, (char)Time.Minutes);
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <main+0xf8>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <main+0xf8>)
 80017ba:	785b      	ldrb	r3, [r3, #1]
 80017bc:	1d38      	adds	r0, r7, #4
 80017be:	4924      	ldr	r1, [pc, #144]	@ (8001850 <main+0x100>)
 80017c0:	f003 f844 	bl	800484c <siprintf>
  ILI9341_InitDrawString(timeChar, hspi3);
 80017c4:	4c1f      	ldr	r4, [pc, #124]	@ (8001844 <main+0xf4>)
 80017c6:	1d3d      	adds	r5, r7, #4
 80017c8:	4668      	mov	r0, sp
 80017ca:	f104 030c 	add.w	r3, r4, #12
 80017ce:	224c      	movs	r2, #76	@ 0x4c
 80017d0:	4619      	mov	r1, r3
 80017d2:	f003 f9ae 	bl	8004b32 <memcpy>
 80017d6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017da:	4628      	mov	r0, r5
 80017dc:	f7ff fd76 	bl	80012cc <ILI9341_InitDrawString>
  uint8_t lastMinutes = Time.Minutes;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <main+0xf8>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	73fb      	strb	r3, [r7, #15]

  printf("RTC time\n");
 80017e6:	481b      	ldr	r0, [pc, #108]	@ (8001854 <main+0x104>)
 80017e8:	f003 f828 	bl	800483c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80017ec:	2200      	movs	r2, #0
 80017ee:	4916      	ldr	r1, [pc, #88]	@ (8001848 <main+0xf8>)
 80017f0:	4816      	ldr	r0, [pc, #88]	@ (800184c <main+0xfc>)
 80017f2:	f001 fdfa 	bl	80033ea <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80017f6:	2200      	movs	r2, #0
 80017f8:	4917      	ldr	r1, [pc, #92]	@ (8001858 <main+0x108>)
 80017fa:	4814      	ldr	r0, [pc, #80]	@ (800184c <main+0xfc>)
 80017fc:	f001 fed7 	bl	80035ae <HAL_RTC_GetDate>
	if (lastMinutes != Time.Minutes)
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <main+0xf8>)
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	429a      	cmp	r2, r3
 8001808:	d010      	beq.n	800182c <main+0xdc>
	{
		changeTime(Time, hspi3);
 800180a:	4c0f      	ldr	r4, [pc, #60]	@ (8001848 <main+0xf8>)
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <main+0xf4>)
 800180e:	ab01      	add	r3, sp, #4
 8001810:	4611      	mov	r1, r2
 8001812:	2258      	movs	r2, #88	@ 0x58
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f98c 	bl	8004b32 <memcpy>
 800181a:	6923      	ldr	r3, [r4, #16]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001822:	f7ff fd9b 	bl	800135c <changeTime>
		lastMinutes = Time.Minutes;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <main+0xf8>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	73fb      	strb	r3, [r7, #15]
	}

	printf("Time %02d\n", Time.Seconds);
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <main+0xf8>)
 800182e:	789b      	ldrb	r3, [r3, #2]
 8001830:	4619      	mov	r1, r3
 8001832:	480a      	ldr	r0, [pc, #40]	@ (800185c <main+0x10c>)
 8001834:	f002 ff9a 	bl	800476c <iprintf>
	HAL_Delay(500);
 8001838:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800183c:	f000 fc5c 	bl	80020f8 <HAL_Delay>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001840:	e7d4      	b.n	80017ec <main+0x9c>
 8001842:	bf00      	nop
 8001844:	200000a4 	.word	0x200000a4
 8001848:	20000148 	.word	0x20000148
 800184c:	20000084 	.word	0x20000084
 8001850:	08005900 	.word	0x08005900
 8001854:	0800590c 	.word	0x0800590c
 8001858:	20000144 	.word	0x20000144
 800185c:	08005918 	.word	0x08005918

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	@ 0x50
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	2230      	movs	r2, #48	@ 0x30
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f003 f8e4 	bl	8004a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <SystemClock_Config+0xd0>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <SystemClock_Config+0xd0>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <SystemClock_Config+0xd0>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <SystemClock_Config+0xd4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a22      	ldr	r2, [pc, #136]	@ (8001934 <SystemClock_Config+0xd4>)
 80018aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <SystemClock_Config+0xd4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018bc:	230a      	movs	r3, #10
 80018be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c4:	2310      	movs	r3, #16
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018c8:	2301      	movs	r3, #1
 80018ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	2302      	movs	r3, #2
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018d4:	2310      	movs	r3, #16
 80018d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018de:	2304      	movs	r3, #4
 80018e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018e2:	2304      	movs	r3, #4
 80018e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fed8 	bl	80026a0 <HAL_RCC_OscConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f6:	f000 f969 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fa:	230f      	movs	r3, #15
 80018fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2102      	movs	r1, #2
 8001916:	4618      	mov	r0, r3
 8001918:	f001 f93a 	bl	8002b90 <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001922:	f000 f953 	bl	8001bcc <Error_Handler>
  }
}
 8001926:	bf00      	nop
 8001928:	3750      	adds	r7, #80	@ 0x50
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001950:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <MX_RTC_Init+0xbc>)
 8001952:	4a29      	ldr	r2, [pc, #164]	@ (80019f8 <MX_RTC_Init+0xc0>)
 8001954:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001956:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <MX_RTC_Init+0xbc>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800195c:	4b25      	ldr	r3, [pc, #148]	@ (80019f4 <MX_RTC_Init+0xbc>)
 800195e:	227f      	movs	r2, #127	@ 0x7f
 8001960:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <MX_RTC_Init+0xbc>)
 8001964:	22ff      	movs	r2, #255	@ 0xff
 8001966:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <MX_RTC_Init+0xbc>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <MX_RTC_Init+0xbc>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001974:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <MX_RTC_Init+0xbc>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800197a:	481e      	ldr	r0, [pc, #120]	@ (80019f4 <MX_RTC_Init+0xbc>)
 800197c:	f001 fc18 	bl	80031b0 <HAL_RTC_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001986:	f000 f921 	bl	8001bcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 800198a:	2313      	movs	r3, #19
 800198c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 800198e:	233b      	movs	r3, #59	@ 0x3b
 8001990:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 8001992:	232d      	movs	r3, #45	@ 0x2d
 8001994:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	4619      	mov	r1, r3
 80019a4:	4813      	ldr	r0, [pc, #76]	@ (80019f4 <MX_RTC_Init+0xbc>)
 80019a6:	f001 fc86 	bl	80032b6 <HAL_RTC_SetTime>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f000 f90c 	bl	8001bcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019b4:	2301      	movs	r3, #1
 80019b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80019b8:	2301      	movs	r3, #1
 80019ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	480a      	ldr	r0, [pc, #40]	@ (80019f4 <MX_RTC_Init+0xbc>)
 80019cc:	f001 fd6b 	bl	80034a6 <HAL_RTC_SetDate>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80019d6:	f000 f8f9 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	2029      	movs	r0, #41	@ 0x29
 80019e0:	f000 fc89 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019e4:	2029      	movs	r0, #41	@ 0x29
 80019e6:	f000 fca2 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000084 	.word	0x20000084
 80019f8:	40002800 	.word	0x40002800

080019fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a02:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <MX_SPI3_Init+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a2c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a48:	220a      	movs	r2, #10
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_SPI3_Init+0x64>)
 8001a4e:	f001 ff15 	bl	800387c <HAL_SPI_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a58:	f000 f8b8 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200000a4 	.word	0x200000a4
 8001a64:	40003c00 	.word	0x40003c00

08001a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <MX_USART2_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f002 f996 	bl	8003dd0 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f000 f88f 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000fc 	.word	0x200000fc
 8001ab8:	40004400 	.word	0x40004400

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a30      	ldr	r2, [pc, #192]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a29      	ldr	r2, [pc, #164]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a22      	ldr	r2, [pc, #136]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <MX_GPIO_Init+0xe0>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2120      	movs	r1, #32
 8001b46:	4816      	ldr	r0, [pc, #88]	@ (8001ba0 <MX_GPIO_Init+0xe4>)
 8001b48:	f000 fd90 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001b52:	4814      	ldr	r0, [pc, #80]	@ (8001ba4 <MX_GPIO_Init+0xe8>)
 8001b54:	f000 fd8a 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <MX_GPIO_Init+0xe4>)
 8001b70:	f000 fbf8 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001b74:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_GPIO_Init+0xe8>)
 8001b8e:	f000 fbe9 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400

08001ba8 <__io_putchar>:

int __io_putchar(int ch)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001bb0:	1d39      	adds	r1, r7, #4
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <__io_putchar+0x20>)
 8001bba:	f002 f959 	bl	8003e70 <HAL_UART_Transmit>
	return ch;
 8001bbe:	687b      	ldr	r3, [r7, #4]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200000fc 	.word	0x200000fc

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <Error_Handler+0x8>

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c16:	2007      	movs	r0, #7
 8001c18:	f000 fb62 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <HAL_RTC_MspInit+0x50>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c54:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 f9b8 	bl	8002fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c66:	f7ff ffb1 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c6a:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <HAL_RTC_MspInit+0x54>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40002800 	.word	0x40002800
 8001c7c:	42470e3c 	.word	0x42470e3c

08001c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a28      	ldr	r2, [pc, #160]	@ (8001d40 <HAL_SPI_MspInit+0xc0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d14a      	bne.n	8001d38 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	4a26      	ldr	r2, [pc, #152]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb2:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a18      	ldr	r2, [pc, #96]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <HAL_SPI_MspInit+0xc4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <HAL_SPI_MspInit+0xc8>)
 8001d14:	f000 fb26 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d28:	2306      	movs	r3, #6
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <HAL_SPI_MspInit+0xcc>)
 8001d34:	f000 fb16 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	@ 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40003c00 	.word	0x40003c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020400 	.word	0x40020400

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a19      	ldr	r2, [pc, #100]	@ (8001dd4 <HAL_UART_MspInit+0x84>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d12b      	bne.n	8001dca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a17      	ldr	r2, [pc, #92]	@ (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_UART_MspInit+0x88>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_UART_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001daa:	230c      	movs	r3, #12
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <HAL_UART_MspInit+0x8c>)
 8001dc6:	f000 facd 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	@ 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40004400 	.word	0x40004400
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e36:	f000 f93f 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e00a      	b.n	8001e66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e50:	f3af 8000 	nop.w
 8001e54:	4601      	mov	r1, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	60ba      	str	r2, [r7, #8]
 8001e5c:	b2ca      	uxtb	r2, r1
 8001e5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dbf0      	blt.n	8001e50 <_read+0x12>
  }

  return len;
 8001e6e:	687b      	ldr	r3, [r7, #4]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e009      	b.n	8001e9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	60ba      	str	r2, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fe88 	bl	8001ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbf1      	blt.n	8001e8a <_write+0x12>
  }
  return len;
 8001ea6:	687b      	ldr	r3, [r7, #4]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_close>:

int _close(int file)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_isatty>:

int _isatty(int file)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f20:	4a14      	ldr	r2, [pc, #80]	@ (8001f74 <_sbrk+0x5c>)
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <_sbrk+0x60>)
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <_sbrk+0x64>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <_sbrk+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f48:	f002 fdc6 	bl	8004ad8 <__errno>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	220c      	movs	r2, #12
 8001f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e009      	b.n	8001f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <_sbrk+0x64>)
 8001f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20020000 	.word	0x20020000
 8001f78:	00000400 	.word	0x00000400
 8001f7c:	2000015c 	.word	0x2000015c
 8001f80:	200002b0 	.word	0x200002b0

08001f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <SystemInit+0x20>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <SystemInit+0x20>)
 8001f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <RTC_Alarm_IRQHandler>:
        // Erreur de configuration de l'alarme
    }
}

/* Interruption RTC Alarm */
void RTC_Alarm_IRQHandler(RTC_HandleTypeDef *hrtc) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    HAL_RTC_AlarmIRQHandler(hrtc);  // Appeler le gestionnaire d'interruption HAL
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f001 fb4b 	bl	800364c <HAL_RTC_AlarmIRQHandler>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fc4:	f7ff ffde 	bl	8001f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	@ (8002000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800200c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f002 fd79 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff2:	f7ff fbad 	bl	8001750 <main>
  bx  lr    
 8001ff6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ff8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002004:	08005b60 	.word	0x08005b60
  ldr r2, =_sbss
 8002008:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800200c:	200002b0 	.word	0x200002b0

08002010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC_IRQHandler>
	...

08002014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <HAL_Init+0x40>)
 800201e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_Init+0x40>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_Init+0x40>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203c:	2003      	movs	r0, #3
 800203e:	f000 f94f 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002042:	2000      	movs	r0, #0
 8002044:	f000 f808 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002048:	f7ff fdc6 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_InitTick+0x54>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_InitTick+0x58>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f967 	bl	800234a <HAL_SYSTICK_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00e      	b.n	80020a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d80a      	bhi.n	80020a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 f92f 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <HAL_InitTick+0x5c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000160 	.word	0x20000160

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000160 	.word	0x20000160

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000008 	.word	0x20000008

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	@ (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	@ (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	@ (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	@ (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	@ (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e267      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026be:	4b88      	ldr	r3, [pc, #544]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ca:	4b85      	ldr	r3, [pc, #532]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b82      	ldr	r3, [pc, #520]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b7e      	ldr	r3, [pc, #504]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d157      	bne.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e242      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x74>
 8002706:	4b76      	ldr	r3, [pc, #472]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a75      	ldr	r2, [pc, #468]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b70      	ldr	r3, [pc, #448]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6f      	ldr	r2, [pc, #444]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6d      	ldr	r3, [pc, #436]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6c      	ldr	r2, [pc, #432]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002738:	4b69      	ldr	r3, [pc, #420]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a65      	ldr	r2, [pc, #404]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff fcc2 	bl	80020e0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7ff fcbe 	bl	80020e0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e207      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5b      	ldr	r3, [pc, #364]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xc0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fcae 	bl	80020e0 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff fcaa 	bl	80020e0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	@ 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1f3      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b51      	ldr	r3, [pc, #324]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027b6:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b47      	ldr	r3, [pc, #284]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b44      	ldr	r3, [pc, #272]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b41      	ldr	r3, [pc, #260]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c7      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3b      	ldr	r3, [pc, #236]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4937      	ldr	r1, [pc, #220]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b34      	ldr	r3, [pc, #208]	@ (80028e4 <HAL_RCC_OscConfig+0x244>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7ff fc63 	bl	80020e0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7ff fc5f 	bl	80020e0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1a8      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2b      	ldr	r3, [pc, #172]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b28      	ldr	r3, [pc, #160]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4925      	ldr	r1, [pc, #148]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_RCC_OscConfig+0x244>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff fc42 	bl	80020e0 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7ff fc3e 	bl	80020e0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e187      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d036      	beq.n	80028f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <HAL_RCC_OscConfig+0x248>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7ff fc22 	bl	80020e0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7ff fc1e 	bl	80020e0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e167      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_RCC_OscConfig+0x240>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x200>
 80028be:	e01b      	b.n	80028f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_OscConfig+0x248>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7ff fc0b 	bl	80020e0 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e00e      	b.n	80028ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ce:	f7ff fc07 	bl	80020e0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d907      	bls.n	80028ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e150      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
 80028e0:	40023800 	.word	0x40023800
 80028e4:	42470000 	.word	0x42470000
 80028e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ea      	bne.n	80028ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8097 	beq.w	8002a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290a:	4b81      	ldr	r3, [pc, #516]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	@ 0x40
 8002926:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b77      	ldr	r3, [pc, #476]	@ (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b74      	ldr	r3, [pc, #464]	@ (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a73      	ldr	r2, [pc, #460]	@ (8002b14 <HAL_RCC_OscConfig+0x474>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7ff fbc7 	bl	80020e0 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7ff fbc3 	bl	80020e0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e10c      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <HAL_RCC_OscConfig+0x474>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x2ea>
 800297c:	4b64      	ldr	r3, [pc, #400]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a63      	ldr	r2, [pc, #396]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
 8002988:	e01c      	b.n	80029c4 <HAL_RCC_OscConfig+0x324>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x30c>
 8002992:	4b5f      	ldr	r3, [pc, #380]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002996:	4a5e      	ldr	r2, [pc, #376]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6713      	str	r3, [r2, #112]	@ 0x70
 800299e:	4b5c      	ldr	r3, [pc, #368]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0x324>
 80029ac:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b0:	4a57      	ldr	r2, [pc, #348]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b8:	4b55      	ldr	r3, [pc, #340]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a54      	ldr	r2, [pc, #336]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7ff fb88 	bl	80020e0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7ff fb84 	bl	80020e0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0cb      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ee      	beq.n	80029d4 <HAL_RCC_OscConfig+0x334>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7ff fb72 	bl	80020e0 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff fb6e 	bl	80020e0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0b5      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	4b3e      	ldr	r3, [pc, #248]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ee      	bne.n	8002a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	4a38      	ldr	r2, [pc, #224]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80a1 	beq.w	8002b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a3e:	4b34      	ldr	r3, [pc, #208]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d05c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d141      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7ff fb42 	bl	80020e0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7ff fb3e 	bl	80020e0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e087      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	491b      	ldr	r1, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7ff fb17 	bl	80020e0 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7ff fb13 	bl	80020e0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e05c      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x416>
 8002ad4:	e054      	b.n	8002b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_RCC_OscConfig+0x478>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fb00 	bl	80020e0 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7ff fafc 	bl	80020e0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e045      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_OscConfig+0x470>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x444>
 8002b02:	e03d      	b.n	8002b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e038      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40007000 	.word	0x40007000
 8002b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x4ec>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d028      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d121      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d11a      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d111      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cc      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b68      	ldr	r3, [pc, #416]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d90c      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b65      	ldr	r3, [pc, #404]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a58      	ldr	r2, [pc, #352]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a52      	ldr	r2, [pc, #328]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d044      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e067      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4934      	ldr	r1, [pc, #208]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7ff fa2e 	bl	80020e0 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7ff fa2a 	bl	80020e0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d20c      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b22      	ldr	r3, [pc, #136]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d02:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f821 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	@ (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f98e 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08005b04 	.word	0x08005b04
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000004 	.word	0x20000004

08002d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b094      	sub	sp, #80	@ 0x50
 8002d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d74:	4b79      	ldr	r3, [pc, #484]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d00d      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x40>
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	f200 80e1 	bhi.w	8002f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x34>
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d003      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d8e:	e0db      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d90:	4b73      	ldr	r3, [pc, #460]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d94:	e0db      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d96:	4b73      	ldr	r3, [pc, #460]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d9a:	e0d8      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002da4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	2200      	movs	r2, #0
 8002dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dce:	4622      	mov	r2, r4
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	0159      	lsls	r1, r3, #5
 8002ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de0:	0150      	lsls	r0, r2, #5
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4621      	mov	r1, r4
 8002de8:	1a51      	subs	r1, r2, r1
 8002dea:	6139      	str	r1, [r7, #16]
 8002dec:	4629      	mov	r1, r5
 8002dee:	eb63 0301 	sbc.w	r3, r3, r1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e00:	4659      	mov	r1, fp
 8002e02:	018b      	lsls	r3, r1, #6
 8002e04:	4651      	mov	r1, sl
 8002e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	018a      	lsls	r2, r1, #6
 8002e0e:	4651      	mov	r1, sl
 8002e10:	ebb2 0801 	subs.w	r8, r2, r1
 8002e14:	4659      	mov	r1, fp
 8002e16:	eb63 0901 	sbc.w	r9, r3, r1
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e2e:	4690      	mov	r8, r2
 8002e30:	4699      	mov	r9, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	eb18 0303 	adds.w	r3, r8, r3
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	eb49 0303 	adc.w	r3, r9, r3
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	024b      	lsls	r3, r1, #9
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e58:	4621      	mov	r1, r4
 8002e5a:	024a      	lsls	r2, r1, #9
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e62:	2200      	movs	r2, #0
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e6c:	f7fd fa10 	bl	8000290 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e78:	e058      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b38      	ldr	r3, [pc, #224]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	2200      	movs	r2, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	4611      	mov	r1, r2
 8002e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e94:	4642      	mov	r2, r8
 8002e96:	464b      	mov	r3, r9
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	0159      	lsls	r1, r3, #5
 8002ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea6:	0150      	lsls	r0, r2, #5
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4641      	mov	r1, r8
 8002eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	00eb      	lsls	r3, r5, #3
 8002ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee2:	00e2      	lsls	r2, r4, #3
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	18e3      	adds	r3, r4, r3
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	464b      	mov	r3, r9
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f16:	2200      	movs	r2, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	61fa      	str	r2, [r7, #28]
 8002f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f20:	f7fd f9b6 	bl	8000290 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f46:	e002      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3750      	adds	r7, #80	@ 0x50
 8002f54:	46bd      	mov	sp, r7
 8002f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	007a1200 	.word	0x007a1200

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff0 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0a9b      	lsrs	r3, r3, #10
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	@ (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	08005b14 	.word	0x08005b14

08002fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fac:	f7ff ffdc 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0b5b      	lsrs	r3, r3, #13
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	@ (8002fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08005b14 	.word	0x08005b14

08002fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff8:	4b68      	ldr	r3, [pc, #416]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ffe:	f7ff f86f 	bl	80020e0 <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003006:	f7ff f86b 	bl	80020e0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0bd      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003018:	4b61      	ldr	r3, [pc, #388]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	495a      	ldr	r1, [pc, #360]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800303e:	4b57      	ldr	r3, [pc, #348]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003044:	f7ff f84c 	bl	80020e0 <HAL_GetTick>
 8003048:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800304c:	f7ff f848 	bl	80020e0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e09a      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800305e:	4b50      	ldr	r3, [pc, #320]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8083 	beq.w	800317e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	4b48      	ldr	r3, [pc, #288]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	4a47      	ldr	r2, [pc, #284]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003086:	6413      	str	r3, [r2, #64]	@ 0x40
 8003088:	4b45      	ldr	r3, [pc, #276]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003094:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a42      	ldr	r2, [pc, #264]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030a0:	f7ff f81e 	bl	80020e0 <HAL_GetTick>
 80030a4:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7ff f81a 	bl	80020e0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e06c      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80030ba:	4b3a      	ldr	r3, [pc, #232]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030c6:	4b36      	ldr	r3, [pc, #216]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ce:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02f      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d028      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e4:	4b2e      	ldr	r3, [pc, #184]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f4:	4b2c      	ldr	r3, [pc, #176]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030fa:	4a29      	ldr	r2, [pc, #164]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003100:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d114      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe ffe8 	bl	80020e0 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7fe ffe4 	bl	80020e0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e034      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ee      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003142:	d10d      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003144:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003158:	4911      	ldr	r1, [pc, #68]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
 800315e:	e005      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a0e      	ldr	r2, [pc, #56]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003166:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800316a:	6093      	str	r3, [r2, #8]
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	4909      	ldr	r1, [pc, #36]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	4313      	orrs	r3, r2
 800317c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7d1a      	ldrb	r2, [r3, #20]
 800318e:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003190:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	42470068 	.word	0x42470068
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42470e40 	.word	0x42470e40
 80031ac:	424711e0 	.word	0x424711e0

080031b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e073      	b.n	80032ae <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7f5b      	ldrb	r3, [r3, #29]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe fd26 	bl	8001c28 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d055      	beq.n	800329c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	22ca      	movs	r2, #202	@ 0xca
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2253      	movs	r2, #83	@ 0x53
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fa99 	bl	8003738 <RTC_EnterInitMode>
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d12c      	bne.n	800326a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800321e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003222:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68d2      	ldr	r2, [r2, #12]
 800324a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6919      	ldr	r1, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	041a      	lsls	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 faa0 	bl	80037a6 <RTC_ExitInitMode>
 8003266:	4603      	mov	r3, r0
 8003268:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d110      	bne.n	8003292 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	22ff      	movs	r2, #255	@ 0xff
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24
 800329a:	e001      	b.n	80032a0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b087      	sub	sp, #28
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	7f1b      	ldrb	r3, [r3, #28]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_RTC_SetTime+0x1c>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e087      	b.n	80033e2 <HAL_RTC_SetTime+0x12c>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2202      	movs	r2, #2
 80032dc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d126      	bne.n	8003332 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2200      	movs	r2, #0
 80032f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fa77 	bl	80037f0 <RTC_ByteToBcd2>
 8003302:	4603      	mov	r3, r0
 8003304:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fa70 	bl	80037f0 <RTC_ByteToBcd2>
 8003310:	4603      	mov	r3, r0
 8003312:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003314:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	789b      	ldrb	r3, [r3, #2]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fa68 	bl	80037f0 <RTC_ByteToBcd2>
 8003320:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003322:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	78db      	ldrb	r3, [r3, #3]
 800332a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e018      	b.n	8003364 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003352:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003358:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	78db      	ldrb	r3, [r3, #3]
 800335e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	22ca      	movs	r2, #202	@ 0xca
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2253      	movs	r2, #83	@ 0x53
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f9df 	bl	8003738 <RTC_EnterInitMode>
 800337a:	4603      	mov	r3, r0
 800337c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d120      	bne.n	80033c6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800338e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003392:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f9f2 	bl	80037a6 <RTC_ExitInitMode>
 80033c2:	4603      	mov	r3, r0
 80033c4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	22ff      	movs	r2, #255	@ 0xff
 80033d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]

  return status;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800341c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003420:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	0d9b      	lsrs	r3, r3, #22
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11a      	bne.n	800349c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f9de 	bl	800382c <RTC_Bcd2ToByte>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f9d5 	bl	800382c <RTC_Bcd2ToByte>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	789b      	ldrb	r3, [r3, #2]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f9cc 	bl	800382c <RTC_Bcd2ToByte>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034a6:	b590      	push	{r4, r7, lr}
 80034a8:	b087      	sub	sp, #28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_RTC_SetDate+0x1c>
 80034be:	2302      	movs	r3, #2
 80034c0:	e071      	b.n	80035a6 <HAL_RTC_SetDate+0x100>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2202      	movs	r2, #2
 80034cc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10e      	bne.n	80034f2 <HAL_RTC_SetDate+0x4c>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	f023 0310 	bic.w	r3, r3, #16
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	330a      	adds	r3, #10
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11c      	bne.n	8003532 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	78db      	ldrb	r3, [r3, #3]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f977 	bl	80037f0 <RTC_ByteToBcd2>
 8003502:	4603      	mov	r3, r0
 8003504:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f970 	bl	80037f0 <RTC_ByteToBcd2>
 8003510:	4603      	mov	r3, r0
 8003512:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003514:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	789b      	ldrb	r3, [r3, #2]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f968 	bl	80037f0 <RTC_ByteToBcd2>
 8003520:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003522:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	e00e      	b.n	8003550 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	78db      	ldrb	r3, [r3, #3]
 8003536:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800353e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003544:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	22ca      	movs	r2, #202	@ 0xca
 8003556:	625a      	str	r2, [r3, #36]	@ 0x24
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2253      	movs	r2, #83	@ 0x53
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f8e9 	bl	8003738 <RTC_EnterInitMode>
 8003566:	4603      	mov	r3, r0
 8003568:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800357a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800357e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f910 	bl	80037a6 <RTC_ExitInitMode>
 8003586:	4603      	mov	r3, r0
 8003588:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	22ff      	movs	r2, #255	@ 0xff
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]

  return status;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd90      	pop	{r4, r7, pc}

080035ae <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80035cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	0b5b      	lsrs	r3, r3, #13
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11a      	bne.n	8003642 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	78db      	ldrb	r3, [r3, #3]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f90b 	bl	800382c <RTC_Bcd2ToByte>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f902 	bl	800382c <RTC_Bcd2ToByte>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f8f9 	bl	800382c <RTC_Bcd2ToByte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003654:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003656:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800365a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003688:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f824 	bl	80036d8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80036bc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8d2 	bl	8003868 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	775a      	strb	r2, [r3, #29]
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40013c00 	.word	0x40013c00

080036d8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <HAL_RTC_WaitForSynchro+0x48>)
 80036fe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003700:	f7fe fcee 	bl	80020e0 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003706:	e009      	b.n	800371c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003708:	f7fe fcea 	bl	80020e0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003716:	d901      	bls.n	800371c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e007      	b.n	800372c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ee      	beq.n	8003708 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	00013f5f 	.word	0x00013f5f

08003738 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d122      	bne.n	800379c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003764:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003766:	f7fe fcbb 	bl	80020e0 <HAL_GetTick>
 800376a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800376c:	e00c      	b.n	8003788 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800376e:	f7fe fcb7 	bl	80020e0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800377c:	d904      	bls.n	8003788 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2204      	movs	r2, #4
 8003782:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <RTC_EnterInitMode+0x64>
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d1e8      	bne.n	800376e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff8b 	bl	80036ec <HAL_RTC_WaitForSynchro>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2204      	movs	r2, #4
 80037e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80037fe:	e005      	b.n	800380c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3301      	adds	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	3b0a      	subs	r3, #10
 800380a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	2b09      	cmp	r3, #9
 8003810:	d8f6      	bhi.n	8003800 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	b2da      	uxtb	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	4313      	orrs	r3, r2
 800381e:	b2db      	uxtb	r3, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4413      	add	r3, r2
 800385a:	b2db      	uxtb	r3, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07b      	b.n	8003986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389e:	d009      	beq.n	80038b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
 80038a6:	e005      	b.n	80038b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe f9d6 	bl	8001c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	ea42 0103 	orr.w	r1, r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0104 	and.w	r1, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f003 0210 	and.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b088      	sub	sp, #32
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399e:	f7fe fb9f 	bl	80020e0 <HAL_GetTick>
 80039a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	e12a      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Transmit+0x36>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e122      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_SPI_Transmit+0x48>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e11b      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2203      	movs	r2, #3
 80039e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a24:	d10f      	bne.n	8003a46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d007      	beq.n	8003a64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6c:	d152      	bne.n	8003b14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0xee>
 8003a76:	8b7b      	ldrh	r3, [r7, #26]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d145      	bne.n	8003b08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003aa0:	e032      	b.n	8003b08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d112      	bne.n	8003ad6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ad4:	e018      	b.n	8003b08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad6:	f7fe fb03 	bl	80020e0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d803      	bhi.n	8003aee <HAL_SPI_Transmit+0x160>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Transmit+0x166>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e082      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1c7      	bne.n	8003aa2 <HAL_SPI_Transmit+0x114>
 8003b12:	e053      	b.n	8003bbc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x194>
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d147      	bne.n	8003bb2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b48:	e033      	b.n	8003bb2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d113      	bne.n	8003b80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	7812      	ldrb	r2, [r2, #0]
 8003b64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b7e:	e018      	b.n	8003bb2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b80:	f7fe faae 	bl	80020e0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d803      	bhi.n	8003b98 <HAL_SPI_Transmit+0x20a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d102      	bne.n	8003b9e <HAL_SPI_Transmit+0x210>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e02d      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1c6      	bne.n	8003b4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8b1 	bl	8003d28 <SPI_EndRxTxTransaction>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c28:	f7fe fa5a 	bl	80020e0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c38:	f7fe fa52 	bl	80020e0 <HAL_GetTick>
 8003c3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c3e:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	0d1b      	lsrs	r3, r3, #20
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4e:	e054      	b.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d050      	beq.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c58:	f7fe fa42 	bl	80020e0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d902      	bls.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d13d      	bne.n	8003cea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c86:	d111      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c90:	d004      	beq.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9a:	d107      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	d10f      	bne.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e017      	b.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d19b      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000000 	.word	0x20000000

08003d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff6a 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e032      	b.n	8003dc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <SPI_EndRxTxTransaction+0xa0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <SPI_EndRxTxTransaction+0xa4>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	0d5b      	lsrs	r3, r3, #21
 8003d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d78:	d112      	bne.n	8003da0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff ff47 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e00f      	b.n	8003dc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d0f2      	beq.n	8003da0 <SPI_EndRxTxTransaction+0x78>
 8003dba:	e000      	b.n	8003dbe <SPI_EndRxTxTransaction+0x96>
        break;
 8003dbc:	bf00      	nop
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	165e9f81 	.word	0x165e9f81

08003dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e042      	b.n	8003e68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd ffaa 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	@ 0x24
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f973 	bl	8004100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	@ 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d175      	bne.n	8003f7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Transmit+0x2c>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e06e      	b.n	8003f7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2221      	movs	r2, #33	@ 0x21
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eae:	f7fe f917 	bl	80020e0 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec8:	d108      	bne.n	8003edc <HAL_UART_Transmit+0x6c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e003      	b.n	8003ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ee4:	e02e      	b.n	8003f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	@ 0x80
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f848 	bl	8003f86 <UART_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e03a      	b.n	8003f7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1cb      	bne.n	8003ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2140      	movs	r1, #64	@ 0x40
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f814 	bl	8003f86 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e006      	b.n	8003f7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f96:	e03b      	b.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d037      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa0:	f7fe f89e 	bl	80020e0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e03a      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d023      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b80      	cmp	r3, #128	@ 0x80
 8003fcc:	d020      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b40      	cmp	r3, #64	@ 0x40
 8003fd2:	d01d      	beq.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d116      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f81d 	bl	8004038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2208      	movs	r2, #8
 8004002:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e00f      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4013      	ands	r3, r2
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	429a      	cmp	r2, r3
 800402c:	d0b4      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b095      	sub	sp, #84	@ 0x54
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004060:	643a      	str	r2, [r7, #64]	@ 0x40
 8004062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800406e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3314      	adds	r3, #20
 800407a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	61fb      	str	r3, [r7, #28]
   return(result);
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004094:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800409a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d119      	bne.n	80040e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	60bb      	str	r3, [r7, #8]
   return(result);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0310 	bic.w	r3, r3, #16
 80040c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040d0:	61ba      	str	r2, [r7, #24]
 80040d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	613b      	str	r3, [r7, #16]
   return(result);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e5      	bne.n	80040b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040f2:	bf00      	nop
 80040f4:	3754      	adds	r7, #84	@ 0x54
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b0c0      	sub	sp, #256	@ 0x100
 8004106:	af00      	add	r7, sp, #0
 8004108:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	68d9      	ldr	r1, [r3, #12]
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	ea40 0301 	orr.w	r3, r0, r1
 8004128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	431a      	orrs	r2, r3
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004158:	f021 010c 	bic.w	r1, r1, #12
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004166:	430b      	orrs	r3, r1
 8004168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417a:	6999      	ldr	r1, [r3, #24]
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	ea40 0301 	orr.w	r3, r0, r1
 8004186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b8f      	ldr	r3, [pc, #572]	@ (80043cc <UART_SetConfig+0x2cc>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d005      	beq.n	80041a0 <UART_SetConfig+0xa0>
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b8d      	ldr	r3, [pc, #564]	@ (80043d0 <UART_SetConfig+0x2d0>)
 800419c:	429a      	cmp	r2, r3
 800419e:	d104      	bne.n	80041aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041a0:	f7fe ff02 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 80041a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041a8:	e003      	b.n	80041b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041aa:	f7fe fee9 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 80041ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041bc:	f040 810c 	bne.w	80043d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041da:	415b      	adcs	r3, r3
 80041dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041e2:	4621      	mov	r1, r4
 80041e4:	eb12 0801 	adds.w	r8, r2, r1
 80041e8:	4629      	mov	r1, r5
 80041ea:	eb43 0901 	adc.w	r9, r3, r1
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004202:	4690      	mov	r8, r2
 8004204:	4699      	mov	r9, r3
 8004206:	4623      	mov	r3, r4
 8004208:	eb18 0303 	adds.w	r3, r8, r3
 800420c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004210:	462b      	mov	r3, r5
 8004212:	eb49 0303 	adc.w	r3, r9, r3
 8004216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004226:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800422a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800422e:	460b      	mov	r3, r1
 8004230:	18db      	adds	r3, r3, r3
 8004232:	653b      	str	r3, [r7, #80]	@ 0x50
 8004234:	4613      	mov	r3, r2
 8004236:	eb42 0303 	adc.w	r3, r2, r3
 800423a:	657b      	str	r3, [r7, #84]	@ 0x54
 800423c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004244:	f7fc f824 	bl	8000290 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4b61      	ldr	r3, [pc, #388]	@ (80043d4 <UART_SetConfig+0x2d4>)
 800424e:	fba3 2302 	umull	r2, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	011c      	lsls	r4, r3, #4
 8004256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004260:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004268:	4642      	mov	r2, r8
 800426a:	464b      	mov	r3, r9
 800426c:	1891      	adds	r1, r2, r2
 800426e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004270:	415b      	adcs	r3, r3
 8004272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004278:	4641      	mov	r1, r8
 800427a:	eb12 0a01 	adds.w	sl, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb43 0b01 	adc.w	fp, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004298:	4692      	mov	sl, r2
 800429a:	469b      	mov	fp, r3
 800429c:	4643      	mov	r3, r8
 800429e:	eb1a 0303 	adds.w	r3, sl, r3
 80042a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a6:	464b      	mov	r3, r9
 80042a8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042da:	f7fb ffd9 	bl	8000290 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <UART_SetConfig+0x2d4>)
 80042e6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2264      	movs	r2, #100	@ 0x64
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	1acb      	subs	r3, r1, r3
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042fa:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <UART_SetConfig+0x2d4>)
 80042fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004308:	441c      	add	r4, r3
 800430a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004314:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	1891      	adds	r1, r2, r2
 8004322:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004324:	415b      	adcs	r3, r3
 8004326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800432c:	4641      	mov	r1, r8
 800432e:	1851      	adds	r1, r2, r1
 8004330:	6339      	str	r1, [r7, #48]	@ 0x30
 8004332:	4649      	mov	r1, r9
 8004334:	414b      	adcs	r3, r1
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004344:	4659      	mov	r1, fp
 8004346:	00cb      	lsls	r3, r1, #3
 8004348:	4651      	mov	r1, sl
 800434a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434e:	4651      	mov	r1, sl
 8004350:	00ca      	lsls	r2, r1, #3
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4603      	mov	r3, r0
 8004358:	4642      	mov	r2, r8
 800435a:	189b      	adds	r3, r3, r2
 800435c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004360:	464b      	mov	r3, r9
 8004362:	460a      	mov	r2, r1
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004378:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800437c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004380:	460b      	mov	r3, r1
 8004382:	18db      	adds	r3, r3, r3
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004386:	4613      	mov	r3, r2
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004396:	f7fb ff7b 	bl	8000290 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4b0d      	ldr	r3, [pc, #52]	@ (80043d4 <UART_SetConfig+0x2d4>)
 80043a0:	fba3 1302 	umull	r1, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	2164      	movs	r1, #100	@ 0x64
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	3332      	adds	r3, #50	@ 0x32
 80043b2:	4a08      	ldr	r2, [pc, #32]	@ (80043d4 <UART_SetConfig+0x2d4>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 0207 	and.w	r2, r3, #7
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4422      	add	r2, r4
 80043c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c8:	e106      	b.n	80045d8 <UART_SetConfig+0x4d8>
 80043ca:	bf00      	nop
 80043cc:	40011000 	.word	0x40011000
 80043d0:	40011400 	.word	0x40011400
 80043d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043ea:	4642      	mov	r2, r8
 80043ec:	464b      	mov	r3, r9
 80043ee:	1891      	adds	r1, r2, r2
 80043f0:	6239      	str	r1, [r7, #32]
 80043f2:	415b      	adcs	r3, r3
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043fa:	4641      	mov	r1, r8
 80043fc:	1854      	adds	r4, r2, r1
 80043fe:	4649      	mov	r1, r9
 8004400:	eb43 0501 	adc.w	r5, r3, r1
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	00eb      	lsls	r3, r5, #3
 800440e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004412:	00e2      	lsls	r2, r4, #3
 8004414:	4614      	mov	r4, r2
 8004416:	461d      	mov	r5, r3
 8004418:	4643      	mov	r3, r8
 800441a:	18e3      	adds	r3, r4, r3
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004420:	464b      	mov	r3, r9
 8004422:	eb45 0303 	adc.w	r3, r5, r3
 8004426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004436:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004446:	4629      	mov	r1, r5
 8004448:	008b      	lsls	r3, r1, #2
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004450:	4621      	mov	r1, r4
 8004452:	008a      	lsls	r2, r1, #2
 8004454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004458:	f7fb ff1a 	bl	8000290 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4b60      	ldr	r3, [pc, #384]	@ (80045e4 <UART_SetConfig+0x4e4>)
 8004462:	fba3 2302 	umull	r2, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	011c      	lsls	r4, r3, #4
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004474:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	1891      	adds	r1, r2, r2
 8004482:	61b9      	str	r1, [r7, #24]
 8004484:	415b      	adcs	r3, r3
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448c:	4641      	mov	r1, r8
 800448e:	1851      	adds	r1, r2, r1
 8004490:	6139      	str	r1, [r7, #16]
 8004492:	4649      	mov	r1, r9
 8004494:	414b      	adcs	r3, r1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044a4:	4659      	mov	r1, fp
 80044a6:	00cb      	lsls	r3, r1, #3
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ae:	4651      	mov	r1, sl
 80044b0:	00ca      	lsls	r2, r1, #3
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	4642      	mov	r2, r8
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044c0:	464b      	mov	r3, r9
 80044c2:	460a      	mov	r2, r1
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044e4:	4649      	mov	r1, r9
 80044e6:	008b      	lsls	r3, r1, #2
 80044e8:	4641      	mov	r1, r8
 80044ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ee:	4641      	mov	r1, r8
 80044f0:	008a      	lsls	r2, r1, #2
 80044f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044f6:	f7fb fecb 	bl	8000290 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	4b38      	ldr	r3, [pc, #224]	@ (80045e4 <UART_SetConfig+0x4e4>)
 8004502:	fba3 2301 	umull	r2, r3, r3, r1
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2264      	movs	r2, #100	@ 0x64
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	1acb      	subs	r3, r1, r3
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	3332      	adds	r3, #50	@ 0x32
 8004514:	4a33      	ldr	r2, [pc, #204]	@ (80045e4 <UART_SetConfig+0x4e4>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004520:	441c      	add	r4, r3
 8004522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004526:	2200      	movs	r2, #0
 8004528:	673b      	str	r3, [r7, #112]	@ 0x70
 800452a:	677a      	str	r2, [r7, #116]	@ 0x74
 800452c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	1891      	adds	r1, r2, r2
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	415b      	adcs	r3, r3
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004540:	4641      	mov	r1, r8
 8004542:	1851      	adds	r1, r2, r1
 8004544:	6039      	str	r1, [r7, #0]
 8004546:	4649      	mov	r1, r9
 8004548:	414b      	adcs	r3, r1
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004558:	4659      	mov	r1, fp
 800455a:	00cb      	lsls	r3, r1, #3
 800455c:	4651      	mov	r1, sl
 800455e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004562:	4651      	mov	r1, sl
 8004564:	00ca      	lsls	r2, r1, #3
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	4603      	mov	r3, r0
 800456c:	4642      	mov	r2, r8
 800456e:	189b      	adds	r3, r3, r2
 8004570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004572:	464b      	mov	r3, r9
 8004574:	460a      	mov	r2, r1
 8004576:	eb42 0303 	adc.w	r3, r2, r3
 800457a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	663b      	str	r3, [r7, #96]	@ 0x60
 8004586:	667a      	str	r2, [r7, #100]	@ 0x64
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004594:	4649      	mov	r1, r9
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	4641      	mov	r1, r8
 800459a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459e:	4641      	mov	r1, r8
 80045a0:	008a      	lsls	r2, r1, #2
 80045a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045a6:	f7fb fe73 	bl	8000290 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <UART_SetConfig+0x4e4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	@ 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	3332      	adds	r3, #50	@ 0x32
 80045c2:	4a08      	ldr	r2, [pc, #32]	@ (80045e4 <UART_SetConfig+0x4e4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 020f 	and.w	r2, r3, #15
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4422      	add	r2, r4
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045de:	46bd      	mov	sp, r7
 80045e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e4:	51eb851f 	.word	0x51eb851f

080045e8 <std>:
 80045e8:	2300      	movs	r3, #0
 80045ea:	b510      	push	{r4, lr}
 80045ec:	4604      	mov	r4, r0
 80045ee:	e9c0 3300 	strd	r3, r3, [r0]
 80045f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045f6:	6083      	str	r3, [r0, #8]
 80045f8:	8181      	strh	r1, [r0, #12]
 80045fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80045fc:	81c2      	strh	r2, [r0, #14]
 80045fe:	6183      	str	r3, [r0, #24]
 8004600:	4619      	mov	r1, r3
 8004602:	2208      	movs	r2, #8
 8004604:	305c      	adds	r0, #92	@ 0x5c
 8004606:	f000 fa19 	bl	8004a3c <memset>
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <std+0x58>)
 800460c:	6263      	str	r3, [r4, #36]	@ 0x24
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <std+0x5c>)
 8004610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <std+0x60>)
 8004614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <std+0x64>)
 8004618:	6323      	str	r3, [r4, #48]	@ 0x30
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <std+0x68>)
 800461c:	6224      	str	r4, [r4, #32]
 800461e:	429c      	cmp	r4, r3
 8004620:	d006      	beq.n	8004630 <std+0x48>
 8004622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004626:	4294      	cmp	r4, r2
 8004628:	d002      	beq.n	8004630 <std+0x48>
 800462a:	33d0      	adds	r3, #208	@ 0xd0
 800462c:	429c      	cmp	r4, r3
 800462e:	d105      	bne.n	800463c <std+0x54>
 8004630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f000 ba78 	b.w	8004b2c <__retarget_lock_init_recursive>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	0800488d 	.word	0x0800488d
 8004644:	080048af 	.word	0x080048af
 8004648:	080048e7 	.word	0x080048e7
 800464c:	0800490b 	.word	0x0800490b
 8004650:	20000164 	.word	0x20000164

08004654 <stdio_exit_handler>:
 8004654:	4a02      	ldr	r2, [pc, #8]	@ (8004660 <stdio_exit_handler+0xc>)
 8004656:	4903      	ldr	r1, [pc, #12]	@ (8004664 <stdio_exit_handler+0x10>)
 8004658:	4803      	ldr	r0, [pc, #12]	@ (8004668 <stdio_exit_handler+0x14>)
 800465a:	f000 b869 	b.w	8004730 <_fwalk_sglue>
 800465e:	bf00      	nop
 8004660:	2000000c 	.word	0x2000000c
 8004664:	08005699 	.word	0x08005699
 8004668:	2000001c 	.word	0x2000001c

0800466c <cleanup_stdio>:
 800466c:	6841      	ldr	r1, [r0, #4]
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <cleanup_stdio+0x34>)
 8004670:	4299      	cmp	r1, r3
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	d001      	beq.n	800467c <cleanup_stdio+0x10>
 8004678:	f001 f80e 	bl	8005698 <_fflush_r>
 800467c:	68a1      	ldr	r1, [r4, #8]
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <cleanup_stdio+0x38>)
 8004680:	4299      	cmp	r1, r3
 8004682:	d002      	beq.n	800468a <cleanup_stdio+0x1e>
 8004684:	4620      	mov	r0, r4
 8004686:	f001 f807 	bl	8005698 <_fflush_r>
 800468a:	68e1      	ldr	r1, [r4, #12]
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <cleanup_stdio+0x3c>)
 800468e:	4299      	cmp	r1, r3
 8004690:	d004      	beq.n	800469c <cleanup_stdio+0x30>
 8004692:	4620      	mov	r0, r4
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f000 bffe 	b.w	8005698 <_fflush_r>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	20000164 	.word	0x20000164
 80046a4:	200001cc 	.word	0x200001cc
 80046a8:	20000234 	.word	0x20000234

080046ac <global_stdio_init.part.0>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <global_stdio_init.part.0+0x30>)
 80046b0:	4c0b      	ldr	r4, [pc, #44]	@ (80046e0 <global_stdio_init.part.0+0x34>)
 80046b2:	4a0c      	ldr	r2, [pc, #48]	@ (80046e4 <global_stdio_init.part.0+0x38>)
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	4620      	mov	r0, r4
 80046b8:	2200      	movs	r2, #0
 80046ba:	2104      	movs	r1, #4
 80046bc:	f7ff ff94 	bl	80045e8 <std>
 80046c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046c4:	2201      	movs	r2, #1
 80046c6:	2109      	movs	r1, #9
 80046c8:	f7ff ff8e 	bl	80045e8 <std>
 80046cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046d0:	2202      	movs	r2, #2
 80046d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d6:	2112      	movs	r1, #18
 80046d8:	f7ff bf86 	b.w	80045e8 <std>
 80046dc:	2000029c 	.word	0x2000029c
 80046e0:	20000164 	.word	0x20000164
 80046e4:	08004655 	.word	0x08004655

080046e8 <__sfp_lock_acquire>:
 80046e8:	4801      	ldr	r0, [pc, #4]	@ (80046f0 <__sfp_lock_acquire+0x8>)
 80046ea:	f000 ba20 	b.w	8004b2e <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	200002a5 	.word	0x200002a5

080046f4 <__sfp_lock_release>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__sfp_lock_release+0x8>)
 80046f6:	f000 ba1b 	b.w	8004b30 <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	200002a5 	.word	0x200002a5

08004700 <__sinit>:
 8004700:	b510      	push	{r4, lr}
 8004702:	4604      	mov	r4, r0
 8004704:	f7ff fff0 	bl	80046e8 <__sfp_lock_acquire>
 8004708:	6a23      	ldr	r3, [r4, #32]
 800470a:	b11b      	cbz	r3, 8004714 <__sinit+0x14>
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f7ff bff0 	b.w	80046f4 <__sfp_lock_release>
 8004714:	4b04      	ldr	r3, [pc, #16]	@ (8004728 <__sinit+0x28>)
 8004716:	6223      	str	r3, [r4, #32]
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <__sinit+0x2c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f5      	bne.n	800470c <__sinit+0xc>
 8004720:	f7ff ffc4 	bl	80046ac <global_stdio_init.part.0>
 8004724:	e7f2      	b.n	800470c <__sinit+0xc>
 8004726:	bf00      	nop
 8004728:	0800466d 	.word	0x0800466d
 800472c:	2000029c 	.word	0x2000029c

08004730 <_fwalk_sglue>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	4607      	mov	r7, r0
 8004736:	4688      	mov	r8, r1
 8004738:	4614      	mov	r4, r2
 800473a:	2600      	movs	r6, #0
 800473c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004740:	f1b9 0901 	subs.w	r9, r9, #1
 8004744:	d505      	bpl.n	8004752 <_fwalk_sglue+0x22>
 8004746:	6824      	ldr	r4, [r4, #0]
 8004748:	2c00      	cmp	r4, #0
 800474a:	d1f7      	bne.n	800473c <_fwalk_sglue+0xc>
 800474c:	4630      	mov	r0, r6
 800474e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d907      	bls.n	8004768 <_fwalk_sglue+0x38>
 8004758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800475c:	3301      	adds	r3, #1
 800475e:	d003      	beq.n	8004768 <_fwalk_sglue+0x38>
 8004760:	4629      	mov	r1, r5
 8004762:	4638      	mov	r0, r7
 8004764:	47c0      	blx	r8
 8004766:	4306      	orrs	r6, r0
 8004768:	3568      	adds	r5, #104	@ 0x68
 800476a:	e7e9      	b.n	8004740 <_fwalk_sglue+0x10>

0800476c <iprintf>:
 800476c:	b40f      	push	{r0, r1, r2, r3}
 800476e:	b507      	push	{r0, r1, r2, lr}
 8004770:	4906      	ldr	r1, [pc, #24]	@ (800478c <iprintf+0x20>)
 8004772:	ab04      	add	r3, sp, #16
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	f853 2b04 	ldr.w	r2, [r3], #4
 800477a:	6881      	ldr	r1, [r0, #8]
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f000 fc61 	bl	8005044 <_vfiprintf_r>
 8004782:	b003      	add	sp, #12
 8004784:	f85d eb04 	ldr.w	lr, [sp], #4
 8004788:	b004      	add	sp, #16
 800478a:	4770      	bx	lr
 800478c:	20000018 	.word	0x20000018

08004790 <_puts_r>:
 8004790:	6a03      	ldr	r3, [r0, #32]
 8004792:	b570      	push	{r4, r5, r6, lr}
 8004794:	6884      	ldr	r4, [r0, #8]
 8004796:	4605      	mov	r5, r0
 8004798:	460e      	mov	r6, r1
 800479a:	b90b      	cbnz	r3, 80047a0 <_puts_r+0x10>
 800479c:	f7ff ffb0 	bl	8004700 <__sinit>
 80047a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047a2:	07db      	lsls	r3, r3, #31
 80047a4:	d405      	bmi.n	80047b2 <_puts_r+0x22>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	0598      	lsls	r0, r3, #22
 80047aa:	d402      	bmi.n	80047b2 <_puts_r+0x22>
 80047ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ae:	f000 f9be 	bl	8004b2e <__retarget_lock_acquire_recursive>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	0719      	lsls	r1, r3, #28
 80047b6:	d502      	bpl.n	80047be <_puts_r+0x2e>
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d135      	bne.n	800482a <_puts_r+0x9a>
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f8e5 	bl	8004990 <__swsetup_r>
 80047c6:	b380      	cbz	r0, 800482a <_puts_r+0x9a>
 80047c8:	f04f 35ff 	mov.w	r5, #4294967295
 80047cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047ce:	07da      	lsls	r2, r3, #31
 80047d0:	d405      	bmi.n	80047de <_puts_r+0x4e>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	059b      	lsls	r3, r3, #22
 80047d6:	d402      	bmi.n	80047de <_puts_r+0x4e>
 80047d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047da:	f000 f9a9 	bl	8004b30 <__retarget_lock_release_recursive>
 80047de:	4628      	mov	r0, r5
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da04      	bge.n	80047f0 <_puts_r+0x60>
 80047e6:	69a2      	ldr	r2, [r4, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	dc17      	bgt.n	800481c <_puts_r+0x8c>
 80047ec:	290a      	cmp	r1, #10
 80047ee:	d015      	beq.n	800481c <_puts_r+0x8c>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047fe:	3b01      	subs	r3, #1
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	2900      	cmp	r1, #0
 8004804:	d1ed      	bne.n	80047e2 <_puts_r+0x52>
 8004806:	2b00      	cmp	r3, #0
 8004808:	da11      	bge.n	800482e <_puts_r+0x9e>
 800480a:	4622      	mov	r2, r4
 800480c:	210a      	movs	r1, #10
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f87f 	bl	8004912 <__swbuf_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d0d7      	beq.n	80047c8 <_puts_r+0x38>
 8004818:	250a      	movs	r5, #10
 800481a:	e7d7      	b.n	80047cc <_puts_r+0x3c>
 800481c:	4622      	mov	r2, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 f877 	bl	8004912 <__swbuf_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d1e7      	bne.n	80047f8 <_puts_r+0x68>
 8004828:	e7ce      	b.n	80047c8 <_puts_r+0x38>
 800482a:	3e01      	subs	r6, #1
 800482c:	e7e4      	b.n	80047f8 <_puts_r+0x68>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	220a      	movs	r2, #10
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e7ee      	b.n	8004818 <_puts_r+0x88>
	...

0800483c <puts>:
 800483c:	4b02      	ldr	r3, [pc, #8]	@ (8004848 <puts+0xc>)
 800483e:	4601      	mov	r1, r0
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f7ff bfa5 	b.w	8004790 <_puts_r>
 8004846:	bf00      	nop
 8004848:	20000018 	.word	0x20000018

0800484c <siprintf>:
 800484c:	b40e      	push	{r1, r2, r3}
 800484e:	b500      	push	{lr}
 8004850:	b09c      	sub	sp, #112	@ 0x70
 8004852:	ab1d      	add	r3, sp, #116	@ 0x74
 8004854:	9002      	str	r0, [sp, #8]
 8004856:	9006      	str	r0, [sp, #24]
 8004858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800485c:	4809      	ldr	r0, [pc, #36]	@ (8004884 <siprintf+0x38>)
 800485e:	9107      	str	r1, [sp, #28]
 8004860:	9104      	str	r1, [sp, #16]
 8004862:	4909      	ldr	r1, [pc, #36]	@ (8004888 <siprintf+0x3c>)
 8004864:	f853 2b04 	ldr.w	r2, [r3], #4
 8004868:	9105      	str	r1, [sp, #20]
 800486a:	6800      	ldr	r0, [r0, #0]
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	a902      	add	r1, sp, #8
 8004870:	f000 fac2 	bl	8004df8 <_svfiprintf_r>
 8004874:	9b02      	ldr	r3, [sp, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	b01c      	add	sp, #112	@ 0x70
 800487c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004880:	b003      	add	sp, #12
 8004882:	4770      	bx	lr
 8004884:	20000018 	.word	0x20000018
 8004888:	ffff0208 	.word	0xffff0208

0800488c <__sread>:
 800488c:	b510      	push	{r4, lr}
 800488e:	460c      	mov	r4, r1
 8004890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004894:	f000 f8fc 	bl	8004a90 <_read_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	bfab      	itete	ge
 800489c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800489e:	89a3      	ldrhlt	r3, [r4, #12]
 80048a0:	181b      	addge	r3, r3, r0
 80048a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048a6:	bfac      	ite	ge
 80048a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048aa:	81a3      	strhlt	r3, [r4, #12]
 80048ac:	bd10      	pop	{r4, pc}

080048ae <__swrite>:
 80048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	461f      	mov	r7, r3
 80048b4:	898b      	ldrh	r3, [r1, #12]
 80048b6:	05db      	lsls	r3, r3, #23
 80048b8:	4605      	mov	r5, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4616      	mov	r6, r2
 80048be:	d505      	bpl.n	80048cc <__swrite+0x1e>
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	2302      	movs	r3, #2
 80048c6:	2200      	movs	r2, #0
 80048c8:	f000 f8d0 	bl	8004a6c <_lseek_r>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	4632      	mov	r2, r6
 80048da:	463b      	mov	r3, r7
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	f000 b8e7 	b.w	8004ab4 <_write_r>

080048e6 <__sseek>:
 80048e6:	b510      	push	{r4, lr}
 80048e8:	460c      	mov	r4, r1
 80048ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ee:	f000 f8bd 	bl	8004a6c <_lseek_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	bf15      	itete	ne
 80048f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004902:	81a3      	strheq	r3, [r4, #12]
 8004904:	bf18      	it	ne
 8004906:	81a3      	strhne	r3, [r4, #12]
 8004908:	bd10      	pop	{r4, pc}

0800490a <__sclose>:
 800490a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490e:	f000 b89d 	b.w	8004a4c <_close_r>

08004912 <__swbuf_r>:
 8004912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004914:	460e      	mov	r6, r1
 8004916:	4614      	mov	r4, r2
 8004918:	4605      	mov	r5, r0
 800491a:	b118      	cbz	r0, 8004924 <__swbuf_r+0x12>
 800491c:	6a03      	ldr	r3, [r0, #32]
 800491e:	b90b      	cbnz	r3, 8004924 <__swbuf_r+0x12>
 8004920:	f7ff feee 	bl	8004700 <__sinit>
 8004924:	69a3      	ldr	r3, [r4, #24]
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	071a      	lsls	r2, r3, #28
 800492c:	d501      	bpl.n	8004932 <__swbuf_r+0x20>
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	b943      	cbnz	r3, 8004944 <__swbuf_r+0x32>
 8004932:	4621      	mov	r1, r4
 8004934:	4628      	mov	r0, r5
 8004936:	f000 f82b 	bl	8004990 <__swsetup_r>
 800493a:	b118      	cbz	r0, 8004944 <__swbuf_r+0x32>
 800493c:	f04f 37ff 	mov.w	r7, #4294967295
 8004940:	4638      	mov	r0, r7
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	6922      	ldr	r2, [r4, #16]
 8004948:	1a98      	subs	r0, r3, r2
 800494a:	6963      	ldr	r3, [r4, #20]
 800494c:	b2f6      	uxtb	r6, r6
 800494e:	4283      	cmp	r3, r0
 8004950:	4637      	mov	r7, r6
 8004952:	dc05      	bgt.n	8004960 <__swbuf_r+0x4e>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fe9e 	bl	8005698 <_fflush_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	d1ed      	bne.n	800493c <__swbuf_r+0x2a>
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	3b01      	subs	r3, #1
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	6022      	str	r2, [r4, #0]
 800496c:	701e      	strb	r6, [r3, #0]
 800496e:	6962      	ldr	r2, [r4, #20]
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	429a      	cmp	r2, r3
 8004974:	d004      	beq.n	8004980 <__swbuf_r+0x6e>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	07db      	lsls	r3, r3, #31
 800497a:	d5e1      	bpl.n	8004940 <__swbuf_r+0x2e>
 800497c:	2e0a      	cmp	r6, #10
 800497e:	d1df      	bne.n	8004940 <__swbuf_r+0x2e>
 8004980:	4621      	mov	r1, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fe88 	bl	8005698 <_fflush_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	d0d9      	beq.n	8004940 <__swbuf_r+0x2e>
 800498c:	e7d6      	b.n	800493c <__swbuf_r+0x2a>
	...

08004990 <__swsetup_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4b29      	ldr	r3, [pc, #164]	@ (8004a38 <__swsetup_r+0xa8>)
 8004994:	4605      	mov	r5, r0
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	460c      	mov	r4, r1
 800499a:	b118      	cbz	r0, 80049a4 <__swsetup_r+0x14>
 800499c:	6a03      	ldr	r3, [r0, #32]
 800499e:	b90b      	cbnz	r3, 80049a4 <__swsetup_r+0x14>
 80049a0:	f7ff feae 	bl	8004700 <__sinit>
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	0719      	lsls	r1, r3, #28
 80049aa:	d422      	bmi.n	80049f2 <__swsetup_r+0x62>
 80049ac:	06da      	lsls	r2, r3, #27
 80049ae:	d407      	bmi.n	80049c0 <__swsetup_r+0x30>
 80049b0:	2209      	movs	r2, #9
 80049b2:	602a      	str	r2, [r5, #0]
 80049b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	e033      	b.n	8004a28 <__swsetup_r+0x98>
 80049c0:	0758      	lsls	r0, r3, #29
 80049c2:	d512      	bpl.n	80049ea <__swsetup_r+0x5a>
 80049c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049c6:	b141      	cbz	r1, 80049da <__swsetup_r+0x4a>
 80049c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049cc:	4299      	cmp	r1, r3
 80049ce:	d002      	beq.n	80049d6 <__swsetup_r+0x46>
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f8bd 	bl	8004b50 <_free_r>
 80049d6:	2300      	movs	r3, #0
 80049d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	2300      	movs	r3, #0
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f043 0308 	orr.w	r3, r3, #8
 80049f0:	81a3      	strh	r3, [r4, #12]
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	b94b      	cbnz	r3, 8004a0a <__swsetup_r+0x7a>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a00:	d003      	beq.n	8004a0a <__swsetup_r+0x7a>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 fe95 	bl	8005734 <__smakebuf_r>
 8004a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0e:	f013 0201 	ands.w	r2, r3, #1
 8004a12:	d00a      	beq.n	8004a2a <__swsetup_r+0x9a>
 8004a14:	2200      	movs	r2, #0
 8004a16:	60a2      	str	r2, [r4, #8]
 8004a18:	6962      	ldr	r2, [r4, #20]
 8004a1a:	4252      	negs	r2, r2
 8004a1c:	61a2      	str	r2, [r4, #24]
 8004a1e:	6922      	ldr	r2, [r4, #16]
 8004a20:	b942      	cbnz	r2, 8004a34 <__swsetup_r+0xa4>
 8004a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a26:	d1c5      	bne.n	80049b4 <__swsetup_r+0x24>
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
 8004a2a:	0799      	lsls	r1, r3, #30
 8004a2c:	bf58      	it	pl
 8004a2e:	6962      	ldrpl	r2, [r4, #20]
 8004a30:	60a2      	str	r2, [r4, #8]
 8004a32:	e7f4      	b.n	8004a1e <__swsetup_r+0x8e>
 8004a34:	2000      	movs	r0, #0
 8004a36:	e7f7      	b.n	8004a28 <__swsetup_r+0x98>
 8004a38:	20000018 	.word	0x20000018

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <_close_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4d06      	ldr	r5, [pc, #24]	@ (8004a68 <_close_r+0x1c>)
 8004a50:	2300      	movs	r3, #0
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	f7fd fa2a 	bl	8001eb0 <_close>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_close_r+0x1a>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_close_r+0x1a>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	200002a0 	.word	0x200002a0

08004a6c <_lseek_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d07      	ldr	r5, [pc, #28]	@ (8004a8c <_lseek_r+0x20>)
 8004a70:	4604      	mov	r4, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	602a      	str	r2, [r5, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7fd fa3f 	bl	8001efe <_lseek>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_lseek_r+0x1e>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_lseek_r+0x1e>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	200002a0 	.word	0x200002a0

08004a90 <_read_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	@ (8004ab0 <_read_r+0x20>)
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7fd f9cd 	bl	8001e3e <_read>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_read_r+0x1e>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_read_r+0x1e>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	200002a0 	.word	0x200002a0

08004ab4 <_write_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d07      	ldr	r5, [pc, #28]	@ (8004ad4 <_write_r+0x20>)
 8004ab8:	4604      	mov	r4, r0
 8004aba:	4608      	mov	r0, r1
 8004abc:	4611      	mov	r1, r2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	602a      	str	r2, [r5, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f7fd f9d8 	bl	8001e78 <_write>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_write_r+0x1e>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_write_r+0x1e>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	200002a0 	.word	0x200002a0

08004ad8 <__errno>:
 8004ad8:	4b01      	ldr	r3, [pc, #4]	@ (8004ae0 <__errno+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000018 	.word	0x20000018

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8004b1c <__libc_init_array+0x38>)
 8004ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8004b20 <__libc_init_array+0x3c>)
 8004aea:	1b64      	subs	r4, r4, r5
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	2600      	movs	r6, #0
 8004af0:	42a6      	cmp	r6, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	4d0b      	ldr	r5, [pc, #44]	@ (8004b24 <__libc_init_array+0x40>)
 8004af6:	4c0c      	ldr	r4, [pc, #48]	@ (8004b28 <__libc_init_array+0x44>)
 8004af8:	f000 feda 	bl	80058b0 <_init>
 8004afc:	1b64      	subs	r4, r4, r5
 8004afe:	10a4      	asrs	r4, r4, #2
 8004b00:	2600      	movs	r6, #0
 8004b02:	42a6      	cmp	r6, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0c:	4798      	blx	r3
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b16:	4798      	blx	r3
 8004b18:	3601      	adds	r6, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	08005b58 	.word	0x08005b58
 8004b20:	08005b58 	.word	0x08005b58
 8004b24:	08005b58 	.word	0x08005b58
 8004b28:	08005b5c 	.word	0x08005b5c

08004b2c <__retarget_lock_init_recursive>:
 8004b2c:	4770      	bx	lr

08004b2e <__retarget_lock_acquire_recursive>:
 8004b2e:	4770      	bx	lr

08004b30 <__retarget_lock_release_recursive>:
 8004b30:	4770      	bx	lr

08004b32 <memcpy>:
 8004b32:	440a      	add	r2, r1
 8004b34:	4291      	cmp	r1, r2
 8004b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b3a:	d100      	bne.n	8004b3e <memcpy+0xc>
 8004b3c:	4770      	bx	lr
 8004b3e:	b510      	push	{r4, lr}
 8004b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b48:	4291      	cmp	r1, r2
 8004b4a:	d1f9      	bne.n	8004b40 <memcpy+0xe>
 8004b4c:	bd10      	pop	{r4, pc}
	...

08004b50 <_free_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	2900      	cmp	r1, #0
 8004b56:	d041      	beq.n	8004bdc <_free_r+0x8c>
 8004b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b5c:	1f0c      	subs	r4, r1, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bfb8      	it	lt
 8004b62:	18e4      	addlt	r4, r4, r3
 8004b64:	f000 f8e0 	bl	8004d28 <__malloc_lock>
 8004b68:	4a1d      	ldr	r2, [pc, #116]	@ (8004be0 <_free_r+0x90>)
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	b933      	cbnz	r3, 8004b7c <_free_r+0x2c>
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6014      	str	r4, [r2, #0]
 8004b72:	4628      	mov	r0, r5
 8004b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b78:	f000 b8dc 	b.w	8004d34 <__malloc_unlock>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x42>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	1821      	adds	r1, r4, r0
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1809      	addeq	r1, r1, r0
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	e7ed      	b.n	8004b6e <_free_r+0x1e>
 8004b92:	461a      	mov	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b10b      	cbz	r3, 8004b9c <_free_r+0x4c>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d9fa      	bls.n	8004b92 <_free_r+0x42>
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	1850      	adds	r0, r2, r1
 8004ba0:	42a0      	cmp	r0, r4
 8004ba2:	d10b      	bne.n	8004bbc <_free_r+0x6c>
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	4401      	add	r1, r0
 8004ba8:	1850      	adds	r0, r2, r1
 8004baa:	4283      	cmp	r3, r0
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	d1e0      	bne.n	8004b72 <_free_r+0x22>
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	4408      	add	r0, r1
 8004bb8:	6010      	str	r0, [r2, #0]
 8004bba:	e7da      	b.n	8004b72 <_free_r+0x22>
 8004bbc:	d902      	bls.n	8004bc4 <_free_r+0x74>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	602b      	str	r3, [r5, #0]
 8004bc2:	e7d6      	b.n	8004b72 <_free_r+0x22>
 8004bc4:	6820      	ldr	r0, [r4, #0]
 8004bc6:	1821      	adds	r1, r4, r0
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf04      	itt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	bf04      	itt	eq
 8004bd4:	1809      	addeq	r1, r1, r0
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	6054      	str	r4, [r2, #4]
 8004bda:	e7ca      	b.n	8004b72 <_free_r+0x22>
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	bf00      	nop
 8004be0:	200002ac 	.word	0x200002ac

08004be4 <sbrk_aligned>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4e0f      	ldr	r6, [pc, #60]	@ (8004c24 <sbrk_aligned+0x40>)
 8004be8:	460c      	mov	r4, r1
 8004bea:	6831      	ldr	r1, [r6, #0]
 8004bec:	4605      	mov	r5, r0
 8004bee:	b911      	cbnz	r1, 8004bf6 <sbrk_aligned+0x12>
 8004bf0:	f000 fe18 	bl	8005824 <_sbrk_r>
 8004bf4:	6030      	str	r0, [r6, #0]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 fe13 	bl	8005824 <_sbrk_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d103      	bne.n	8004c0a <sbrk_aligned+0x26>
 8004c02:	f04f 34ff 	mov.w	r4, #4294967295
 8004c06:	4620      	mov	r0, r4
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	1cc4      	adds	r4, r0, #3
 8004c0c:	f024 0403 	bic.w	r4, r4, #3
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d0f8      	beq.n	8004c06 <sbrk_aligned+0x22>
 8004c14:	1a21      	subs	r1, r4, r0
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 fe04 	bl	8005824 <_sbrk_r>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1f2      	bne.n	8004c06 <sbrk_aligned+0x22>
 8004c20:	e7ef      	b.n	8004c02 <sbrk_aligned+0x1e>
 8004c22:	bf00      	nop
 8004c24:	200002a8 	.word	0x200002a8

08004c28 <_malloc_r>:
 8004c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	1ccd      	adds	r5, r1, #3
 8004c2e:	f025 0503 	bic.w	r5, r5, #3
 8004c32:	3508      	adds	r5, #8
 8004c34:	2d0c      	cmp	r5, #12
 8004c36:	bf38      	it	cc
 8004c38:	250c      	movcc	r5, #12
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	db01      	blt.n	8004c44 <_malloc_r+0x1c>
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	d904      	bls.n	8004c4e <_malloc_r+0x26>
 8004c44:	230c      	movs	r3, #12
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d24 <_malloc_r+0xfc>
 8004c52:	f000 f869 	bl	8004d28 <__malloc_lock>
 8004c56:	f8d8 3000 	ldr.w	r3, [r8]
 8004c5a:	461c      	mov	r4, r3
 8004c5c:	bb44      	cbnz	r4, 8004cb0 <_malloc_r+0x88>
 8004c5e:	4629      	mov	r1, r5
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7ff ffbf 	bl	8004be4 <sbrk_aligned>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	4604      	mov	r4, r0
 8004c6a:	d158      	bne.n	8004d1e <_malloc_r+0xf6>
 8004c6c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c70:	4627      	mov	r7, r4
 8004c72:	2f00      	cmp	r7, #0
 8004c74:	d143      	bne.n	8004cfe <_malloc_r+0xd6>
 8004c76:	2c00      	cmp	r4, #0
 8004c78:	d04b      	beq.n	8004d12 <_malloc_r+0xea>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	4630      	mov	r0, r6
 8004c80:	eb04 0903 	add.w	r9, r4, r3
 8004c84:	f000 fdce 	bl	8005824 <_sbrk_r>
 8004c88:	4581      	cmp	r9, r0
 8004c8a:	d142      	bne.n	8004d12 <_malloc_r+0xea>
 8004c8c:	6821      	ldr	r1, [r4, #0]
 8004c8e:	1a6d      	subs	r5, r5, r1
 8004c90:	4629      	mov	r1, r5
 8004c92:	4630      	mov	r0, r6
 8004c94:	f7ff ffa6 	bl	8004be4 <sbrk_aligned>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d03a      	beq.n	8004d12 <_malloc_r+0xea>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	442b      	add	r3, r5
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	bb62      	cbnz	r2, 8004d04 <_malloc_r+0xdc>
 8004caa:	f8c8 7000 	str.w	r7, [r8]
 8004cae:	e00f      	b.n	8004cd0 <_malloc_r+0xa8>
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	1b52      	subs	r2, r2, r5
 8004cb4:	d420      	bmi.n	8004cf8 <_malloc_r+0xd0>
 8004cb6:	2a0b      	cmp	r2, #11
 8004cb8:	d917      	bls.n	8004cea <_malloc_r+0xc2>
 8004cba:	1961      	adds	r1, r4, r5
 8004cbc:	42a3      	cmp	r3, r4
 8004cbe:	6025      	str	r5, [r4, #0]
 8004cc0:	bf18      	it	ne
 8004cc2:	6059      	strne	r1, [r3, #4]
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	bf08      	it	eq
 8004cc8:	f8c8 1000 	streq.w	r1, [r8]
 8004ccc:	5162      	str	r2, [r4, r5]
 8004cce:	604b      	str	r3, [r1, #4]
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 f82f 	bl	8004d34 <__malloc_unlock>
 8004cd6:	f104 000b 	add.w	r0, r4, #11
 8004cda:	1d23      	adds	r3, r4, #4
 8004cdc:	f020 0007 	bic.w	r0, r0, #7
 8004ce0:	1ac2      	subs	r2, r0, r3
 8004ce2:	bf1c      	itt	ne
 8004ce4:	1a1b      	subne	r3, r3, r0
 8004ce6:	50a3      	strne	r3, [r4, r2]
 8004ce8:	e7af      	b.n	8004c4a <_malloc_r+0x22>
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	bf0c      	ite	eq
 8004cf0:	f8c8 2000 	streq.w	r2, [r8]
 8004cf4:	605a      	strne	r2, [r3, #4]
 8004cf6:	e7eb      	b.n	8004cd0 <_malloc_r+0xa8>
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	6864      	ldr	r4, [r4, #4]
 8004cfc:	e7ae      	b.n	8004c5c <_malloc_r+0x34>
 8004cfe:	463c      	mov	r4, r7
 8004d00:	687f      	ldr	r7, [r7, #4]
 8004d02:	e7b6      	b.n	8004c72 <_malloc_r+0x4a>
 8004d04:	461a      	mov	r2, r3
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	d1fb      	bne.n	8004d04 <_malloc_r+0xdc>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6053      	str	r3, [r2, #4]
 8004d10:	e7de      	b.n	8004cd0 <_malloc_r+0xa8>
 8004d12:	230c      	movs	r3, #12
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 f80c 	bl	8004d34 <__malloc_unlock>
 8004d1c:	e794      	b.n	8004c48 <_malloc_r+0x20>
 8004d1e:	6005      	str	r5, [r0, #0]
 8004d20:	e7d6      	b.n	8004cd0 <_malloc_r+0xa8>
 8004d22:	bf00      	nop
 8004d24:	200002ac 	.word	0x200002ac

08004d28 <__malloc_lock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	@ (8004d30 <__malloc_lock+0x8>)
 8004d2a:	f7ff bf00 	b.w	8004b2e <__retarget_lock_acquire_recursive>
 8004d2e:	bf00      	nop
 8004d30:	200002a4 	.word	0x200002a4

08004d34 <__malloc_unlock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	@ (8004d3c <__malloc_unlock+0x8>)
 8004d36:	f7ff befb 	b.w	8004b30 <__retarget_lock_release_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	200002a4 	.word	0x200002a4

08004d40 <__ssputs_r>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	688e      	ldr	r6, [r1, #8]
 8004d46:	461f      	mov	r7, r3
 8004d48:	42be      	cmp	r6, r7
 8004d4a:	680b      	ldr	r3, [r1, #0]
 8004d4c:	4682      	mov	sl, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4690      	mov	r8, r2
 8004d52:	d82d      	bhi.n	8004db0 <__ssputs_r+0x70>
 8004d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d5c:	d026      	beq.n	8004dac <__ssputs_r+0x6c>
 8004d5e:	6965      	ldr	r5, [r4, #20]
 8004d60:	6909      	ldr	r1, [r1, #16]
 8004d62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d66:	eba3 0901 	sub.w	r9, r3, r1
 8004d6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d6e:	1c7b      	adds	r3, r7, #1
 8004d70:	444b      	add	r3, r9
 8004d72:	106d      	asrs	r5, r5, #1
 8004d74:	429d      	cmp	r5, r3
 8004d76:	bf38      	it	cc
 8004d78:	461d      	movcc	r5, r3
 8004d7a:	0553      	lsls	r3, r2, #21
 8004d7c:	d527      	bpl.n	8004dce <__ssputs_r+0x8e>
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7ff ff52 	bl	8004c28 <_malloc_r>
 8004d84:	4606      	mov	r6, r0
 8004d86:	b360      	cbz	r0, 8004de2 <__ssputs_r+0xa2>
 8004d88:	6921      	ldr	r1, [r4, #16]
 8004d8a:	464a      	mov	r2, r9
 8004d8c:	f7ff fed1 	bl	8004b32 <memcpy>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d9a:	81a3      	strh	r3, [r4, #12]
 8004d9c:	6126      	str	r6, [r4, #16]
 8004d9e:	6165      	str	r5, [r4, #20]
 8004da0:	444e      	add	r6, r9
 8004da2:	eba5 0509 	sub.w	r5, r5, r9
 8004da6:	6026      	str	r6, [r4, #0]
 8004da8:	60a5      	str	r5, [r4, #8]
 8004daa:	463e      	mov	r6, r7
 8004dac:	42be      	cmp	r6, r7
 8004dae:	d900      	bls.n	8004db2 <__ssputs_r+0x72>
 8004db0:	463e      	mov	r6, r7
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	4632      	mov	r2, r6
 8004db6:	4641      	mov	r1, r8
 8004db8:	f000 fcf8 	bl	80057ac <memmove>
 8004dbc:	68a3      	ldr	r3, [r4, #8]
 8004dbe:	1b9b      	subs	r3, r3, r6
 8004dc0:	60a3      	str	r3, [r4, #8]
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	4433      	add	r3, r6
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dce:	462a      	mov	r2, r5
 8004dd0:	f000 fd38 	bl	8005844 <_realloc_r>
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d1e0      	bne.n	8004d9c <__ssputs_r+0x5c>
 8004dda:	6921      	ldr	r1, [r4, #16]
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f7ff feb7 	bl	8004b50 <_free_r>
 8004de2:	230c      	movs	r3, #12
 8004de4:	f8ca 3000 	str.w	r3, [sl]
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dee:	81a3      	strh	r3, [r4, #12]
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e7e9      	b.n	8004dca <__ssputs_r+0x8a>
	...

08004df8 <_svfiprintf_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	4698      	mov	r8, r3
 8004dfe:	898b      	ldrh	r3, [r1, #12]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	b09d      	sub	sp, #116	@ 0x74
 8004e04:	4607      	mov	r7, r0
 8004e06:	460d      	mov	r5, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	d510      	bpl.n	8004e2e <_svfiprintf_r+0x36>
 8004e0c:	690b      	ldr	r3, [r1, #16]
 8004e0e:	b973      	cbnz	r3, 8004e2e <_svfiprintf_r+0x36>
 8004e10:	2140      	movs	r1, #64	@ 0x40
 8004e12:	f7ff ff09 	bl	8004c28 <_malloc_r>
 8004e16:	6028      	str	r0, [r5, #0]
 8004e18:	6128      	str	r0, [r5, #16]
 8004e1a:	b930      	cbnz	r0, 8004e2a <_svfiprintf_r+0x32>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295
 8004e24:	b01d      	add	sp, #116	@ 0x74
 8004e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2a:	2340      	movs	r3, #64	@ 0x40
 8004e2c:	616b      	str	r3, [r5, #20]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e32:	2320      	movs	r3, #32
 8004e34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e3c:	2330      	movs	r3, #48	@ 0x30
 8004e3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004fdc <_svfiprintf_r+0x1e4>
 8004e42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e46:	f04f 0901 	mov.w	r9, #1
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	469a      	mov	sl, r3
 8004e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e52:	b10a      	cbz	r2, 8004e58 <_svfiprintf_r+0x60>
 8004e54:	2a25      	cmp	r2, #37	@ 0x25
 8004e56:	d1f9      	bne.n	8004e4c <_svfiprintf_r+0x54>
 8004e58:	ebba 0b04 	subs.w	fp, sl, r4
 8004e5c:	d00b      	beq.n	8004e76 <_svfiprintf_r+0x7e>
 8004e5e:	465b      	mov	r3, fp
 8004e60:	4622      	mov	r2, r4
 8004e62:	4629      	mov	r1, r5
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ff6b 	bl	8004d40 <__ssputs_r>
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f000 80a7 	beq.w	8004fbe <_svfiprintf_r+0x1c6>
 8004e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e72:	445a      	add	r2, fp
 8004e74:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e76:	f89a 3000 	ldrb.w	r3, [sl]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 809f 	beq.w	8004fbe <_svfiprintf_r+0x1c6>
 8004e80:	2300      	movs	r3, #0
 8004e82:	f04f 32ff 	mov.w	r2, #4294967295
 8004e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e8a:	f10a 0a01 	add.w	sl, sl, #1
 8004e8e:	9304      	str	r3, [sp, #16]
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e96:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e98:	4654      	mov	r4, sl
 8004e9a:	2205      	movs	r2, #5
 8004e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea0:	484e      	ldr	r0, [pc, #312]	@ (8004fdc <_svfiprintf_r+0x1e4>)
 8004ea2:	f7fb f9a5 	bl	80001f0 <memchr>
 8004ea6:	9a04      	ldr	r2, [sp, #16]
 8004ea8:	b9d8      	cbnz	r0, 8004ee2 <_svfiprintf_r+0xea>
 8004eaa:	06d0      	lsls	r0, r2, #27
 8004eac:	bf44      	itt	mi
 8004eae:	2320      	movmi	r3, #32
 8004eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eb4:	0711      	lsls	r1, r2, #28
 8004eb6:	bf44      	itt	mi
 8004eb8:	232b      	movmi	r3, #43	@ 0x2b
 8004eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ec4:	d015      	beq.n	8004ef2 <_svfiprintf_r+0xfa>
 8004ec6:	9a07      	ldr	r2, [sp, #28]
 8004ec8:	4654      	mov	r4, sl
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f04f 0c0a 	mov.w	ip, #10
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ed6:	3b30      	subs	r3, #48	@ 0x30
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	d94b      	bls.n	8004f74 <_svfiprintf_r+0x17c>
 8004edc:	b1b0      	cbz	r0, 8004f0c <_svfiprintf_r+0x114>
 8004ede:	9207      	str	r2, [sp, #28]
 8004ee0:	e014      	b.n	8004f0c <_svfiprintf_r+0x114>
 8004ee2:	eba0 0308 	sub.w	r3, r0, r8
 8004ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	9304      	str	r3, [sp, #16]
 8004eee:	46a2      	mov	sl, r4
 8004ef0:	e7d2      	b.n	8004e98 <_svfiprintf_r+0xa0>
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	9103      	str	r1, [sp, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfbb      	ittet	lt
 8004efe:	425b      	neglt	r3, r3
 8004f00:	f042 0202 	orrlt.w	r2, r2, #2
 8004f04:	9307      	strge	r3, [sp, #28]
 8004f06:	9307      	strlt	r3, [sp, #28]
 8004f08:	bfb8      	it	lt
 8004f0a:	9204      	strlt	r2, [sp, #16]
 8004f0c:	7823      	ldrb	r3, [r4, #0]
 8004f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f10:	d10a      	bne.n	8004f28 <_svfiprintf_r+0x130>
 8004f12:	7863      	ldrb	r3, [r4, #1]
 8004f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f16:	d132      	bne.n	8004f7e <_svfiprintf_r+0x186>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9203      	str	r2, [sp, #12]
 8004f20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f24:	3402      	adds	r4, #2
 8004f26:	9305      	str	r3, [sp, #20]
 8004f28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004fec <_svfiprintf_r+0x1f4>
 8004f2c:	7821      	ldrb	r1, [r4, #0]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	4650      	mov	r0, sl
 8004f32:	f7fb f95d 	bl	80001f0 <memchr>
 8004f36:	b138      	cbz	r0, 8004f48 <_svfiprintf_r+0x150>
 8004f38:	9b04      	ldr	r3, [sp, #16]
 8004f3a:	eba0 000a 	sub.w	r0, r0, sl
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	4082      	lsls	r2, r0
 8004f42:	4313      	orrs	r3, r2
 8004f44:	3401      	adds	r4, #1
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4c:	4824      	ldr	r0, [pc, #144]	@ (8004fe0 <_svfiprintf_r+0x1e8>)
 8004f4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f52:	2206      	movs	r2, #6
 8004f54:	f7fb f94c 	bl	80001f0 <memchr>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d036      	beq.n	8004fca <_svfiprintf_r+0x1d2>
 8004f5c:	4b21      	ldr	r3, [pc, #132]	@ (8004fe4 <_svfiprintf_r+0x1ec>)
 8004f5e:	bb1b      	cbnz	r3, 8004fa8 <_svfiprintf_r+0x1b0>
 8004f60:	9b03      	ldr	r3, [sp, #12]
 8004f62:	3307      	adds	r3, #7
 8004f64:	f023 0307 	bic.w	r3, r3, #7
 8004f68:	3308      	adds	r3, #8
 8004f6a:	9303      	str	r3, [sp, #12]
 8004f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f6e:	4433      	add	r3, r6
 8004f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f72:	e76a      	b.n	8004e4a <_svfiprintf_r+0x52>
 8004f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f78:	460c      	mov	r4, r1
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	e7a8      	b.n	8004ed0 <_svfiprintf_r+0xd8>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	3401      	adds	r4, #1
 8004f82:	9305      	str	r3, [sp, #20]
 8004f84:	4619      	mov	r1, r3
 8004f86:	f04f 0c0a 	mov.w	ip, #10
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f90:	3a30      	subs	r2, #48	@ 0x30
 8004f92:	2a09      	cmp	r2, #9
 8004f94:	d903      	bls.n	8004f9e <_svfiprintf_r+0x1a6>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0c6      	beq.n	8004f28 <_svfiprintf_r+0x130>
 8004f9a:	9105      	str	r1, [sp, #20]
 8004f9c:	e7c4      	b.n	8004f28 <_svfiprintf_r+0x130>
 8004f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e7f0      	b.n	8004f8a <_svfiprintf_r+0x192>
 8004fa8:	ab03      	add	r3, sp, #12
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	462a      	mov	r2, r5
 8004fae:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <_svfiprintf_r+0x1f0>)
 8004fb0:	a904      	add	r1, sp, #16
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	1c42      	adds	r2, r0, #1
 8004fba:	4606      	mov	r6, r0
 8004fbc:	d1d6      	bne.n	8004f6c <_svfiprintf_r+0x174>
 8004fbe:	89ab      	ldrh	r3, [r5, #12]
 8004fc0:	065b      	lsls	r3, r3, #25
 8004fc2:	f53f af2d 	bmi.w	8004e20 <_svfiprintf_r+0x28>
 8004fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fc8:	e72c      	b.n	8004e24 <_svfiprintf_r+0x2c>
 8004fca:	ab03      	add	r3, sp, #12
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	462a      	mov	r2, r5
 8004fd0:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <_svfiprintf_r+0x1f0>)
 8004fd2:	a904      	add	r1, sp, #16
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f000 f9bb 	bl	8005350 <_printf_i>
 8004fda:	e7ed      	b.n	8004fb8 <_svfiprintf_r+0x1c0>
 8004fdc:	08005b1c 	.word	0x08005b1c
 8004fe0:	08005b26 	.word	0x08005b26
 8004fe4:	00000000 	.word	0x00000000
 8004fe8:	08004d41 	.word	0x08004d41
 8004fec:	08005b22 	.word	0x08005b22

08004ff0 <__sfputc_r>:
 8004ff0:	6893      	ldr	r3, [r2, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	b410      	push	{r4}
 8004ff8:	6093      	str	r3, [r2, #8]
 8004ffa:	da08      	bge.n	800500e <__sfputc_r+0x1e>
 8004ffc:	6994      	ldr	r4, [r2, #24]
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	db01      	blt.n	8005006 <__sfputc_r+0x16>
 8005002:	290a      	cmp	r1, #10
 8005004:	d103      	bne.n	800500e <__sfputc_r+0x1e>
 8005006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500a:	f7ff bc82 	b.w	8004912 <__swbuf_r>
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	1c58      	adds	r0, r3, #1
 8005012:	6010      	str	r0, [r2, #0]
 8005014:	7019      	strb	r1, [r3, #0]
 8005016:	4608      	mov	r0, r1
 8005018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800501c:	4770      	bx	lr

0800501e <__sfputs_r>:
 800501e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	4614      	mov	r4, r2
 8005026:	18d5      	adds	r5, r2, r3
 8005028:	42ac      	cmp	r4, r5
 800502a:	d101      	bne.n	8005030 <__sfputs_r+0x12>
 800502c:	2000      	movs	r0, #0
 800502e:	e007      	b.n	8005040 <__sfputs_r+0x22>
 8005030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005034:	463a      	mov	r2, r7
 8005036:	4630      	mov	r0, r6
 8005038:	f7ff ffda 	bl	8004ff0 <__sfputc_r>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d1f3      	bne.n	8005028 <__sfputs_r+0xa>
 8005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005044 <_vfiprintf_r>:
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	460d      	mov	r5, r1
 800504a:	b09d      	sub	sp, #116	@ 0x74
 800504c:	4614      	mov	r4, r2
 800504e:	4698      	mov	r8, r3
 8005050:	4606      	mov	r6, r0
 8005052:	b118      	cbz	r0, 800505c <_vfiprintf_r+0x18>
 8005054:	6a03      	ldr	r3, [r0, #32]
 8005056:	b90b      	cbnz	r3, 800505c <_vfiprintf_r+0x18>
 8005058:	f7ff fb52 	bl	8004700 <__sinit>
 800505c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800505e:	07d9      	lsls	r1, r3, #31
 8005060:	d405      	bmi.n	800506e <_vfiprintf_r+0x2a>
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	059a      	lsls	r2, r3, #22
 8005066:	d402      	bmi.n	800506e <_vfiprintf_r+0x2a>
 8005068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800506a:	f7ff fd60 	bl	8004b2e <__retarget_lock_acquire_recursive>
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	d501      	bpl.n	8005078 <_vfiprintf_r+0x34>
 8005074:	692b      	ldr	r3, [r5, #16]
 8005076:	b99b      	cbnz	r3, 80050a0 <_vfiprintf_r+0x5c>
 8005078:	4629      	mov	r1, r5
 800507a:	4630      	mov	r0, r6
 800507c:	f7ff fc88 	bl	8004990 <__swsetup_r>
 8005080:	b170      	cbz	r0, 80050a0 <_vfiprintf_r+0x5c>
 8005082:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005084:	07dc      	lsls	r4, r3, #31
 8005086:	d504      	bpl.n	8005092 <_vfiprintf_r+0x4e>
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	b01d      	add	sp, #116	@ 0x74
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	0598      	lsls	r0, r3, #22
 8005096:	d4f7      	bmi.n	8005088 <_vfiprintf_r+0x44>
 8005098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800509a:	f7ff fd49 	bl	8004b30 <__retarget_lock_release_recursive>
 800509e:	e7f3      	b.n	8005088 <_vfiprintf_r+0x44>
 80050a0:	2300      	movs	r3, #0
 80050a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80050a4:	2320      	movs	r3, #32
 80050a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ae:	2330      	movs	r3, #48	@ 0x30
 80050b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005260 <_vfiprintf_r+0x21c>
 80050b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050b8:	f04f 0901 	mov.w	r9, #1
 80050bc:	4623      	mov	r3, r4
 80050be:	469a      	mov	sl, r3
 80050c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050c4:	b10a      	cbz	r2, 80050ca <_vfiprintf_r+0x86>
 80050c6:	2a25      	cmp	r2, #37	@ 0x25
 80050c8:	d1f9      	bne.n	80050be <_vfiprintf_r+0x7a>
 80050ca:	ebba 0b04 	subs.w	fp, sl, r4
 80050ce:	d00b      	beq.n	80050e8 <_vfiprintf_r+0xa4>
 80050d0:	465b      	mov	r3, fp
 80050d2:	4622      	mov	r2, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	4630      	mov	r0, r6
 80050d8:	f7ff ffa1 	bl	800501e <__sfputs_r>
 80050dc:	3001      	adds	r0, #1
 80050de:	f000 80a7 	beq.w	8005230 <_vfiprintf_r+0x1ec>
 80050e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050e4:	445a      	add	r2, fp
 80050e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050e8:	f89a 3000 	ldrb.w	r3, [sl]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 809f 	beq.w	8005230 <_vfiprintf_r+0x1ec>
 80050f2:	2300      	movs	r3, #0
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050fc:	f10a 0a01 	add.w	sl, sl, #1
 8005100:	9304      	str	r3, [sp, #16]
 8005102:	9307      	str	r3, [sp, #28]
 8005104:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005108:	931a      	str	r3, [sp, #104]	@ 0x68
 800510a:	4654      	mov	r4, sl
 800510c:	2205      	movs	r2, #5
 800510e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005112:	4853      	ldr	r0, [pc, #332]	@ (8005260 <_vfiprintf_r+0x21c>)
 8005114:	f7fb f86c 	bl	80001f0 <memchr>
 8005118:	9a04      	ldr	r2, [sp, #16]
 800511a:	b9d8      	cbnz	r0, 8005154 <_vfiprintf_r+0x110>
 800511c:	06d1      	lsls	r1, r2, #27
 800511e:	bf44      	itt	mi
 8005120:	2320      	movmi	r3, #32
 8005122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005126:	0713      	lsls	r3, r2, #28
 8005128:	bf44      	itt	mi
 800512a:	232b      	movmi	r3, #43	@ 0x2b
 800512c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005130:	f89a 3000 	ldrb.w	r3, [sl]
 8005134:	2b2a      	cmp	r3, #42	@ 0x2a
 8005136:	d015      	beq.n	8005164 <_vfiprintf_r+0x120>
 8005138:	9a07      	ldr	r2, [sp, #28]
 800513a:	4654      	mov	r4, sl
 800513c:	2000      	movs	r0, #0
 800513e:	f04f 0c0a 	mov.w	ip, #10
 8005142:	4621      	mov	r1, r4
 8005144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005148:	3b30      	subs	r3, #48	@ 0x30
 800514a:	2b09      	cmp	r3, #9
 800514c:	d94b      	bls.n	80051e6 <_vfiprintf_r+0x1a2>
 800514e:	b1b0      	cbz	r0, 800517e <_vfiprintf_r+0x13a>
 8005150:	9207      	str	r2, [sp, #28]
 8005152:	e014      	b.n	800517e <_vfiprintf_r+0x13a>
 8005154:	eba0 0308 	sub.w	r3, r0, r8
 8005158:	fa09 f303 	lsl.w	r3, r9, r3
 800515c:	4313      	orrs	r3, r2
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	46a2      	mov	sl, r4
 8005162:	e7d2      	b.n	800510a <_vfiprintf_r+0xc6>
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	1d19      	adds	r1, r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	9103      	str	r1, [sp, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	bfbb      	ittet	lt
 8005170:	425b      	neglt	r3, r3
 8005172:	f042 0202 	orrlt.w	r2, r2, #2
 8005176:	9307      	strge	r3, [sp, #28]
 8005178:	9307      	strlt	r3, [sp, #28]
 800517a:	bfb8      	it	lt
 800517c:	9204      	strlt	r2, [sp, #16]
 800517e:	7823      	ldrb	r3, [r4, #0]
 8005180:	2b2e      	cmp	r3, #46	@ 0x2e
 8005182:	d10a      	bne.n	800519a <_vfiprintf_r+0x156>
 8005184:	7863      	ldrb	r3, [r4, #1]
 8005186:	2b2a      	cmp	r3, #42	@ 0x2a
 8005188:	d132      	bne.n	80051f0 <_vfiprintf_r+0x1ac>
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	9203      	str	r2, [sp, #12]
 8005192:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005196:	3402      	adds	r4, #2
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005270 <_vfiprintf_r+0x22c>
 800519e:	7821      	ldrb	r1, [r4, #0]
 80051a0:	2203      	movs	r2, #3
 80051a2:	4650      	mov	r0, sl
 80051a4:	f7fb f824 	bl	80001f0 <memchr>
 80051a8:	b138      	cbz	r0, 80051ba <_vfiprintf_r+0x176>
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	eba0 000a 	sub.w	r0, r0, sl
 80051b0:	2240      	movs	r2, #64	@ 0x40
 80051b2:	4082      	lsls	r2, r0
 80051b4:	4313      	orrs	r3, r2
 80051b6:	3401      	adds	r4, #1
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051be:	4829      	ldr	r0, [pc, #164]	@ (8005264 <_vfiprintf_r+0x220>)
 80051c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051c4:	2206      	movs	r2, #6
 80051c6:	f7fb f813 	bl	80001f0 <memchr>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d03f      	beq.n	800524e <_vfiprintf_r+0x20a>
 80051ce:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <_vfiprintf_r+0x224>)
 80051d0:	bb1b      	cbnz	r3, 800521a <_vfiprintf_r+0x1d6>
 80051d2:	9b03      	ldr	r3, [sp, #12]
 80051d4:	3307      	adds	r3, #7
 80051d6:	f023 0307 	bic.w	r3, r3, #7
 80051da:	3308      	adds	r3, #8
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e0:	443b      	add	r3, r7
 80051e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051e4:	e76a      	b.n	80050bc <_vfiprintf_r+0x78>
 80051e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ea:	460c      	mov	r4, r1
 80051ec:	2001      	movs	r0, #1
 80051ee:	e7a8      	b.n	8005142 <_vfiprintf_r+0xfe>
 80051f0:	2300      	movs	r3, #0
 80051f2:	3401      	adds	r4, #1
 80051f4:	9305      	str	r3, [sp, #20]
 80051f6:	4619      	mov	r1, r3
 80051f8:	f04f 0c0a 	mov.w	ip, #10
 80051fc:	4620      	mov	r0, r4
 80051fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005202:	3a30      	subs	r2, #48	@ 0x30
 8005204:	2a09      	cmp	r2, #9
 8005206:	d903      	bls.n	8005210 <_vfiprintf_r+0x1cc>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0c6      	beq.n	800519a <_vfiprintf_r+0x156>
 800520c:	9105      	str	r1, [sp, #20]
 800520e:	e7c4      	b.n	800519a <_vfiprintf_r+0x156>
 8005210:	fb0c 2101 	mla	r1, ip, r1, r2
 8005214:	4604      	mov	r4, r0
 8005216:	2301      	movs	r3, #1
 8005218:	e7f0      	b.n	80051fc <_vfiprintf_r+0x1b8>
 800521a:	ab03      	add	r3, sp, #12
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	462a      	mov	r2, r5
 8005220:	4b12      	ldr	r3, [pc, #72]	@ (800526c <_vfiprintf_r+0x228>)
 8005222:	a904      	add	r1, sp, #16
 8005224:	4630      	mov	r0, r6
 8005226:	f3af 8000 	nop.w
 800522a:	4607      	mov	r7, r0
 800522c:	1c78      	adds	r0, r7, #1
 800522e:	d1d6      	bne.n	80051de <_vfiprintf_r+0x19a>
 8005230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005232:	07d9      	lsls	r1, r3, #31
 8005234:	d405      	bmi.n	8005242 <_vfiprintf_r+0x1fe>
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	059a      	lsls	r2, r3, #22
 800523a:	d402      	bmi.n	8005242 <_vfiprintf_r+0x1fe>
 800523c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800523e:	f7ff fc77 	bl	8004b30 <__retarget_lock_release_recursive>
 8005242:	89ab      	ldrh	r3, [r5, #12]
 8005244:	065b      	lsls	r3, r3, #25
 8005246:	f53f af1f 	bmi.w	8005088 <_vfiprintf_r+0x44>
 800524a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800524c:	e71e      	b.n	800508c <_vfiprintf_r+0x48>
 800524e:	ab03      	add	r3, sp, #12
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	462a      	mov	r2, r5
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <_vfiprintf_r+0x228>)
 8005256:	a904      	add	r1, sp, #16
 8005258:	4630      	mov	r0, r6
 800525a:	f000 f879 	bl	8005350 <_printf_i>
 800525e:	e7e4      	b.n	800522a <_vfiprintf_r+0x1e6>
 8005260:	08005b1c 	.word	0x08005b1c
 8005264:	08005b26 	.word	0x08005b26
 8005268:	00000000 	.word	0x00000000
 800526c:	0800501f 	.word	0x0800501f
 8005270:	08005b22 	.word	0x08005b22

08005274 <_printf_common>:
 8005274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005278:	4616      	mov	r6, r2
 800527a:	4698      	mov	r8, r3
 800527c:	688a      	ldr	r2, [r1, #8]
 800527e:	690b      	ldr	r3, [r1, #16]
 8005280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005284:	4293      	cmp	r3, r2
 8005286:	bfb8      	it	lt
 8005288:	4613      	movlt	r3, r2
 800528a:	6033      	str	r3, [r6, #0]
 800528c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005290:	4607      	mov	r7, r0
 8005292:	460c      	mov	r4, r1
 8005294:	b10a      	cbz	r2, 800529a <_printf_common+0x26>
 8005296:	3301      	adds	r3, #1
 8005298:	6033      	str	r3, [r6, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	0699      	lsls	r1, r3, #26
 800529e:	bf42      	ittt	mi
 80052a0:	6833      	ldrmi	r3, [r6, #0]
 80052a2:	3302      	addmi	r3, #2
 80052a4:	6033      	strmi	r3, [r6, #0]
 80052a6:	6825      	ldr	r5, [r4, #0]
 80052a8:	f015 0506 	ands.w	r5, r5, #6
 80052ac:	d106      	bne.n	80052bc <_printf_common+0x48>
 80052ae:	f104 0a19 	add.w	sl, r4, #25
 80052b2:	68e3      	ldr	r3, [r4, #12]
 80052b4:	6832      	ldr	r2, [r6, #0]
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	42ab      	cmp	r3, r5
 80052ba:	dc26      	bgt.n	800530a <_printf_common+0x96>
 80052bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052c0:	6822      	ldr	r2, [r4, #0]
 80052c2:	3b00      	subs	r3, #0
 80052c4:	bf18      	it	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	0692      	lsls	r2, r2, #26
 80052ca:	d42b      	bmi.n	8005324 <_printf_common+0xb0>
 80052cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052d0:	4641      	mov	r1, r8
 80052d2:	4638      	mov	r0, r7
 80052d4:	47c8      	blx	r9
 80052d6:	3001      	adds	r0, #1
 80052d8:	d01e      	beq.n	8005318 <_printf_common+0xa4>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	6922      	ldr	r2, [r4, #16]
 80052de:	f003 0306 	and.w	r3, r3, #6
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	bf02      	ittt	eq
 80052e6:	68e5      	ldreq	r5, [r4, #12]
 80052e8:	6833      	ldreq	r3, [r6, #0]
 80052ea:	1aed      	subeq	r5, r5, r3
 80052ec:	68a3      	ldr	r3, [r4, #8]
 80052ee:	bf0c      	ite	eq
 80052f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f4:	2500      	movne	r5, #0
 80052f6:	4293      	cmp	r3, r2
 80052f8:	bfc4      	itt	gt
 80052fa:	1a9b      	subgt	r3, r3, r2
 80052fc:	18ed      	addgt	r5, r5, r3
 80052fe:	2600      	movs	r6, #0
 8005300:	341a      	adds	r4, #26
 8005302:	42b5      	cmp	r5, r6
 8005304:	d11a      	bne.n	800533c <_printf_common+0xc8>
 8005306:	2000      	movs	r0, #0
 8005308:	e008      	b.n	800531c <_printf_common+0xa8>
 800530a:	2301      	movs	r3, #1
 800530c:	4652      	mov	r2, sl
 800530e:	4641      	mov	r1, r8
 8005310:	4638      	mov	r0, r7
 8005312:	47c8      	blx	r9
 8005314:	3001      	adds	r0, #1
 8005316:	d103      	bne.n	8005320 <_printf_common+0xac>
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005320:	3501      	adds	r5, #1
 8005322:	e7c6      	b.n	80052b2 <_printf_common+0x3e>
 8005324:	18e1      	adds	r1, r4, r3
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	2030      	movs	r0, #48	@ 0x30
 800532a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800532e:	4422      	add	r2, r4
 8005330:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005338:	3302      	adds	r3, #2
 800533a:	e7c7      	b.n	80052cc <_printf_common+0x58>
 800533c:	2301      	movs	r3, #1
 800533e:	4622      	mov	r2, r4
 8005340:	4641      	mov	r1, r8
 8005342:	4638      	mov	r0, r7
 8005344:	47c8      	blx	r9
 8005346:	3001      	adds	r0, #1
 8005348:	d0e6      	beq.n	8005318 <_printf_common+0xa4>
 800534a:	3601      	adds	r6, #1
 800534c:	e7d9      	b.n	8005302 <_printf_common+0x8e>
	...

08005350 <_printf_i>:
 8005350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	7e0f      	ldrb	r7, [r1, #24]
 8005356:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005358:	2f78      	cmp	r7, #120	@ 0x78
 800535a:	4691      	mov	r9, r2
 800535c:	4680      	mov	r8, r0
 800535e:	460c      	mov	r4, r1
 8005360:	469a      	mov	sl, r3
 8005362:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005366:	d807      	bhi.n	8005378 <_printf_i+0x28>
 8005368:	2f62      	cmp	r7, #98	@ 0x62
 800536a:	d80a      	bhi.n	8005382 <_printf_i+0x32>
 800536c:	2f00      	cmp	r7, #0
 800536e:	f000 80d2 	beq.w	8005516 <_printf_i+0x1c6>
 8005372:	2f58      	cmp	r7, #88	@ 0x58
 8005374:	f000 80b9 	beq.w	80054ea <_printf_i+0x19a>
 8005378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800537c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005380:	e03a      	b.n	80053f8 <_printf_i+0xa8>
 8005382:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005386:	2b15      	cmp	r3, #21
 8005388:	d8f6      	bhi.n	8005378 <_printf_i+0x28>
 800538a:	a101      	add	r1, pc, #4	@ (adr r1, 8005390 <_printf_i+0x40>)
 800538c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005390:	080053e9 	.word	0x080053e9
 8005394:	080053fd 	.word	0x080053fd
 8005398:	08005379 	.word	0x08005379
 800539c:	08005379 	.word	0x08005379
 80053a0:	08005379 	.word	0x08005379
 80053a4:	08005379 	.word	0x08005379
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005379 	.word	0x08005379
 80053b0:	08005379 	.word	0x08005379
 80053b4:	08005379 	.word	0x08005379
 80053b8:	08005379 	.word	0x08005379
 80053bc:	080054fd 	.word	0x080054fd
 80053c0:	08005427 	.word	0x08005427
 80053c4:	080054b7 	.word	0x080054b7
 80053c8:	08005379 	.word	0x08005379
 80053cc:	08005379 	.word	0x08005379
 80053d0:	0800551f 	.word	0x0800551f
 80053d4:	08005379 	.word	0x08005379
 80053d8:	08005427 	.word	0x08005427
 80053dc:	08005379 	.word	0x08005379
 80053e0:	08005379 	.word	0x08005379
 80053e4:	080054bf 	.word	0x080054bf
 80053e8:	6833      	ldr	r3, [r6, #0]
 80053ea:	1d1a      	adds	r2, r3, #4
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6032      	str	r2, [r6, #0]
 80053f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053f8:	2301      	movs	r3, #1
 80053fa:	e09d      	b.n	8005538 <_printf_i+0x1e8>
 80053fc:	6833      	ldr	r3, [r6, #0]
 80053fe:	6820      	ldr	r0, [r4, #0]
 8005400:	1d19      	adds	r1, r3, #4
 8005402:	6031      	str	r1, [r6, #0]
 8005404:	0606      	lsls	r6, r0, #24
 8005406:	d501      	bpl.n	800540c <_printf_i+0xbc>
 8005408:	681d      	ldr	r5, [r3, #0]
 800540a:	e003      	b.n	8005414 <_printf_i+0xc4>
 800540c:	0645      	lsls	r5, r0, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0xb8>
 8005410:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005414:	2d00      	cmp	r5, #0
 8005416:	da03      	bge.n	8005420 <_printf_i+0xd0>
 8005418:	232d      	movs	r3, #45	@ 0x2d
 800541a:	426d      	negs	r5, r5
 800541c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005420:	4859      	ldr	r0, [pc, #356]	@ (8005588 <_printf_i+0x238>)
 8005422:	230a      	movs	r3, #10
 8005424:	e011      	b.n	800544a <_printf_i+0xfa>
 8005426:	6821      	ldr	r1, [r4, #0]
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	0608      	lsls	r0, r1, #24
 800542c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005430:	d402      	bmi.n	8005438 <_printf_i+0xe8>
 8005432:	0649      	lsls	r1, r1, #25
 8005434:	bf48      	it	mi
 8005436:	b2ad      	uxthmi	r5, r5
 8005438:	2f6f      	cmp	r7, #111	@ 0x6f
 800543a:	4853      	ldr	r0, [pc, #332]	@ (8005588 <_printf_i+0x238>)
 800543c:	6033      	str	r3, [r6, #0]
 800543e:	bf14      	ite	ne
 8005440:	230a      	movne	r3, #10
 8005442:	2308      	moveq	r3, #8
 8005444:	2100      	movs	r1, #0
 8005446:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800544a:	6866      	ldr	r6, [r4, #4]
 800544c:	60a6      	str	r6, [r4, #8]
 800544e:	2e00      	cmp	r6, #0
 8005450:	bfa2      	ittt	ge
 8005452:	6821      	ldrge	r1, [r4, #0]
 8005454:	f021 0104 	bicge.w	r1, r1, #4
 8005458:	6021      	strge	r1, [r4, #0]
 800545a:	b90d      	cbnz	r5, 8005460 <_printf_i+0x110>
 800545c:	2e00      	cmp	r6, #0
 800545e:	d04b      	beq.n	80054f8 <_printf_i+0x1a8>
 8005460:	4616      	mov	r6, r2
 8005462:	fbb5 f1f3 	udiv	r1, r5, r3
 8005466:	fb03 5711 	mls	r7, r3, r1, r5
 800546a:	5dc7      	ldrb	r7, [r0, r7]
 800546c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005470:	462f      	mov	r7, r5
 8005472:	42bb      	cmp	r3, r7
 8005474:	460d      	mov	r5, r1
 8005476:	d9f4      	bls.n	8005462 <_printf_i+0x112>
 8005478:	2b08      	cmp	r3, #8
 800547a:	d10b      	bne.n	8005494 <_printf_i+0x144>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	07df      	lsls	r7, r3, #31
 8005480:	d508      	bpl.n	8005494 <_printf_i+0x144>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	6861      	ldr	r1, [r4, #4]
 8005486:	4299      	cmp	r1, r3
 8005488:	bfde      	ittt	le
 800548a:	2330      	movle	r3, #48	@ 0x30
 800548c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005490:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005494:	1b92      	subs	r2, r2, r6
 8005496:	6122      	str	r2, [r4, #16]
 8005498:	f8cd a000 	str.w	sl, [sp]
 800549c:	464b      	mov	r3, r9
 800549e:	aa03      	add	r2, sp, #12
 80054a0:	4621      	mov	r1, r4
 80054a2:	4640      	mov	r0, r8
 80054a4:	f7ff fee6 	bl	8005274 <_printf_common>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d14a      	bne.n	8005542 <_printf_i+0x1f2>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	b004      	add	sp, #16
 80054b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	f043 0320 	orr.w	r3, r3, #32
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	4833      	ldr	r0, [pc, #204]	@ (800558c <_printf_i+0x23c>)
 80054c0:	2778      	movs	r7, #120	@ 0x78
 80054c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	6831      	ldr	r1, [r6, #0]
 80054ca:	061f      	lsls	r7, r3, #24
 80054cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80054d0:	d402      	bmi.n	80054d8 <_printf_i+0x188>
 80054d2:	065f      	lsls	r7, r3, #25
 80054d4:	bf48      	it	mi
 80054d6:	b2ad      	uxthmi	r5, r5
 80054d8:	6031      	str	r1, [r6, #0]
 80054da:	07d9      	lsls	r1, r3, #31
 80054dc:	bf44      	itt	mi
 80054de:	f043 0320 	orrmi.w	r3, r3, #32
 80054e2:	6023      	strmi	r3, [r4, #0]
 80054e4:	b11d      	cbz	r5, 80054ee <_printf_i+0x19e>
 80054e6:	2310      	movs	r3, #16
 80054e8:	e7ac      	b.n	8005444 <_printf_i+0xf4>
 80054ea:	4827      	ldr	r0, [pc, #156]	@ (8005588 <_printf_i+0x238>)
 80054ec:	e7e9      	b.n	80054c2 <_printf_i+0x172>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f023 0320 	bic.w	r3, r3, #32
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	e7f6      	b.n	80054e6 <_printf_i+0x196>
 80054f8:	4616      	mov	r6, r2
 80054fa:	e7bd      	b.n	8005478 <_printf_i+0x128>
 80054fc:	6833      	ldr	r3, [r6, #0]
 80054fe:	6825      	ldr	r5, [r4, #0]
 8005500:	6961      	ldr	r1, [r4, #20]
 8005502:	1d18      	adds	r0, r3, #4
 8005504:	6030      	str	r0, [r6, #0]
 8005506:	062e      	lsls	r6, r5, #24
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	d501      	bpl.n	8005510 <_printf_i+0x1c0>
 800550c:	6019      	str	r1, [r3, #0]
 800550e:	e002      	b.n	8005516 <_printf_i+0x1c6>
 8005510:	0668      	lsls	r0, r5, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0x1bc>
 8005514:	8019      	strh	r1, [r3, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	6123      	str	r3, [r4, #16]
 800551a:	4616      	mov	r6, r2
 800551c:	e7bc      	b.n	8005498 <_printf_i+0x148>
 800551e:	6833      	ldr	r3, [r6, #0]
 8005520:	1d1a      	adds	r2, r3, #4
 8005522:	6032      	str	r2, [r6, #0]
 8005524:	681e      	ldr	r6, [r3, #0]
 8005526:	6862      	ldr	r2, [r4, #4]
 8005528:	2100      	movs	r1, #0
 800552a:	4630      	mov	r0, r6
 800552c:	f7fa fe60 	bl	80001f0 <memchr>
 8005530:	b108      	cbz	r0, 8005536 <_printf_i+0x1e6>
 8005532:	1b80      	subs	r0, r0, r6
 8005534:	6060      	str	r0, [r4, #4]
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	6123      	str	r3, [r4, #16]
 800553a:	2300      	movs	r3, #0
 800553c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005540:	e7aa      	b.n	8005498 <_printf_i+0x148>
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	4632      	mov	r2, r6
 8005546:	4649      	mov	r1, r9
 8005548:	4640      	mov	r0, r8
 800554a:	47d0      	blx	sl
 800554c:	3001      	adds	r0, #1
 800554e:	d0ad      	beq.n	80054ac <_printf_i+0x15c>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	079b      	lsls	r3, r3, #30
 8005554:	d413      	bmi.n	800557e <_printf_i+0x22e>
 8005556:	68e0      	ldr	r0, [r4, #12]
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	4298      	cmp	r0, r3
 800555c:	bfb8      	it	lt
 800555e:	4618      	movlt	r0, r3
 8005560:	e7a6      	b.n	80054b0 <_printf_i+0x160>
 8005562:	2301      	movs	r3, #1
 8005564:	4632      	mov	r2, r6
 8005566:	4649      	mov	r1, r9
 8005568:	4640      	mov	r0, r8
 800556a:	47d0      	blx	sl
 800556c:	3001      	adds	r0, #1
 800556e:	d09d      	beq.n	80054ac <_printf_i+0x15c>
 8005570:	3501      	adds	r5, #1
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	9903      	ldr	r1, [sp, #12]
 8005576:	1a5b      	subs	r3, r3, r1
 8005578:	42ab      	cmp	r3, r5
 800557a:	dcf2      	bgt.n	8005562 <_printf_i+0x212>
 800557c:	e7eb      	b.n	8005556 <_printf_i+0x206>
 800557e:	2500      	movs	r5, #0
 8005580:	f104 0619 	add.w	r6, r4, #25
 8005584:	e7f5      	b.n	8005572 <_printf_i+0x222>
 8005586:	bf00      	nop
 8005588:	08005b2d 	.word	0x08005b2d
 800558c:	08005b3e 	.word	0x08005b3e

08005590 <__sflush_r>:
 8005590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	0716      	lsls	r6, r2, #28
 800559a:	4605      	mov	r5, r0
 800559c:	460c      	mov	r4, r1
 800559e:	d454      	bmi.n	800564a <__sflush_r+0xba>
 80055a0:	684b      	ldr	r3, [r1, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	dc02      	bgt.n	80055ac <__sflush_r+0x1c>
 80055a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dd48      	ble.n	800563e <__sflush_r+0xae>
 80055ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	d045      	beq.n	800563e <__sflush_r+0xae>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055b8:	682f      	ldr	r7, [r5, #0]
 80055ba:	6a21      	ldr	r1, [r4, #32]
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	d030      	beq.n	8005622 <__sflush_r+0x92>
 80055c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	0759      	lsls	r1, r3, #29
 80055c6:	d505      	bpl.n	80055d4 <__sflush_r+0x44>
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055ce:	b10b      	cbz	r3, 80055d4 <__sflush_r+0x44>
 80055d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055d2:	1ad2      	subs	r2, r2, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055d8:	6a21      	ldr	r1, [r4, #32]
 80055da:	4628      	mov	r0, r5
 80055dc:	47b0      	blx	r6
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	d106      	bne.n	80055f2 <__sflush_r+0x62>
 80055e4:	6829      	ldr	r1, [r5, #0]
 80055e6:	291d      	cmp	r1, #29
 80055e8:	d82b      	bhi.n	8005642 <__sflush_r+0xb2>
 80055ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005694 <__sflush_r+0x104>)
 80055ec:	410a      	asrs	r2, r1
 80055ee:	07d6      	lsls	r6, r2, #31
 80055f0:	d427      	bmi.n	8005642 <__sflush_r+0xb2>
 80055f2:	2200      	movs	r2, #0
 80055f4:	6062      	str	r2, [r4, #4]
 80055f6:	04d9      	lsls	r1, r3, #19
 80055f8:	6922      	ldr	r2, [r4, #16]
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	d504      	bpl.n	8005608 <__sflush_r+0x78>
 80055fe:	1c42      	adds	r2, r0, #1
 8005600:	d101      	bne.n	8005606 <__sflush_r+0x76>
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	b903      	cbnz	r3, 8005608 <__sflush_r+0x78>
 8005606:	6560      	str	r0, [r4, #84]	@ 0x54
 8005608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800560a:	602f      	str	r7, [r5, #0]
 800560c:	b1b9      	cbz	r1, 800563e <__sflush_r+0xae>
 800560e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005612:	4299      	cmp	r1, r3
 8005614:	d002      	beq.n	800561c <__sflush_r+0x8c>
 8005616:	4628      	mov	r0, r5
 8005618:	f7ff fa9a 	bl	8004b50 <_free_r>
 800561c:	2300      	movs	r3, #0
 800561e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005620:	e00d      	b.n	800563e <__sflush_r+0xae>
 8005622:	2301      	movs	r3, #1
 8005624:	4628      	mov	r0, r5
 8005626:	47b0      	blx	r6
 8005628:	4602      	mov	r2, r0
 800562a:	1c50      	adds	r0, r2, #1
 800562c:	d1c9      	bne.n	80055c2 <__sflush_r+0x32>
 800562e:	682b      	ldr	r3, [r5, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0c6      	beq.n	80055c2 <__sflush_r+0x32>
 8005634:	2b1d      	cmp	r3, #29
 8005636:	d001      	beq.n	800563c <__sflush_r+0xac>
 8005638:	2b16      	cmp	r3, #22
 800563a:	d11e      	bne.n	800567a <__sflush_r+0xea>
 800563c:	602f      	str	r7, [r5, #0]
 800563e:	2000      	movs	r0, #0
 8005640:	e022      	b.n	8005688 <__sflush_r+0xf8>
 8005642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005646:	b21b      	sxth	r3, r3
 8005648:	e01b      	b.n	8005682 <__sflush_r+0xf2>
 800564a:	690f      	ldr	r7, [r1, #16]
 800564c:	2f00      	cmp	r7, #0
 800564e:	d0f6      	beq.n	800563e <__sflush_r+0xae>
 8005650:	0793      	lsls	r3, r2, #30
 8005652:	680e      	ldr	r6, [r1, #0]
 8005654:	bf08      	it	eq
 8005656:	694b      	ldreq	r3, [r1, #20]
 8005658:	600f      	str	r7, [r1, #0]
 800565a:	bf18      	it	ne
 800565c:	2300      	movne	r3, #0
 800565e:	eba6 0807 	sub.w	r8, r6, r7
 8005662:	608b      	str	r3, [r1, #8]
 8005664:	f1b8 0f00 	cmp.w	r8, #0
 8005668:	dde9      	ble.n	800563e <__sflush_r+0xae>
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800566e:	4643      	mov	r3, r8
 8005670:	463a      	mov	r2, r7
 8005672:	4628      	mov	r0, r5
 8005674:	47b0      	blx	r6
 8005676:	2800      	cmp	r0, #0
 8005678:	dc08      	bgt.n	800568c <__sflush_r+0xfc>
 800567a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800568c:	4407      	add	r7, r0
 800568e:	eba8 0800 	sub.w	r8, r8, r0
 8005692:	e7e7      	b.n	8005664 <__sflush_r+0xd4>
 8005694:	dfbffffe 	.word	0xdfbffffe

08005698 <_fflush_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	4605      	mov	r5, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	b913      	cbnz	r3, 80056a8 <_fflush_r+0x10>
 80056a2:	2500      	movs	r5, #0
 80056a4:	4628      	mov	r0, r5
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	b118      	cbz	r0, 80056b2 <_fflush_r+0x1a>
 80056aa:	6a03      	ldr	r3, [r0, #32]
 80056ac:	b90b      	cbnz	r3, 80056b2 <_fflush_r+0x1a>
 80056ae:	f7ff f827 	bl	8004700 <__sinit>
 80056b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f3      	beq.n	80056a2 <_fflush_r+0xa>
 80056ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056bc:	07d0      	lsls	r0, r2, #31
 80056be:	d404      	bmi.n	80056ca <_fflush_r+0x32>
 80056c0:	0599      	lsls	r1, r3, #22
 80056c2:	d402      	bmi.n	80056ca <_fflush_r+0x32>
 80056c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056c6:	f7ff fa32 	bl	8004b2e <__retarget_lock_acquire_recursive>
 80056ca:	4628      	mov	r0, r5
 80056cc:	4621      	mov	r1, r4
 80056ce:	f7ff ff5f 	bl	8005590 <__sflush_r>
 80056d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056d4:	07da      	lsls	r2, r3, #31
 80056d6:	4605      	mov	r5, r0
 80056d8:	d4e4      	bmi.n	80056a4 <_fflush_r+0xc>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	059b      	lsls	r3, r3, #22
 80056de:	d4e1      	bmi.n	80056a4 <_fflush_r+0xc>
 80056e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056e2:	f7ff fa25 	bl	8004b30 <__retarget_lock_release_recursive>
 80056e6:	e7dd      	b.n	80056a4 <_fflush_r+0xc>

080056e8 <__swhatbuf_r>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	460c      	mov	r4, r1
 80056ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f0:	2900      	cmp	r1, #0
 80056f2:	b096      	sub	sp, #88	@ 0x58
 80056f4:	4615      	mov	r5, r2
 80056f6:	461e      	mov	r6, r3
 80056f8:	da0d      	bge.n	8005716 <__swhatbuf_r+0x2e>
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005700:	f04f 0100 	mov.w	r1, #0
 8005704:	bf14      	ite	ne
 8005706:	2340      	movne	r3, #64	@ 0x40
 8005708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800570c:	2000      	movs	r0, #0
 800570e:	6031      	str	r1, [r6, #0]
 8005710:	602b      	str	r3, [r5, #0]
 8005712:	b016      	add	sp, #88	@ 0x58
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	466a      	mov	r2, sp
 8005718:	f000 f862 	bl	80057e0 <_fstat_r>
 800571c:	2800      	cmp	r0, #0
 800571e:	dbec      	blt.n	80056fa <__swhatbuf_r+0x12>
 8005720:	9901      	ldr	r1, [sp, #4]
 8005722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800572a:	4259      	negs	r1, r3
 800572c:	4159      	adcs	r1, r3
 800572e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005732:	e7eb      	b.n	800570c <__swhatbuf_r+0x24>

08005734 <__smakebuf_r>:
 8005734:	898b      	ldrh	r3, [r1, #12]
 8005736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005738:	079d      	lsls	r5, r3, #30
 800573a:	4606      	mov	r6, r0
 800573c:	460c      	mov	r4, r1
 800573e:	d507      	bpl.n	8005750 <__smakebuf_r+0x1c>
 8005740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	2301      	movs	r3, #1
 800574a:	6163      	str	r3, [r4, #20]
 800574c:	b003      	add	sp, #12
 800574e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005750:	ab01      	add	r3, sp, #4
 8005752:	466a      	mov	r2, sp
 8005754:	f7ff ffc8 	bl	80056e8 <__swhatbuf_r>
 8005758:	9f00      	ldr	r7, [sp, #0]
 800575a:	4605      	mov	r5, r0
 800575c:	4639      	mov	r1, r7
 800575e:	4630      	mov	r0, r6
 8005760:	f7ff fa62 	bl	8004c28 <_malloc_r>
 8005764:	b948      	cbnz	r0, 800577a <__smakebuf_r+0x46>
 8005766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576a:	059a      	lsls	r2, r3, #22
 800576c:	d4ee      	bmi.n	800574c <__smakebuf_r+0x18>
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	f043 0302 	orr.w	r3, r3, #2
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	e7e2      	b.n	8005740 <__smakebuf_r+0xc>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	6020      	str	r0, [r4, #0]
 800577e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800578a:	b15b      	cbz	r3, 80057a4 <__smakebuf_r+0x70>
 800578c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005790:	4630      	mov	r0, r6
 8005792:	f000 f837 	bl	8005804 <_isatty_r>
 8005796:	b128      	cbz	r0, 80057a4 <__smakebuf_r+0x70>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	431d      	orrs	r5, r3
 80057a8:	81a5      	strh	r5, [r4, #12]
 80057aa:	e7cf      	b.n	800574c <__smakebuf_r+0x18>

080057ac <memmove>:
 80057ac:	4288      	cmp	r0, r1
 80057ae:	b510      	push	{r4, lr}
 80057b0:	eb01 0402 	add.w	r4, r1, r2
 80057b4:	d902      	bls.n	80057bc <memmove+0x10>
 80057b6:	4284      	cmp	r4, r0
 80057b8:	4623      	mov	r3, r4
 80057ba:	d807      	bhi.n	80057cc <memmove+0x20>
 80057bc:	1e43      	subs	r3, r0, #1
 80057be:	42a1      	cmp	r1, r4
 80057c0:	d008      	beq.n	80057d4 <memmove+0x28>
 80057c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ca:	e7f8      	b.n	80057be <memmove+0x12>
 80057cc:	4402      	add	r2, r0
 80057ce:	4601      	mov	r1, r0
 80057d0:	428a      	cmp	r2, r1
 80057d2:	d100      	bne.n	80057d6 <memmove+0x2a>
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057de:	e7f7      	b.n	80057d0 <memmove+0x24>

080057e0 <_fstat_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	@ (8005800 <_fstat_r+0x20>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	f7fc fb6b 	bl	8001ec8 <_fstat>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d102      	bne.n	80057fc <_fstat_r+0x1c>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	b103      	cbz	r3, 80057fc <_fstat_r+0x1c>
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	bf00      	nop
 8005800:	200002a0 	.word	0x200002a0

08005804 <_isatty_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	@ (8005820 <_isatty_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fc fb6a 	bl	8001ee8 <_isatty>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_isatty_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_isatty_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	200002a0 	.word	0x200002a0

08005824 <_sbrk_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d06      	ldr	r5, [pc, #24]	@ (8005840 <_sbrk_r+0x1c>)
 8005828:	2300      	movs	r3, #0
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	f7fc fb72 	bl	8001f18 <_sbrk>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_sbrk_r+0x1a>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_sbrk_r+0x1a>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200002a0 	.word	0x200002a0

08005844 <_realloc_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	4680      	mov	r8, r0
 800584a:	4615      	mov	r5, r2
 800584c:	460c      	mov	r4, r1
 800584e:	b921      	cbnz	r1, 800585a <_realloc_r+0x16>
 8005850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4611      	mov	r1, r2
 8005856:	f7ff b9e7 	b.w	8004c28 <_malloc_r>
 800585a:	b92a      	cbnz	r2, 8005868 <_realloc_r+0x24>
 800585c:	f7ff f978 	bl	8004b50 <_free_r>
 8005860:	2400      	movs	r4, #0
 8005862:	4620      	mov	r0, r4
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	f000 f81a 	bl	80058a0 <_malloc_usable_size_r>
 800586c:	4285      	cmp	r5, r0
 800586e:	4606      	mov	r6, r0
 8005870:	d802      	bhi.n	8005878 <_realloc_r+0x34>
 8005872:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005876:	d8f4      	bhi.n	8005862 <_realloc_r+0x1e>
 8005878:	4629      	mov	r1, r5
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff f9d4 	bl	8004c28 <_malloc_r>
 8005880:	4607      	mov	r7, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d0ec      	beq.n	8005860 <_realloc_r+0x1c>
 8005886:	42b5      	cmp	r5, r6
 8005888:	462a      	mov	r2, r5
 800588a:	4621      	mov	r1, r4
 800588c:	bf28      	it	cs
 800588e:	4632      	movcs	r2, r6
 8005890:	f7ff f94f 	bl	8004b32 <memcpy>
 8005894:	4621      	mov	r1, r4
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff f95a 	bl	8004b50 <_free_r>
 800589c:	463c      	mov	r4, r7
 800589e:	e7e0      	b.n	8005862 <_realloc_r+0x1e>

080058a0 <_malloc_usable_size_r>:
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f18      	subs	r0, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfbc      	itt	lt
 80058aa:	580b      	ldrlt	r3, [r1, r0]
 80058ac:	18c0      	addlt	r0, r0, r3
 80058ae:	4770      	bx	lr

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
