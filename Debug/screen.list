
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005680  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005820  08005820  00006820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa8  08005aa8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab0  08005ab0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ab8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08005b20  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005b20  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5e9  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e5  00000000  00000000  00014681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00016a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017eb9  00000000  00000000  000176e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f81b  00000000  00000000  0002f5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f9da  00000000  00000000  0003edbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ce796  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000098b  00000000  00000000  000ce7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ca4  00000000  00000000  000cf164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d2e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005808 	.word	0x08005808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005808 	.word	0x08005808

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ILI9341_Init>:
static void changeMinutes(int x, uint8_t minute, SPI_HandleTypeDef hspi3);
static void changeHours();

// Initialization
void ILI9341_Init(SPI_HandleTypeDef hspi3)
{
 8000580:	b084      	sub	sp, #16
 8000582:	b580      	push	{r7, lr}
 8000584:	b094      	sub	sp, #80	@ 0x50
 8000586:	af14      	add	r7, sp, #80	@ 0x50
 8000588:	f107 0c08 	add.w	ip, r7, #8
 800058c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ILI9341_Reset();
 8000590:	f000 fd50 	bl	8001034 <ILI9341_Reset>
	ILI9341_SoftReset(hspi3);
 8000594:	4668      	mov	r0, sp
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2248      	movs	r2, #72	@ 0x48
 800059c:	4619      	mov	r1, r3
 800059e:	f004 fa74 	bl	8004a8a <memcpy>
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a8:	f000 fd56 	bl	8001058 <ILI9341_SoftReset>

	/* Power Control A */
	LCD_WR_REG(0xCB, hspi3);
 80005ac:	4668      	mov	r0, sp
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	224c      	movs	r2, #76	@ 0x4c
 80005b4:	4619      	mov	r1, r3
 80005b6:	f004 fa68 	bl	8004a8a <memcpy>
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005c0:	20cb      	movs	r0, #203	@ 0xcb
 80005c2:	f000 fd69 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x39, hspi3);
 80005c6:	4668      	mov	r0, sp
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	224c      	movs	r2, #76	@ 0x4c
 80005ce:	4619      	mov	r1, r3
 80005d0:	f004 fa5b 	bl	8004a8a <memcpy>
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005da:	2039      	movs	r0, #57	@ 0x39
 80005dc:	f000 fd7d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2C, hspi3);
 80005e0:	4668      	mov	r0, sp
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	224c      	movs	r2, #76	@ 0x4c
 80005e8:	4619      	mov	r1, r3
 80005ea:	f004 fa4e 	bl	8004a8a <memcpy>
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f4:	202c      	movs	r0, #44	@ 0x2c
 80005f6:	f000 fd70 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80005fa:	4668      	mov	r0, sp
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	224c      	movs	r2, #76	@ 0x4c
 8000602:	4619      	mov	r1, r3
 8000604:	f004 fa41 	bl	8004a8a <memcpy>
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fd63 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x34, hspi3);
 8000614:	4668      	mov	r0, sp
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	224c      	movs	r2, #76	@ 0x4c
 800061c:	4619      	mov	r1, r3
 800061e:	f004 fa34 	bl	8004a8a <memcpy>
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000628:	2034      	movs	r0, #52	@ 0x34
 800062a:	f000 fd56 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x02, hspi3);
 800062e:	4668      	mov	r0, sp
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	224c      	movs	r2, #76	@ 0x4c
 8000636:	4619      	mov	r1, r3
 8000638:	f004 fa27 	bl	8004a8a <memcpy>
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000642:	2002      	movs	r0, #2
 8000644:	f000 fd49 	bl	80010da <LCD_WR_DATA>
	/* Power Control B */
	LCD_WR_REG(0xCF, hspi3);
 8000648:	4668      	mov	r0, sp
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	224c      	movs	r2, #76	@ 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	f004 fa1a 	bl	8004a8a <memcpy>
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800065c:	20cf      	movs	r0, #207	@ 0xcf
 800065e:	f000 fd1b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	224c      	movs	r2, #76	@ 0x4c
 800066a:	4619      	mov	r1, r3
 800066c:	f004 fa0d 	bl	8004a8a <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fd2f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 800067c:	4668      	mov	r0, sp
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	f004 fa00 	bl	8004a8a <memcpy>
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000690:	20c1      	movs	r0, #193	@ 0xc1
 8000692:	f000 fd22 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x30, hspi3);
 8000696:	4668      	mov	r0, sp
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	224c      	movs	r2, #76	@ 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	f004 f9f3 	bl	8004a8a <memcpy>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006aa:	2030      	movs	r0, #48	@ 0x30
 80006ac:	f000 fd15 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control A */
	LCD_WR_REG(0xE8, hspi3);
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 f9e6 	bl	8004a8a <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c4:	20e8      	movs	r0, #232	@ 0xe8
 80006c6:	f000 fce7 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x85, hspi3);
 80006ca:	4668      	mov	r0, sp
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	224c      	movs	r2, #76	@ 0x4c
 80006d2:	4619      	mov	r1, r3
 80006d4:	f004 f9d9 	bl	8004a8a <memcpy>
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006de:	2085      	movs	r0, #133	@ 0x85
 80006e0:	f000 fcfb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	4619      	mov	r1, r3
 80006ee:	f004 f9cc 	bl	8004a8a <memcpy>
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fcee 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x78, hspi3);
 80006fe:	4668      	mov	r0, sp
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	224c      	movs	r2, #76	@ 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	f004 f9bf 	bl	8004a8a <memcpy>
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fce1 	bl	80010da <LCD_WR_DATA>
	/* Driver timing control B */
	LCD_WR_REG(0xEA, hspi3);
 8000718:	4668      	mov	r0, sp
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	224c      	movs	r2, #76	@ 0x4c
 8000720:	4619      	mov	r1, r3
 8000722:	f004 f9b2 	bl	8004a8a <memcpy>
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072c:	20ea      	movs	r0, #234	@ 0xea
 800072e:	f000 fcb3 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000732:	4668      	mov	r0, sp
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	224c      	movs	r2, #76	@ 0x4c
 800073a:	4619      	mov	r1, r3
 800073c:	f004 f9a5 	bl	8004a8a <memcpy>
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	2000      	movs	r0, #0
 8000748:	f000 fcc7 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 800074c:	4668      	mov	r0, sp
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	4619      	mov	r1, r3
 8000756:	f004 f998 	bl	8004a8a <memcpy>
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fcba 	bl	80010da <LCD_WR_DATA>
	/* Power on Sequence control */
	LCD_WR_REG(0xED, hspi3);
 8000766:	4668      	mov	r0, sp
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	224c      	movs	r2, #76	@ 0x4c
 800076e:	4619      	mov	r1, r3
 8000770:	f004 f98b 	bl	8004a8a <memcpy>
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800077a:	20ed      	movs	r0, #237	@ 0xed
 800077c:	f000 fc8c 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x64, hspi3);
 8000780:	4668      	mov	r0, sp
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	f004 f97e 	bl	8004a8a <memcpy>
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000794:	2064      	movs	r0, #100	@ 0x64
 8000796:	f000 fca0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 800079a:	4668      	mov	r0, sp
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	224c      	movs	r2, #76	@ 0x4c
 80007a2:	4619      	mov	r1, r3
 80007a4:	f004 f971 	bl	8004a8a <memcpy>
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ae:	2003      	movs	r0, #3
 80007b0:	f000 fc93 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x12, hspi3);
 80007b4:	4668      	mov	r0, sp
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	4619      	mov	r1, r3
 80007be:	f004 f964 	bl	8004a8a <memcpy>
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c8:	2012      	movs	r0, #18
 80007ca:	f000 fc86 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x81, hspi3);
 80007ce:	4668      	mov	r0, sp
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	224c      	movs	r2, #76	@ 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f004 f957 	bl	8004a8a <memcpy>
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e2:	2081      	movs	r0, #129	@ 0x81
 80007e4:	f000 fc79 	bl	80010da <LCD_WR_DATA>
	/* Pump ratio control */
	LCD_WR_REG(0xF7, hspi3);
 80007e8:	4668      	mov	r0, sp
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	4619      	mov	r1, r3
 80007f2:	f004 f94a 	bl	8004a8a <memcpy>
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fc:	20f7      	movs	r0, #247	@ 0xf7
 80007fe:	f000 fc4b 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x20, hspi3);
 8000802:	4668      	mov	r0, sp
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	224c      	movs	r2, #76	@ 0x4c
 800080a:	4619      	mov	r1, r3
 800080c:	f004 f93d 	bl	8004a8a <memcpy>
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000816:	2020      	movs	r0, #32
 8000818:	f000 fc5f 	bl	80010da <LCD_WR_DATA>
	/* Power Control 1 */
	LCD_WR_REG(0xC0, hspi3);
 800081c:	4668      	mov	r0, sp
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	4619      	mov	r1, r3
 8000826:	f004 f930 	bl	8004a8a <memcpy>
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000830:	20c0      	movs	r0, #192	@ 0xc0
 8000832:	f000 fc31 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 8000836:	4668      	mov	r0, sp
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	224c      	movs	r2, #76	@ 0x4c
 800083e:	4619      	mov	r1, r3
 8000840:	f004 f923 	bl	8004a8a <memcpy>
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800084a:	2010      	movs	r0, #16
 800084c:	f000 fc45 	bl	80010da <LCD_WR_DATA>
	/* Power Control 2 */
	LCD_WR_REG(0xC1, hspi3);
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	224c      	movs	r2, #76	@ 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	f004 f916 	bl	8004a8a <memcpy>
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc17 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x10, hspi3);
 800086a:	4668      	mov	r0, sp
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	224c      	movs	r2, #76	@ 0x4c
 8000872:	4619      	mov	r1, r3
 8000874:	f004 f909 	bl	8004a8a <memcpy>
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fc2b 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 1 */
	LCD_WR_REG(0xC5, hspi3);
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	224c      	movs	r2, #76	@ 0x4c
 800088c:	4619      	mov	r1, r3
 800088e:	f004 f8fc 	bl	8004a8a <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000898:	20c5      	movs	r0, #197	@ 0xc5
 800089a:	f000 fbfd 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x3E, hspi3);
 800089e:	4668      	mov	r0, sp
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	224c      	movs	r2, #76	@ 0x4c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f004 f8ef 	bl	8004a8a <memcpy>
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008b2:	203e      	movs	r0, #62	@ 0x3e
 80008b4:	f000 fc11 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x28, hspi3);
 80008b8:	4668      	mov	r0, sp
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	224c      	movs	r2, #76	@ 0x4c
 80008c0:	4619      	mov	r1, r3
 80008c2:	f004 f8e2 	bl	8004a8a <memcpy>
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008cc:	2028      	movs	r0, #40	@ 0x28
 80008ce:	f000 fc04 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0xC7, hspi3);
 80008d2:	4668      	mov	r0, sp
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	224c      	movs	r2, #76	@ 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	f004 f8d5 	bl	8004a8a <memcpy>
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e6:	20c7      	movs	r0, #199	@ 0xc7
 80008e8:	f000 fbd6 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x86, hspi3);
 80008ec:	4668      	mov	r0, sp
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	224c      	movs	r2, #76	@ 0x4c
 80008f4:	4619      	mov	r1, r3
 80008f6:	f004 f8c8 	bl	8004a8a <memcpy>
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000900:	2086      	movs	r0, #134	@ 0x86
 8000902:	f000 fbea 	bl	80010da <LCD_WR_DATA>
	/* VCOM Control 2 */
	LCD_WR_REG(0x36, hspi3);
 8000906:	4668      	mov	r0, sp
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	224c      	movs	r2, #76	@ 0x4c
 800090e:	4619      	mov	r1, r3
 8000910:	f004 f8bb 	bl	8004a8a <memcpy>
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800091a:	2036      	movs	r0, #54	@ 0x36
 800091c:	f000 fbbc 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x48, hspi3);
 8000920:	4668      	mov	r0, sp
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	224c      	movs	r2, #76	@ 0x4c
 8000928:	4619      	mov	r1, r3
 800092a:	f004 f8ae 	bl	8004a8a <memcpy>
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000934:	2048      	movs	r0, #72	@ 0x48
 8000936:	f000 fbd0 	bl	80010da <LCD_WR_DATA>
	/* Pixel Format Set */
	LCD_WR_REG(0x3A, hspi3);
 800093a:	4668      	mov	r0, sp
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	224c      	movs	r2, #76	@ 0x4c
 8000942:	4619      	mov	r1, r3
 8000944:	f004 f8a1 	bl	8004a8a <memcpy>
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f000 fba2 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x55, hspi3);    //16bit
 8000954:	4668      	mov	r0, sp
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	224c      	movs	r2, #76	@ 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	f004 f894 	bl	8004a8a <memcpy>
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000968:	2055      	movs	r0, #85	@ 0x55
 800096a:	f000 fbb6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_REG(0xB1, hspi3);
 800096e:	4668      	mov	r0, sp
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	224c      	movs	r2, #76	@ 0x4c
 8000976:	4619      	mov	r1, r3
 8000978:	f004 f887 	bl	8004a8a <memcpy>
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000982:	20b1      	movs	r0, #177	@ 0xb1
 8000984:	f000 fb88 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000988:	4668      	mov	r0, sp
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	f004 f87a 	bl	8004a8a <memcpy>
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb9c 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x18, hspi3);
 80009a2:	4668      	mov	r0, sp
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	224c      	movs	r2, #76	@ 0x4c
 80009aa:	4619      	mov	r1, r3
 80009ac:	f004 f86d 	bl	8004a8a <memcpy>
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b6:	2018      	movs	r0, #24
 80009b8:	f000 fb8f 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x01, hspi3);
	LCD_WR_DATA(0x00, hspi3);
	LCD_WR_DATA(0x20, hspi3); // Little Endian
#endif
	/* Display Function Control */
	LCD_WR_REG(0xB6, hspi3);
 80009bc:	4668      	mov	r0, sp
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	4619      	mov	r1, r3
 80009c6:	f004 f860 	bl	8004a8a <memcpy>
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009d0:	20b6      	movs	r0, #182	@ 0xb6
 80009d2:	f000 fb61 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x08, hspi3);
 80009d6:	4668      	mov	r0, sp
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	224c      	movs	r2, #76	@ 0x4c
 80009de:	4619      	mov	r1, r3
 80009e0:	f004 f853 	bl	8004a8a <memcpy>
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ea:	2008      	movs	r0, #8
 80009ec:	f000 fb75 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x82, hspi3);
 80009f0:	4668      	mov	r0, sp
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	224c      	movs	r2, #76	@ 0x4c
 80009f8:	4619      	mov	r1, r3
 80009fa:	f004 f846 	bl	8004a8a <memcpy>
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a04:	2082      	movs	r0, #130	@ 0x82
 8000a06:	f000 fb68 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x27, hspi3);
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	224c      	movs	r2, #76	@ 0x4c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f004 f839 	bl	8004a8a <memcpy>
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1e:	2027      	movs	r0, #39	@ 0x27
 8000a20:	f000 fb5b 	bl	80010da <LCD_WR_DATA>
	/* 3GAMMA FUNCTION DISABLE */
	LCD_WR_REG(0xF2, hspi3);
 8000a24:	4668      	mov	r0, sp
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	224c      	movs	r2, #76	@ 0x4c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f004 f82c 	bl	8004a8a <memcpy>
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a38:	20f2      	movs	r0, #242	@ 0xf2
 8000a3a:	f000 fb2d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000a3e:	4668      	mov	r0, sp
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f004 f81f 	bl	8004a8a <memcpy>
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fb41 	bl	80010da <LCD_WR_DATA>
	/* GAMMA CURVE SELECTED */
	LCD_WR_REG(0x26, hspi3); //Gamma set
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	224c      	movs	r2, #76	@ 0x4c
 8000a60:	4619      	mov	r1, r3
 8000a62:	f004 f812 	bl	8004a8a <memcpy>
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a6c:	2026      	movs	r0, #38	@ 0x26
 8000a6e:	f000 fb13 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x01, hspi3); 	//Gamma Curve (G2.2)
 8000a72:	4668      	mov	r0, sp
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	224c      	movs	r2, #76	@ 0x4c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f004 f805 	bl	8004a8a <memcpy>
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb27 	bl	80010da <LCD_WR_DATA>
	//Positive Gamma  Correction
	LCD_WR_REG(0xE0, hspi3);
 8000a8c:	4668      	mov	r0, sp
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	224c      	movs	r2, #76	@ 0x4c
 8000a94:	4619      	mov	r1, r3
 8000a96:	f003 fff8 	bl	8004a8a <memcpy>
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa0:	20e0      	movs	r0, #224	@ 0xe0
 8000aa2:	f000 faf9 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x0F, hspi3);
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	224c      	movs	r2, #76	@ 0x4c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f003 ffeb 	bl	8004a8a <memcpy>
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 fb0d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	224c      	movs	r2, #76	@ 0x4c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f003 ffde 	bl	8004a8a <memcpy>
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad4:	2031      	movs	r0, #49	@ 0x31
 8000ad6:	f000 fb00 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x2B, hspi3);
 8000ada:	4668      	mov	r0, sp
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	224c      	movs	r2, #76	@ 0x4c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f003 ffd1 	bl	8004a8a <memcpy>
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aee:	202b      	movs	r0, #43	@ 0x2b
 8000af0:	f000 faf3 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000af4:	4668      	mov	r0, sp
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	224c      	movs	r2, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	f003 ffc4 	bl	8004a8a <memcpy>
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f000 fae6 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000b0e:	4668      	mov	r0, sp
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	224c      	movs	r2, #76	@ 0x4c
 8000b16:	4619      	mov	r1, r3
 8000b18:	f003 ffb7 	bl	8004a8a <memcpy>
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b22:	200e      	movs	r0, #14
 8000b24:	f000 fad9 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000b28:	4668      	mov	r0, sp
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	224c      	movs	r2, #76	@ 0x4c
 8000b30:	4619      	mov	r1, r3
 8000b32:	f003 ffaa 	bl	8004a8a <memcpy>
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 facc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x4E, hspi3);
 8000b42:	4668      	mov	r0, sp
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	224c      	movs	r2, #76	@ 0x4c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f003 ff9d 	bl	8004a8a <memcpy>
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b56:	204e      	movs	r0, #78	@ 0x4e
 8000b58:	f000 fabf 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xF1, hspi3);
 8000b5c:	4668      	mov	r0, sp
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	224c      	movs	r2, #76	@ 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	f003 ff90 	bl	8004a8a <memcpy>
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b70:	20f1      	movs	r0, #241	@ 0xf1
 8000b72:	f000 fab2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x37, hspi3);
 8000b76:	4668      	mov	r0, sp
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	224c      	movs	r2, #76	@ 0x4c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f003 ff83 	bl	8004a8a <memcpy>
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	2037      	movs	r0, #55	@ 0x37
 8000b8c:	f000 faa5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000b90:	4668      	mov	r0, sp
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	224c      	movs	r2, #76	@ 0x4c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f003 ff76 	bl	8004a8a <memcpy>
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f000 fa98 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x10, hspi3);
 8000baa:	4668      	mov	r0, sp
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	224c      	movs	r2, #76	@ 0x4c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f003 ff69 	bl	8004a8a <memcpy>
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 fa8b 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000bc4:	4668      	mov	r0, sp
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	224c      	movs	r2, #76	@ 0x4c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f003 ff5c 	bl	8004a8a <memcpy>
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fa7e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000bde:	4668      	mov	r0, sp
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	224c      	movs	r2, #76	@ 0x4c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f003 ff4f 	bl	8004a8a <memcpy>
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f000 fa71 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x09, hspi3);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	224c      	movs	r2, #76	@ 0x4c
 8000c00:	4619      	mov	r1, r3
 8000c02:	f003 ff42 	bl	8004a8a <memcpy>
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	2009      	movs	r0, #9
 8000c0e:	f000 fa64 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x00, hspi3);
 8000c12:	4668      	mov	r0, sp
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	224c      	movs	r2, #76	@ 0x4c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f003 ff35 	bl	8004a8a <memcpy>
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fa57 	bl	80010da <LCD_WR_DATA>
	//Negative Gamma  Correction
	LCD_WR_REG(0xE1, hspi3);
 8000c2c:	4668      	mov	r0, sp
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	4619      	mov	r1, r3
 8000c36:	f003 ff28 	bl	8004a8a <memcpy>
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	20e1      	movs	r0, #225	@ 0xe1
 8000c42:	f000 fa29 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x00, hspi3);
 8000c46:	4668      	mov	r0, sp
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	224c      	movs	r2, #76	@ 0x4c
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 ff1b 	bl	8004a8a <memcpy>
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fa3d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0E, hspi3);
 8000c60:	4668      	mov	r0, sp
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	224c      	movs	r2, #76	@ 0x4c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f003 ff0e 	bl	8004a8a <memcpy>
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	200e      	movs	r0, #14
 8000c76:	f000 fa30 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x14, hspi3);
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	224c      	movs	r2, #76	@ 0x4c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f003 ff01 	bl	8004a8a <memcpy>
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f000 fa23 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x03, hspi3);
 8000c94:	4668      	mov	r0, sp
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	224c      	movs	r2, #76	@ 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f003 fef4 	bl	8004a8a <memcpy>
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 fa16 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x11, hspi3);
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	224c      	movs	r2, #76	@ 0x4c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f003 fee7 	bl	8004a8a <memcpy>
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc2:	2011      	movs	r0, #17
 8000cc4:	f000 fa09 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x07, hspi3);
 8000cc8:	4668      	mov	r0, sp
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	224c      	movs	r2, #76	@ 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f003 feda 	bl	8004a8a <memcpy>
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f000 f9fc 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000ce2:	4668      	mov	r0, sp
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	224c      	movs	r2, #76	@ 0x4c
 8000cea:	4619      	mov	r1, r3
 8000cec:	f003 fecd 	bl	8004a8a <memcpy>
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf6:	2031      	movs	r0, #49	@ 0x31
 8000cf8:	f000 f9ef 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xC1, hspi3);
 8000cfc:	4668      	mov	r0, sp
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	224c      	movs	r2, #76	@ 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	f003 fec0 	bl	8004a8a <memcpy>
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d10:	20c1      	movs	r0, #193	@ 0xc1
 8000d12:	f000 f9e2 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x48, hspi3);
 8000d16:	4668      	mov	r0, sp
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	224c      	movs	r2, #76	@ 0x4c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f003 feb3 	bl	8004a8a <memcpy>
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2a:	2048      	movs	r0, #72	@ 0x48
 8000d2c:	f000 f9d5 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x08, hspi3);
 8000d30:	4668      	mov	r0, sp
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	224c      	movs	r2, #76	@ 0x4c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fea6 	bl	8004a8a <memcpy>
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 f9c8 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	224c      	movs	r2, #76	@ 0x4c
 8000d52:	4619      	mov	r1, r3
 8000d54:	f003 fe99 	bl	8004a8a <memcpy>
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f9bb 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0C, hspi3);
 8000d64:	4668      	mov	r0, sp
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	224c      	movs	r2, #76	@ 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f003 fe8c 	bl	8004a8a <memcpy>
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f000 f9ae 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x31, hspi3);
 8000d7e:	4668      	mov	r0, sp
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	224c      	movs	r2, #76	@ 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	f003 fe7f 	bl	8004a8a <memcpy>
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	2031      	movs	r0, #49	@ 0x31
 8000d94:	f000 f9a1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x36, hspi3);
 8000d98:	4668      	mov	r0, sp
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	224c      	movs	r2, #76	@ 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	f003 fe72 	bl	8004a8a <memcpy>
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	2036      	movs	r0, #54	@ 0x36
 8000dae:	f000 f994 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0x0F, hspi3);
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	224c      	movs	r2, #76	@ 0x4c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f003 fe65 	bl	8004a8a <memcpy>
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f987 	bl	80010da <LCD_WR_DATA>
	//EXIT SLEEP
	LCD_WR_REG(0x11, hspi3);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f003 fe58 	bl	8004a8a <memcpy>
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de0:	2011      	movs	r0, #17
 8000de2:	f000 f959 	bl	8001098 <LCD_WR_REG>

	HAL_Delay(120);
 8000de6:	2078      	movs	r0, #120	@ 0x78
 8000de8:	f001 f932 	bl	8002050 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WR_REG(0x29, hspi3);
 8000dec:	4668      	mov	r0, sp
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	224c      	movs	r2, #76	@ 0x4c
 8000df4:	4619      	mov	r1, r3
 8000df6:	f003 fe48 	bl	8004a8a <memcpy>
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	2029      	movs	r0, #41	@ 0x29
 8000e02:	f000 f949 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(0x2C, hspi3);
 8000e06:	4668      	mov	r0, sp
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	224c      	movs	r2, #76	@ 0x4c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f003 fe3b 	bl	8004a8a <memcpy>
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1a:	202c      	movs	r0, #44	@ 0x2c
 8000e1c:	f000 f95d 	bl	80010da <LCD_WR_DATA>

	LCD_direction(ROTATE_270, hspi3);
 8000e20:	4668      	mov	r0, sp
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	224c      	movs	r2, #76	@ 0x4c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f003 fe2e 	bl	8004a8a <memcpy>
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 fb65 	bl	8001504 <LCD_direction>

}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr

08000e46 <ILI9341_SetWindow>:

void ILI9341_SetWindow(uint16_t start_x, uint16_t start_y, uint16_t end_x, uint16_t end_y, SPI_HandleTypeDef hspi3)
{
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b097      	sub	sp, #92	@ 0x5c
 8000e4a:	af14      	add	r7, sp, #80	@ 0x50
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	4623      	mov	r3, r4
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	803b      	strh	r3, [r7, #0]
	// Set Window
	LCD_WR_REG(0x2a, hspi3);
 8000e64:	4668      	mov	r0, sp
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	224c      	movs	r2, #76	@ 0x4c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f003 fe0c 	bl	8004a8a <memcpy>
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e78:	202a      	movs	r0, #42	@ 0x2a
 8000e7a:	f000 f90d 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_x >> 8, hspi3);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2dc      	uxtb	r4, r3
 8000e86:	4668      	mov	r0, sp
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	224c      	movs	r2, #76	@ 0x4c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f003 fdfb 	bl	8004a8a <memcpy>
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 f91d 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_x, hspi3);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2dc      	uxtb	r4, r3
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	224c      	movs	r2, #76	@ 0x4c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f003 fdec 	bl	8004a8a <memcpy>
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f000 f90e 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_x >> 8, hspi3);
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2dc      	uxtb	r4, r3
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ecc:	224c      	movs	r2, #76	@ 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f003 fddb 	bl	8004a8a <memcpy>
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f8fd 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_x, hspi3);
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	b2dc      	uxtb	r4, r3
 8000ee4:	4668      	mov	r0, sp
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	224c      	movs	r2, #76	@ 0x4c
 8000eec:	4619      	mov	r1, r3
 8000eee:	f003 fdcc 	bl	8004a8a <memcpy>
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f000 f8ee 	bl	80010da <LCD_WR_DATA>

	LCD_WR_REG(0x2b, hspi3);
 8000efe:	4668      	mov	r0, sp
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	224c      	movs	r2, #76	@ 0x4c
 8000f06:	4619      	mov	r1, r3
 8000f08:	f003 fdbf 	bl	8004a8a <memcpy>
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f12:	202b      	movs	r0, #43	@ 0x2b
 8000f14:	f000 f8c0 	bl	8001098 <LCD_WR_REG>
	LCD_WR_DATA(start_y >> 8, hspi3);
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2dc      	uxtb	r4, r3
 8000f20:	4668      	mov	r0, sp
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	224c      	movs	r2, #76	@ 0x4c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f003 fdae 	bl	8004a8a <memcpy>
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	4620      	mov	r0, r4
 8000f36:	f000 f8d0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & start_y, hspi3);
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	b2dc      	uxtb	r4, r3
 8000f3e:	4668      	mov	r0, sp
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	224c      	movs	r2, #76	@ 0x4c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f003 fd9f 	bl	8004a8a <memcpy>
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f8c1 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(end_y >> 8, hspi3);
 8000f58:	883b      	ldrh	r3, [r7, #0]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2dc      	uxtb	r4, r3
 8000f60:	4668      	mov	r0, sp
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	224c      	movs	r2, #76	@ 0x4c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f003 fd8e 	bl	8004a8a <memcpy>
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 f8b0 	bl	80010da <LCD_WR_DATA>
	LCD_WR_DATA(0xFF & end_y, hspi3);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2dc      	uxtb	r4, r3
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	224c      	movs	r2, #76	@ 0x4c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f003 fd7f 	bl	8004a8a <memcpy>
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f8a1 	bl	80010da <LCD_WR_DATA>

}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <ILI9341_WritePixel>:

void ILI9341_WritePixel(uint16_t x, uint16_t y, uint16_t color, SPI_HandleTypeDef hspi3)
{
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	b09a      	sub	sp, #104	@ 0x68
 8000fa8:	af16      	add	r7, sp, #88	@ 0x58
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fac:	4603      	mov	r3, r0
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	80bb      	strh	r3, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = color >> 8;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
	data[1] = color;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]
	ILI9341_SetWindow(x, y, x, y, hspi3);
 8000fc8:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8000fcc:	88fe      	ldrh	r6, [r7, #6]
 8000fce:	88bd      	ldrh	r5, [r7, #4]
 8000fd0:	88fc      	ldrh	r4, [r7, #6]
 8000fd2:	4668      	mov	r0, sp
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	2258      	movs	r2, #88	@ 0x58
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f003 fd55 	bl	8004a8a <memcpy>
 8000fe0:	4643      	mov	r3, r8
 8000fe2:	4632      	mov	r2, r6
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff2d 	bl	8000e46 <ILI9341_SetWindow>
	// Enable to access GRAM
	LCD_WR_REG(0x2c, hspi3);
 8000fec:	4668      	mov	r0, sp
 8000fee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff2:	224c      	movs	r2, #76	@ 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f003 fd48 	bl	8004a8a <memcpy>
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	202c      	movs	r0, #44	@ 0x2c
 8001002:	f000 f849 	bl	8001098 <LCD_WR_REG>
	DC_H();
 8001006:	f000 fb3b 	bl	8001680 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, data, 2, 1000) != HAL_OK) {
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	2202      	movs	r2, #2
 8001018:	f002 fc65 	bl	80038e6 <HAL_SPI_Transmit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <ILI9341_WritePixel+0x86>
		Error_Handler();
 8001022:	f000 fd7f 	bl	8001b24 <Error_Handler>
	}
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001030:	b002      	add	sp, #8
 8001032:	4770      	bx	lr

08001034 <ILI9341_Reset>:
	__HAL_SPI_ENABLE(&hspi3);
#endif
}

void ILI9341_Reset(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	RESET_L();
 8001038:	f000 faf2 	bl	8001620 <RESET_L>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	@ 0x64
 800103e:	f001 f807 	bl	8002050 <HAL_Delay>
	RESET_H();
 8001042:	f000 faf9 	bl	8001638 <RESET_H>
	HAL_Delay(100);
 8001046:	2064      	movs	r0, #100	@ 0x64
 8001048:	f001 f802 	bl	8002050 <HAL_Delay>
	CS_L();
 800104c:	f000 fb00 	bl	8001650 <CS_L>
	LED_H();
 8001050:	f000 fb22 	bl	8001698 <LED_H>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ILI9341_SoftReset>:

void ILI9341_SoftReset(SPI_HandleTypeDef hspi3)
{
 8001058:	b084      	sub	sp, #16
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	f107 0c10 	add.w	ip, r7, #16
 8001064:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t cmd;
	cmd = 0x01; //Software reset
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
	DC_L();
 800106c:	f000 fafc 	bl	8001668 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &cmd, 1, 1000) != HAL_OK) {
 8001070:	1df9      	adds	r1, r7, #7
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	2201      	movs	r2, #1
 8001078:	f107 0010 	add.w	r0, r7, #16
 800107c:	f002 fc33 	bl	80038e6 <HAL_SPI_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <ILI9341_SoftReset+0x32>
		Error_Handler();
 8001086:	f000 fd4d 	bl	8001b24 <Error_Handler>
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr

08001098 <LCD_WR_REG>:


void LCD_WR_REG(uint8_t data, SPI_HandleTypeDef hspi3)
{
 8001098:	b084      	sub	sp, #16
 800109a:	b590      	push	{r4, r7, lr}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4604      	mov	r4, r0
 80010a2:	f107 001c 	add.w	r0, r7, #28
 80010a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010aa:	4623      	mov	r3, r4
 80010ac:	71fb      	strb	r3, [r7, #7]
	DC_L();
 80010ae:	f000 fadb 	bl	8001668 <DC_L>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f107 001c 	add.w	r0, r7, #28
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	f002 fc12 	bl	80038e6 <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <LCD_WR_REG+0x34>
		Error_Handler();
 80010c8:	f000 fd2c 	bl	8001b24 <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010d6:	b004      	add	sp, #16
 80010d8:	4770      	bx	lr

080010da <LCD_WR_DATA>:

static void LCD_WR_DATA(uint8_t data, SPI_HandleTypeDef hspi3)
{
 80010da:	b084      	sub	sp, #16
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	f107 001c 	add.w	r0, r7, #28
 80010e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010ec:	4623      	mov	r3, r4
 80010ee:	71fb      	strb	r3, [r7, #7]
	DC_H();
 80010f0:	f000 fac6 	bl	8001680 <DC_H>
	if (HAL_SPI_Transmit(&hspi3, &data, 1, 1000) != HAL_OK) {
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	f107 001c 	add.w	r0, r7, #28
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	2201      	movs	r2, #1
 8001100:	f002 fbf1 	bl	80038e6 <HAL_SPI_Transmit>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <LCD_WR_DATA+0x34>
		Error_Handler();
 800110a:	f000 fd0b 	bl	8001b24 <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr

0800111c <ILI9341_InitWindowsWithFont>:
	HAL_SPI_Transmit_DMA(&hspi3, pData, Size*2 );
	//HAL_SPI_Transmit_DMA(&hspi3, (uint8_t*)pData, Size );
	while(spiDmaTransferComplete == 0);
}

void ILI9341_InitWindowsWithFont(SPI_HandleTypeDef hspi3, uint16_t color){
 800111c:	b084      	sub	sp, #16
 800111e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001120:	b099      	sub	sp, #100	@ 0x64
 8001122:	af16      	add	r7, sp, #88	@ 0x58
 8001124:	f107 0420 	add.w	r4, r7, #32
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Efface l'écran avec une couleur de fond (noir)
	ILI9341_SetWindow(0, 0, H_LCD - 1, W_LCD - 1, hspi3);
 800112c:	466b      	mov	r3, sp
 800112e:	f107 0120 	add.w	r1, r7, #32
 8001132:	2258      	movs	r2, #88	@ 0x58
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fca8 	bl	8004a8a <memcpy>
 800113a:	f240 133f 	movw	r3, #319	@ 0x13f
 800113e:	22ef      	movs	r2, #239	@ 0xef
 8001140:	2100      	movs	r1, #0
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fe7f 	bl	8000e46 <ILI9341_SetWindow>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001148:	2300      	movs	r3, #0
 800114a:	80fb      	strh	r3, [r7, #6]
 800114c:	e01c      	b.n	8001188 <ILI9341_InitWindowsWithFont+0x6c>
		for (uint16_t y = 0; y < H_LCD; y++) {
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	e013      	b.n	800117c <ILI9341_InitWindowsWithFont+0x60>
			ILI9341_WritePixel(x, y, color, hspi3);
 8001154:	f8b7 6078 	ldrh.w	r6, [r7, #120]	@ 0x78
 8001158:	88bd      	ldrh	r5, [r7, #4]
 800115a:	88fc      	ldrh	r4, [r7, #6]
 800115c:	4668      	mov	r0, sp
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2254      	movs	r2, #84	@ 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	f003 fc90 	bl	8004a8a <memcpy>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	4632      	mov	r2, r6
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff15 	bl	8000fa0 <ILI9341_WritePixel>
		for (uint16_t y = 0; y < H_LCD; y++) {
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	80bb      	strh	r3, [r7, #4]
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2bef      	cmp	r3, #239	@ 0xef
 8001180:	d9e8      	bls.n	8001154 <ILI9341_InitWindowsWithFont+0x38>
	for (uint16_t x = 0; x < W_LCD; x++) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	3301      	adds	r3, #1
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800118e:	d3de      	bcc.n	800114e <ILI9341_InitWindowsWithFont+0x32>
		}
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr

080011a0 <ILI9341_DrawChar>:

// Dessine un caractère en utilisant une police 8x8
void ILI9341_DrawChar(uint16_t x, char c, SPI_HandleTypeDef hspi3) {
 80011a0:	b082      	sub	sp, #8
 80011a2:	b5b0      	push	{r4, r5, r7, lr}
 80011a4:	b0a2      	sub	sp, #136	@ 0x88
 80011a6:	af1a      	add	r7, sp, #104	@ 0x68
 80011a8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80011ac:	e884 000c 	stmia.w	r4, {r2, r3}
 80011b0:	4603      	mov	r3, r0
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	460b      	mov	r3, r1
 80011b6:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) {
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2b1f      	cmp	r3, #31
 80011bc:	d902      	bls.n	80011c4 <ILI9341_DrawChar+0x24>
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80011c2:	d901      	bls.n	80011c8 <ILI9341_DrawChar+0x28>
	        c = '?'; // Si le caractère n'est pas supporté
 80011c4:	233f      	movs	r3, #63	@ 0x3f
 80011c6:	717b      	strb	r3, [r7, #5]
	}

	// Trouver l'index du caractère dans la table (32 = espace, donc l'index est c - 32)
	const uint8_t *glyph = FONTS5_8[c - 32];  // Font_5x8[caractère - 32]
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	f1a3 0220 	sub.w	r2, r3, #32
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	4a3c      	ldr	r2, [pc, #240]	@ (80012c8 <ILI9341_DrawChar+0x128>)
 80011d6:	4413      	add	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
	const uint16_t scaleX = SIZE_NUMBERS / 8;
 80011da:	2307      	movs	r3, #7
 80011dc:	81fb      	strh	r3, [r7, #14]
	const uint16_t scaleY = H_LCD / 8;
 80011de:	231e      	movs	r3, #30
 80011e0:	81bb      	strh	r3, [r7, #12]

	// Parcourir chaque ligne du caractère (chaque ligne est représentée par un octet)
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e041      	b.n	800126c <ILI9341_DrawChar+0xcc>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	e038      	b.n	8001260 <ILI9341_DrawChar+0xc0>
			if (glyph[j] & (1 << i)) {  // Vérifie si le bit est 1 (pixel actif)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	fa42 f303 	asr.w	r3, r2, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <ILI9341_DrawChar+0x92>
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0xFFFF, hspi3);
 8001206:	88fc      	ldrh	r4, [r7, #6]
 8001208:	ab03      	add	r3, sp, #12
 800120a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800120e:	2258      	movs	r2, #88	@ 0x58
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fc3a 	bl	8004a8a <memcpy>
 8001216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	2114      	movs	r1, #20
 800122a:	4620      	mov	r0, r4
 800122c:	f000 f91f 	bl	800146e <ILI9341_WritePixelsFullHeight>
 8001230:	e013      	b.n	800125a <ILI9341_DrawChar+0xba>
			} else {
				// Dessiner le fond pour ce bloc
				ILI9341_WritePixelsFullHeight(x, Y_CHAR, i, j, scaleX, scaleY, 0x0000, hspi3);
 8001232:	88fc      	ldrh	r4, [r7, #6]
 8001234:	ab03      	add	r3, sp, #12
 8001236:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800123a:	2258      	movs	r2, #88	@ 0x58
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc24 	bl	8004a8a <memcpy>
 8001242:	2300      	movs	r3, #0
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	89bb      	ldrh	r3, [r7, #12]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	2114      	movs	r1, #20
 8001254:	4620      	mov	r0, r4
 8001256:	f000 f90a 	bl	800146e <ILI9341_WritePixelsFullHeight>
		for (int j = 0; j < 5; j++) {  // Parcourt les colonnes (de 0 à 4)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	3301      	adds	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b04      	cmp	r3, #4
 8001264:	ddc3      	ble.n	80011ee <ILI9341_DrawChar+0x4e>
	for (int i = 0; i < 8; i++) {  // Parcourt les lignes (de 0 à 7)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b07      	cmp	r3, #7
 8001270:	ddba      	ble.n	80011e8 <ILI9341_DrawChar+0x48>
			}
		}
	}

    // Ajoute un espace entre les caractères
    for (int8_t j = 0; j < 7; j++) {
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e01a      	b.n	80012ae <ILI9341_DrawChar+0x10e>
        ILI9341_WritePixel(x + 5, Y_CHAR + j, 0x0000, hspi3);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	3305      	adds	r3, #5
 800127c:	b29c      	uxth	r4, r3
 800127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3314      	adds	r3, #20
 8001286:	b29d      	uxth	r5, r3
 8001288:	4668      	mov	r0, sp
 800128a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800128e:	2254      	movs	r2, #84	@ 0x54
 8001290:	4619      	mov	r1, r3
 8001292:	f003 fbfa 	bl	8004a8a <memcpy>
 8001296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001298:	2200      	movs	r2, #0
 800129a:	4629      	mov	r1, r5
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff fe7f 	bl	8000fa0 <ILI9341_WritePixel>
    for (int8_t j = 0; j < 7; j++) {
 80012a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	75fb      	strb	r3, [r7, #23]
 80012ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	dde0      	ble.n	8001278 <ILI9341_DrawChar+0xd8>
    }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	0800587c 	.word	0x0800587c

080012cc <ILI9341_InitDrawString>:

// Dessine une chaîne de caractères
void ILI9341_InitDrawString(const char *str, SPI_HandleTypeDef hspi3) {
 80012cc:	b084      	sub	sp, #16
 80012ce:	b5b0      	push	{r4, r5, r7, lr}
 80012d0:	b098      	sub	sp, #96	@ 0x60
 80012d2:	af14      	add	r7, sp, #80	@ 0x50
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80012da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int cmpt = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	uint16_t x = MARGE_NUMBERS_X;
 80012e2:	2305      	movs	r3, #5
 80012e4:	817b      	strh	r3, [r7, #10]
	if (strlen(str) == 5)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7fe ff7a 	bl	80001e0 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d127      	bne.n	8001342 <ILI9341_InitDrawString+0x76>
	{
		while (*str)
 80012f2:	e021      	b.n	8001338 <ILI9341_InitDrawString+0x6c>
		{
			if (cmpt != 0){
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <ILI9341_InitDrawString+0x3e>
				x = MARGE_NUMBERS_X + cmpt * SIZE_NUMBERS + INTERVALE_NUMBERS * cmpt;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	0192      	lsls	r2, r2, #6
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	b29b      	uxth	r3, r3
 8001306:	3305      	adds	r3, #5
 8001308:	817b      	strh	r3, [r7, #10]
			}
			ILI9341_DrawChar(x, *str, hspi3);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	781d      	ldrb	r5, [r3, #0]
 800130e:	897c      	ldrh	r4, [r7, #10]
 8001310:	4668      	mov	r0, sp
 8001312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001316:	2250      	movs	r2, #80	@ 0x50
 8001318:	4619      	mov	r1, r3
 800131a:	f003 fbb6 	bl	8004a8a <memcpy>
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	cb0c      	ldmia	r3, {r2, r3}
 8001324:	4629      	mov	r1, r5
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff ff3a 	bl	80011a0 <ILI9341_DrawChar>
			str++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
			cmpt += 1;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
		while (*str)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1d9      	bne.n	80012f4 <ILI9341_InitDrawString+0x28>
	}
	else
	{
		printf("Erreur le string est composé de plus de 5 éléments");
	}
}
 8001340:	e002      	b.n	8001348 <ILI9341_InitDrawString+0x7c>
		printf("Erreur le string est composé de plus de 5 éléments");
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <ILI9341_InitDrawString+0x8c>)
 8001344:	f003 f9be 	bl	80046c4 <iprintf>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001352:	b004      	add	sp, #16
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	08005820 	.word	0x08005820

0800135c <changeTime>:

void changeTime(RTC_TimeTypeDef Time, SPI_HandleTypeDef hspi3)
{
 800135c:	b084      	sub	sp, #16
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b097      	sub	sp, #92	@ 0x5c
 8001362:	af14      	add	r7, sp, #80	@ 0x50
 8001364:	f107 0418 	add.w	r4, r7, #24
 8001368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (Time.Minutes == 00)
 800136c:	7e7b      	ldrb	r3, [r7, #25]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <changeTime+0x1c>
	{
		changeHours();
 8001372:	f000 f875 	bl	8001460 <changeHours>
			changeMinutes(X_DIX_MIN, diz, hspi3);
			changeMinutes(X_UNIT_MIN, unite, hspi3);
		}

	}
}
 8001376:	e043      	b.n	8001400 <changeTime+0xa4>
		uint8_t diz = Time.Minutes / 10; // Get the dizaines
 8001378:	7e7b      	ldrb	r3, [r7, #25]
 800137a:	4a25      	ldr	r2, [pc, #148]	@ (8001410 <changeTime+0xb4>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	71fb      	strb	r3, [r7, #7]
		uint8_t unite = Time.Minutes % 10; // get unités
 8001384:	7e7a      	ldrb	r2, [r7, #25]
 8001386:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <changeTime+0xb4>)
 8001388:	fba3 1302 	umull	r1, r3, r3, r2
 800138c:	08d9      	lsrs	r1, r3, #3
 800138e:	460b      	mov	r3, r1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	71bb      	strb	r3, [r7, #6]
		if (unite != 0)
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d010      	beq.n	80013c2 <changeTime+0x66>
			changeMinutes(X_UNIT_MIN, unite, hspi3);
 80013a0:	79bc      	ldrb	r4, [r7, #6]
 80013a2:	4668      	mov	r0, sp
 80013a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013a8:	2250      	movs	r2, #80	@ 0x50
 80013aa:	4619      	mov	r1, r3
 80013ac:	f003 fb6d 	bl	8004a8a <memcpy>
 80013b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b4:	cb0c      	ldmia	r3, {r2, r3}
 80013b6:	4621      	mov	r1, r4
 80013b8:	f240 1001 	movw	r0, #257	@ 0x101
 80013bc:	f000 f82a 	bl	8001414 <changeMinutes>
}
 80013c0:	e01e      	b.n	8001400 <changeTime+0xa4>
			changeMinutes(X_DIX_MIN, diz, hspi3);
 80013c2:	79fc      	ldrb	r4, [r7, #7]
 80013c4:	4668      	mov	r0, sp
 80013c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013ca:	2250      	movs	r2, #80	@ 0x50
 80013cc:	4619      	mov	r1, r3
 80013ce:	f003 fb5c 	bl	8004a8a <memcpy>
 80013d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d6:	cb0c      	ldmia	r3, {r2, r3}
 80013d8:	4621      	mov	r1, r4
 80013da:	20c2      	movs	r0, #194	@ 0xc2
 80013dc:	f000 f81a 	bl	8001414 <changeMinutes>
			changeMinutes(X_UNIT_MIN, unite, hspi3);
 80013e0:	79bc      	ldrb	r4, [r7, #6]
 80013e2:	4668      	mov	r0, sp
 80013e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013e8:	2250      	movs	r2, #80	@ 0x50
 80013ea:	4619      	mov	r1, r3
 80013ec:	f003 fb4d 	bl	8004a8a <memcpy>
 80013f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f4:	cb0c      	ldmia	r3, {r2, r3}
 80013f6:	4621      	mov	r1, r4
 80013f8:	f240 1001 	movw	r0, #257	@ 0x101
 80013fc:	f000 f80a 	bl	8001414 <changeMinutes>
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800140a:	b004      	add	sp, #16
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	cccccccd 	.word	0xcccccccd

08001414 <changeMinutes>:

static void changeMinutes(int x, uint8_t minute, SPI_HandleTypeDef hspi3)
{
 8001414:	b082      	sub	sp, #8
 8001416:	b5b0      	push	{r4, r5, r7, lr}
 8001418:	b098      	sub	sp, #96	@ 0x60
 800141a:	af14      	add	r7, sp, #80	@ 0x50
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	f107 0020 	add.w	r0, r7, #32
 8001422:	e880 000c 	stmia.w	r0, {r2, r3}
 8001426:	460b      	mov	r3, r1
 8001428:	70fb      	strb	r3, [r7, #3]
	char caractere = minute + '0';  // Conversion en caractère
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	3330      	adds	r3, #48	@ 0x30
 800142e:	73fb      	strb	r3, [r7, #15]
	ILI9341_DrawChar(x, caractere, hspi3);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	b29c      	uxth	r4, r3
 8001434:	7bfd      	ldrb	r5, [r7, #15]
 8001436:	4668      	mov	r0, sp
 8001438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143c:	2250      	movs	r2, #80	@ 0x50
 800143e:	4619      	mov	r1, r3
 8001440:	f003 fb23 	bl	8004a8a <memcpy>
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	cb0c      	ldmia	r3, {r2, r3}
 800144a:	4629      	mov	r1, r5
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fea7 	bl	80011a0 <ILI9341_DrawChar>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800145c:	b002      	add	sp, #8
 800145e:	4770      	bx	lr

08001460 <changeHours>:

static void changeHours()
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <ILI9341_WritePixelsFullHeight>:

static void ILI9341_WritePixelsFullHeight(uint16_t x, uint16_t y, int i, int j, uint16_t scaleX, uint16_t scaleY, uint16_t color, SPI_HandleTypeDef hspi3 )
{
 800146e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001470:	b09d      	sub	sp, #116	@ 0x74
 8001472:	af16      	add	r7, sp, #88	@ 0x58
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4603      	mov	r3, r0
 800147a:	81fb      	strh	r3, [r7, #14]
 800147c:	460b      	mov	r3, r1
 800147e:	81bb      	strh	r3, [r7, #12]
	for (int dy = 0; dy < scaleY; dy++) {
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e034      	b.n	80014f0 <ILI9341_WritePixelsFullHeight+0x82>
		for (int dx = 0; dx < scaleX; dx++) {
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e02a      	b.n	80014e2 <ILI9341_WritePixelsFullHeight+0x74>
			ILI9341_WritePixel(x + j * scaleX + dx, y + i * scaleY + dy, color, hspi3);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b29b      	uxth	r3, r3
 8001490:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001492:	fb12 f303 	smulbb	r3, r2, r3
 8001496:	b29a      	uxth	r2, r3
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	b29c      	uxth	r4, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80014ac:	fb12 f303 	smulbb	r3, r2, r3
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	b29d      	uxth	r5, r3
 80014c0:	8f3e      	ldrh	r6, [r7, #56]	@ 0x38
 80014c2:	4668      	mov	r0, sp
 80014c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014c8:	2254      	movs	r2, #84	@ 0x54
 80014ca:	4619      	mov	r1, r3
 80014cc:	f003 fadd 	bl	8004a8a <memcpy>
 80014d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014d2:	4632      	mov	r2, r6
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fd62 	bl	8000fa0 <ILI9341_WritePixel>
		for (int dx = 0; dx < scaleX; dx++) {
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	3301      	adds	r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dbd0      	blt.n	800148c <ILI9341_WritePixelsFullHeight+0x1e>
	for (int dy = 0; dy < scaleY; dy++) {
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbc6      	blt.n	8001486 <ILI9341_WritePixelsFullHeight+0x18>
		}
	}
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001504 <LCD_direction>:

static void LCD_direction(LCD_Horizontal_t direction, SPI_HandleTypeDef hspi3)
{
 8001504:	b084      	sub	sp, #16
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b097      	sub	sp, #92	@ 0x5c
 800150a:	af14      	add	r7, sp, #80	@ 0x50
 800150c:	4604      	mov	r4, r0
 800150e:	f107 001c 	add.w	r0, r7, #28
 8001512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001516:	4623      	mov	r3, r4
 8001518:	71fb      	strb	r3, [r7, #7]
	switch (direction) {
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d877      	bhi.n	8001610 <LCD_direction+0x10c>
 8001520:	a201      	add	r2, pc, #4	@ (adr r2, 8001528 <LCD_direction+0x24>)
 8001522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001526:	bf00      	nop
 8001528:	08001539 	.word	0x08001539
 800152c:	0800156f 	.word	0x0800156f
 8001530:	080015a5 	.word	0x080015a5
 8001534:	080015db 	.word	0x080015db
	case ROTATE_0:
		LCD_WR_REG(0x36, hspi3);
 8001538:	4668      	mov	r0, sp
 800153a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153e:	224c      	movs	r2, #76	@ 0x4c
 8001540:	4619      	mov	r1, r3
 8001542:	f003 faa2 	bl	8004a8a <memcpy>
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154c:	2036      	movs	r0, #54	@ 0x36
 800154e:	f7ff fda3 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x48, hspi3);
 8001552:	4668      	mov	r0, sp
 8001554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001558:	224c      	movs	r2, #76	@ 0x4c
 800155a:	4619      	mov	r1, r3
 800155c:	f003 fa95 	bl	8004a8a <memcpy>
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001566:	2048      	movs	r0, #72	@ 0x48
 8001568:	f7ff fdb7 	bl	80010da <LCD_WR_DATA>
		break;
 800156c:	e050      	b.n	8001610 <LCD_direction+0x10c>
	case ROTATE_90:
		LCD_WR_REG(0x36, hspi3);
 800156e:	4668      	mov	r0, sp
 8001570:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001574:	224c      	movs	r2, #76	@ 0x4c
 8001576:	4619      	mov	r1, r3
 8001578:	f003 fa87 	bl	8004a8a <memcpy>
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f7ff fd88 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x28, hspi3);
 8001588:	4668      	mov	r0, sp
 800158a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158e:	224c      	movs	r2, #76	@ 0x4c
 8001590:	4619      	mov	r1, r3
 8001592:	f003 fa7a 	bl	8004a8a <memcpy>
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159c:	2028      	movs	r0, #40	@ 0x28
 800159e:	f7ff fd9c 	bl	80010da <LCD_WR_DATA>
		break;
 80015a2:	e035      	b.n	8001610 <LCD_direction+0x10c>
	case ROTATE_180:
		LCD_WR_REG(0x36, hspi3);
 80015a4:	4668      	mov	r0, sp
 80015a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015aa:	224c      	movs	r2, #76	@ 0x4c
 80015ac:	4619      	mov	r1, r3
 80015ae:	f003 fa6c 	bl	8004a8a <memcpy>
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b8:	2036      	movs	r0, #54	@ 0x36
 80015ba:	f7ff fd6d 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0x88, hspi3);
 80015be:	4668      	mov	r0, sp
 80015c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c4:	224c      	movs	r2, #76	@ 0x4c
 80015c6:	4619      	mov	r1, r3
 80015c8:	f003 fa5f 	bl	8004a8a <memcpy>
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d2:	2088      	movs	r0, #136	@ 0x88
 80015d4:	f7ff fd81 	bl	80010da <LCD_WR_DATA>
		break;
 80015d8:	e01a      	b.n	8001610 <LCD_direction+0x10c>
	case ROTATE_270:
		LCD_WR_REG(0x36, hspi3);
 80015da:	4668      	mov	r0, sp
 80015dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e0:	224c      	movs	r2, #76	@ 0x4c
 80015e2:	4619      	mov	r1, r3
 80015e4:	f003 fa51 	bl	8004a8a <memcpy>
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ee:	2036      	movs	r0, #54	@ 0x36
 80015f0:	f7ff fd52 	bl	8001098 <LCD_WR_REG>
		LCD_WR_DATA(0xE8, hspi3);
 80015f4:	4668      	mov	r0, sp
 80015f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fa:	224c      	movs	r2, #76	@ 0x4c
 80015fc:	4619      	mov	r1, r3
 80015fe:	f003 fa44 	bl	8004a8a <memcpy>
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	20e8      	movs	r0, #232	@ 0xe8
 800160a:	f7ff fd66 	bl	80010da <LCD_WR_DATA>
		break;
 800160e:	bf00      	nop
	}
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800161a:	b004      	add	sp, #16
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <RESET_L>:

static void RESET_L(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <RESET_L+0x14>)
 800162a:	f000 ffcb 	bl	80025c4 <HAL_GPIO_WritePin>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40020400 	.word	0x40020400

08001638 <RESET_H>:

static void RESET_H(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_LCD_GPIO_Port, RESET_LCD_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2180      	movs	r1, #128	@ 0x80
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <RESET_H+0x14>)
 8001642:	f000 ffbf 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40020400 	.word	0x40020400

08001650 <CS_L>:

static void CS_L(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_LCD_GPIO_Port, CS_LCD_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2140      	movs	r1, #64	@ 0x40
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <CS_L+0x14>)
 800165a:	f000 ffb3 	bl	80025c4 <HAL_GPIO_WritePin>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020400 	.word	0x40020400

08001668 <DC_L>:

static void DC_L(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001672:	4802      	ldr	r0, [pc, #8]	@ (800167c <DC_L+0x14>)
 8001674:	f000 ffa6 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40020400 	.word	0x40020400

08001680 <DC_H>:

static void DC_H(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LCD_GPIO_Port, DC_LCD_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800168a:	4802      	ldr	r0, [pc, #8]	@ (8001694 <DC_H+0x14>)
 800168c:	f000 ff9a 	bl	80025c4 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020400 	.word	0x40020400

08001698 <LED_H>:

static void LED_H(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b09c      	sub	sp, #112	@ 0x70
 80016ac:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ae:	f000 fc5d 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b2:	f000 f881 	bl	80017b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b6:	f000 f9ad 	bl	8001a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ba:	f000 f981 	bl	80019c0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80016be:	f000 f949 	bl	8001954 <MX_SPI3_Init>
  MX_RTC_Init();
 80016c2:	f000 f8e5 	bl	8001890 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(hspi3);  // Initialisation de l'écran ILI9341
 80016c6:	4c35      	ldr	r4, [pc, #212]	@ (800179c <main+0xf4>)
 80016c8:	4668      	mov	r0, sp
 80016ca:	f104 0310 	add.w	r3, r4, #16
 80016ce:	2248      	movs	r2, #72	@ 0x48
 80016d0:	4619      	mov	r1, r3
 80016d2:	f003 f9da 	bl	8004a8a <memcpy>
 80016d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016da:	f7fe ff51 	bl	8000580 <ILI9341_Init>
  ILI9341_InitWindowsWithFont(hspi3, 0x0000);
 80016de:	4c2f      	ldr	r4, [pc, #188]	@ (800179c <main+0xf4>)
 80016e0:	2300      	movs	r3, #0
 80016e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80016e4:	4668      	mov	r0, sp
 80016e6:	f104 0310 	add.w	r3, r4, #16
 80016ea:	2248      	movs	r2, #72	@ 0x48
 80016ec:	4619      	mov	r1, r3
 80016ee:	f003 f9cc 	bl	8004a8a <memcpy>
 80016f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f6:	f7ff fd11 	bl	800111c <ILI9341_InitWindowsWithFont>
  uint16_t text_color = 0xFFFF; // Blanc
 80016fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016fe:	81bb      	strh	r3, [r7, #12]
  char timeChar[6];
  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001700:	2200      	movs	r2, #0
 8001702:	4927      	ldr	r1, [pc, #156]	@ (80017a0 <main+0xf8>)
 8001704:	4827      	ldr	r0, [pc, #156]	@ (80017a4 <main+0xfc>)
 8001706:	f001 fe1c 	bl	8003342 <HAL_RTC_GetTime>

  sprintf(timeChar, "%02d:%02d", (char)Time.Hours, (char)Time.Minutes);
 800170a:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <main+0xf8>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <main+0xf8>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	1d38      	adds	r0, r7, #4
 8001716:	4924      	ldr	r1, [pc, #144]	@ (80017a8 <main+0x100>)
 8001718:	f003 f844 	bl	80047a4 <siprintf>
  ILI9341_InitDrawString(timeChar, hspi3);
 800171c:	4c1f      	ldr	r4, [pc, #124]	@ (800179c <main+0xf4>)
 800171e:	1d3d      	adds	r5, r7, #4
 8001720:	4668      	mov	r0, sp
 8001722:	f104 030c 	add.w	r3, r4, #12
 8001726:	224c      	movs	r2, #76	@ 0x4c
 8001728:	4619      	mov	r1, r3
 800172a:	f003 f9ae 	bl	8004a8a <memcpy>
 800172e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001732:	4628      	mov	r0, r5
 8001734:	f7ff fdca 	bl	80012cc <ILI9341_InitDrawString>
  uint8_t lastMinutes = Time.Minutes;
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <main+0xf8>)
 800173a:	785b      	ldrb	r3, [r3, #1]
 800173c:	73fb      	strb	r3, [r7, #15]

  printf("RTC time\n");
 800173e:	481b      	ldr	r0, [pc, #108]	@ (80017ac <main+0x104>)
 8001740:	f003 f828 	bl	8004794 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001744:	2200      	movs	r2, #0
 8001746:	4916      	ldr	r1, [pc, #88]	@ (80017a0 <main+0xf8>)
 8001748:	4816      	ldr	r0, [pc, #88]	@ (80017a4 <main+0xfc>)
 800174a:	f001 fdfa 	bl	8003342 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800174e:	2200      	movs	r2, #0
 8001750:	4917      	ldr	r1, [pc, #92]	@ (80017b0 <main+0x108>)
 8001752:	4814      	ldr	r0, [pc, #80]	@ (80017a4 <main+0xfc>)
 8001754:	f001 fed7 	bl	8003506 <HAL_RTC_GetDate>
	if (lastMinutes != Time.Minutes)
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <main+0xf8>)
 800175a:	785b      	ldrb	r3, [r3, #1]
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	429a      	cmp	r2, r3
 8001760:	d010      	beq.n	8001784 <main+0xdc>
	{
		//ILI9341_InitWindowsWithFont(hspi3, 0x0000);
		//sprintf(timeChar, "%02d:%02d", (char)Time.Hours, (char)Time.Minutes);
		//ILI9341_InitDrawString(timeChar, hspi3);
		changeTime(Time, hspi3);
 8001762:	4c0f      	ldr	r4, [pc, #60]	@ (80017a0 <main+0xf8>)
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <main+0xf4>)
 8001766:	ab01      	add	r3, sp, #4
 8001768:	4611      	mov	r1, r2
 800176a:	2258      	movs	r2, #88	@ 0x58
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f98c 	bl	8004a8a <memcpy>
 8001772:	6923      	ldr	r3, [r4, #16]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800177a:	f7ff fdef 	bl	800135c <changeTime>
		lastMinutes = Time.Minutes;
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <main+0xf8>)
 8001780:	785b      	ldrb	r3, [r3, #1]
 8001782:	73fb      	strb	r3, [r7, #15]
	}

	printf("Time %02d\n", Time.Seconds);
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <main+0xf8>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	4619      	mov	r1, r3
 800178a:	480a      	ldr	r0, [pc, #40]	@ (80017b4 <main+0x10c>)
 800178c:	f002 ff9a 	bl	80046c4 <iprintf>
	HAL_Delay(500);
 8001790:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001794:	f000 fc5c 	bl	8002050 <HAL_Delay>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8001798:	e7d4      	b.n	8001744 <main+0x9c>
 800179a:	bf00      	nop
 800179c:	200000a4 	.word	0x200000a4
 80017a0:	20000148 	.word	0x20000148
 80017a4:	20000084 	.word	0x20000084
 80017a8:	08005858 	.word	0x08005858
 80017ac:	08005864 	.word	0x08005864
 80017b0:	20000144 	.word	0x20000144
 80017b4:	08005870 	.word	0x08005870

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	@ 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	@ 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 f8e4 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <SystemClock_Config+0xd0>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	4a28      	ldr	r2, [pc, #160]	@ (8001888 <SystemClock_Config+0xd0>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <SystemClock_Config+0xd0>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <SystemClock_Config+0xd4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a22      	ldr	r2, [pc, #136]	@ (800188c <SystemClock_Config+0xd4>)
 8001802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <SystemClock_Config+0xd4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001814:	230a      	movs	r3, #10
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2310      	movs	r3, #16
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001824:	2302      	movs	r3, #2
 8001826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001828:	2300      	movs	r3, #0
 800182a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800182c:	2310      	movs	r3, #16
 800182e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001830:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001836:	2304      	movs	r3, #4
 8001838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800183a:	2304      	movs	r3, #4
 800183c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fed8 	bl	80025f8 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800184e:	f000 f969 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f001 f93a 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800187a:	f000 f953 	bl	8001b24 <Error_Handler>
  }
}
 800187e:	bf00      	nop
 8001880:	3750      	adds	r7, #80	@ 0x50
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80018a4:	2300      	movs	r3, #0
 80018a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <MX_RTC_Init+0xbc>)
 80018aa:	4a29      	ldr	r2, [pc, #164]	@ (8001950 <MX_RTC_Init+0xc0>)
 80018ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018ae:	4b27      	ldr	r3, [pc, #156]	@ (800194c <MX_RTC_Init+0xbc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <MX_RTC_Init+0xbc>)
 80018b6:	227f      	movs	r2, #127	@ 0x7f
 80018b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018ba:	4b24      	ldr	r3, [pc, #144]	@ (800194c <MX_RTC_Init+0xbc>)
 80018bc:	22ff      	movs	r2, #255	@ 0xff
 80018be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018c0:	4b22      	ldr	r3, [pc, #136]	@ (800194c <MX_RTC_Init+0xbc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <MX_RTC_Init+0xbc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MX_RTC_Init+0xbc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018d2:	481e      	ldr	r0, [pc, #120]	@ (800194c <MX_RTC_Init+0xbc>)
 80018d4:	f001 fc18 	bl	8003108 <HAL_RTC_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80018de:	f000 f921 	bl	8001b24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 80018e2:	230a      	movs	r3, #10
 80018e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 24;
 80018e6:	2318      	movs	r3, #24
 80018e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 45;
 80018ea:	232d      	movs	r3, #45	@ 0x2d
 80018ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4813      	ldr	r0, [pc, #76]	@ (800194c <MX_RTC_Init+0xbc>)
 80018fe:	f001 fc86 	bl	800320e <HAL_RTC_SetTime>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001908:	f000 f90c 	bl	8001b24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800190c:	2301      	movs	r3, #1
 800190e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001910:	2301      	movs	r3, #1
 8001912:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	480a      	ldr	r0, [pc, #40]	@ (800194c <MX_RTC_Init+0xbc>)
 8001924:	f001 fd6b 	bl	80033fe <HAL_RTC_SetDate>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800192e:	f000 f8f9 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);  // Priorité haute
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2029      	movs	r0, #41	@ 0x29
 8001938:	f000 fc89 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800193c:	2029      	movs	r0, #41	@ 0x29
 800193e:	f000 fca2 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000084 	.word	0x20000084
 8001950:	40002800 	.word	0x40002800

08001954 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI3_Init+0x64>)
 800195a:	4a18      	ldr	r2, [pc, #96]	@ (80019bc <MX_SPI3_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <MX_SPI3_Init+0x64>)
 8001960:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001964:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI3_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI3_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_SPI3_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI3_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_SPI3_Init+0x64>)
 8001980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001984:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI3_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_SPI3_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI3_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_SPI3_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI3_Init+0x64>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_SPI3_Init+0x64>)
 80019a6:	f001 ff15 	bl	80037d4 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80019b0:	f000 f8b8 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200000a4 	.word	0x200000a4
 80019bc:	40003c00 	.word	0x40003c00

080019c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <MX_USART2_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f8:	f002 f996 	bl	8003d28 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f000 f88f 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000fc 	.word	0x200000fc
 8001a10:	40004400 	.word	0x40004400

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a30      	ldr	r2, [pc, #192]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a29      	ldr	r2, [pc, #164]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_GPIO_Init+0xe0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	4816      	ldr	r0, [pc, #88]	@ (8001af8 <MX_GPIO_Init+0xe4>)
 8001aa0:	f000 fd90 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001aaa:	4814      	ldr	r0, [pc, #80]	@ (8001afc <MX_GPIO_Init+0xe8>)
 8001aac:	f000 fd8a 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <MX_GPIO_Init+0xe4>)
 8001ac8:	f000 fbf8 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001acc:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_GPIO_Init+0xe8>)
 8001ae6:	f000 fbe9 	bl	80022bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400

08001b00 <__io_putchar>:

int __io_putchar(int ch)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001b08:	1d39      	adds	r1, r7, #4
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <__io_putchar+0x20>)
 8001b12:	f002 f959 	bl	8003dc8 <HAL_UART_Transmit>
	return ch;
 8001b16:	687b      	ldr	r3, [r7, #4]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200000fc 	.word	0x200000fc

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <Error_Handler+0x8>

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b6e:	2007      	movs	r0, #7
 8001b70:	f000 fb62 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
 8001b98:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <HAL_RTC_MspInit+0x50>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d111      	bne.n	8001bc8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bac:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 f9b8 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bbe:	f7ff ffb1 	bl	8001b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <HAL_RTC_MspInit+0x54>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001bc8:	bf00      	nop
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40002800 	.word	0x40002800
 8001bd4:	42470e3c 	.word	0x42470e3c

08001bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a28      	ldr	r2, [pc, #160]	@ (8001c98 <HAL_SPI_MspInit+0xc0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d14a      	bne.n	8001c90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a26      	ldr	r2, [pc, #152]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a18      	ldr	r2, [pc, #96]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_SPI_MspInit+0xc4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c60:	2306      	movs	r3, #6
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <HAL_SPI_MspInit+0xc8>)
 8001c6c:	f000 fb26 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c70:	2320      	movs	r3, #32
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c80:	2306      	movs	r3, #6
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <HAL_SPI_MspInit+0xcc>)
 8001c8c:	f000 fb16 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	@ 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40003c00 	.word	0x40003c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020400 	.word	0x40020400

08001ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <HAL_UART_MspInit+0x84>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12b      	bne.n	8001d22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <HAL_UART_MspInit+0x88>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <HAL_UART_MspInit+0x88>)
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_UART_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_UART_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a10      	ldr	r2, [pc, #64]	@ (8001d30 <HAL_UART_MspInit+0x88>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <HAL_UART_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d02:	230c      	movs	r3, #12
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d12:	2307      	movs	r3, #7
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <HAL_UART_MspInit+0x8c>)
 8001d1e:	f000 facd 	bl	80022bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	@ 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <MemManage_Handler+0x4>

08001d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f000 f93f 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e00a      	b.n	8001dbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da8:	f3af 8000 	nop.w
 8001dac:	4601      	mov	r1, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dbf0      	blt.n	8001da8 <_read+0x12>
  }

  return len;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e009      	b.n	8001df6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	60ba      	str	r2, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe88 	bl	8001b00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf1      	blt.n	8001de2 <_write+0x12>
  }
  return len;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_close>:

int _close(int file)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e30:	605a      	str	r2, [r3, #4]
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_isatty>:

int _isatty(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f002 fdc6 	bl	8004a30 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20020000 	.word	0x20020000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	2000015c 	.word	0x2000015c
 8001ed8:	200002b0 	.word	0x200002b0

08001edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <RTC_Alarm_IRQHandler>:
        // Erreur de configuration de l'alarme
    }
}

/* Interruption RTC Alarm */
void RTC_Alarm_IRQHandler(RTC_HandleTypeDef *hrtc) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    HAL_RTC_AlarmIRQHandler(hrtc);  // Appeler le gestionnaire d'interruption HAL
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f001 fb4b 	bl	80035a4 <HAL_RTC_AlarmIRQHandler>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f1c:	f7ff ffde 	bl	8001edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f22:	490d      	ldr	r1, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f38:	4c0a      	ldr	r4, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f002 fd79 	bl	8004a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7ff fbad 	bl	80016a8 <main>
  bx  lr    
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f5c:	08005ab8 	.word	0x08005ab8
  ldr r2, =_sbss
 8001f60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f64:	200002b0 	.word	0x200002b0

08001f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <HAL_Init+0x40>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_Init+0x40>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_Init+0x40>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 f94f 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fdc6 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f967 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 f92f 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	20000160 	.word	0x20000160

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000160 	.word	0x20000160

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e159      	b.n	800258c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8148 	bne.w	8002586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d005      	beq.n	800230e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d017      	beq.n	80023ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a2 	beq.w	8002586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b57      	ldr	r3, [pc, #348]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a56      	ldr	r2, [pc, #344]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
 8002452:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245e:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a49      	ldr	r2, [pc, #292]	@ (80025ac <HAL_GPIO_Init+0x2f0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x202>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a48      	ldr	r2, [pc, #288]	@ (80025b0 <HAL_GPIO_Init+0x2f4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x1fe>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a47      	ldr	r2, [pc, #284]	@ (80025b4 <HAL_GPIO_Init+0x2f8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x1fa>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a46      	ldr	r2, [pc, #280]	@ (80025b8 <HAL_GPIO_Init+0x2fc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a45      	ldr	r2, [pc, #276]	@ (80025bc <HAL_GPIO_Init+0x300>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x1f2>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e008      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024ae:	2307      	movs	r3, #7
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x204>
 80024be:	2300      	movs	r3, #0
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d0:	4935      	ldr	r1, [pc, #212]	@ (80025a8 <HAL_GPIO_Init+0x2ec>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002502:	4a2f      	ldr	r2, [pc, #188]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800252c:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002532:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002556:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002580:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	f67f aea2 	bls.w	80022d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3724      	adds	r7, #36	@ 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fcc2 	bl	8002038 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fcbe 	bl	8002038 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	@ 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fcae 	bl	8002038 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fcaa 	bl	8002038 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800270e:	4b4a      	ldr	r3, [pc, #296]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff fc63 	bl	8002038 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff fc5f 	bl	8002038 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fc42 	bl	8002038 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff fc3e 	bl	8002038 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7ff fc22 	bl	8002038 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fc1e 	bl	8002038 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff fc0b 	bl	8002038 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002826:	f7ff fc07 	bl	8002038 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	@ 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fbc7 	bl	8002038 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7ff fbc3 	bl	8002038 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7ff fb88 	bl	8002038 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7ff fb84 	bl	8002038 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7ff fb72 	bl	8002038 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7ff fb6e 	bl	8002038 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fb42 	bl	8002038 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7ff fb3e 	bl	8002038 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fb17 	bl	8002038 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fb13 	bl	8002038 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fb00 	bl	8002038 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff fafc 	bl	8002038 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7ff fa2e 	bl	8002038 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7ff fa2a 	bl	8002038 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	@ (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f98e 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08005a5c 	.word	0x08005a5c
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	@ 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc4:	f7fd fa64 	bl	8000290 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd fa0a 	bl	8000290 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	@ 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	@ (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08005a6c 	.word	0x08005a6c

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08005a6c 	.word	0x08005a6c

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d038      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f50:	4b68      	ldr	r3, [pc, #416]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7ff f86f 	bl	8002038 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f5e:	f7ff f86b 	bl	8002038 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0bd      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f70:	4b61      	ldr	r3, [pc, #388]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	019b      	lsls	r3, r3, #6
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	071b      	lsls	r3, r3, #28
 8002f8e:	495a      	ldr	r1, [pc, #360]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f96:	4b57      	ldr	r3, [pc, #348]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff f84c 	bl	8002038 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa4:	f7ff f848 	bl	8002038 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e09a      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb6:	4b50      	ldr	r3, [pc, #320]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8083 	beq.w	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	4b48      	ldr	r3, [pc, #288]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	4a47      	ldr	r2, [pc, #284]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe0:	4b45      	ldr	r3, [pc, #276]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fec:	4b43      	ldr	r3, [pc, #268]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a42      	ldr	r2, [pc, #264]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7ff f81e 	bl	8002038 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7ff f81a 	bl	8002038 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e06c      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003012:	4b3a      	ldr	r3, [pc, #232]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800301e:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02f      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d028      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800303c:	4b2e      	ldr	r3, [pc, #184]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003046:	4b2e      	ldr	r3, [pc, #184]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800304c:	4b2c      	ldr	r3, [pc, #176]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003052:	4a29      	ldr	r2, [pc, #164]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003058:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d114      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe ffe8 	bl	8002038 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00a      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe ffe4 	bl	8002038 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e034      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800309a:	d10d      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800309c:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80030ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b0:	4911      	ldr	r1, [pc, #68]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
 80030b6:	e005      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a0e      	ldr	r2, [pc, #56]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	4909      	ldr	r1, [pc, #36]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7d1a      	ldrb	r2, [r3, #20]
 80030e6:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80030e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	42470068 	.word	0x42470068
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	42470e40 	.word	0x42470e40
 8003104:	424711e0 	.word	0x424711e0

08003108 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e073      	b.n	8003206 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7f5b      	ldrb	r3, [r3, #29]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe fd26 	bl	8001b80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d055      	beq.n	80031f4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	22ca      	movs	r2, #202	@ 0xca
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2253      	movs	r2, #83	@ 0x53
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fa99 	bl	8003690 <RTC_EnterInitMode>
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12c      	bne.n	80031c2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800317a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	041a      	lsls	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 faa0 	bl	80036fe <RTC_ExitInitMode>
 80031be:	4603      	mov	r3, r0
 80031c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d110      	bne.n	80031ea <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031d6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	22ff      	movs	r2, #255	@ 0xff
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80031f2:	e001      	b.n	80031f8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800320e:	b590      	push	{r4, r7, lr}
 8003210:	b087      	sub	sp, #28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	7f1b      	ldrb	r3, [r3, #28]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_RTC_SetTime+0x1c>
 8003226:	2302      	movs	r3, #2
 8003228:	e087      	b.n	800333a <HAL_RTC_SetTime+0x12c>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2202      	movs	r2, #2
 8003234:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d126      	bne.n	800328a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fa77 	bl	8003748 <RTC_ByteToBcd2>
 800325a:	4603      	mov	r3, r0
 800325c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fa70 	bl	8003748 <RTC_ByteToBcd2>
 8003268:	4603      	mov	r3, r0
 800326a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800326c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	789b      	ldrb	r3, [r3, #2]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa68 	bl	8003748 <RTC_ByteToBcd2>
 8003278:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800327a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	78db      	ldrb	r3, [r3, #3]
 8003282:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e018      	b.n	80032bc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032aa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032b0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	78db      	ldrb	r3, [r3, #3]
 80032b6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	22ca      	movs	r2, #202	@ 0xca
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2253      	movs	r2, #83	@ 0x53
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f9df 	bl	8003690 <RTC_EnterInitMode>
 80032d2:	4603      	mov	r3, r0
 80032d4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d120      	bne.n	800331e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032ea:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f9f2 	bl	80036fe <RTC_ExitInitMode>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	22ff      	movs	r2, #255	@ 0xff
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]

  return status;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
}
 800333a:	4618      	mov	r0, r3
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003374:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003378:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0d9b      	lsrs	r3, r3, #22
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11a      	bne.n	80033f4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f9de 	bl	8003784 <RTC_Bcd2ToByte>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f9d5 	bl	8003784 <RTC_Bcd2ToByte>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	789b      	ldrb	r3, [r3, #2]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f9cc 	bl	8003784 <RTC_Bcd2ToByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033fe:	b590      	push	{r4, r7, lr}
 8003400:	b087      	sub	sp, #28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	7f1b      	ldrb	r3, [r3, #28]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_RTC_SetDate+0x1c>
 8003416:	2302      	movs	r3, #2
 8003418:	e071      	b.n	80034fe <HAL_RTC_SetDate+0x100>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2202      	movs	r2, #2
 8003424:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10e      	bne.n	800344a <HAL_RTC_SetDate+0x4c>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	f023 0310 	bic.w	r3, r3, #16
 8003440:	b2db      	uxtb	r3, r3
 8003442:	330a      	adds	r3, #10
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11c      	bne.n	800348a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	78db      	ldrb	r3, [r3, #3]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f977 	bl	8003748 <RTC_ByteToBcd2>
 800345a:	4603      	mov	r3, r0
 800345c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f970 	bl	8003748 <RTC_ByteToBcd2>
 8003468:	4603      	mov	r3, r0
 800346a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800346c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	789b      	ldrb	r3, [r3, #2]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f968 	bl	8003748 <RTC_ByteToBcd2>
 8003478:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800347a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e00e      	b.n	80034a8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	78db      	ldrb	r3, [r3, #3]
 800348e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003496:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800349c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	22ca      	movs	r2, #202	@ 0xca
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2253      	movs	r2, #83	@ 0x53
 80034b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f8e9 	bl	8003690 <RTC_EnterInitMode>
 80034be:	4603      	mov	r3, r0
 80034c0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10c      	bne.n	80034e2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034d6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f910 	bl	80036fe <RTC_ExitInitMode>
 80034de:	4603      	mov	r3, r0
 80034e0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	22ff      	movs	r2, #255	@ 0xff
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]

  return status;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}

08003506 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003520:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003524:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	0b5b      	lsrs	r3, r3, #13
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d11a      	bne.n	800359a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	78db      	ldrb	r3, [r3, #3]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f90b 	bl	8003784 <RTC_Bcd2ToByte>
 800356e:	4603      	mov	r3, r0
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f902 	bl	8003784 <RTC_Bcd2ToByte>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f8f9 	bl	8003784 <RTC_Bcd2ToByte>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80035ac:	4b1f      	ldr	r3, [pc, #124]	@ (800362c <HAL_RTC_AlarmIRQHandler+0x88>)
 80035ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035b2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80035e0:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f824 	bl	8003630 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003614:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8d2 	bl	80037c0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	775a      	strb	r2, [r3, #29]
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0d      	ldr	r2, [pc, #52]	@ (800368c <HAL_RTC_WaitForSynchro+0x48>)
 8003656:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003658:	f7fe fcee 	bl	8002038 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800365e:	e009      	b.n	8003674 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003660:	f7fe fcea 	bl	8002038 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800366e:	d901      	bls.n	8003674 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e007      	b.n	8003684 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	00013f5f 	.word	0x00013f5f

08003690 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d122      	bne.n	80036f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036be:	f7fe fcbb 	bl	8002038 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036c4:	e00c      	b.n	80036e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036c6:	f7fe fcb7 	bl	8002038 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036d4:	d904      	bls.n	80036e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2204      	movs	r2, #4
 80036da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <RTC_EnterInitMode+0x64>
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d1e8      	bne.n	80036c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003718:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff8b 	bl	8003644 <HAL_RTC_WaitForSynchro>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2204      	movs	r2, #4
 8003738:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003756:	e005      	b.n	8003764 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	3b0a      	subs	r3, #10
 8003762:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	2b09      	cmp	r3, #9
 8003768:	d8f6      	bhi.n	8003758 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	b2da      	uxtb	r2, r3
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	4313      	orrs	r3, r2
 8003776:	b2db      	uxtb	r3, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	b2db      	uxtb	r3, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07b      	b.n	80038de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f6:	d009      	beq.n	800380c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
 80037fe:	e005      	b.n	800380c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe f9d6 	bl	8001bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003890:	ea42 0103 	orr.w	r1, r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0104 	and.w	r1, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	f003 0210 	and.w	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038f6:	f7fe fb9f 	bl	8002038 <HAL_GetTick>
 80038fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d001      	beq.n	8003910 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	e12a      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_Transmit+0x36>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e122      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_SPI_Transmit+0x48>
 800392a:	2302      	movs	r3, #2
 800392c:	e11b      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2203      	movs	r2, #3
 800393a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397c:	d10f      	bne.n	800399e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800399c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d007      	beq.n	80039bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c4:	d152      	bne.n	8003a6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0xee>
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d145      	bne.n	8003a60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	881a      	ldrh	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	1c9a      	adds	r2, r3, #2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f8:	e032      	b.n	8003a60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d112      	bne.n	8003a2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a2c:	e018      	b.n	8003a60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a2e:	f7fe fb03 	bl	8002038 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d803      	bhi.n	8003a46 <HAL_SPI_Transmit+0x160>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_Transmit+0x166>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e082      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1c7      	bne.n	80039fa <HAL_SPI_Transmit+0x114>
 8003a6a:	e053      	b.n	8003b14 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_Transmit+0x194>
 8003a74:	8b7b      	ldrh	r3, [r7, #26]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d147      	bne.n	8003b0a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aa0:	e033      	b.n	8003b0a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d113      	bne.n	8003ad8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ad6:	e018      	b.n	8003b0a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad8:	f7fe faae 	bl	8002038 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d803      	bhi.n	8003af0 <HAL_SPI_Transmit+0x20a>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Transmit+0x210>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e02d      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1c6      	bne.n	8003aa2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	6839      	ldr	r1, [r7, #0]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8b1 	bl	8003c80 <SPI_EndRxTxTransaction>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b80:	f7fe fa5a 	bl	8002038 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b90:	f7fe fa52 	bl	8002038 <HAL_GetTick>
 8003b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b96:	4b39      	ldr	r3, [pc, #228]	@ (8003c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	0d1b      	lsrs	r3, r3, #20
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	e054      	b.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d050      	beq.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb0:	f7fe fa42 	bl	8002038 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d902      	bls.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d13d      	bne.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bde:	d111      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be8:	d004      	beq.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf2:	d107      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0c:	d10f      	bne.n	8003c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e017      	b.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d19b      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2201      	movs	r2, #1
 8003c94:	2102      	movs	r1, #2
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff6a 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e032      	b.n	8003d18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <SPI_EndRxTxTransaction+0xa0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <SPI_EndRxTxTransaction+0xa4>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	0d5b      	lsrs	r3, r3, #21
 8003cbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cd0:	d112      	bne.n	8003cf8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2180      	movs	r1, #128	@ 0x80
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff ff47 	bl	8003b70 <SPI_WaitFlagStateUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e00f      	b.n	8003d18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d0f2      	beq.n	8003cf8 <SPI_EndRxTxTransaction+0x78>
 8003d12:	e000      	b.n	8003d16 <SPI_EndRxTxTransaction+0x96>
        break;
 8003d14:	bf00      	nop
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000000 	.word	0x20000000
 8003d24:	165e9f81 	.word	0x165e9f81

08003d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd ffaa 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	@ 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f973 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	@ 0x28
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d175      	bne.n	8003ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Transmit+0x2c>
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e06e      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2221      	movs	r2, #33	@ 0x21
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e06:	f7fe f917 	bl	8002038 <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d108      	bne.n	8003e34 <HAL_UART_Transmit+0x6c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e003      	b.n	8003e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e3c:	e02e      	b.n	8003e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	@ 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f848 	bl	8003ede <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e03a      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3302      	adds	r3, #2
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e007      	b.n	8003e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cb      	bne.n	8003e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	@ 0x40
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f814 	bl	8003ede <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eee:	e03b      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d037      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef8:	f7fe f89e 	bl	8002038 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	6a3a      	ldr	r2, [r7, #32]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e03a      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d023      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b80      	cmp	r3, #128	@ 0x80
 8003f24:	d020      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d01d      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d116      	bne.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f81d 	bl	8003f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e00f      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d0b4      	beq.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b095      	sub	sp, #84	@ 0x54
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e5      	bne.n	8003f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	2b01      	cmp	r3, #1
 8004006:	d119      	bne.n	800403c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	60bb      	str	r3, [r7, #8]
   return(result);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f023 0310 	bic.w	r3, r3, #16
 800401e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004028:	61ba      	str	r2, [r7, #24]
 800402a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	613b      	str	r3, [r7, #16]
   return(result);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e5      	bne.n	8004008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800404a:	bf00      	nop
 800404c:	3754      	adds	r7, #84	@ 0x54
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b0c0      	sub	sp, #256	@ 0x100
 800405e:	af00      	add	r7, sp, #0
 8004060:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	ea40 0301 	orr.w	r3, r0, r1
 8004080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040b0:	f021 010c 	bic.w	r1, r1, #12
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040be:	430b      	orrs	r3, r1
 80040c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	6999      	ldr	r1, [r3, #24]
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	ea40 0301 	orr.w	r3, r0, r1
 80040de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004324 <UART_SetConfig+0x2cc>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d005      	beq.n	80040f8 <UART_SetConfig+0xa0>
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004328 <UART_SetConfig+0x2d0>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d104      	bne.n	8004102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe ff02 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80040fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004100:	e003      	b.n	800410a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004102:	f7fe fee9 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8004106:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004114:	f040 810c 	bne.w	8004330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411c:	2200      	movs	r2, #0
 800411e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004122:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	1891      	adds	r1, r2, r2
 8004130:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004132:	415b      	adcs	r3, r3
 8004134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800413a:	4621      	mov	r1, r4
 800413c:	eb12 0801 	adds.w	r8, r2, r1
 8004140:	4629      	mov	r1, r5
 8004142:	eb43 0901 	adc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004168:	462b      	mov	r3, r5
 800416a:	eb49 0303 	adc.w	r3, r9, r3
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800417e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004186:	460b      	mov	r3, r1
 8004188:	18db      	adds	r3, r3, r3
 800418a:	653b      	str	r3, [r7, #80]	@ 0x50
 800418c:	4613      	mov	r3, r2
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	657b      	str	r3, [r7, #84]	@ 0x54
 8004194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800419c:	f7fc f878 	bl	8000290 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b61      	ldr	r3, [pc, #388]	@ (800432c <UART_SetConfig+0x2d4>)
 80041a6:	fba3 2302 	umull	r2, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	011c      	lsls	r4, r3, #4
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041c8:	415b      	adcs	r3, r3
 80041ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041d0:	4641      	mov	r1, r8
 80041d2:	eb12 0a01 	adds.w	sl, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb43 0b01 	adc.w	fp, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f0:	4692      	mov	sl, r2
 80041f2:	469b      	mov	fp, r3
 80041f4:	4643      	mov	r3, r8
 80041f6:	eb1a 0303 	adds.w	r3, sl, r3
 80041fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041fe:	464b      	mov	r3, r9
 8004200:	eb4b 0303 	adc.w	r3, fp, r3
 8004204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004214:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800421c:	460b      	mov	r3, r1
 800421e:	18db      	adds	r3, r3, r3
 8004220:	643b      	str	r3, [r7, #64]	@ 0x40
 8004222:	4613      	mov	r3, r2
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	647b      	str	r3, [r7, #68]	@ 0x44
 800422a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800422e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004232:	f7fc f82d 	bl	8000290 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4611      	mov	r1, r2
 800423c:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <UART_SetConfig+0x2d4>)
 800423e:	fba3 2301 	umull	r2, r3, r3, r1
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2264      	movs	r2, #100	@ 0x64
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	1acb      	subs	r3, r1, r3
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004252:	4b36      	ldr	r3, [pc, #216]	@ (800432c <UART_SetConfig+0x2d4>)
 8004254:	fba3 2302 	umull	r2, r3, r3, r2
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004260:	441c      	add	r4, r3
 8004262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800426c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	1891      	adds	r1, r2, r2
 800427a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800427c:	415b      	adcs	r3, r3
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004284:	4641      	mov	r1, r8
 8004286:	1851      	adds	r1, r2, r1
 8004288:	6339      	str	r1, [r7, #48]	@ 0x30
 800428a:	4649      	mov	r1, r9
 800428c:	414b      	adcs	r3, r1
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800429c:	4659      	mov	r1, fp
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a6:	4651      	mov	r1, sl
 80042a8:	00ca      	lsls	r2, r1, #3
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	4642      	mov	r2, r8
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b8:	464b      	mov	r3, r9
 80042ba:	460a      	mov	r2, r1
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042d8:	460b      	mov	r3, r1
 80042da:	18db      	adds	r3, r3, r3
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042de:	4613      	mov	r3, r2
 80042e0:	eb42 0303 	adc.w	r3, r2, r3
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ee:	f7fb ffcf 	bl	8000290 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <UART_SetConfig+0x2d4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	@ 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	3332      	adds	r3, #50	@ 0x32
 800430a:	4a08      	ldr	r2, [pc, #32]	@ (800432c <UART_SetConfig+0x2d4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 0207 	and.w	r2, r3, #7
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4422      	add	r2, r4
 800431e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004320:	e106      	b.n	8004530 <UART_SetConfig+0x4d8>
 8004322:	bf00      	nop
 8004324:	40011000 	.word	0x40011000
 8004328:	40011400 	.word	0x40011400
 800432c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800433a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800433e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	1891      	adds	r1, r2, r2
 8004348:	6239      	str	r1, [r7, #32]
 800434a:	415b      	adcs	r3, r3
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
 800434e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004352:	4641      	mov	r1, r8
 8004354:	1854      	adds	r4, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb43 0501 	adc.w	r5, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	00eb      	lsls	r3, r5, #3
 8004366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436a:	00e2      	lsls	r2, r4, #3
 800436c:	4614      	mov	r4, r2
 800436e:	461d      	mov	r5, r3
 8004370:	4643      	mov	r3, r8
 8004372:	18e3      	adds	r3, r4, r3
 8004374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004378:	464b      	mov	r3, r9
 800437a:	eb45 0303 	adc.w	r3, r5, r3
 800437e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800438e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800439e:	4629      	mov	r1, r5
 80043a0:	008b      	lsls	r3, r1, #2
 80043a2:	4621      	mov	r1, r4
 80043a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a8:	4621      	mov	r1, r4
 80043aa:	008a      	lsls	r2, r1, #2
 80043ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043b0:	f7fb ff6e 	bl	8000290 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b60      	ldr	r3, [pc, #384]	@ (800453c <UART_SetConfig+0x4e4>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011c      	lsls	r4, r3, #4
 80043c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	61b9      	str	r1, [r7, #24]
 80043dc:	415b      	adcs	r3, r3
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e4:	4641      	mov	r1, r8
 80043e6:	1851      	adds	r1, r2, r1
 80043e8:	6139      	str	r1, [r7, #16]
 80043ea:	4649      	mov	r1, r9
 80043ec:	414b      	adcs	r3, r1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043fc:	4659      	mov	r1, fp
 80043fe:	00cb      	lsls	r3, r1, #3
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004406:	4651      	mov	r1, sl
 8004408:	00ca      	lsls	r2, r1, #3
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	4603      	mov	r3, r0
 8004410:	4642      	mov	r2, r8
 8004412:	189b      	adds	r3, r3, r2
 8004414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004418:	464b      	mov	r3, r9
 800441a:	460a      	mov	r2, r1
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800442e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800443c:	4649      	mov	r1, r9
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	4641      	mov	r1, r8
 8004442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004446:	4641      	mov	r1, r8
 8004448:	008a      	lsls	r2, r1, #2
 800444a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800444e:	f7fb ff1f 	bl	8000290 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4611      	mov	r1, r2
 8004458:	4b38      	ldr	r3, [pc, #224]	@ (800453c <UART_SetConfig+0x4e4>)
 800445a:	fba3 2301 	umull	r2, r3, r3, r1
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2264      	movs	r2, #100	@ 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	1acb      	subs	r3, r1, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	@ 0x32
 800446c:	4a33      	ldr	r2, [pc, #204]	@ (800453c <UART_SetConfig+0x4e4>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004478:	441c      	add	r4, r3
 800447a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800447e:	2200      	movs	r2, #0
 8004480:	673b      	str	r3, [r7, #112]	@ 0x70
 8004482:	677a      	str	r2, [r7, #116]	@ 0x74
 8004484:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	1891      	adds	r1, r2, r2
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	415b      	adcs	r3, r3
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004498:	4641      	mov	r1, r8
 800449a:	1851      	adds	r1, r2, r1
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	4649      	mov	r1, r9
 80044a0:	414b      	adcs	r3, r1
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044b0:	4659      	mov	r1, fp
 80044b2:	00cb      	lsls	r3, r1, #3
 80044b4:	4651      	mov	r1, sl
 80044b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ba:	4651      	mov	r1, sl
 80044bc:	00ca      	lsls	r2, r1, #3
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	4642      	mov	r2, r8
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ca:	464b      	mov	r3, r9
 80044cc:	460a      	mov	r2, r1
 80044ce:	eb42 0303 	adc.w	r3, r2, r3
 80044d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044de:	667a      	str	r2, [r7, #100]	@ 0x64
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044ec:	4649      	mov	r1, r9
 80044ee:	008b      	lsls	r3, r1, #2
 80044f0:	4641      	mov	r1, r8
 80044f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f6:	4641      	mov	r1, r8
 80044f8:	008a      	lsls	r2, r1, #2
 80044fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044fe:	f7fb fec7 	bl	8000290 <__aeabi_uldivmod>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <UART_SetConfig+0x4e4>)
 8004508:	fba3 1302 	umull	r1, r3, r3, r2
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	2164      	movs	r1, #100	@ 0x64
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	3332      	adds	r3, #50	@ 0x32
 800451a:	4a08      	ldr	r2, [pc, #32]	@ (800453c <UART_SetConfig+0x4e4>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4422      	add	r2, r4
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004536:	46bd      	mov	sp, r7
 8004538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453c:	51eb851f 	.word	0x51eb851f

08004540 <std>:
 8004540:	2300      	movs	r3, #0
 8004542:	b510      	push	{r4, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	e9c0 3300 	strd	r3, r3, [r0]
 800454a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800454e:	6083      	str	r3, [r0, #8]
 8004550:	8181      	strh	r1, [r0, #12]
 8004552:	6643      	str	r3, [r0, #100]	@ 0x64
 8004554:	81c2      	strh	r2, [r0, #14]
 8004556:	6183      	str	r3, [r0, #24]
 8004558:	4619      	mov	r1, r3
 800455a:	2208      	movs	r2, #8
 800455c:	305c      	adds	r0, #92	@ 0x5c
 800455e:	f000 fa19 	bl	8004994 <memset>
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <std+0x58>)
 8004564:	6263      	str	r3, [r4, #36]	@ 0x24
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <std+0x5c>)
 8004568:	62a3      	str	r3, [r4, #40]	@ 0x28
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <std+0x60>)
 800456c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <std+0x64>)
 8004570:	6323      	str	r3, [r4, #48]	@ 0x30
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <std+0x68>)
 8004574:	6224      	str	r4, [r4, #32]
 8004576:	429c      	cmp	r4, r3
 8004578:	d006      	beq.n	8004588 <std+0x48>
 800457a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800457e:	4294      	cmp	r4, r2
 8004580:	d002      	beq.n	8004588 <std+0x48>
 8004582:	33d0      	adds	r3, #208	@ 0xd0
 8004584:	429c      	cmp	r4, r3
 8004586:	d105      	bne.n	8004594 <std+0x54>
 8004588:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004590:	f000 ba78 	b.w	8004a84 <__retarget_lock_init_recursive>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	bf00      	nop
 8004598:	080047e5 	.word	0x080047e5
 800459c:	08004807 	.word	0x08004807
 80045a0:	0800483f 	.word	0x0800483f
 80045a4:	08004863 	.word	0x08004863
 80045a8:	20000164 	.word	0x20000164

080045ac <stdio_exit_handler>:
 80045ac:	4a02      	ldr	r2, [pc, #8]	@ (80045b8 <stdio_exit_handler+0xc>)
 80045ae:	4903      	ldr	r1, [pc, #12]	@ (80045bc <stdio_exit_handler+0x10>)
 80045b0:	4803      	ldr	r0, [pc, #12]	@ (80045c0 <stdio_exit_handler+0x14>)
 80045b2:	f000 b869 	b.w	8004688 <_fwalk_sglue>
 80045b6:	bf00      	nop
 80045b8:	2000000c 	.word	0x2000000c
 80045bc:	080055f1 	.word	0x080055f1
 80045c0:	2000001c 	.word	0x2000001c

080045c4 <cleanup_stdio>:
 80045c4:	6841      	ldr	r1, [r0, #4]
 80045c6:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <cleanup_stdio+0x34>)
 80045c8:	4299      	cmp	r1, r3
 80045ca:	b510      	push	{r4, lr}
 80045cc:	4604      	mov	r4, r0
 80045ce:	d001      	beq.n	80045d4 <cleanup_stdio+0x10>
 80045d0:	f001 f80e 	bl	80055f0 <_fflush_r>
 80045d4:	68a1      	ldr	r1, [r4, #8]
 80045d6:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <cleanup_stdio+0x38>)
 80045d8:	4299      	cmp	r1, r3
 80045da:	d002      	beq.n	80045e2 <cleanup_stdio+0x1e>
 80045dc:	4620      	mov	r0, r4
 80045de:	f001 f807 	bl	80055f0 <_fflush_r>
 80045e2:	68e1      	ldr	r1, [r4, #12]
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <cleanup_stdio+0x3c>)
 80045e6:	4299      	cmp	r1, r3
 80045e8:	d004      	beq.n	80045f4 <cleanup_stdio+0x30>
 80045ea:	4620      	mov	r0, r4
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f000 bffe 	b.w	80055f0 <_fflush_r>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	20000164 	.word	0x20000164
 80045fc:	200001cc 	.word	0x200001cc
 8004600:	20000234 	.word	0x20000234

08004604 <global_stdio_init.part.0>:
 8004604:	b510      	push	{r4, lr}
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <global_stdio_init.part.0+0x30>)
 8004608:	4c0b      	ldr	r4, [pc, #44]	@ (8004638 <global_stdio_init.part.0+0x34>)
 800460a:	4a0c      	ldr	r2, [pc, #48]	@ (800463c <global_stdio_init.part.0+0x38>)
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	4620      	mov	r0, r4
 8004610:	2200      	movs	r2, #0
 8004612:	2104      	movs	r1, #4
 8004614:	f7ff ff94 	bl	8004540 <std>
 8004618:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800461c:	2201      	movs	r2, #1
 800461e:	2109      	movs	r1, #9
 8004620:	f7ff ff8e 	bl	8004540 <std>
 8004624:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004628:	2202      	movs	r2, #2
 800462a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800462e:	2112      	movs	r1, #18
 8004630:	f7ff bf86 	b.w	8004540 <std>
 8004634:	2000029c 	.word	0x2000029c
 8004638:	20000164 	.word	0x20000164
 800463c:	080045ad 	.word	0x080045ad

08004640 <__sfp_lock_acquire>:
 8004640:	4801      	ldr	r0, [pc, #4]	@ (8004648 <__sfp_lock_acquire+0x8>)
 8004642:	f000 ba20 	b.w	8004a86 <__retarget_lock_acquire_recursive>
 8004646:	bf00      	nop
 8004648:	200002a5 	.word	0x200002a5

0800464c <__sfp_lock_release>:
 800464c:	4801      	ldr	r0, [pc, #4]	@ (8004654 <__sfp_lock_release+0x8>)
 800464e:	f000 ba1b 	b.w	8004a88 <__retarget_lock_release_recursive>
 8004652:	bf00      	nop
 8004654:	200002a5 	.word	0x200002a5

08004658 <__sinit>:
 8004658:	b510      	push	{r4, lr}
 800465a:	4604      	mov	r4, r0
 800465c:	f7ff fff0 	bl	8004640 <__sfp_lock_acquire>
 8004660:	6a23      	ldr	r3, [r4, #32]
 8004662:	b11b      	cbz	r3, 800466c <__sinit+0x14>
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	f7ff bff0 	b.w	800464c <__sfp_lock_release>
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <__sinit+0x28>)
 800466e:	6223      	str	r3, [r4, #32]
 8004670:	4b04      	ldr	r3, [pc, #16]	@ (8004684 <__sinit+0x2c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f5      	bne.n	8004664 <__sinit+0xc>
 8004678:	f7ff ffc4 	bl	8004604 <global_stdio_init.part.0>
 800467c:	e7f2      	b.n	8004664 <__sinit+0xc>
 800467e:	bf00      	nop
 8004680:	080045c5 	.word	0x080045c5
 8004684:	2000029c 	.word	0x2000029c

08004688 <_fwalk_sglue>:
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	4607      	mov	r7, r0
 800468e:	4688      	mov	r8, r1
 8004690:	4614      	mov	r4, r2
 8004692:	2600      	movs	r6, #0
 8004694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004698:	f1b9 0901 	subs.w	r9, r9, #1
 800469c:	d505      	bpl.n	80046aa <_fwalk_sglue+0x22>
 800469e:	6824      	ldr	r4, [r4, #0]
 80046a0:	2c00      	cmp	r4, #0
 80046a2:	d1f7      	bne.n	8004694 <_fwalk_sglue+0xc>
 80046a4:	4630      	mov	r0, r6
 80046a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046aa:	89ab      	ldrh	r3, [r5, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d907      	bls.n	80046c0 <_fwalk_sglue+0x38>
 80046b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b4:	3301      	adds	r3, #1
 80046b6:	d003      	beq.n	80046c0 <_fwalk_sglue+0x38>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	4306      	orrs	r6, r0
 80046c0:	3568      	adds	r5, #104	@ 0x68
 80046c2:	e7e9      	b.n	8004698 <_fwalk_sglue+0x10>

080046c4 <iprintf>:
 80046c4:	b40f      	push	{r0, r1, r2, r3}
 80046c6:	b507      	push	{r0, r1, r2, lr}
 80046c8:	4906      	ldr	r1, [pc, #24]	@ (80046e4 <iprintf+0x20>)
 80046ca:	ab04      	add	r3, sp, #16
 80046cc:	6808      	ldr	r0, [r1, #0]
 80046ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d2:	6881      	ldr	r1, [r0, #8]
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	f000 fc61 	bl	8004f9c <_vfiprintf_r>
 80046da:	b003      	add	sp, #12
 80046dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e0:	b004      	add	sp, #16
 80046e2:	4770      	bx	lr
 80046e4:	20000018 	.word	0x20000018

080046e8 <_puts_r>:
 80046e8:	6a03      	ldr	r3, [r0, #32]
 80046ea:	b570      	push	{r4, r5, r6, lr}
 80046ec:	6884      	ldr	r4, [r0, #8]
 80046ee:	4605      	mov	r5, r0
 80046f0:	460e      	mov	r6, r1
 80046f2:	b90b      	cbnz	r3, 80046f8 <_puts_r+0x10>
 80046f4:	f7ff ffb0 	bl	8004658 <__sinit>
 80046f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046fa:	07db      	lsls	r3, r3, #31
 80046fc:	d405      	bmi.n	800470a <_puts_r+0x22>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	0598      	lsls	r0, r3, #22
 8004702:	d402      	bmi.n	800470a <_puts_r+0x22>
 8004704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004706:	f000 f9be 	bl	8004a86 <__retarget_lock_acquire_recursive>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	0719      	lsls	r1, r3, #28
 800470e:	d502      	bpl.n	8004716 <_puts_r+0x2e>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d135      	bne.n	8004782 <_puts_r+0x9a>
 8004716:	4621      	mov	r1, r4
 8004718:	4628      	mov	r0, r5
 800471a:	f000 f8e5 	bl	80048e8 <__swsetup_r>
 800471e:	b380      	cbz	r0, 8004782 <_puts_r+0x9a>
 8004720:	f04f 35ff 	mov.w	r5, #4294967295
 8004724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004726:	07da      	lsls	r2, r3, #31
 8004728:	d405      	bmi.n	8004736 <_puts_r+0x4e>
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	059b      	lsls	r3, r3, #22
 800472e:	d402      	bmi.n	8004736 <_puts_r+0x4e>
 8004730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004732:	f000 f9a9 	bl	8004a88 <__retarget_lock_release_recursive>
 8004736:	4628      	mov	r0, r5
 8004738:	bd70      	pop	{r4, r5, r6, pc}
 800473a:	2b00      	cmp	r3, #0
 800473c:	da04      	bge.n	8004748 <_puts_r+0x60>
 800473e:	69a2      	ldr	r2, [r4, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	dc17      	bgt.n	8004774 <_puts_r+0x8c>
 8004744:	290a      	cmp	r1, #10
 8004746:	d015      	beq.n	8004774 <_puts_r+0x8c>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	7019      	strb	r1, [r3, #0]
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004756:	3b01      	subs	r3, #1
 8004758:	60a3      	str	r3, [r4, #8]
 800475a:	2900      	cmp	r1, #0
 800475c:	d1ed      	bne.n	800473a <_puts_r+0x52>
 800475e:	2b00      	cmp	r3, #0
 8004760:	da11      	bge.n	8004786 <_puts_r+0x9e>
 8004762:	4622      	mov	r2, r4
 8004764:	210a      	movs	r1, #10
 8004766:	4628      	mov	r0, r5
 8004768:	f000 f87f 	bl	800486a <__swbuf_r>
 800476c:	3001      	adds	r0, #1
 800476e:	d0d7      	beq.n	8004720 <_puts_r+0x38>
 8004770:	250a      	movs	r5, #10
 8004772:	e7d7      	b.n	8004724 <_puts_r+0x3c>
 8004774:	4622      	mov	r2, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f877 	bl	800486a <__swbuf_r>
 800477c:	3001      	adds	r0, #1
 800477e:	d1e7      	bne.n	8004750 <_puts_r+0x68>
 8004780:	e7ce      	b.n	8004720 <_puts_r+0x38>
 8004782:	3e01      	subs	r6, #1
 8004784:	e7e4      	b.n	8004750 <_puts_r+0x68>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	6022      	str	r2, [r4, #0]
 800478c:	220a      	movs	r2, #10
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e7ee      	b.n	8004770 <_puts_r+0x88>
	...

08004794 <puts>:
 8004794:	4b02      	ldr	r3, [pc, #8]	@ (80047a0 <puts+0xc>)
 8004796:	4601      	mov	r1, r0
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	f7ff bfa5 	b.w	80046e8 <_puts_r>
 800479e:	bf00      	nop
 80047a0:	20000018 	.word	0x20000018

080047a4 <siprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	b500      	push	{lr}
 80047a8:	b09c      	sub	sp, #112	@ 0x70
 80047aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80047ac:	9002      	str	r0, [sp, #8]
 80047ae:	9006      	str	r0, [sp, #24]
 80047b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047b4:	4809      	ldr	r0, [pc, #36]	@ (80047dc <siprintf+0x38>)
 80047b6:	9107      	str	r1, [sp, #28]
 80047b8:	9104      	str	r1, [sp, #16]
 80047ba:	4909      	ldr	r1, [pc, #36]	@ (80047e0 <siprintf+0x3c>)
 80047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c0:	9105      	str	r1, [sp, #20]
 80047c2:	6800      	ldr	r0, [r0, #0]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	a902      	add	r1, sp, #8
 80047c8:	f000 fac2 	bl	8004d50 <_svfiprintf_r>
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	b01c      	add	sp, #112	@ 0x70
 80047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d8:	b003      	add	sp, #12
 80047da:	4770      	bx	lr
 80047dc:	20000018 	.word	0x20000018
 80047e0:	ffff0208 	.word	0xffff0208

080047e4 <__sread>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	460c      	mov	r4, r1
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	f000 f8fc 	bl	80049e8 <_read_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	bfab      	itete	ge
 80047f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047f6:	89a3      	ldrhlt	r3, [r4, #12]
 80047f8:	181b      	addge	r3, r3, r0
 80047fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047fe:	bfac      	ite	ge
 8004800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004802:	81a3      	strhlt	r3, [r4, #12]
 8004804:	bd10      	pop	{r4, pc}

08004806 <__swrite>:
 8004806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480a:	461f      	mov	r7, r3
 800480c:	898b      	ldrh	r3, [r1, #12]
 800480e:	05db      	lsls	r3, r3, #23
 8004810:	4605      	mov	r5, r0
 8004812:	460c      	mov	r4, r1
 8004814:	4616      	mov	r6, r2
 8004816:	d505      	bpl.n	8004824 <__swrite+0x1e>
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	2302      	movs	r3, #2
 800481e:	2200      	movs	r2, #0
 8004820:	f000 f8d0 	bl	80049c4 <_lseek_r>
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800482e:	81a3      	strh	r3, [r4, #12]
 8004830:	4632      	mov	r2, r6
 8004832:	463b      	mov	r3, r7
 8004834:	4628      	mov	r0, r5
 8004836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483a:	f000 b8e7 	b.w	8004a0c <_write_r>

0800483e <__sseek>:
 800483e:	b510      	push	{r4, lr}
 8004840:	460c      	mov	r4, r1
 8004842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004846:	f000 f8bd 	bl	80049c4 <_lseek_r>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	bf15      	itete	ne
 8004850:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800485a:	81a3      	strheq	r3, [r4, #12]
 800485c:	bf18      	it	ne
 800485e:	81a3      	strhne	r3, [r4, #12]
 8004860:	bd10      	pop	{r4, pc}

08004862 <__sclose>:
 8004862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004866:	f000 b89d 	b.w	80049a4 <_close_r>

0800486a <__swbuf_r>:
 800486a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486c:	460e      	mov	r6, r1
 800486e:	4614      	mov	r4, r2
 8004870:	4605      	mov	r5, r0
 8004872:	b118      	cbz	r0, 800487c <__swbuf_r+0x12>
 8004874:	6a03      	ldr	r3, [r0, #32]
 8004876:	b90b      	cbnz	r3, 800487c <__swbuf_r+0x12>
 8004878:	f7ff feee 	bl	8004658 <__sinit>
 800487c:	69a3      	ldr	r3, [r4, #24]
 800487e:	60a3      	str	r3, [r4, #8]
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	071a      	lsls	r2, r3, #28
 8004884:	d501      	bpl.n	800488a <__swbuf_r+0x20>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	b943      	cbnz	r3, 800489c <__swbuf_r+0x32>
 800488a:	4621      	mov	r1, r4
 800488c:	4628      	mov	r0, r5
 800488e:	f000 f82b 	bl	80048e8 <__swsetup_r>
 8004892:	b118      	cbz	r0, 800489c <__swbuf_r+0x32>
 8004894:	f04f 37ff 	mov.w	r7, #4294967295
 8004898:	4638      	mov	r0, r7
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	6922      	ldr	r2, [r4, #16]
 80048a0:	1a98      	subs	r0, r3, r2
 80048a2:	6963      	ldr	r3, [r4, #20]
 80048a4:	b2f6      	uxtb	r6, r6
 80048a6:	4283      	cmp	r3, r0
 80048a8:	4637      	mov	r7, r6
 80048aa:	dc05      	bgt.n	80048b8 <__swbuf_r+0x4e>
 80048ac:	4621      	mov	r1, r4
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 fe9e 	bl	80055f0 <_fflush_r>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d1ed      	bne.n	8004894 <__swbuf_r+0x2a>
 80048b8:	68a3      	ldr	r3, [r4, #8]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	701e      	strb	r6, [r3, #0]
 80048c6:	6962      	ldr	r2, [r4, #20]
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d004      	beq.n	80048d8 <__swbuf_r+0x6e>
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	07db      	lsls	r3, r3, #31
 80048d2:	d5e1      	bpl.n	8004898 <__swbuf_r+0x2e>
 80048d4:	2e0a      	cmp	r6, #10
 80048d6:	d1df      	bne.n	8004898 <__swbuf_r+0x2e>
 80048d8:	4621      	mov	r1, r4
 80048da:	4628      	mov	r0, r5
 80048dc:	f000 fe88 	bl	80055f0 <_fflush_r>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d0d9      	beq.n	8004898 <__swbuf_r+0x2e>
 80048e4:	e7d6      	b.n	8004894 <__swbuf_r+0x2a>
	...

080048e8 <__swsetup_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4b29      	ldr	r3, [pc, #164]	@ (8004990 <__swsetup_r+0xa8>)
 80048ec:	4605      	mov	r5, r0
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	460c      	mov	r4, r1
 80048f2:	b118      	cbz	r0, 80048fc <__swsetup_r+0x14>
 80048f4:	6a03      	ldr	r3, [r0, #32]
 80048f6:	b90b      	cbnz	r3, 80048fc <__swsetup_r+0x14>
 80048f8:	f7ff feae 	bl	8004658 <__sinit>
 80048fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004900:	0719      	lsls	r1, r3, #28
 8004902:	d422      	bmi.n	800494a <__swsetup_r+0x62>
 8004904:	06da      	lsls	r2, r3, #27
 8004906:	d407      	bmi.n	8004918 <__swsetup_r+0x30>
 8004908:	2209      	movs	r2, #9
 800490a:	602a      	str	r2, [r5, #0]
 800490c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004910:	81a3      	strh	r3, [r4, #12]
 8004912:	f04f 30ff 	mov.w	r0, #4294967295
 8004916:	e033      	b.n	8004980 <__swsetup_r+0x98>
 8004918:	0758      	lsls	r0, r3, #29
 800491a:	d512      	bpl.n	8004942 <__swsetup_r+0x5a>
 800491c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800491e:	b141      	cbz	r1, 8004932 <__swsetup_r+0x4a>
 8004920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004924:	4299      	cmp	r1, r3
 8004926:	d002      	beq.n	800492e <__swsetup_r+0x46>
 8004928:	4628      	mov	r0, r5
 800492a:	f000 f8bd 	bl	8004aa8 <_free_r>
 800492e:	2300      	movs	r3, #0
 8004930:	6363      	str	r3, [r4, #52]	@ 0x34
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	2300      	movs	r3, #0
 800493c:	6063      	str	r3, [r4, #4]
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f043 0308 	orr.w	r3, r3, #8
 8004948:	81a3      	strh	r3, [r4, #12]
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	b94b      	cbnz	r3, 8004962 <__swsetup_r+0x7a>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004958:	d003      	beq.n	8004962 <__swsetup_r+0x7a>
 800495a:	4621      	mov	r1, r4
 800495c:	4628      	mov	r0, r5
 800495e:	f000 fe95 	bl	800568c <__smakebuf_r>
 8004962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004966:	f013 0201 	ands.w	r2, r3, #1
 800496a:	d00a      	beq.n	8004982 <__swsetup_r+0x9a>
 800496c:	2200      	movs	r2, #0
 800496e:	60a2      	str	r2, [r4, #8]
 8004970:	6962      	ldr	r2, [r4, #20]
 8004972:	4252      	negs	r2, r2
 8004974:	61a2      	str	r2, [r4, #24]
 8004976:	6922      	ldr	r2, [r4, #16]
 8004978:	b942      	cbnz	r2, 800498c <__swsetup_r+0xa4>
 800497a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800497e:	d1c5      	bne.n	800490c <__swsetup_r+0x24>
 8004980:	bd38      	pop	{r3, r4, r5, pc}
 8004982:	0799      	lsls	r1, r3, #30
 8004984:	bf58      	it	pl
 8004986:	6962      	ldrpl	r2, [r4, #20]
 8004988:	60a2      	str	r2, [r4, #8]
 800498a:	e7f4      	b.n	8004976 <__swsetup_r+0x8e>
 800498c:	2000      	movs	r0, #0
 800498e:	e7f7      	b.n	8004980 <__swsetup_r+0x98>
 8004990:	20000018 	.word	0x20000018

08004994 <memset>:
 8004994:	4402      	add	r2, r0
 8004996:	4603      	mov	r3, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <_close_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4d06      	ldr	r5, [pc, #24]	@ (80049c0 <_close_r+0x1c>)
 80049a8:	2300      	movs	r3, #0
 80049aa:	4604      	mov	r4, r0
 80049ac:	4608      	mov	r0, r1
 80049ae:	602b      	str	r3, [r5, #0]
 80049b0:	f7fd fa2a 	bl	8001e08 <_close>
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	d102      	bne.n	80049be <_close_r+0x1a>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	b103      	cbz	r3, 80049be <_close_r+0x1a>
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	bd38      	pop	{r3, r4, r5, pc}
 80049c0:	200002a0 	.word	0x200002a0

080049c4 <_lseek_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4d07      	ldr	r5, [pc, #28]	@ (80049e4 <_lseek_r+0x20>)
 80049c8:	4604      	mov	r4, r0
 80049ca:	4608      	mov	r0, r1
 80049cc:	4611      	mov	r1, r2
 80049ce:	2200      	movs	r2, #0
 80049d0:	602a      	str	r2, [r5, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f7fd fa3f 	bl	8001e56 <_lseek>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_lseek_r+0x1e>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_lseek_r+0x1e>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	200002a0 	.word	0x200002a0

080049e8 <_read_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d07      	ldr	r5, [pc, #28]	@ (8004a08 <_read_r+0x20>)
 80049ec:	4604      	mov	r4, r0
 80049ee:	4608      	mov	r0, r1
 80049f0:	4611      	mov	r1, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	602a      	str	r2, [r5, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7fd f9cd 	bl	8001d96 <_read>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_read_r+0x1e>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_read_r+0x1e>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	200002a0 	.word	0x200002a0

08004a0c <_write_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d07      	ldr	r5, [pc, #28]	@ (8004a2c <_write_r+0x20>)
 8004a10:	4604      	mov	r4, r0
 8004a12:	4608      	mov	r0, r1
 8004a14:	4611      	mov	r1, r2
 8004a16:	2200      	movs	r2, #0
 8004a18:	602a      	str	r2, [r5, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f7fd f9d8 	bl	8001dd0 <_write>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_write_r+0x1e>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_write_r+0x1e>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	200002a0 	.word	0x200002a0

08004a30 <__errno>:
 8004a30:	4b01      	ldr	r3, [pc, #4]	@ (8004a38 <__errno+0x8>)
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000018 	.word	0x20000018

08004a3c <__libc_init_array>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a74 <__libc_init_array+0x38>)
 8004a40:	4c0d      	ldr	r4, [pc, #52]	@ (8004a78 <__libc_init_array+0x3c>)
 8004a42:	1b64      	subs	r4, r4, r5
 8004a44:	10a4      	asrs	r4, r4, #2
 8004a46:	2600      	movs	r6, #0
 8004a48:	42a6      	cmp	r6, r4
 8004a4a:	d109      	bne.n	8004a60 <__libc_init_array+0x24>
 8004a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a7c <__libc_init_array+0x40>)
 8004a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a80 <__libc_init_array+0x44>)
 8004a50:	f000 feda 	bl	8005808 <_init>
 8004a54:	1b64      	subs	r4, r4, r5
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	2600      	movs	r6, #0
 8004a5a:	42a6      	cmp	r6, r4
 8004a5c:	d105      	bne.n	8004a6a <__libc_init_array+0x2e>
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a64:	4798      	blx	r3
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7ee      	b.n	8004a48 <__libc_init_array+0xc>
 8004a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6e:	4798      	blx	r3
 8004a70:	3601      	adds	r6, #1
 8004a72:	e7f2      	b.n	8004a5a <__libc_init_array+0x1e>
 8004a74:	08005ab0 	.word	0x08005ab0
 8004a78:	08005ab0 	.word	0x08005ab0
 8004a7c:	08005ab0 	.word	0x08005ab0
 8004a80:	08005ab4 	.word	0x08005ab4

08004a84 <__retarget_lock_init_recursive>:
 8004a84:	4770      	bx	lr

08004a86 <__retarget_lock_acquire_recursive>:
 8004a86:	4770      	bx	lr

08004a88 <__retarget_lock_release_recursive>:
 8004a88:	4770      	bx	lr

08004a8a <memcpy>:
 8004a8a:	440a      	add	r2, r1
 8004a8c:	4291      	cmp	r1, r2
 8004a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a92:	d100      	bne.n	8004a96 <memcpy+0xc>
 8004a94:	4770      	bx	lr
 8004a96:	b510      	push	{r4, lr}
 8004a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aa0:	4291      	cmp	r1, r2
 8004aa2:	d1f9      	bne.n	8004a98 <memcpy+0xe>
 8004aa4:	bd10      	pop	{r4, pc}
	...

08004aa8 <_free_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4605      	mov	r5, r0
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d041      	beq.n	8004b34 <_free_r+0x8c>
 8004ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab4:	1f0c      	subs	r4, r1, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfb8      	it	lt
 8004aba:	18e4      	addlt	r4, r4, r3
 8004abc:	f000 f8e0 	bl	8004c80 <__malloc_lock>
 8004ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <_free_r+0x90>)
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	b933      	cbnz	r3, 8004ad4 <_free_r+0x2c>
 8004ac6:	6063      	str	r3, [r4, #4]
 8004ac8:	6014      	str	r4, [r2, #0]
 8004aca:	4628      	mov	r0, r5
 8004acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad0:	f000 b8dc 	b.w	8004c8c <__malloc_unlock>
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d908      	bls.n	8004aea <_free_r+0x42>
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	1821      	adds	r1, r4, r0
 8004adc:	428b      	cmp	r3, r1
 8004ade:	bf01      	itttt	eq
 8004ae0:	6819      	ldreq	r1, [r3, #0]
 8004ae2:	685b      	ldreq	r3, [r3, #4]
 8004ae4:	1809      	addeq	r1, r1, r0
 8004ae6:	6021      	streq	r1, [r4, #0]
 8004ae8:	e7ed      	b.n	8004ac6 <_free_r+0x1e>
 8004aea:	461a      	mov	r2, r3
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	b10b      	cbz	r3, 8004af4 <_free_r+0x4c>
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d9fa      	bls.n	8004aea <_free_r+0x42>
 8004af4:	6811      	ldr	r1, [r2, #0]
 8004af6:	1850      	adds	r0, r2, r1
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d10b      	bne.n	8004b14 <_free_r+0x6c>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	4401      	add	r1, r0
 8004b00:	1850      	adds	r0, r2, r1
 8004b02:	4283      	cmp	r3, r0
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	d1e0      	bne.n	8004aca <_free_r+0x22>
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	6053      	str	r3, [r2, #4]
 8004b0e:	4408      	add	r0, r1
 8004b10:	6010      	str	r0, [r2, #0]
 8004b12:	e7da      	b.n	8004aca <_free_r+0x22>
 8004b14:	d902      	bls.n	8004b1c <_free_r+0x74>
 8004b16:	230c      	movs	r3, #12
 8004b18:	602b      	str	r3, [r5, #0]
 8004b1a:	e7d6      	b.n	8004aca <_free_r+0x22>
 8004b1c:	6820      	ldr	r0, [r4, #0]
 8004b1e:	1821      	adds	r1, r4, r0
 8004b20:	428b      	cmp	r3, r1
 8004b22:	bf04      	itt	eq
 8004b24:	6819      	ldreq	r1, [r3, #0]
 8004b26:	685b      	ldreq	r3, [r3, #4]
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	bf04      	itt	eq
 8004b2c:	1809      	addeq	r1, r1, r0
 8004b2e:	6021      	streq	r1, [r4, #0]
 8004b30:	6054      	str	r4, [r2, #4]
 8004b32:	e7ca      	b.n	8004aca <_free_r+0x22>
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	bf00      	nop
 8004b38:	200002ac 	.word	0x200002ac

08004b3c <sbrk_aligned>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b7c <sbrk_aligned+0x40>)
 8004b40:	460c      	mov	r4, r1
 8004b42:	6831      	ldr	r1, [r6, #0]
 8004b44:	4605      	mov	r5, r0
 8004b46:	b911      	cbnz	r1, 8004b4e <sbrk_aligned+0x12>
 8004b48:	f000 fe18 	bl	800577c <_sbrk_r>
 8004b4c:	6030      	str	r0, [r6, #0]
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fe13 	bl	800577c <_sbrk_r>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	d103      	bne.n	8004b62 <sbrk_aligned+0x26>
 8004b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b5e:	4620      	mov	r0, r4
 8004b60:	bd70      	pop	{r4, r5, r6, pc}
 8004b62:	1cc4      	adds	r4, r0, #3
 8004b64:	f024 0403 	bic.w	r4, r4, #3
 8004b68:	42a0      	cmp	r0, r4
 8004b6a:	d0f8      	beq.n	8004b5e <sbrk_aligned+0x22>
 8004b6c:	1a21      	subs	r1, r4, r0
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 fe04 	bl	800577c <_sbrk_r>
 8004b74:	3001      	adds	r0, #1
 8004b76:	d1f2      	bne.n	8004b5e <sbrk_aligned+0x22>
 8004b78:	e7ef      	b.n	8004b5a <sbrk_aligned+0x1e>
 8004b7a:	bf00      	nop
 8004b7c:	200002a8 	.word	0x200002a8

08004b80 <_malloc_r>:
 8004b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b84:	1ccd      	adds	r5, r1, #3
 8004b86:	f025 0503 	bic.w	r5, r5, #3
 8004b8a:	3508      	adds	r5, #8
 8004b8c:	2d0c      	cmp	r5, #12
 8004b8e:	bf38      	it	cc
 8004b90:	250c      	movcc	r5, #12
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	4606      	mov	r6, r0
 8004b96:	db01      	blt.n	8004b9c <_malloc_r+0x1c>
 8004b98:	42a9      	cmp	r1, r5
 8004b9a:	d904      	bls.n	8004ba6 <_malloc_r+0x26>
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	6033      	str	r3, [r6, #0]
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c7c <_malloc_r+0xfc>
 8004baa:	f000 f869 	bl	8004c80 <__malloc_lock>
 8004bae:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	bb44      	cbnz	r4, 8004c08 <_malloc_r+0x88>
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f7ff ffbf 	bl	8004b3c <sbrk_aligned>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	d158      	bne.n	8004c76 <_malloc_r+0xf6>
 8004bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8004bc8:	4627      	mov	r7, r4
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	d143      	bne.n	8004c56 <_malloc_r+0xd6>
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	d04b      	beq.n	8004c6a <_malloc_r+0xea>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	eb04 0903 	add.w	r9, r4, r3
 8004bdc:	f000 fdce 	bl	800577c <_sbrk_r>
 8004be0:	4581      	cmp	r9, r0
 8004be2:	d142      	bne.n	8004c6a <_malloc_r+0xea>
 8004be4:	6821      	ldr	r1, [r4, #0]
 8004be6:	1a6d      	subs	r5, r5, r1
 8004be8:	4629      	mov	r1, r5
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff ffa6 	bl	8004b3c <sbrk_aligned>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d03a      	beq.n	8004c6a <_malloc_r+0xea>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	442b      	add	r3, r5
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	bb62      	cbnz	r2, 8004c5c <_malloc_r+0xdc>
 8004c02:	f8c8 7000 	str.w	r7, [r8]
 8004c06:	e00f      	b.n	8004c28 <_malloc_r+0xa8>
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	1b52      	subs	r2, r2, r5
 8004c0c:	d420      	bmi.n	8004c50 <_malloc_r+0xd0>
 8004c0e:	2a0b      	cmp	r2, #11
 8004c10:	d917      	bls.n	8004c42 <_malloc_r+0xc2>
 8004c12:	1961      	adds	r1, r4, r5
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	6025      	str	r5, [r4, #0]
 8004c18:	bf18      	it	ne
 8004c1a:	6059      	strne	r1, [r3, #4]
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	bf08      	it	eq
 8004c20:	f8c8 1000 	streq.w	r1, [r8]
 8004c24:	5162      	str	r2, [r4, r5]
 8004c26:	604b      	str	r3, [r1, #4]
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 f82f 	bl	8004c8c <__malloc_unlock>
 8004c2e:	f104 000b 	add.w	r0, r4, #11
 8004c32:	1d23      	adds	r3, r4, #4
 8004c34:	f020 0007 	bic.w	r0, r0, #7
 8004c38:	1ac2      	subs	r2, r0, r3
 8004c3a:	bf1c      	itt	ne
 8004c3c:	1a1b      	subne	r3, r3, r0
 8004c3e:	50a3      	strne	r3, [r4, r2]
 8004c40:	e7af      	b.n	8004ba2 <_malloc_r+0x22>
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	bf0c      	ite	eq
 8004c48:	f8c8 2000 	streq.w	r2, [r8]
 8004c4c:	605a      	strne	r2, [r3, #4]
 8004c4e:	e7eb      	b.n	8004c28 <_malloc_r+0xa8>
 8004c50:	4623      	mov	r3, r4
 8004c52:	6864      	ldr	r4, [r4, #4]
 8004c54:	e7ae      	b.n	8004bb4 <_malloc_r+0x34>
 8004c56:	463c      	mov	r4, r7
 8004c58:	687f      	ldr	r7, [r7, #4]
 8004c5a:	e7b6      	b.n	8004bca <_malloc_r+0x4a>
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	d1fb      	bne.n	8004c5c <_malloc_r+0xdc>
 8004c64:	2300      	movs	r3, #0
 8004c66:	6053      	str	r3, [r2, #4]
 8004c68:	e7de      	b.n	8004c28 <_malloc_r+0xa8>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 f80c 	bl	8004c8c <__malloc_unlock>
 8004c74:	e794      	b.n	8004ba0 <_malloc_r+0x20>
 8004c76:	6005      	str	r5, [r0, #0]
 8004c78:	e7d6      	b.n	8004c28 <_malloc_r+0xa8>
 8004c7a:	bf00      	nop
 8004c7c:	200002ac 	.word	0x200002ac

08004c80 <__malloc_lock>:
 8004c80:	4801      	ldr	r0, [pc, #4]	@ (8004c88 <__malloc_lock+0x8>)
 8004c82:	f7ff bf00 	b.w	8004a86 <__retarget_lock_acquire_recursive>
 8004c86:	bf00      	nop
 8004c88:	200002a4 	.word	0x200002a4

08004c8c <__malloc_unlock>:
 8004c8c:	4801      	ldr	r0, [pc, #4]	@ (8004c94 <__malloc_unlock+0x8>)
 8004c8e:	f7ff befb 	b.w	8004a88 <__retarget_lock_release_recursive>
 8004c92:	bf00      	nop
 8004c94:	200002a4 	.word	0x200002a4

08004c98 <__ssputs_r>:
 8004c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	688e      	ldr	r6, [r1, #8]
 8004c9e:	461f      	mov	r7, r3
 8004ca0:	42be      	cmp	r6, r7
 8004ca2:	680b      	ldr	r3, [r1, #0]
 8004ca4:	4682      	mov	sl, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	4690      	mov	r8, r2
 8004caa:	d82d      	bhi.n	8004d08 <__ssputs_r+0x70>
 8004cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cb4:	d026      	beq.n	8004d04 <__ssputs_r+0x6c>
 8004cb6:	6965      	ldr	r5, [r4, #20]
 8004cb8:	6909      	ldr	r1, [r1, #16]
 8004cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cbe:	eba3 0901 	sub.w	r9, r3, r1
 8004cc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cc6:	1c7b      	adds	r3, r7, #1
 8004cc8:	444b      	add	r3, r9
 8004cca:	106d      	asrs	r5, r5, #1
 8004ccc:	429d      	cmp	r5, r3
 8004cce:	bf38      	it	cc
 8004cd0:	461d      	movcc	r5, r3
 8004cd2:	0553      	lsls	r3, r2, #21
 8004cd4:	d527      	bpl.n	8004d26 <__ssputs_r+0x8e>
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	f7ff ff52 	bl	8004b80 <_malloc_r>
 8004cdc:	4606      	mov	r6, r0
 8004cde:	b360      	cbz	r0, 8004d3a <__ssputs_r+0xa2>
 8004ce0:	6921      	ldr	r1, [r4, #16]
 8004ce2:	464a      	mov	r2, r9
 8004ce4:	f7ff fed1 	bl	8004a8a <memcpy>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	6126      	str	r6, [r4, #16]
 8004cf6:	6165      	str	r5, [r4, #20]
 8004cf8:	444e      	add	r6, r9
 8004cfa:	eba5 0509 	sub.w	r5, r5, r9
 8004cfe:	6026      	str	r6, [r4, #0]
 8004d00:	60a5      	str	r5, [r4, #8]
 8004d02:	463e      	mov	r6, r7
 8004d04:	42be      	cmp	r6, r7
 8004d06:	d900      	bls.n	8004d0a <__ssputs_r+0x72>
 8004d08:	463e      	mov	r6, r7
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	4641      	mov	r1, r8
 8004d10:	f000 fcf8 	bl	8005704 <memmove>
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	1b9b      	subs	r3, r3, r6
 8004d18:	60a3      	str	r3, [r4, #8]
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	4433      	add	r3, r6
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	2000      	movs	r0, #0
 8004d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d26:	462a      	mov	r2, r5
 8004d28:	f000 fd38 	bl	800579c <_realloc_r>
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d1e0      	bne.n	8004cf4 <__ssputs_r+0x5c>
 8004d32:	6921      	ldr	r1, [r4, #16]
 8004d34:	4650      	mov	r0, sl
 8004d36:	f7ff feb7 	bl	8004aa8 <_free_r>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	f8ca 3000 	str.w	r3, [sl]
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	e7e9      	b.n	8004d22 <__ssputs_r+0x8a>
	...

08004d50 <_svfiprintf_r>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	4698      	mov	r8, r3
 8004d56:	898b      	ldrh	r3, [r1, #12]
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	b09d      	sub	sp, #116	@ 0x74
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	460d      	mov	r5, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	d510      	bpl.n	8004d86 <_svfiprintf_r+0x36>
 8004d64:	690b      	ldr	r3, [r1, #16]
 8004d66:	b973      	cbnz	r3, 8004d86 <_svfiprintf_r+0x36>
 8004d68:	2140      	movs	r1, #64	@ 0x40
 8004d6a:	f7ff ff09 	bl	8004b80 <_malloc_r>
 8004d6e:	6028      	str	r0, [r5, #0]
 8004d70:	6128      	str	r0, [r5, #16]
 8004d72:	b930      	cbnz	r0, 8004d82 <_svfiprintf_r+0x32>
 8004d74:	230c      	movs	r3, #12
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	b01d      	add	sp, #116	@ 0x74
 8004d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d82:	2340      	movs	r3, #64	@ 0x40
 8004d84:	616b      	str	r3, [r5, #20]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d94:	2330      	movs	r3, #48	@ 0x30
 8004d96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f34 <_svfiprintf_r+0x1e4>
 8004d9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d9e:	f04f 0901 	mov.w	r9, #1
 8004da2:	4623      	mov	r3, r4
 8004da4:	469a      	mov	sl, r3
 8004da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004daa:	b10a      	cbz	r2, 8004db0 <_svfiprintf_r+0x60>
 8004dac:	2a25      	cmp	r2, #37	@ 0x25
 8004dae:	d1f9      	bne.n	8004da4 <_svfiprintf_r+0x54>
 8004db0:	ebba 0b04 	subs.w	fp, sl, r4
 8004db4:	d00b      	beq.n	8004dce <_svfiprintf_r+0x7e>
 8004db6:	465b      	mov	r3, fp
 8004db8:	4622      	mov	r2, r4
 8004dba:	4629      	mov	r1, r5
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	f7ff ff6b 	bl	8004c98 <__ssputs_r>
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f000 80a7 	beq.w	8004f16 <_svfiprintf_r+0x1c6>
 8004dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dca:	445a      	add	r2, fp
 8004dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dce:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 809f 	beq.w	8004f16 <_svfiprintf_r+0x1c6>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f04f 32ff 	mov.w	r2, #4294967295
 8004dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004de2:	f10a 0a01 	add.w	sl, sl, #1
 8004de6:	9304      	str	r3, [sp, #16]
 8004de8:	9307      	str	r3, [sp, #28]
 8004dea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dee:	931a      	str	r3, [sp, #104]	@ 0x68
 8004df0:	4654      	mov	r4, sl
 8004df2:	2205      	movs	r2, #5
 8004df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df8:	484e      	ldr	r0, [pc, #312]	@ (8004f34 <_svfiprintf_r+0x1e4>)
 8004dfa:	f7fb f9f9 	bl	80001f0 <memchr>
 8004dfe:	9a04      	ldr	r2, [sp, #16]
 8004e00:	b9d8      	cbnz	r0, 8004e3a <_svfiprintf_r+0xea>
 8004e02:	06d0      	lsls	r0, r2, #27
 8004e04:	bf44      	itt	mi
 8004e06:	2320      	movmi	r3, #32
 8004e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e0c:	0711      	lsls	r1, r2, #28
 8004e0e:	bf44      	itt	mi
 8004e10:	232b      	movmi	r3, #43	@ 0x2b
 8004e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e16:	f89a 3000 	ldrb.w	r3, [sl]
 8004e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e1c:	d015      	beq.n	8004e4a <_svfiprintf_r+0xfa>
 8004e1e:	9a07      	ldr	r2, [sp, #28]
 8004e20:	4654      	mov	r4, sl
 8004e22:	2000      	movs	r0, #0
 8004e24:	f04f 0c0a 	mov.w	ip, #10
 8004e28:	4621      	mov	r1, r4
 8004e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e2e:	3b30      	subs	r3, #48	@ 0x30
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	d94b      	bls.n	8004ecc <_svfiprintf_r+0x17c>
 8004e34:	b1b0      	cbz	r0, 8004e64 <_svfiprintf_r+0x114>
 8004e36:	9207      	str	r2, [sp, #28]
 8004e38:	e014      	b.n	8004e64 <_svfiprintf_r+0x114>
 8004e3a:	eba0 0308 	sub.w	r3, r0, r8
 8004e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e42:	4313      	orrs	r3, r2
 8004e44:	9304      	str	r3, [sp, #16]
 8004e46:	46a2      	mov	sl, r4
 8004e48:	e7d2      	b.n	8004df0 <_svfiprintf_r+0xa0>
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	1d19      	adds	r1, r3, #4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	9103      	str	r1, [sp, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfbb      	ittet	lt
 8004e56:	425b      	neglt	r3, r3
 8004e58:	f042 0202 	orrlt.w	r2, r2, #2
 8004e5c:	9307      	strge	r3, [sp, #28]
 8004e5e:	9307      	strlt	r3, [sp, #28]
 8004e60:	bfb8      	it	lt
 8004e62:	9204      	strlt	r2, [sp, #16]
 8004e64:	7823      	ldrb	r3, [r4, #0]
 8004e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e68:	d10a      	bne.n	8004e80 <_svfiprintf_r+0x130>
 8004e6a:	7863      	ldrb	r3, [r4, #1]
 8004e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e6e:	d132      	bne.n	8004ed6 <_svfiprintf_r+0x186>
 8004e70:	9b03      	ldr	r3, [sp, #12]
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	9203      	str	r2, [sp, #12]
 8004e78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e7c:	3402      	adds	r4, #2
 8004e7e:	9305      	str	r3, [sp, #20]
 8004e80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f44 <_svfiprintf_r+0x1f4>
 8004e84:	7821      	ldrb	r1, [r4, #0]
 8004e86:	2203      	movs	r2, #3
 8004e88:	4650      	mov	r0, sl
 8004e8a:	f7fb f9b1 	bl	80001f0 <memchr>
 8004e8e:	b138      	cbz	r0, 8004ea0 <_svfiprintf_r+0x150>
 8004e90:	9b04      	ldr	r3, [sp, #16]
 8004e92:	eba0 000a 	sub.w	r0, r0, sl
 8004e96:	2240      	movs	r2, #64	@ 0x40
 8004e98:	4082      	lsls	r2, r0
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	3401      	adds	r4, #1
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea4:	4824      	ldr	r0, [pc, #144]	@ (8004f38 <_svfiprintf_r+0x1e8>)
 8004ea6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eaa:	2206      	movs	r2, #6
 8004eac:	f7fb f9a0 	bl	80001f0 <memchr>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d036      	beq.n	8004f22 <_svfiprintf_r+0x1d2>
 8004eb4:	4b21      	ldr	r3, [pc, #132]	@ (8004f3c <_svfiprintf_r+0x1ec>)
 8004eb6:	bb1b      	cbnz	r3, 8004f00 <_svfiprintf_r+0x1b0>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	3307      	adds	r3, #7
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	9303      	str	r3, [sp, #12]
 8004ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec6:	4433      	add	r3, r6
 8004ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eca:	e76a      	b.n	8004da2 <_svfiprintf_r+0x52>
 8004ecc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	e7a8      	b.n	8004e28 <_svfiprintf_r+0xd8>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	3401      	adds	r4, #1
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	4619      	mov	r1, r3
 8004ede:	f04f 0c0a 	mov.w	ip, #10
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee8:	3a30      	subs	r2, #48	@ 0x30
 8004eea:	2a09      	cmp	r2, #9
 8004eec:	d903      	bls.n	8004ef6 <_svfiprintf_r+0x1a6>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0c6      	beq.n	8004e80 <_svfiprintf_r+0x130>
 8004ef2:	9105      	str	r1, [sp, #20]
 8004ef4:	e7c4      	b.n	8004e80 <_svfiprintf_r+0x130>
 8004ef6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004efa:	4604      	mov	r4, r0
 8004efc:	2301      	movs	r3, #1
 8004efe:	e7f0      	b.n	8004ee2 <_svfiprintf_r+0x192>
 8004f00:	ab03      	add	r3, sp, #12
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	462a      	mov	r2, r5
 8004f06:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <_svfiprintf_r+0x1f0>)
 8004f08:	a904      	add	r1, sp, #16
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f3af 8000 	nop.w
 8004f10:	1c42      	adds	r2, r0, #1
 8004f12:	4606      	mov	r6, r0
 8004f14:	d1d6      	bne.n	8004ec4 <_svfiprintf_r+0x174>
 8004f16:	89ab      	ldrh	r3, [r5, #12]
 8004f18:	065b      	lsls	r3, r3, #25
 8004f1a:	f53f af2d 	bmi.w	8004d78 <_svfiprintf_r+0x28>
 8004f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f20:	e72c      	b.n	8004d7c <_svfiprintf_r+0x2c>
 8004f22:	ab03      	add	r3, sp, #12
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	462a      	mov	r2, r5
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <_svfiprintf_r+0x1f0>)
 8004f2a:	a904      	add	r1, sp, #16
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f000 f9bb 	bl	80052a8 <_printf_i>
 8004f32:	e7ed      	b.n	8004f10 <_svfiprintf_r+0x1c0>
 8004f34:	08005a74 	.word	0x08005a74
 8004f38:	08005a7e 	.word	0x08005a7e
 8004f3c:	00000000 	.word	0x00000000
 8004f40:	08004c99 	.word	0x08004c99
 8004f44:	08005a7a 	.word	0x08005a7a

08004f48 <__sfputc_r>:
 8004f48:	6893      	ldr	r3, [r2, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	b410      	push	{r4}
 8004f50:	6093      	str	r3, [r2, #8]
 8004f52:	da08      	bge.n	8004f66 <__sfputc_r+0x1e>
 8004f54:	6994      	ldr	r4, [r2, #24]
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	db01      	blt.n	8004f5e <__sfputc_r+0x16>
 8004f5a:	290a      	cmp	r1, #10
 8004f5c:	d103      	bne.n	8004f66 <__sfputc_r+0x1e>
 8004f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f62:	f7ff bc82 	b.w	800486a <__swbuf_r>
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	1c58      	adds	r0, r3, #1
 8004f6a:	6010      	str	r0, [r2, #0]
 8004f6c:	7019      	strb	r1, [r3, #0]
 8004f6e:	4608      	mov	r0, r1
 8004f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <__sfputs_r>:
 8004f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f78:	4606      	mov	r6, r0
 8004f7a:	460f      	mov	r7, r1
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	18d5      	adds	r5, r2, r3
 8004f80:	42ac      	cmp	r4, r5
 8004f82:	d101      	bne.n	8004f88 <__sfputs_r+0x12>
 8004f84:	2000      	movs	r0, #0
 8004f86:	e007      	b.n	8004f98 <__sfputs_r+0x22>
 8004f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8c:	463a      	mov	r2, r7
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff ffda 	bl	8004f48 <__sfputc_r>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d1f3      	bne.n	8004f80 <__sfputs_r+0xa>
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f9c <_vfiprintf_r>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	b09d      	sub	sp, #116	@ 0x74
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	4698      	mov	r8, r3
 8004fa8:	4606      	mov	r6, r0
 8004faa:	b118      	cbz	r0, 8004fb4 <_vfiprintf_r+0x18>
 8004fac:	6a03      	ldr	r3, [r0, #32]
 8004fae:	b90b      	cbnz	r3, 8004fb4 <_vfiprintf_r+0x18>
 8004fb0:	f7ff fb52 	bl	8004658 <__sinit>
 8004fb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fb6:	07d9      	lsls	r1, r3, #31
 8004fb8:	d405      	bmi.n	8004fc6 <_vfiprintf_r+0x2a>
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	059a      	lsls	r2, r3, #22
 8004fbe:	d402      	bmi.n	8004fc6 <_vfiprintf_r+0x2a>
 8004fc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fc2:	f7ff fd60 	bl	8004a86 <__retarget_lock_acquire_recursive>
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	071b      	lsls	r3, r3, #28
 8004fca:	d501      	bpl.n	8004fd0 <_vfiprintf_r+0x34>
 8004fcc:	692b      	ldr	r3, [r5, #16]
 8004fce:	b99b      	cbnz	r3, 8004ff8 <_vfiprintf_r+0x5c>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7ff fc88 	bl	80048e8 <__swsetup_r>
 8004fd8:	b170      	cbz	r0, 8004ff8 <_vfiprintf_r+0x5c>
 8004fda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fdc:	07dc      	lsls	r4, r3, #31
 8004fde:	d504      	bpl.n	8004fea <_vfiprintf_r+0x4e>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	b01d      	add	sp, #116	@ 0x74
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	0598      	lsls	r0, r3, #22
 8004fee:	d4f7      	bmi.n	8004fe0 <_vfiprintf_r+0x44>
 8004ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ff2:	f7ff fd49 	bl	8004a88 <__retarget_lock_release_recursive>
 8004ff6:	e7f3      	b.n	8004fe0 <_vfiprintf_r+0x44>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffc:	2320      	movs	r3, #32
 8004ffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005002:	f8cd 800c 	str.w	r8, [sp, #12]
 8005006:	2330      	movs	r3, #48	@ 0x30
 8005008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051b8 <_vfiprintf_r+0x21c>
 800500c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005010:	f04f 0901 	mov.w	r9, #1
 8005014:	4623      	mov	r3, r4
 8005016:	469a      	mov	sl, r3
 8005018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800501c:	b10a      	cbz	r2, 8005022 <_vfiprintf_r+0x86>
 800501e:	2a25      	cmp	r2, #37	@ 0x25
 8005020:	d1f9      	bne.n	8005016 <_vfiprintf_r+0x7a>
 8005022:	ebba 0b04 	subs.w	fp, sl, r4
 8005026:	d00b      	beq.n	8005040 <_vfiprintf_r+0xa4>
 8005028:	465b      	mov	r3, fp
 800502a:	4622      	mov	r2, r4
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f7ff ffa1 	bl	8004f76 <__sfputs_r>
 8005034:	3001      	adds	r0, #1
 8005036:	f000 80a7 	beq.w	8005188 <_vfiprintf_r+0x1ec>
 800503a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800503c:	445a      	add	r2, fp
 800503e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005040:	f89a 3000 	ldrb.w	r3, [sl]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 809f 	beq.w	8005188 <_vfiprintf_r+0x1ec>
 800504a:	2300      	movs	r3, #0
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005054:	f10a 0a01 	add.w	sl, sl, #1
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	9307      	str	r3, [sp, #28]
 800505c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005060:	931a      	str	r3, [sp, #104]	@ 0x68
 8005062:	4654      	mov	r4, sl
 8005064:	2205      	movs	r2, #5
 8005066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506a:	4853      	ldr	r0, [pc, #332]	@ (80051b8 <_vfiprintf_r+0x21c>)
 800506c:	f7fb f8c0 	bl	80001f0 <memchr>
 8005070:	9a04      	ldr	r2, [sp, #16]
 8005072:	b9d8      	cbnz	r0, 80050ac <_vfiprintf_r+0x110>
 8005074:	06d1      	lsls	r1, r2, #27
 8005076:	bf44      	itt	mi
 8005078:	2320      	movmi	r3, #32
 800507a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800507e:	0713      	lsls	r3, r2, #28
 8005080:	bf44      	itt	mi
 8005082:	232b      	movmi	r3, #43	@ 0x2b
 8005084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005088:	f89a 3000 	ldrb.w	r3, [sl]
 800508c:	2b2a      	cmp	r3, #42	@ 0x2a
 800508e:	d015      	beq.n	80050bc <_vfiprintf_r+0x120>
 8005090:	9a07      	ldr	r2, [sp, #28]
 8005092:	4654      	mov	r4, sl
 8005094:	2000      	movs	r0, #0
 8005096:	f04f 0c0a 	mov.w	ip, #10
 800509a:	4621      	mov	r1, r4
 800509c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a0:	3b30      	subs	r3, #48	@ 0x30
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d94b      	bls.n	800513e <_vfiprintf_r+0x1a2>
 80050a6:	b1b0      	cbz	r0, 80050d6 <_vfiprintf_r+0x13a>
 80050a8:	9207      	str	r2, [sp, #28]
 80050aa:	e014      	b.n	80050d6 <_vfiprintf_r+0x13a>
 80050ac:	eba0 0308 	sub.w	r3, r0, r8
 80050b0:	fa09 f303 	lsl.w	r3, r9, r3
 80050b4:	4313      	orrs	r3, r2
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	46a2      	mov	sl, r4
 80050ba:	e7d2      	b.n	8005062 <_vfiprintf_r+0xc6>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	1d19      	adds	r1, r3, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	9103      	str	r1, [sp, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bfbb      	ittet	lt
 80050c8:	425b      	neglt	r3, r3
 80050ca:	f042 0202 	orrlt.w	r2, r2, #2
 80050ce:	9307      	strge	r3, [sp, #28]
 80050d0:	9307      	strlt	r3, [sp, #28]
 80050d2:	bfb8      	it	lt
 80050d4:	9204      	strlt	r2, [sp, #16]
 80050d6:	7823      	ldrb	r3, [r4, #0]
 80050d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80050da:	d10a      	bne.n	80050f2 <_vfiprintf_r+0x156>
 80050dc:	7863      	ldrb	r3, [r4, #1]
 80050de:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e0:	d132      	bne.n	8005148 <_vfiprintf_r+0x1ac>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	1d1a      	adds	r2, r3, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	9203      	str	r2, [sp, #12]
 80050ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050ee:	3402      	adds	r4, #2
 80050f0:	9305      	str	r3, [sp, #20]
 80050f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051c8 <_vfiprintf_r+0x22c>
 80050f6:	7821      	ldrb	r1, [r4, #0]
 80050f8:	2203      	movs	r2, #3
 80050fa:	4650      	mov	r0, sl
 80050fc:	f7fb f878 	bl	80001f0 <memchr>
 8005100:	b138      	cbz	r0, 8005112 <_vfiprintf_r+0x176>
 8005102:	9b04      	ldr	r3, [sp, #16]
 8005104:	eba0 000a 	sub.w	r0, r0, sl
 8005108:	2240      	movs	r2, #64	@ 0x40
 800510a:	4082      	lsls	r2, r0
 800510c:	4313      	orrs	r3, r2
 800510e:	3401      	adds	r4, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005116:	4829      	ldr	r0, [pc, #164]	@ (80051bc <_vfiprintf_r+0x220>)
 8005118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800511c:	2206      	movs	r2, #6
 800511e:	f7fb f867 	bl	80001f0 <memchr>
 8005122:	2800      	cmp	r0, #0
 8005124:	d03f      	beq.n	80051a6 <_vfiprintf_r+0x20a>
 8005126:	4b26      	ldr	r3, [pc, #152]	@ (80051c0 <_vfiprintf_r+0x224>)
 8005128:	bb1b      	cbnz	r3, 8005172 <_vfiprintf_r+0x1d6>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	3307      	adds	r3, #7
 800512e:	f023 0307 	bic.w	r3, r3, #7
 8005132:	3308      	adds	r3, #8
 8005134:	9303      	str	r3, [sp, #12]
 8005136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005138:	443b      	add	r3, r7
 800513a:	9309      	str	r3, [sp, #36]	@ 0x24
 800513c:	e76a      	b.n	8005014 <_vfiprintf_r+0x78>
 800513e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005142:	460c      	mov	r4, r1
 8005144:	2001      	movs	r0, #1
 8005146:	e7a8      	b.n	800509a <_vfiprintf_r+0xfe>
 8005148:	2300      	movs	r3, #0
 800514a:	3401      	adds	r4, #1
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	4619      	mov	r1, r3
 8005150:	f04f 0c0a 	mov.w	ip, #10
 8005154:	4620      	mov	r0, r4
 8005156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515a:	3a30      	subs	r2, #48	@ 0x30
 800515c:	2a09      	cmp	r2, #9
 800515e:	d903      	bls.n	8005168 <_vfiprintf_r+0x1cc>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0c6      	beq.n	80050f2 <_vfiprintf_r+0x156>
 8005164:	9105      	str	r1, [sp, #20]
 8005166:	e7c4      	b.n	80050f2 <_vfiprintf_r+0x156>
 8005168:	fb0c 2101 	mla	r1, ip, r1, r2
 800516c:	4604      	mov	r4, r0
 800516e:	2301      	movs	r3, #1
 8005170:	e7f0      	b.n	8005154 <_vfiprintf_r+0x1b8>
 8005172:	ab03      	add	r3, sp, #12
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	462a      	mov	r2, r5
 8005178:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <_vfiprintf_r+0x228>)
 800517a:	a904      	add	r1, sp, #16
 800517c:	4630      	mov	r0, r6
 800517e:	f3af 8000 	nop.w
 8005182:	4607      	mov	r7, r0
 8005184:	1c78      	adds	r0, r7, #1
 8005186:	d1d6      	bne.n	8005136 <_vfiprintf_r+0x19a>
 8005188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800518a:	07d9      	lsls	r1, r3, #31
 800518c:	d405      	bmi.n	800519a <_vfiprintf_r+0x1fe>
 800518e:	89ab      	ldrh	r3, [r5, #12]
 8005190:	059a      	lsls	r2, r3, #22
 8005192:	d402      	bmi.n	800519a <_vfiprintf_r+0x1fe>
 8005194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005196:	f7ff fc77 	bl	8004a88 <__retarget_lock_release_recursive>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	065b      	lsls	r3, r3, #25
 800519e:	f53f af1f 	bmi.w	8004fe0 <_vfiprintf_r+0x44>
 80051a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051a4:	e71e      	b.n	8004fe4 <_vfiprintf_r+0x48>
 80051a6:	ab03      	add	r3, sp, #12
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	462a      	mov	r2, r5
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <_vfiprintf_r+0x228>)
 80051ae:	a904      	add	r1, sp, #16
 80051b0:	4630      	mov	r0, r6
 80051b2:	f000 f879 	bl	80052a8 <_printf_i>
 80051b6:	e7e4      	b.n	8005182 <_vfiprintf_r+0x1e6>
 80051b8:	08005a74 	.word	0x08005a74
 80051bc:	08005a7e 	.word	0x08005a7e
 80051c0:	00000000 	.word	0x00000000
 80051c4:	08004f77 	.word	0x08004f77
 80051c8:	08005a7a 	.word	0x08005a7a

080051cc <_printf_common>:
 80051cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d0:	4616      	mov	r6, r2
 80051d2:	4698      	mov	r8, r3
 80051d4:	688a      	ldr	r2, [r1, #8]
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051dc:	4293      	cmp	r3, r2
 80051de:	bfb8      	it	lt
 80051e0:	4613      	movlt	r3, r2
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051e8:	4607      	mov	r7, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	b10a      	cbz	r2, 80051f2 <_printf_common+0x26>
 80051ee:	3301      	adds	r3, #1
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	0699      	lsls	r1, r3, #26
 80051f6:	bf42      	ittt	mi
 80051f8:	6833      	ldrmi	r3, [r6, #0]
 80051fa:	3302      	addmi	r3, #2
 80051fc:	6033      	strmi	r3, [r6, #0]
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	f015 0506 	ands.w	r5, r5, #6
 8005204:	d106      	bne.n	8005214 <_printf_common+0x48>
 8005206:	f104 0a19 	add.w	sl, r4, #25
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	6832      	ldr	r2, [r6, #0]
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	42ab      	cmp	r3, r5
 8005212:	dc26      	bgt.n	8005262 <_printf_common+0x96>
 8005214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	3b00      	subs	r3, #0
 800521c:	bf18      	it	ne
 800521e:	2301      	movne	r3, #1
 8005220:	0692      	lsls	r2, r2, #26
 8005222:	d42b      	bmi.n	800527c <_printf_common+0xb0>
 8005224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005228:	4641      	mov	r1, r8
 800522a:	4638      	mov	r0, r7
 800522c:	47c8      	blx	r9
 800522e:	3001      	adds	r0, #1
 8005230:	d01e      	beq.n	8005270 <_printf_common+0xa4>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	6922      	ldr	r2, [r4, #16]
 8005236:	f003 0306 	and.w	r3, r3, #6
 800523a:	2b04      	cmp	r3, #4
 800523c:	bf02      	ittt	eq
 800523e:	68e5      	ldreq	r5, [r4, #12]
 8005240:	6833      	ldreq	r3, [r6, #0]
 8005242:	1aed      	subeq	r5, r5, r3
 8005244:	68a3      	ldr	r3, [r4, #8]
 8005246:	bf0c      	ite	eq
 8005248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800524c:	2500      	movne	r5, #0
 800524e:	4293      	cmp	r3, r2
 8005250:	bfc4      	itt	gt
 8005252:	1a9b      	subgt	r3, r3, r2
 8005254:	18ed      	addgt	r5, r5, r3
 8005256:	2600      	movs	r6, #0
 8005258:	341a      	adds	r4, #26
 800525a:	42b5      	cmp	r5, r6
 800525c:	d11a      	bne.n	8005294 <_printf_common+0xc8>
 800525e:	2000      	movs	r0, #0
 8005260:	e008      	b.n	8005274 <_printf_common+0xa8>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4641      	mov	r1, r8
 8005268:	4638      	mov	r0, r7
 800526a:	47c8      	blx	r9
 800526c:	3001      	adds	r0, #1
 800526e:	d103      	bne.n	8005278 <_printf_common+0xac>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	3501      	adds	r5, #1
 800527a:	e7c6      	b.n	800520a <_printf_common+0x3e>
 800527c:	18e1      	adds	r1, r4, r3
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	2030      	movs	r0, #48	@ 0x30
 8005282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005286:	4422      	add	r2, r4
 8005288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800528c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005290:	3302      	adds	r3, #2
 8005292:	e7c7      	b.n	8005224 <_printf_common+0x58>
 8005294:	2301      	movs	r3, #1
 8005296:	4622      	mov	r2, r4
 8005298:	4641      	mov	r1, r8
 800529a:	4638      	mov	r0, r7
 800529c:	47c8      	blx	r9
 800529e:	3001      	adds	r0, #1
 80052a0:	d0e6      	beq.n	8005270 <_printf_common+0xa4>
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7d9      	b.n	800525a <_printf_common+0x8e>
	...

080052a8 <_printf_i>:
 80052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	7e0f      	ldrb	r7, [r1, #24]
 80052ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052b0:	2f78      	cmp	r7, #120	@ 0x78
 80052b2:	4691      	mov	r9, r2
 80052b4:	4680      	mov	r8, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	469a      	mov	sl, r3
 80052ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052be:	d807      	bhi.n	80052d0 <_printf_i+0x28>
 80052c0:	2f62      	cmp	r7, #98	@ 0x62
 80052c2:	d80a      	bhi.n	80052da <_printf_i+0x32>
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	f000 80d2 	beq.w	800546e <_printf_i+0x1c6>
 80052ca:	2f58      	cmp	r7, #88	@ 0x58
 80052cc:	f000 80b9 	beq.w	8005442 <_printf_i+0x19a>
 80052d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052d8:	e03a      	b.n	8005350 <_printf_i+0xa8>
 80052da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052de:	2b15      	cmp	r3, #21
 80052e0:	d8f6      	bhi.n	80052d0 <_printf_i+0x28>
 80052e2:	a101      	add	r1, pc, #4	@ (adr r1, 80052e8 <_printf_i+0x40>)
 80052e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005355 	.word	0x08005355
 80052f0:	080052d1 	.word	0x080052d1
 80052f4:	080052d1 	.word	0x080052d1
 80052f8:	080052d1 	.word	0x080052d1
 80052fc:	080052d1 	.word	0x080052d1
 8005300:	08005355 	.word	0x08005355
 8005304:	080052d1 	.word	0x080052d1
 8005308:	080052d1 	.word	0x080052d1
 800530c:	080052d1 	.word	0x080052d1
 8005310:	080052d1 	.word	0x080052d1
 8005314:	08005455 	.word	0x08005455
 8005318:	0800537f 	.word	0x0800537f
 800531c:	0800540f 	.word	0x0800540f
 8005320:	080052d1 	.word	0x080052d1
 8005324:	080052d1 	.word	0x080052d1
 8005328:	08005477 	.word	0x08005477
 800532c:	080052d1 	.word	0x080052d1
 8005330:	0800537f 	.word	0x0800537f
 8005334:	080052d1 	.word	0x080052d1
 8005338:	080052d1 	.word	0x080052d1
 800533c:	08005417 	.word	0x08005417
 8005340:	6833      	ldr	r3, [r6, #0]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6032      	str	r2, [r6, #0]
 8005348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800534c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005350:	2301      	movs	r3, #1
 8005352:	e09d      	b.n	8005490 <_printf_i+0x1e8>
 8005354:	6833      	ldr	r3, [r6, #0]
 8005356:	6820      	ldr	r0, [r4, #0]
 8005358:	1d19      	adds	r1, r3, #4
 800535a:	6031      	str	r1, [r6, #0]
 800535c:	0606      	lsls	r6, r0, #24
 800535e:	d501      	bpl.n	8005364 <_printf_i+0xbc>
 8005360:	681d      	ldr	r5, [r3, #0]
 8005362:	e003      	b.n	800536c <_printf_i+0xc4>
 8005364:	0645      	lsls	r5, r0, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0xb8>
 8005368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800536c:	2d00      	cmp	r5, #0
 800536e:	da03      	bge.n	8005378 <_printf_i+0xd0>
 8005370:	232d      	movs	r3, #45	@ 0x2d
 8005372:	426d      	negs	r5, r5
 8005374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005378:	4859      	ldr	r0, [pc, #356]	@ (80054e0 <_printf_i+0x238>)
 800537a:	230a      	movs	r3, #10
 800537c:	e011      	b.n	80053a2 <_printf_i+0xfa>
 800537e:	6821      	ldr	r1, [r4, #0]
 8005380:	6833      	ldr	r3, [r6, #0]
 8005382:	0608      	lsls	r0, r1, #24
 8005384:	f853 5b04 	ldr.w	r5, [r3], #4
 8005388:	d402      	bmi.n	8005390 <_printf_i+0xe8>
 800538a:	0649      	lsls	r1, r1, #25
 800538c:	bf48      	it	mi
 800538e:	b2ad      	uxthmi	r5, r5
 8005390:	2f6f      	cmp	r7, #111	@ 0x6f
 8005392:	4853      	ldr	r0, [pc, #332]	@ (80054e0 <_printf_i+0x238>)
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	bf14      	ite	ne
 8005398:	230a      	movne	r3, #10
 800539a:	2308      	moveq	r3, #8
 800539c:	2100      	movs	r1, #0
 800539e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053a2:	6866      	ldr	r6, [r4, #4]
 80053a4:	60a6      	str	r6, [r4, #8]
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	bfa2      	ittt	ge
 80053aa:	6821      	ldrge	r1, [r4, #0]
 80053ac:	f021 0104 	bicge.w	r1, r1, #4
 80053b0:	6021      	strge	r1, [r4, #0]
 80053b2:	b90d      	cbnz	r5, 80053b8 <_printf_i+0x110>
 80053b4:	2e00      	cmp	r6, #0
 80053b6:	d04b      	beq.n	8005450 <_printf_i+0x1a8>
 80053b8:	4616      	mov	r6, r2
 80053ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80053be:	fb03 5711 	mls	r7, r3, r1, r5
 80053c2:	5dc7      	ldrb	r7, [r0, r7]
 80053c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053c8:	462f      	mov	r7, r5
 80053ca:	42bb      	cmp	r3, r7
 80053cc:	460d      	mov	r5, r1
 80053ce:	d9f4      	bls.n	80053ba <_printf_i+0x112>
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d10b      	bne.n	80053ec <_printf_i+0x144>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	07df      	lsls	r7, r3, #31
 80053d8:	d508      	bpl.n	80053ec <_printf_i+0x144>
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	6861      	ldr	r1, [r4, #4]
 80053de:	4299      	cmp	r1, r3
 80053e0:	bfde      	ittt	le
 80053e2:	2330      	movle	r3, #48	@ 0x30
 80053e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053ec:	1b92      	subs	r2, r2, r6
 80053ee:	6122      	str	r2, [r4, #16]
 80053f0:	f8cd a000 	str.w	sl, [sp]
 80053f4:	464b      	mov	r3, r9
 80053f6:	aa03      	add	r2, sp, #12
 80053f8:	4621      	mov	r1, r4
 80053fa:	4640      	mov	r0, r8
 80053fc:	f7ff fee6 	bl	80051cc <_printf_common>
 8005400:	3001      	adds	r0, #1
 8005402:	d14a      	bne.n	800549a <_printf_i+0x1f2>
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	b004      	add	sp, #16
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	4833      	ldr	r0, [pc, #204]	@ (80054e4 <_printf_i+0x23c>)
 8005418:	2778      	movs	r7, #120	@ 0x78
 800541a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	6831      	ldr	r1, [r6, #0]
 8005422:	061f      	lsls	r7, r3, #24
 8005424:	f851 5b04 	ldr.w	r5, [r1], #4
 8005428:	d402      	bmi.n	8005430 <_printf_i+0x188>
 800542a:	065f      	lsls	r7, r3, #25
 800542c:	bf48      	it	mi
 800542e:	b2ad      	uxthmi	r5, r5
 8005430:	6031      	str	r1, [r6, #0]
 8005432:	07d9      	lsls	r1, r3, #31
 8005434:	bf44      	itt	mi
 8005436:	f043 0320 	orrmi.w	r3, r3, #32
 800543a:	6023      	strmi	r3, [r4, #0]
 800543c:	b11d      	cbz	r5, 8005446 <_printf_i+0x19e>
 800543e:	2310      	movs	r3, #16
 8005440:	e7ac      	b.n	800539c <_printf_i+0xf4>
 8005442:	4827      	ldr	r0, [pc, #156]	@ (80054e0 <_printf_i+0x238>)
 8005444:	e7e9      	b.n	800541a <_printf_i+0x172>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f023 0320 	bic.w	r3, r3, #32
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	e7f6      	b.n	800543e <_printf_i+0x196>
 8005450:	4616      	mov	r6, r2
 8005452:	e7bd      	b.n	80053d0 <_printf_i+0x128>
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	6825      	ldr	r5, [r4, #0]
 8005458:	6961      	ldr	r1, [r4, #20]
 800545a:	1d18      	adds	r0, r3, #4
 800545c:	6030      	str	r0, [r6, #0]
 800545e:	062e      	lsls	r6, r5, #24
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	d501      	bpl.n	8005468 <_printf_i+0x1c0>
 8005464:	6019      	str	r1, [r3, #0]
 8005466:	e002      	b.n	800546e <_printf_i+0x1c6>
 8005468:	0668      	lsls	r0, r5, #25
 800546a:	d5fb      	bpl.n	8005464 <_printf_i+0x1bc>
 800546c:	8019      	strh	r1, [r3, #0]
 800546e:	2300      	movs	r3, #0
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	4616      	mov	r6, r2
 8005474:	e7bc      	b.n	80053f0 <_printf_i+0x148>
 8005476:	6833      	ldr	r3, [r6, #0]
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	6032      	str	r2, [r6, #0]
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	6862      	ldr	r2, [r4, #4]
 8005480:	2100      	movs	r1, #0
 8005482:	4630      	mov	r0, r6
 8005484:	f7fa feb4 	bl	80001f0 <memchr>
 8005488:	b108      	cbz	r0, 800548e <_printf_i+0x1e6>
 800548a:	1b80      	subs	r0, r0, r6
 800548c:	6060      	str	r0, [r4, #4]
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	2300      	movs	r3, #0
 8005494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005498:	e7aa      	b.n	80053f0 <_printf_i+0x148>
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	4632      	mov	r2, r6
 800549e:	4649      	mov	r1, r9
 80054a0:	4640      	mov	r0, r8
 80054a2:	47d0      	blx	sl
 80054a4:	3001      	adds	r0, #1
 80054a6:	d0ad      	beq.n	8005404 <_printf_i+0x15c>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	079b      	lsls	r3, r3, #30
 80054ac:	d413      	bmi.n	80054d6 <_printf_i+0x22e>
 80054ae:	68e0      	ldr	r0, [r4, #12]
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	4298      	cmp	r0, r3
 80054b4:	bfb8      	it	lt
 80054b6:	4618      	movlt	r0, r3
 80054b8:	e7a6      	b.n	8005408 <_printf_i+0x160>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4632      	mov	r2, r6
 80054be:	4649      	mov	r1, r9
 80054c0:	4640      	mov	r0, r8
 80054c2:	47d0      	blx	sl
 80054c4:	3001      	adds	r0, #1
 80054c6:	d09d      	beq.n	8005404 <_printf_i+0x15c>
 80054c8:	3501      	adds	r5, #1
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	9903      	ldr	r1, [sp, #12]
 80054ce:	1a5b      	subs	r3, r3, r1
 80054d0:	42ab      	cmp	r3, r5
 80054d2:	dcf2      	bgt.n	80054ba <_printf_i+0x212>
 80054d4:	e7eb      	b.n	80054ae <_printf_i+0x206>
 80054d6:	2500      	movs	r5, #0
 80054d8:	f104 0619 	add.w	r6, r4, #25
 80054dc:	e7f5      	b.n	80054ca <_printf_i+0x222>
 80054de:	bf00      	nop
 80054e0:	08005a85 	.word	0x08005a85
 80054e4:	08005a96 	.word	0x08005a96

080054e8 <__sflush_r>:
 80054e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	0716      	lsls	r6, r2, #28
 80054f2:	4605      	mov	r5, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	d454      	bmi.n	80055a2 <__sflush_r+0xba>
 80054f8:	684b      	ldr	r3, [r1, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dc02      	bgt.n	8005504 <__sflush_r+0x1c>
 80054fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	dd48      	ble.n	8005596 <__sflush_r+0xae>
 8005504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005506:	2e00      	cmp	r6, #0
 8005508:	d045      	beq.n	8005596 <__sflush_r+0xae>
 800550a:	2300      	movs	r3, #0
 800550c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005510:	682f      	ldr	r7, [r5, #0]
 8005512:	6a21      	ldr	r1, [r4, #32]
 8005514:	602b      	str	r3, [r5, #0]
 8005516:	d030      	beq.n	800557a <__sflush_r+0x92>
 8005518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	0759      	lsls	r1, r3, #29
 800551e:	d505      	bpl.n	800552c <__sflush_r+0x44>
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	1ad2      	subs	r2, r2, r3
 8005524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005526:	b10b      	cbz	r3, 800552c <__sflush_r+0x44>
 8005528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800552a:	1ad2      	subs	r2, r2, r3
 800552c:	2300      	movs	r3, #0
 800552e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005530:	6a21      	ldr	r1, [r4, #32]
 8005532:	4628      	mov	r0, r5
 8005534:	47b0      	blx	r6
 8005536:	1c43      	adds	r3, r0, #1
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	d106      	bne.n	800554a <__sflush_r+0x62>
 800553c:	6829      	ldr	r1, [r5, #0]
 800553e:	291d      	cmp	r1, #29
 8005540:	d82b      	bhi.n	800559a <__sflush_r+0xb2>
 8005542:	4a2a      	ldr	r2, [pc, #168]	@ (80055ec <__sflush_r+0x104>)
 8005544:	410a      	asrs	r2, r1
 8005546:	07d6      	lsls	r6, r2, #31
 8005548:	d427      	bmi.n	800559a <__sflush_r+0xb2>
 800554a:	2200      	movs	r2, #0
 800554c:	6062      	str	r2, [r4, #4]
 800554e:	04d9      	lsls	r1, r3, #19
 8005550:	6922      	ldr	r2, [r4, #16]
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	d504      	bpl.n	8005560 <__sflush_r+0x78>
 8005556:	1c42      	adds	r2, r0, #1
 8005558:	d101      	bne.n	800555e <__sflush_r+0x76>
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	b903      	cbnz	r3, 8005560 <__sflush_r+0x78>
 800555e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005562:	602f      	str	r7, [r5, #0]
 8005564:	b1b9      	cbz	r1, 8005596 <__sflush_r+0xae>
 8005566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800556a:	4299      	cmp	r1, r3
 800556c:	d002      	beq.n	8005574 <__sflush_r+0x8c>
 800556e:	4628      	mov	r0, r5
 8005570:	f7ff fa9a 	bl	8004aa8 <_free_r>
 8005574:	2300      	movs	r3, #0
 8005576:	6363      	str	r3, [r4, #52]	@ 0x34
 8005578:	e00d      	b.n	8005596 <__sflush_r+0xae>
 800557a:	2301      	movs	r3, #1
 800557c:	4628      	mov	r0, r5
 800557e:	47b0      	blx	r6
 8005580:	4602      	mov	r2, r0
 8005582:	1c50      	adds	r0, r2, #1
 8005584:	d1c9      	bne.n	800551a <__sflush_r+0x32>
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0c6      	beq.n	800551a <__sflush_r+0x32>
 800558c:	2b1d      	cmp	r3, #29
 800558e:	d001      	beq.n	8005594 <__sflush_r+0xac>
 8005590:	2b16      	cmp	r3, #22
 8005592:	d11e      	bne.n	80055d2 <__sflush_r+0xea>
 8005594:	602f      	str	r7, [r5, #0]
 8005596:	2000      	movs	r0, #0
 8005598:	e022      	b.n	80055e0 <__sflush_r+0xf8>
 800559a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559e:	b21b      	sxth	r3, r3
 80055a0:	e01b      	b.n	80055da <__sflush_r+0xf2>
 80055a2:	690f      	ldr	r7, [r1, #16]
 80055a4:	2f00      	cmp	r7, #0
 80055a6:	d0f6      	beq.n	8005596 <__sflush_r+0xae>
 80055a8:	0793      	lsls	r3, r2, #30
 80055aa:	680e      	ldr	r6, [r1, #0]
 80055ac:	bf08      	it	eq
 80055ae:	694b      	ldreq	r3, [r1, #20]
 80055b0:	600f      	str	r7, [r1, #0]
 80055b2:	bf18      	it	ne
 80055b4:	2300      	movne	r3, #0
 80055b6:	eba6 0807 	sub.w	r8, r6, r7
 80055ba:	608b      	str	r3, [r1, #8]
 80055bc:	f1b8 0f00 	cmp.w	r8, #0
 80055c0:	dde9      	ble.n	8005596 <__sflush_r+0xae>
 80055c2:	6a21      	ldr	r1, [r4, #32]
 80055c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055c6:	4643      	mov	r3, r8
 80055c8:	463a      	mov	r2, r7
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b0      	blx	r6
 80055ce:	2800      	cmp	r0, #0
 80055d0:	dc08      	bgt.n	80055e4 <__sflush_r+0xfc>
 80055d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e4:	4407      	add	r7, r0
 80055e6:	eba8 0800 	sub.w	r8, r8, r0
 80055ea:	e7e7      	b.n	80055bc <__sflush_r+0xd4>
 80055ec:	dfbffffe 	.word	0xdfbffffe

080055f0 <_fflush_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	690b      	ldr	r3, [r1, #16]
 80055f4:	4605      	mov	r5, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	b913      	cbnz	r3, 8005600 <_fflush_r+0x10>
 80055fa:	2500      	movs	r5, #0
 80055fc:	4628      	mov	r0, r5
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	b118      	cbz	r0, 800560a <_fflush_r+0x1a>
 8005602:	6a03      	ldr	r3, [r0, #32]
 8005604:	b90b      	cbnz	r3, 800560a <_fflush_r+0x1a>
 8005606:	f7ff f827 	bl	8004658 <__sinit>
 800560a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f3      	beq.n	80055fa <_fflush_r+0xa>
 8005612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005614:	07d0      	lsls	r0, r2, #31
 8005616:	d404      	bmi.n	8005622 <_fflush_r+0x32>
 8005618:	0599      	lsls	r1, r3, #22
 800561a:	d402      	bmi.n	8005622 <_fflush_r+0x32>
 800561c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800561e:	f7ff fa32 	bl	8004a86 <__retarget_lock_acquire_recursive>
 8005622:	4628      	mov	r0, r5
 8005624:	4621      	mov	r1, r4
 8005626:	f7ff ff5f 	bl	80054e8 <__sflush_r>
 800562a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800562c:	07da      	lsls	r2, r3, #31
 800562e:	4605      	mov	r5, r0
 8005630:	d4e4      	bmi.n	80055fc <_fflush_r+0xc>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	059b      	lsls	r3, r3, #22
 8005636:	d4e1      	bmi.n	80055fc <_fflush_r+0xc>
 8005638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800563a:	f7ff fa25 	bl	8004a88 <__retarget_lock_release_recursive>
 800563e:	e7dd      	b.n	80055fc <_fflush_r+0xc>

08005640 <__swhatbuf_r>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	2900      	cmp	r1, #0
 800564a:	b096      	sub	sp, #88	@ 0x58
 800564c:	4615      	mov	r5, r2
 800564e:	461e      	mov	r6, r3
 8005650:	da0d      	bge.n	800566e <__swhatbuf_r+0x2e>
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005658:	f04f 0100 	mov.w	r1, #0
 800565c:	bf14      	ite	ne
 800565e:	2340      	movne	r3, #64	@ 0x40
 8005660:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005664:	2000      	movs	r0, #0
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	b016      	add	sp, #88	@ 0x58
 800566c:	bd70      	pop	{r4, r5, r6, pc}
 800566e:	466a      	mov	r2, sp
 8005670:	f000 f862 	bl	8005738 <_fstat_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	dbec      	blt.n	8005652 <__swhatbuf_r+0x12>
 8005678:	9901      	ldr	r1, [sp, #4]
 800567a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800567e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005682:	4259      	negs	r1, r3
 8005684:	4159      	adcs	r1, r3
 8005686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800568a:	e7eb      	b.n	8005664 <__swhatbuf_r+0x24>

0800568c <__smakebuf_r>:
 800568c:	898b      	ldrh	r3, [r1, #12]
 800568e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005690:	079d      	lsls	r5, r3, #30
 8005692:	4606      	mov	r6, r0
 8005694:	460c      	mov	r4, r1
 8005696:	d507      	bpl.n	80056a8 <__smakebuf_r+0x1c>
 8005698:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	2301      	movs	r3, #1
 80056a2:	6163      	str	r3, [r4, #20]
 80056a4:	b003      	add	sp, #12
 80056a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a8:	ab01      	add	r3, sp, #4
 80056aa:	466a      	mov	r2, sp
 80056ac:	f7ff ffc8 	bl	8005640 <__swhatbuf_r>
 80056b0:	9f00      	ldr	r7, [sp, #0]
 80056b2:	4605      	mov	r5, r0
 80056b4:	4639      	mov	r1, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff fa62 	bl	8004b80 <_malloc_r>
 80056bc:	b948      	cbnz	r0, 80056d2 <__smakebuf_r+0x46>
 80056be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c2:	059a      	lsls	r2, r3, #22
 80056c4:	d4ee      	bmi.n	80056a4 <__smakebuf_r+0x18>
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	e7e2      	b.n	8005698 <__smakebuf_r+0xc>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	6020      	str	r0, [r4, #0]
 80056d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056e2:	b15b      	cbz	r3, 80056fc <__smakebuf_r+0x70>
 80056e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 f837 	bl	800575c <_isatty_r>
 80056ee:	b128      	cbz	r0, 80056fc <__smakebuf_r+0x70>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	431d      	orrs	r5, r3
 8005700:	81a5      	strh	r5, [r4, #12]
 8005702:	e7cf      	b.n	80056a4 <__smakebuf_r+0x18>

08005704 <memmove>:
 8005704:	4288      	cmp	r0, r1
 8005706:	b510      	push	{r4, lr}
 8005708:	eb01 0402 	add.w	r4, r1, r2
 800570c:	d902      	bls.n	8005714 <memmove+0x10>
 800570e:	4284      	cmp	r4, r0
 8005710:	4623      	mov	r3, r4
 8005712:	d807      	bhi.n	8005724 <memmove+0x20>
 8005714:	1e43      	subs	r3, r0, #1
 8005716:	42a1      	cmp	r1, r4
 8005718:	d008      	beq.n	800572c <memmove+0x28>
 800571a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800571e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005722:	e7f8      	b.n	8005716 <memmove+0x12>
 8005724:	4402      	add	r2, r0
 8005726:	4601      	mov	r1, r0
 8005728:	428a      	cmp	r2, r1
 800572a:	d100      	bne.n	800572e <memmove+0x2a>
 800572c:	bd10      	pop	{r4, pc}
 800572e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005736:	e7f7      	b.n	8005728 <memmove+0x24>

08005738 <_fstat_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d07      	ldr	r5, [pc, #28]	@ (8005758 <_fstat_r+0x20>)
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	602b      	str	r3, [r5, #0]
 8005746:	f7fc fb6b 	bl	8001e20 <_fstat>
 800574a:	1c43      	adds	r3, r0, #1
 800574c:	d102      	bne.n	8005754 <_fstat_r+0x1c>
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	b103      	cbz	r3, 8005754 <_fstat_r+0x1c>
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	bd38      	pop	{r3, r4, r5, pc}
 8005756:	bf00      	nop
 8005758:	200002a0 	.word	0x200002a0

0800575c <_isatty_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d06      	ldr	r5, [pc, #24]	@ (8005778 <_isatty_r+0x1c>)
 8005760:	2300      	movs	r3, #0
 8005762:	4604      	mov	r4, r0
 8005764:	4608      	mov	r0, r1
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	f7fc fb6a 	bl	8001e40 <_isatty>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_isatty_r+0x1a>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_isatty_r+0x1a>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	200002a0 	.word	0x200002a0

0800577c <_sbrk_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d06      	ldr	r5, [pc, #24]	@ (8005798 <_sbrk_r+0x1c>)
 8005780:	2300      	movs	r3, #0
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fc fb72 	bl	8001e70 <_sbrk>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_sbrk_r+0x1a>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_sbrk_r+0x1a>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	200002a0 	.word	0x200002a0

0800579c <_realloc_r>:
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	4680      	mov	r8, r0
 80057a2:	4615      	mov	r5, r2
 80057a4:	460c      	mov	r4, r1
 80057a6:	b921      	cbnz	r1, 80057b2 <_realloc_r+0x16>
 80057a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ac:	4611      	mov	r1, r2
 80057ae:	f7ff b9e7 	b.w	8004b80 <_malloc_r>
 80057b2:	b92a      	cbnz	r2, 80057c0 <_realloc_r+0x24>
 80057b4:	f7ff f978 	bl	8004aa8 <_free_r>
 80057b8:	2400      	movs	r4, #0
 80057ba:	4620      	mov	r0, r4
 80057bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c0:	f000 f81a 	bl	80057f8 <_malloc_usable_size_r>
 80057c4:	4285      	cmp	r5, r0
 80057c6:	4606      	mov	r6, r0
 80057c8:	d802      	bhi.n	80057d0 <_realloc_r+0x34>
 80057ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80057ce:	d8f4      	bhi.n	80057ba <_realloc_r+0x1e>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4640      	mov	r0, r8
 80057d4:	f7ff f9d4 	bl	8004b80 <_malloc_r>
 80057d8:	4607      	mov	r7, r0
 80057da:	2800      	cmp	r0, #0
 80057dc:	d0ec      	beq.n	80057b8 <_realloc_r+0x1c>
 80057de:	42b5      	cmp	r5, r6
 80057e0:	462a      	mov	r2, r5
 80057e2:	4621      	mov	r1, r4
 80057e4:	bf28      	it	cs
 80057e6:	4632      	movcs	r2, r6
 80057e8:	f7ff f94f 	bl	8004a8a <memcpy>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4640      	mov	r0, r8
 80057f0:	f7ff f95a 	bl	8004aa8 <_free_r>
 80057f4:	463c      	mov	r4, r7
 80057f6:	e7e0      	b.n	80057ba <_realloc_r+0x1e>

080057f8 <_malloc_usable_size_r>:
 80057f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fc:	1f18      	subs	r0, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfbc      	itt	lt
 8005802:	580b      	ldrlt	r3, [r1, r0]
 8005804:	18c0      	addlt	r0, r0, r3
 8005806:	4770      	bx	lr

08005808 <_init>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	bf00      	nop
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr

08005814 <_fini>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr
